{"version":3,"sources":["package.json","error_codes.js","utils.js","configuration.js","settings.js","EventManager.js","animate.js","kCefModule.js","linky.module.js","poll-view.js","kngLayoutModule.js","kPanel.js","kUniformPanel.js","kSmartPanel.js","kFillPanel.js","kSplitPanel.js","kTabPanel.js","kTabPagePanel.js","kFlyoutPanel.js","kTitlePanel.js","kUnsupportedBrowserPanel.js","kalturaAPIModule.js","kalturaAPI.js","kalturaService.js","PromisesQueue.js","CuePointsService.js","k-deck-slides.module.js","k-deck-slides.config.js","slidesUploaderController.js","kSlidesUploader.js","slidesService.js","select-deck-document.js","remove-selected-thumb.js","select-a-thumb.js","k-assets-timeline.module.js","k-assets-timeline.config.js","assetsTimeline.js","k-timeline-font-scale.js","k-poll-asset.js","k-draggable-asset.js","k-droppable-asset.js","k-sortable.js","assetsTimelineService.js","kUIModule.js","kwpButton.js","kwpGraph.js","kuiCopyToClipboard.js","kQnaModule.js","k-qna.config.js","kwpQnaRelativeTime.js","qnaExport.js","metaDataGenerator.js","QnaThread.js","QnaEntry.js","QnaThreadsManager.js","qnaService.js","kwpLastUpdateFilter.js","kwpQnaScreenAnswerOnAirRecording.js","qnaModeratorAnalytics.js","kwpQnaBucketMenu.js","kwpQnaMenuIncoming.js","kwpQnaAnswerTextBox.js","kwpQnaMenuAnswer.js","kwpQnaAnnounceBox.js","kwpQnaForwardOnairNav.js","kwpQnaRecordBox.js","kwpQnaAnswerOnAir.js","kwpQnaMenuAnswerOnAirRecording.js","kwpQnaMenuAnswerOnAirSelect.js","kwpQnaScreenAnswerOnAirSelect.js","kwpQnaEntry.js","kwpQnaScreenAnswer.js","kwpQnaScreenIncoming.js","kwpQna.js","kwpQnaDebug.js","kwpQnaLoadProgress.js","kwpQnaScreenSettings.js","k-polls.module.js","k-polls.config.js","select-poll-state.js","k-polls.service.js","k-polls-export.service.js","k-poll-container.service.js","k-polls-simulator.js","k-select-list.js","k-poll-wizard-modal.js","k-poll-add.js","k-polls-settings.js","k-main-asset.config.js","k-main-asset.module.js","k-main-asset.js","k-main-poll-asset.js","k-main-poll-toggle.js","selectAllTextOnFocus.js","focusOutOnEnter.js","setCommand.js","fontFitter.js","aspectKeep.js","kdialog.js","kaDetachedDropdown.js","k-textarea.js","upgradeModule.js","upgradeController.js","upgradeService.js","app.js","shortcutService.js","filters.js","onlineStatusService.js","localHardwareService.js","asyncLiveEntryInfoService.js","liveAnalyticsService.js","captureService.js","sessionService.js","debugController.js","kImageOnLoad.js","kImageContainer.js","kImage.js","videoPreviewController.js","audioPreviewController.js","sessionController.js","miscController.js","contentPanelController.js","notesController.js","liveAnalyticsController.js","onlineController.js","modelController.js","fullScreenController.js","digest-counter.service.js","ka-player-view-control.module.js","k-player-view-control.config.js","ka-player-view-widget.js","ka-player-view-button.js","ka-player-view-toggle.js","ka-player-view-control.service.js","k-producer-actions.module.js","k-producer-actions.service.js","code-cue-point_code.js","kaltura-annotation.js","thumb-cue-point_thumb.js","k-rtc.config.js","kEntryManagementModule.js","kEntryManagementService.js","kEntryManagementWidget.js","webcastInfoModule.js","webcastInfoController.js","monitoringModule.js","monitoringController.js","monitoring.js","translations.js","end.js"],"names":[],"mappings":"AAAA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpcxvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtngrvrhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjltTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbhnnrSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjhtvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChtrpzoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClrjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACztOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACprEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphhhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjlfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrpTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrjjvdtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjxfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjprjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;ACJA","file":"app.min.js","sourcesContent":["var packageJSONFile={\"name\":\"KWP\",\"version\":\"4.1.320\",\"description\":\"Kaltura Webcast application\",\"main\":\"./electron/main.js\",\"ignoredFoldersForPackaging\":\"^/webcastapp|^/common|^/ThirdParty|^/src\",\"scripts\":{\"start\":\"electron ./electron/main.js\",\"gulp\":\"gulp\",\"set-version\":\"node -e \\\"const os=require('os'); const fs=require('fs');  let p=JSON.parse(fs.readFileSync('package.json')); p.version=process.argv[1]; fs.writeFileSync('package.json',JSON.stringify(p,null,'\\t')); \\\"  $npm_config_new_version\",\"package-win\":\"electron-packager  --ignore=\\\"%npm_package_ignoredFoldersForPackaging%\\\"  --app-copyright=\\\"%npm_package_productInfo_copyright%\\\"  --app-version=%npm_package_version% --win32metadata.FileDescription=\\\"%npm_package_productInfo_productName%\\\" --win32metadata.OriginalFilename=\\\"%npm_package_productInfo_fileName%\\\" --win32metadata.ProductName=\\\"%npm_package_productInfo_productName%\\\"  --win32metadata.CompanyName=\\\"Kaltura\\\"  . %npm_package_productInfo_fileName% --platform=win32 --arch=x64 --icon=electron/assets/app.ico --out=dist-app --overwrite --asar \",\"package-osx\":\"electron-packager --ignore=\\\"$npm_package_ignoredFoldersForPackaging\\\"  -appname=\\\"Kaltura Webcast Studio\\\" --osx-sign.identity=\\\"X8RDCFJK95\\\" --app-bundle-id=\\\"kaltura.KWP\\\"  --app-copyright=\\\"$npm_package_productInfo_copyright\\\"  --app-version=$npm_package_version . \\\"Kaltura Webcast Studio\\\" --platform=darwin --protocol=KalturaWebcast --protocolName=KalturaWebcast./  --arch=x64 --icon=electron/assets/app.ico --out=dist-app --overwrite --asar \",\"package-www\":\"gulp --env=production --env=ieSupport && gulp zip\"},\"productInfo\":{\"fileName\":\"KWP\",\"copyright\":\"Copyright (c) 2017 Kaltura inc\",\"productName\":\"Kaltura Webcasting\"},\"keywords\":[],\"devDependencies\":{\"@babel/core\":\"7.0.0-beta.55\",\"@babel/preset-env\":\"^7.0.0-beta.55\",\"babel-polyfill\":\"6.26.0\",\"babelify\":\"9.0.0\",\"browserify\":\"16.1.0\",\"electron\":\"^7.1.2\",\"electron-packager\":\"^14.1.1\",\"es6-shim\":\"^0.35.3\",\"gulp\":\"^3.9.1\",\"gulp-autoprefixer\":\"^4.0.0\",\"gulp-angular-templatecache\":\"^2.0.0\",\"gulp-clean-css\":\"^3.9.0\",\"gulp-concat\":\"^2.6.1\",\"gulp-decompress\":\"^2.0.1\",\"gulp-download\":\"^0.0.1\",\"gulp-file\":\"^0.3.0\",\"gulp-sass\":\"^3.1.0\",\"gulp-sourcemaps\":\"^2.6.1\",\"gulp-terser\":\"^1.1.5\",\"gulp-uglify\":\"^3.0.0\",\"gulp-util\":\"^3.0.8\",\"gulp-zip\":\"^4.0.0\",\"ngtouch\":\"^1.0.1\",\"request-progress\":\"3.0.0\",\"socket.io-client\":\"^2.2.0\",\"vinyl-source-stream\":\"^2.0.0\"},\"dependencies\":{\"electron-context-menu\":\"^0.9.1\",\"electron-window-state\":\"^4.1.1\",\"mediasoup-client\":\"^2.4.11\",\"winston\":\"^2.3.1\",\"winston-daily-rotate-file\":\"^1.4.6\"},\"liveDashboardVersion\":\"1.5.7\"};\n","/**\n * Created by david.oz on 8/31/2014.\n */\n\nvar ERROR_CODES = (function(){\n\n    return {\n        ENUMURATION_FAILED : 1,\n        DEVICE_MISSING : 2,\n        START_PREVIEW_VIDEO_FAILED : 3,\n        START_PREVIEW_AUDIO_FAILED : 4\n\n    }\n\n\n\n})();\n\nvar NETWORK_STATUS = {OK : 200,MULTIPLE_CHOICES:300,MOVED_PERMANENTLY:301,FOUND:302,NOT_MODIFIED:304,TEMPORARY_REDIRECT:307,BAD_REQUEST:400,UN_AUTHORIZED: 401,FORBIDDEN:403,NOT_FOUND:404,GONE:410,INTERNAL_SERVER_ERROR:500,\n                      NOT_IMPLEMENTED:501,SERVICE_UNAVAILABLE:503,PERMISSION_DENIED:550};\n","//var klog = console;\n'use strict';\nvar klog = function() {\n    var logger=function(level)\n    {\n        return function() {\n\n            if (window.configuration===undefined ||\n                configuration.logThreshold.value >= level.value) {\n\n                var args = Array.prototype.slice.call(arguments).map(function (obj) {\n                    if (obj instanceof Error) {\n                        obj = obj.message + \" \" + obj.stack;\n                    }\n\n                    return obj.toString();\n                });\n\n\n\t            var message = String.format.apply(this, args);\n\n\n                if (level.name === 'warn') {\n                    console.warn(message);\n                   }\n                else if (level.name === 'error') {\n                    console.error(message);\n                } else {\n                    console.log(level.name + \": \" + message);\n                }\n\n                if (ipcRenderer) {\n\n                    ipcRenderer.send('__ELECTRON_LOG__', [level.name,message]);\n                }\n            }\n        };\n    };\n\n    var logLevel = {\n        error : {value: 0, name: \"error\"},\n        warn : {value: 1, name: \"warn\"},\n        info : {value: 2, name: \"info\"},\n        verbose : {value: 3, name: \"verbose\"},\n        debug : {value: 4, name: \"debug\"}\n    };\n\n    return {\n        logLevel : logLevel,\n        debug: logger(logLevel.debug),\n        verbose: logger(logLevel.verbose),\n        warn: logger(logLevel.warn),\n        info: logger(logLevel.info),\n        log: logger(logLevel.info),\n        error: logger(logLevel.error)\n    };\n}();\n\nwindow.onerror = function (msg, url, line) {\n    klog.error(\"Caught[via window.onerror]: '\" + msg + \"' from \" + url + \":\" + line);\n    return true; // same as preventDefault\n};\n\n// Before closing the page (closing CEF / F5) - notify the engine to stop\nwindow.onbeforeunload = function (e) {\n    klog.info(\"we are going down - from window.onbeforeunload\");\n    };\n\n//    Testing the offline library.Currently halted until software mature.\n//    Offline.options = {\n//        // Should we check the connection status immediately on page load.\n//        checkOnLoad : false,\n//\n//        // Should we monitor AJAX requests to help decide if we have a connection.\n//        interceptRequests: true,\n//\n//        // Should we automatically retest periodically when the connection is down (set to false to disable).\n//        reconnect: {\n//            // How many seconds should we wait before rechecking.\n//            initialDelay: 3,\n//\n//            // How long should we wait between retries.\n//            delay: (2)\n//        },\n//\n//        // Should we store and attempt to remake requests which fail while the connection is down.\n//        requests: true,\n//\n//            // Should we show a snake game while the connection is down to keep the user entertained?\n//            // It's not included in the normal build, you should bring in js/snake.js in addition to\n//            // offline.min.js.\n//        game: false,\n//\n//        checks: {image: {url: 'http://corp.kaltura.com/sites/default/files/logo_1.png'}, active: 'image'}\n//    }\n//\n//\n//\n//    setInterval(function(){\n//        klog.info(\"Check network\");\n//        klog.info(Offline.state);\n//        klog.info(\"Check finish\");\n//    }, 3000);\n\nif (!String.format) {\n    String.format = function (format) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return format.replace(/{(\\d+)}/g, function (match, number) {\n            return typeof args[number] !== 'undefined' ? args[number] : '[UNDEFINED]';\n        });\n    };\n}\nif (typeof String.prototype.startsWith !== 'function') {\n    // see below for better implementation!\n    String.prototype.startsWith = function (str){\n        return this.indexOf(str) === 0;\n    };\n}\n\nif(String.prototype.endsWith !== 'function') {\n    String.prototype.endsWith = function(suffix) {\n        return this.indexOf(suffix, this.length - suffix.length) !== -1;\n    };\n}\n\nvar clientErrorReporter = (function(){\n\n    var default_error_message = \"Some Fatal Error occurred.\";\n    var default_error_code = \"?\";\n    var default_title = \"Error occured\";\n    var default_error_instruction = \"\";\n\n    return{\n        reportError : function(error_title,error_code,error_message,error_instruction){\n            error_title  = (typeof error_title === \"undefined\") ? default_title : error_title;\n            error_code  = (typeof error_code === \"undefined\") ? default_error_code : error_code;\n            error_message = (typeof error_message === \"undefined\") ? default_error_message : error_message;\n            error_instruction  = (typeof error_instruction === \"undefined\") ? default_error_instruction : error_instruction;\n            klog.error(\"Reporting error to the user:\"+error_message+\";Error code:\"+error_code+\";Extra info:\"+error_instruction);\n            alert(error_title+\"\\n\\nError: \"+error_code+\"\\n\"+error_message+\"\\n\\n\"+error_instruction);\n        }};\n\n})();\n\nvar Events = function () {\n    var _this = this;\n    _this.visibleEvents = {};\n\n    _this.on = function(name, handler) {\n        if (_this.visibleEvents.hasOwnProperty(name))\n            _this.visibleEvents[name].push(handler);\n        else\n            _this.visibleEvents[name] = [handler];\n    };\n\n    _this.removeListener = function(name, handler) {\n        /* This is a bit tricky, because how would you identify functions?\n         This simple solution should work if you pass THE SAME handler. */\n        if (!_this.visibleEvents.hasOwnProperty(name))\n            return;\n\n        var index = _this.visibleEvents[name].indexOf(handler);\n        if (index !== -1)\n            _this.visibleEvents[name].splice(index, 1);\n    };\n\n    _this.fireEvent = function(name, args) {\n        if (!_this.visibleEvents.hasOwnProperty(name)) {\n            return;\n        }\n\n        if (!args || !args.length) {\n            args = [];\n        }\n\n        var evs = _this.visibleEvents[name], l = evs.length;\n        for (var i = 0; i < l; i++) {\n            evs[i].apply(null, args);\n        }\n    };\n}\n\n\n/*Returns a command (Command design pattern).*/\nfunction CreateCommand(text,icon,dofunction,tooltip) {\n\n    return {\n        text : text,\n        do: dofunction,\n        tooltip: tooltip,\n        icon: icon,\n        checked: false\n    };\n}\n\n/**\n * Creates a KS hash\n * @param ks\n * @returns {*}\n */\nfunction getKSHash(ks) {\n    var hash = 0, i, chr, len;\n    if (ks.length === 0){\n        return hash;\n    }\n    for (i = 0, len = ks.length; i < len; i++) {\n        chr   = ks.charCodeAt(i);\n        hash  = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n\n    return hash.toString();\n}\n\n\nfunction json2xml(o, tab) {\n    var toXml = function(v, name, ind) {\n        var xml = \"\";\n        if (v instanceof Array) {\n            for (var i=0, n=v.length; i<n; i++) {\n                xml += ind + toXml(v[i], name, ind + \"\\t\") + \"\\n\";\n            }\n        }\n        else if (typeof(v) === \"object\") {\n            var hasChild = false;\n            xml += ind + \"<\" + name;\n            for (var m in v) {\n                if (m.charAt(0) === \"@\") {\n                    xml += \" \" + m.substr(1) + \"=\\\"\" + v[m].toString() + \"\\\"\";\n                }\n                else {\n                    hasChild = true;\n                }\n            }\n            xml += hasChild ? \">\" : \"/>\";\n            if (hasChild) {\n                for (var m in v) {\n                    if (m === \"#text\") {\n                        xml += v[m];\n                    }\n                    else {\n                        if (m === \"#cdata\") {\n                            xml += \"<![CDATA[\" + v[m] + \"]]>\";\n                        }\n                        else {\n                            if (m.charAt(0) !== \"@\") {\n                                xml += toXml(v[m], m, ind + \"\\t\");\n                            }\n                        }\n                    }\n                }\n                xml += (xml.charAt(xml.length-1)===\"\\n\"?ind:\"\") + \"</\" + name + \">\";\n            }\n        }\n        else {\n            xml += ind + \"<\" + name + \">\" + v.toString() +  \"</\" + name + \">\";\n        }\n        return xml;\n    }, xml=\"\";\n    for (var m in o)\n        xml += toXml(o[m], m, \"\");\n    return tab ? xml.replace(/\\t/g, tab) : xml.replace(/\\t|\\n/g, \"\");\n}\n\n\nvar elementWatcher=(function() {\n\n    return {\n        onresize : function(elem,func) {\n\n            $(elem).resize(func);\n\n            return;\n        },\n        remove:function(elem,func){\n\n            $(elem).removeResize(func);\n\n            return true;\n        }\n    };\n})();\n\n\n(function ($) {\n    // Creating an internal undef value is safer than using undefined, in case it\n    // was ever overwritten.\n    var undef;\n    // A handy reference.\n    var decode = decodeURIComponent;\n\n    // Document $.deparam.\n    var deparam = $.deparam = function (text, reviver) {\n        // The object to be returned.\n        var result = {};\n        // Iterate over all key=value pairs.\n        $.each(text.replace(/\\+/g, ' ').split('&'), function (index, pair) {\n            // The key=value pair.\n            var kv = pair.split('=');\n            // The key, URI-decoded.\n            var key = decode(kv[0]);\n            // Abort if there's no key.\n            if (!key) { return; }\n            // The value, URI-decoded. If value is missing, use empty string.\n            var value = decode(kv[1] || '');\n            // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\n            // into its component parts.\n            var keys = key.split('][');\n            var last = keys.length - 1;\n            // Used when key is complex.\n            var i = 0;\n            var current = result;\n\n            // If the first keys part contains [ and the last ends with ], then []\n            // are correctly balanced.\n            if (keys[0].indexOf('[') >= 0 && /\\]$/.test(keys[last])) {\n                // Remove the trailing ] from the last keys part.\n                keys[last] = keys[last].replace(/\\]$/, '');\n                // Split first keys part into two parts on the [ and add them back onto\n                // the beginning of the keys array.\n                keys = keys.shift().split('[').concat(keys);\n                // Since a key part was added, increment last.\n                last++;\n            } else {\n                // Basic 'foo' style key.\n                last = 0;\n            }\n\n            if ($.isFunction(reviver)) {\n                // If a reviver function was passed, use that function.\n                value = reviver(key, value);\n            } else if (reviver) {\n                // If true was passed, use the built-in $.deparam.reviver function.\n                value = deparam.reviver(key, value);\n            }\n\n            if (last) {\n                // Complex key, like 'a[]' or 'a[b][c]'. At this point, the keys array\n                // might look like ['a', ''] (array) or ['a', 'b', 'c'] (object).\n                for (; i <= last; i++) {\n                    // If the current key part was specified, use that value as the array\n                    // index or object key. If omitted, assume an array and use the\n                    // array's length (effectively an array push).\n                    key = keys[i] !== '' ? keys[i] : current.length;\n                    if (i < last) {\n                        // If not the last key part, update the reference to the current\n                        // object/array, creating it if it doesn't already exist AND there's\n                        // a next key. If the next key is non-numeric and not empty string,\n                        // create an object, otherwise create an array.\n                        current = current[key] = current[key] || (isNaN(keys[i + 1]) ? {} : []);\n                    } else {\n                        // If the last key part, set the value.\n                        current[key] = value;\n                    }\n                }\n            } else {\n                // Simple key.\n                if ($.isArray(result[key])) {\n                    // If the key already exists, and is an array, push the new value onto\n                    // the array.\n                    result[key].push(value);\n                } else if (key in result) {\n                    // If the key already exists, and is NOT an array, turn it into an\n                    // array, pushing the new value onto it.\n                    result[key] = [result[key], value];\n                } else {\n                    // Otherwise, just set the value.\n                    result[key] = value;\n                }\n            }\n        });\n\n        return result;\n    };\n\n    // Default reviver function, used when true is passed as the second argument\n    // to $.deparam. Don't like it? Pass your own!\n    deparam.reviver = function (key, value) {\n        var specials = {\n            'true': true,\n            'false': false,\n            'null': null,\n            'undefined': undef\n        };\n\n        return (+value + '') === value ? +value // Number\n          : value in specials ? specials[value] // true, false, null, undefined\n          : value; // String\n    };\n\n}(jQuery));\n\n\nif (!Array.prototype.last){\n    Array.prototype.last = function(){\n        if (this.length===0)\n            return undefined;\n        return this[this.length - 1];\n    };\n};\n\n\nfunction PromiseMapBatch(arr,fn, batch_size) {\n    //Finished?\n    if (!arr || arr.length === 0) {\n        console.log(\"Finished\");\n        return Promise.resolve();\n    }\n    //Call the function batch_size times to get the promises\n    var promise_arr = [];\n    for (var i = 0; (i < batch_size) && (i < arr.length); i++) {\n        try {\n            console.log(\"Calling \" + fn.name + \" with \" + arr[i]);\n            promise_arr.push(fn.call(this, arr[i]));\n        } catch (e) {\n            return Promise.reject(\"Batch failed. \" + e);\n        }\n    }\n    //Execute the batch_size, then go again\n    var promise_batch = Promise.all(promise_arr);\n    return promise_batch.then(function(results) {\n        try {\n            //Remove the first n funcs and go again.\n            arr.splice(0, batch_size);\n            return PromiseMapBatch( arr, fn,batch_size);\n        } catch (err) {\n            console.error(err.stack ? err.stack : err);\n        }\n    }).catch( function(err) {\n        return Promise.reject(\"Batch failed. \" + err);\n    });\n}\n\nfunction download(filename, text) {\n    \n    var url = 'data:text/plain;charset=utf-8,' + encodeURIComponent(text);\n    if (window.navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n        var blob = new Blob([url], {type: 'file'});\n        return window.navigator.msSaveBlob(blob, filename);\n    }else {\n        var pom = document.createElement('a');\n        pom.setAttribute('href', url);\n        pom.setAttribute('download', filename);\n\n        if (document.createEvent) {\n            var event = document.createEvent('MouseEvents');\n            event.initEvent('click', true, true);\n            pom.dispatchEvent(event);\n        }\n        else {\n            pom.click();\n        }\n    }\n}\nfunction isIE() {\n\treturn /Trident\\/|MSIE/.test(window.navigator.userAgent);\n}\nfunction isMobile() {\n\treturn /(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i.test(window.navigator.userAgent);\n}","'use strict';\nvar configuration = {\n    MediaEntryId: \"\",\n    // VideoFile:\"1_%i.mp4\", //if this is uncommented then we capture to file otherwise to rtmp\n    documentEntryId: null, //don't put here undefined - we won't consume it from requesting application params!\n    checkForUpdates: true,\n    mockSlides: \"https://cdnsecakmi.kaltura.com/p/1802381/sp/180238100/download/entry_id/1_gd5pp7qx/flavor/1_kh0an2qs/file_name/metadata.xml\",\n    doVideoCapturing: false,\n    //streamProfiles: [ { bitrate: 100, width: 320, height: 240 } ],\n    onlineRecoveryAttempts : 10,\n    onlineRecoveryIntervalInMS : 10000,\n    fromdate: \"2014-11-23T14:00:00+02:00\",\n    todate: \"2014-11-23T15:00:00+02:00\",\n    logThreshold : klog.logLevel.verbose,\n    stopOnNetworkErrors: true,\n    debuggingMode: false,\n    app_data_path: null,//don't put here undefined!\n    app_path: null,//don't put here undefined!\n    showTitleBarButtons: false,\n    // Seconds per minute multiplied by hours per day multiplied by #days.\n    maxAnalyticsBackwardQueryTime : 60 * 60 * 24 * 2,\n    qnaPollingInterval : 1000,\n    numberOfMockQnaThreads : 50,\n    eventsmetadataprofileid: null,\n    kwebcastmetadataprofileid: null,\n    presentationConversionProfileId : 6300211,\n    presentationConversionPdfProfileId: '',\n    presentationProcessingMaxAttempts : 10000,\n    presentationProcessingMaxDelay : 2000,\n    defaultViewWhenBroadcastingWithoutSlides : 'parent-only',\n    QnAEnabled:true, //we get it from KMS\n    pollsEnabled:true,\n    qnaModeratorMode:false,\n    showSlides:true,\n    sendOnAirOnlyProducerActions:true,\n    enabledAnalytics:true,\n    showEntryManagment:true,\n    showLiveDashboard:true,\n    liveModerator:false,\n    participantsPanel: true,\n    selfServeEnabled: true,\n    selfServeNodeEnv: \"\",\n    selfServeSimulcast: true,\n    hostname: '',\n    appHostUrl: '',\n    GlobalUIConf: null,\n    PartnerUiConf: null\n};\n\nvar whiteLabelingConfiguration = {\n    appName : \"Kaltura Webcast Studio\",\n    logoUrl: \"img/webcasting-logo.png\"\n};\n\n\nvar kserviceInfo = {\n    KS: null,\n    adminKS:false,\n    serverAddress: \"\",\n    ks_expiry: null,\n    partnerId: 0,\n    userId: \"\",\n    userSecret: \"\",\n    mockAnalyticsAPI: false, //Not active yet.\n    mockQnaApi : false,\n    mockQnaUpdates :true,\n    mockConfServer: null,\n    playerUIConf: 30139111\n};\n\n\n\nvar kUpgradeServiceInfo = {\n    appName : function () {\n        return whiteLabelingConfiguration.appName;\n    },\n    uiConfID : \"26391181\",\n    playerMinimalVersion: \"2.50\",\n    app_version: packageJSONFile.version\n};\n\nfunction parseConfigurationDate() {\n    try {\n        if (configuration.fromdate) {\n            configuration.fromdate = new Date(configuration.fromdate);\n        }\n        if (configuration.todate) {\n            configuration.todate = new Date(configuration.todate);\n        }\n        if (kserviceInfo.ks_expiry) {\n            kserviceInfo.ks_expiry = new Date(kserviceInfo.ks_expiry);\n        }\n\n\n\n    } catch(e) {\n        klog.warn(\"Cannot convert date object! \"+e);\n    }\n}\n\nvar loadApplicationParams = function (params) {\n    try {\n        //params=\"ks=djJ8MTA3fLmuFhemNueq6tOy4Ph_94gr8JlyrW8qN7J_hQQcPNKbFN1ASusFly3NnRwCpX894pHKFtjzriioSUjfyPg0CjXnR9o33aadvkbYtBk6ktczk4T3FuhGMlC4qBa7ZWVvta1MT45GhQqd05-aBOdrLoc5yTXAbLxLwRz2StBQg7OBIDNIooHlqsRxwPJIyPpBSJ546z1v0fAE7AO5jGh6dG8%3D&MediaEntryId=0_d2jdjhuq&uiConfID=23448317&serverAddress=http%3A%2F%2Fil-webc-server.dev.kaltura.com&eventsMetadataProfileId=662&kwebcastMetadataProfileId=663&appName=&logoUrl=&documentEntryId=0_5iq05u19&doVideoCapturing=false&app_version=1.0.6.0&app_data_path=C:/Users/asafrobinovich/AppData/Local/Kaltura&app_path=C:/dev/Capture/Release\";\n        //  params=\"encodedData=a3M9ZGpKOE1UQTNmUEVDUnoyNkh3S05BM1VtU1Azb01DS3VzWHJCT3dOUmVURFd2eFBsQlF4Z2pNSXdpVmhOREFwVWs1NkdSZ1ppZ3hnanBYSFdCOWVteVlvT0JobG1Hd2JiTnM2MVprNnkwTi1INm5ua2RKaXhzejJtVVlfR3R3c0o0d2I5ZGZlbkRFX2RJc0cyelJxNkcweU12WGhTaGpsX2UycHplN0pNUDlvY25ubk53QU55d0tnM09mSUhDT0tUOF9HclBuYTd3Z1pSX1FIWXpoZkJ0bTgxTjJON3lGMCUzRCZrc19leHBpcnk9MjAxNC0xMi0xMlQwOCUzQTA1JTNBMjklMkIwMCUzQTAwJk1lZGlhRW50cnlJZD0wX2luN3hiZndiJnVpQ29uZklEPTIzNDQ4MzE3JnNlcnZlckFkZHJlc3M9aHR0cCUzQSUyRiUyRmlsLXdlYmMtc2VydmVyLmRldi5rYWx0dXJhLmNvbSZldmVudHNNZXRhZGF0YVByb2ZpbGVJZD02NjIma3dlYmNhc3RNZXRhZGF0YVByb2ZpbGVJZD02NjMmYXBwTmFtZT16ZWJyYSZsb2dvVXJsPWh0dHAlM0ElMkYlMkZ1cGxvYWQud2lraW1lZGlhLm9yZyUyRndpa2lwZWRpYSUyRmVuJTJGdGh1bWIlMkYyJTJGMmIlMkZFbGlfTGlsbHlfYW5kX0NvbXBhbnkuc3ZnJTJGMjAwcHgtRWxpX0xpbGx5X2FuZF9Db21wYW55LnN2Zy5wbmcmZnJvbURhdGU9MjAxNC0xMi0wOVQxNyUzQTMwJTNBMDAtMDUlM0EwMCZ0b0RhdGU9MjAxNC0xMi0wOVQxOCUzQTMwJTNBMDAtMDUlM0EwMCZkb2N1bWVudEVudHJ5SWQ9MF95dms2OXhvOCZkb1ZpZGVvQ2FwdHVyaW5nPXRydWUmYXBwX3ZlcnNpb249MS4wLjYuMCZhcHBfZGF0YV9wYXRoPUM6L1VzZXJzL2d1eWphY3Vib3Zza2kvQXBwRGF0YS9Mb2NhbC9LYWx0dXJhJmFwcF9wYXRoPUM6LzExJmRlYnVnZ2luZ01vZGU9ZmFsc2U=&app_version=1.0.6.0&app_data_path=C:/Users/guyjacubovski/AppData/Local/Kaltura&app_path=C:/dev/capture/Release&debuggingMode=true\";\n\n        klog.info(\"command line params={0}\", params);\n        var appparams = $.deparam(params);\n\n        if (appparams.encodedData) {\n            //convret from base64 to string\n            var decodedData=window.atob(appparams.encodedData);\n\n            //de-param and add to the appaparams object\n            appparams = $.extend(appparams,$.deparam(decodedData));\n\n            delete appparams.encodedData;\n        }\n\n        //make all properties lowercase\n        for(var key in appparams ) {\n\n            // fix \"true\" / \"false\" not being true/false\n            if (typeof appparams[key] === 'string' )\n            {\n                if (appparams[key].toLowerCase() === \"true\"){\n                    appparams[key] = true;\n                }\n                else if (appparams[key].toLowerCase() === \"false\"){\n                    appparams[key] = false;\n                }\n            }\n\n            if (key.toLowerCase()===key) {\n                continue;\n            }\n\n            appparams[key.toLowerCase()] = appparams[key];\n            delete appparams[key];\n        }\n        klog.info(\"Running version={0} appparams={1}\",kUpgradeServiceInfo.app_version, JSON.stringify(appparams, null, \"\\t\"));\n\n        if (!window.electron) {\n            configuration.debuggingMode = true;\n            configuration.checkForUpdates = false;\n        }\n\n        var appparamsused={};\n\n        var applyConfig = function (configName, skipEmptyValues)  {\n            var config=eval(configName);\n            for(var key in config)\n            {\n                var newKey=key.toLowerCase();\n                if (appparams.hasOwnProperty(newKey)) {\n                    appparamsused[newKey]=true;\n                    if (typeof config[key] ==='function') {\n                        continue;\n                    }\n\n                    if (skipEmptyValues && !appparams[newKey]) {\n                        klog.info(\"Skipped {0} since it's empty\", key);\n                        continue;\n                    }\n\n                    klog.info(\"Applied new {0}.{1}={2}\", configName,key, appparams[newKey]);\n                    config[key] = appparams[newKey];\n                }\n            }\n        }\n\n        applyConfig(\"kserviceInfo\");\n        applyConfig(\"configuration\");\n        applyConfig(\"whiteLabelingConfiguration\",true);\n        applyConfig(\"kUpgradeServiceInfo\");\n\n        var appparamsnotused=[];\n        for (var key in appparams)\n        {\n            if (!appparamsused.hasOwnProperty(key)) {\n                appparamsnotused.push(key);\n            }\n        }\n\n        parseConfigurationDate();\n\n        appparamsnotused.forEach( function(key) {\n            klog.warn(\"Got config key not in used {0}='{1}'\", key,appparams[key]);\n        });\n\n        if (appparams.logThreshold) {\n\n            for (var prop in klog.logLevel) {\n                if (appparams.logThreshold === klog.logLevel[prop].value){\n                    klog.info(\"Setting logLevel to {0}\", configuration.logThreshold.name);\n                    configuration.logThreshold = klog.logLevel[prop];\n                }\n            }\n        }\n\n\n        if(kserviceInfo.serverAddress){\n            while(kserviceInfo.serverAddress.length > 0 && kserviceInfo.serverAddress.substring(kserviceInfo.serverAddress.length - 1,kserviceInfo.serverAddress.length) === \"/\"){\n                kserviceInfo.serverAddress = kserviceInfo.serverAddress.substring(0,kserviceInfo.serverAddress.length - 1);\n            }\n        }\n\n        if (configuration.qnaModeratorMode) {\n            configuration.showSlides = false;\n            configuration.enabledAnalytics = false;\n            configuration.showKwpPanelHeader = false;\n            configuration.showEntryManagment = false;\n            configuration.sendOnAirOnlyProducerActions = false;\n            configuration.participantsPanel = false;\n\n        }else if(configuration.liveModerator){\n            configuration.showSlides = false;\n            configuration.enabledAnalytics = false;\n            configuration.showKwpPanelHeader = false;\n            configuration.showEntryManagment = false;\n            configuration.qnaModeratorMode = false;\n            configuration.QnAEnabled = false;\n            configuration.sendOnAirOnlyProducerActions = false;\n        }\n        else {\n            configuration.showSlides = true;\n            configuration.showKwpPanelHeader = true;\n            configuration.enabledAnalytics = true;\n            configuration.showEntryManagment = true;\n\n        }\n\n        document.title  = whiteLabelingConfiguration.appName;\n\n    }\n    catch(e) {\n        alert(e);\n    }\n};\nfunction loadLocalConfiguration() {\n    if (window.localConfigurationOverride) {\n        var params=$.param(window.localConfigurationOverride);\n        klog.warn(\"Loading configuration from localConfiguration File\",params)\n        loadApplicationParams(params);\n    }\n}\n\nloadLocalConfiguration();\nloadApplicationParams(window.location.search.substring(1));\n","'use strict';\n\nfunction Settings() {\n    var saveToFileInsteadStreaming = false;\n\n    var that = this;\n\n    this.addProperty = function (key, defaultvalue) {\n        Object.defineProperty(that, key, {\n            get: function () {\n                var value = localStorage.getItem(key);\n                if (!value) {\n                    return defaultvalue;\n                }\n\n                return value;\n            },\n            set: function (value) {\n                localStorage.setItem(key, value);\n            }\n        });\n    };\n\n\n    this.addProperty(\"saveToFile\", false);\n\n\n    var parseEntrySettings=function(key) {\n        var a=key.split('__');\n\n        return { key: key,  entryId: a[2] ,  creationTime: new Date(parseInt(a[3])), settings: null };\n    };\n\n    var entriesSettings = [];\n\n    Settings.prototype.getEntrySettings = function (entryId) {\n\n        var existedBefore = false;\n\n\n        var entryArr=entriesSettings.filter( function (f) {\n            return f.entryId===entryId;\n        } );\n\n        var entry=null;\n\n        if (entryArr.length>0) {\n            entry = entryArr[0];\n        }\n\n        var itemKey=null;\n\n        if (!entry) {\n            var creationTime=new Date();\n            itemKey=\"__entry__\"+entryId+\"__\"+creationTime.getTime();\n\n            settings.creationTime=creationTime;\n\n            entry={ key: itemKey, entryId: entryId, creationTime: creationTime, settings: settings  };\n            entriesSettings.push( entry);\n        }\n        else {\n            existedBefore = true;\n            itemKey=\"__entry__\"+entryId+\"__\"+entry.creationTime.getTime();\n\n            entry.settings = JSON.parse(localStorage.getItem(itemKey));\n        }\n\n        entry.settings.save = function () {\n            localStorage.setItem(itemKey, JSON.stringify(this));\n        };\n\n        if (!existedBefore) {\n            entry.settings.save();\n        }\n\n        return entry.settings;\n    };\n\n\n    Settings.prototype.setEntrySettings = function (entryId,settings) {\n        var entry = this.getEntrySettings(entryId);\n        $.extend(entry,settings);\n        entry.save();\n    };\n\n\n    var openEntriesSettings=function() {\n        var entriesPurgeTimeWindow = 7 * 24 * 60 * 60 * 1000; //7 days\n        var entriesPurgeCountWindow = 50;\n\n        for (var index = 0; index < localStorage.length; index++) {\n            var key = localStorage.key(index);\n\n            if (key.startsWith(\"__entry__\")) {\n                var entry=parseEntrySettings(key);\n                entriesSettings.push(entry);\n            }\n        }\n\n        //sort by time\n        entriesSettings.sort(function(a, b){\n            return b.creationTime.getTime()-a.creationTime.getTime();\n        });\n\n\n        for (index = 0; index < entriesSettings.length; index++) {\n            var entry = entriesSettings[index];\n            //7 days old get deleted\n            if (index>=entriesPurgeCountWindow ||\n                new Date().getTime() - entry.creationTime.getTime() > entriesPurgeTimeWindow) {\n                localStorage.removeItem(entry.key);\n            }\n        }\n    };\n\n   openEntriesSettings();\n\n\n}\n\nvar settings = new Settings();\n\n/*\nvar entry=settings.getEntrySettings(configuration.MediaEntryId);\nentry.gaga=5;\nentry.save();\n\n\nvar entry=settings.getEntrySettings(\"aaa\");\nentry.gaga=6;\nentry.save();\n\nvar entry=settings.getEntrySettings(\"aaz\");\nentry.gaga=7;\nentry.save();*/","/**\n * Created by david.oz on 9/15/2014.\n */\nvar EventManager = (function(){\n\n//    EVENTS = {AF : }\n\n    var clients = [];\n    var recived = false;\n    var _register_for_event = function(eventID,handle){\n        clients.push(handle);\n    }\n    var _register_for_single_event = function(handle){\n        //clients.push(handle);\n    }\n    var _un_register_for_event = function(handle){\n        //clients.push(handle);\n    }\n\n    var _RegisterForAllEvents = function(callback){\n        clients.push(callback);\n    }\n\n    var _report_event = function(eventID,data_json_string){\n        //alert(\"MessageFromEventHandler = \"+eventID+\" data \"+ data_json_string);\n        klog.info(\"New event received on event manager.number of client to be informed:\"+clients.length);\n        for(var i=0;i < clients.length;i++){\n            clients[i](eventID,data_json_string);\n        }\n    }\n\n\n    return {\n        RegisterForEvent : _register_for_event,\n        RegisterForEventOnce : _register_for_single_event,\n        UnregisterForEvent : _un_register_for_event,\n        ReportEvent : _report_event,\n        RegisterForAllEvents : _RegisterForAllEvents\n    }\n\n\n})();","\"use strict\";\n\nvar Animate=function() {\n\n/*\n    Math.easeInQuad = function (t, b, c, d) {\n        return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;\n\n    };\n*/\n    Math.easeInQuad = function (t, b, c, d) {\n        return b+t*c;\n\n    };\n\n    var animateInterval=null;\n    var t=0;\n    var from=undefined;\n    var to=undefined;\n    var lastValue=undefined;\n\n    var interpolateFunc= Math.easeInQuad;\n\n    Animate.prototype.transition=function(A,B,func,duration,steps) {\n\n        function step() {\n\n            lastValue=interpolateFunc(t,from,to-from,1);\n            func(lastValue);\n\n            t+=1/steps;\n\n            if (t>=1)\n                t=1;\n\n            if (t>=1){\n                clearInterval(animateInterval);\n                animateInterval=null;\n            }\n        }\n\n        t=0;\n\n        if (animateInterval) {\n            from=lastValue;\n            to=B;\n            step();\n        }\n        else {\n            from=A;\n            to=B;\n            animateInterval = setInterval(step, duration / steps);\n        }\n    }\n}","'use strict';\n\nvar kCefModule=angular.module('kCef',[]);\n\n\nkCefModule.factory(\"kCef\",function($rootScope) {\n\tvar counter = 0\n\tvar requests=new Map();\n\tvar events=new Map();\n\n    function on(eventName,callback) {\n\t    var eventObj=events.get(eventName);\n        if (!eventObj) {\n            eventObj= {\n                cb: []\n            }\n            events.set(eventName,eventObj);\n\n\t        function _toConsumableArray(arr) {\n\t            if (Array.isArray(arr)) {\n\t                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n\t                    arr2[i] = arr[i]; } return arr2;\n\t            } else {\n\t                return Array.from(arr);\n\t            }\n\t        }\n\n\t        ipcRenderer.on(\"ipc-promise-common-repeat-event_\" + eventName, function (event, params) {\n\t\t        eventObj.cb.forEach(function (fn) {\n\t\t\t        return fn.apply(undefined, _toConsumableArray(params.data));\n\t\t        });\n\t        });\n            var params = {\n                data: null,\n                eventName: eventName\n            }\n            ipcRenderer.send(\"ipc-promise-common-repeat-event\",params);\n        }\n        eventObj.cb.push(callback);\n    }\n    function sendIPC(eventName) {\n\t    for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t\t    data[_key - 1] = arguments[_key];\n\t    }\n        if (counter===0) {\n            ipcRenderer.on(\"ipc-promise-common-event-response\", function(event, resParams) {\n\t            var callParams = requests.get(resParams.id);\n                if (callParams) {\n                    if (resParams.isResolved) {\n                        callParams.resolve(resParams.data);\n                    }\n                    else {\n                        callParams.reject(resParams.data);\n                    }\n                }\n            });\n\n        }\n\n        return new Promise(function (resolve, reject) {\n\t        var id = eventName + new Date().getTime() + (++counter);\n\n\t        var params = {\n                data: data,\n                eventName: eventName,\n                id: id,\n                isResolved: false,\n                resolve: resolve,\n                reject: reject\n            };\n\n            requests.set(id,params);\n\n            ipcRenderer.send(\"ipc-promise-common-event\", params);\n        });\n    }\n\n    window.addEventListener('keydown', function(e){\n        if (e.altKey && e.ctrlKey && e.code === \"KeyD\") {\n            configuration.debuggingMode = !configuration.debuggingMode;\n\t        var scope = angular.element($('#theApp')).scope();\n            scope.$apply();\n            $rootScope.$emit('debuggingModeChange');\n            sendIPC(\"debuggingMode\",configuration.debuggingMode);\n        }\n    }, false);\n\n    return {\n        available: window.electron ? true: false,\n        reload: function() {\n            if (this.available) {\n                sendIPC(\"reload\");\n            }\n            else {\n                location.reload();\n            }\n        },\n        sendIPC: sendIPC,\n        openShell : function openShell(path) {\n\t\t      var electron = require('electron'),\n\t\t\t    shell = electron.shell;\n\t\t      shell.openItem(path);\n        },\n        openExternal:function(path) {\n\t\t      var electron = require('electron'),\n\t\t\t    shell = electron.shell;\n\t\t      shell.openExternal(path);\n        },\n        on: on\n    };\n});\n","(function() {'use strict';\n\n\n  var $sanitizeMinErr = angular.$$minErr('$sanitize');\n\n\n  /**\n   * @ngdoc service\n   * @name $sanitize\n   * @kind function\n   *\n   * @description\n   *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n   *   then serialized back to properly escaped html string. This means that no unsafe input can make\n   *   it into the returned string, however, since our parser is more strict than a typical browser\n   *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a\n   *   browser, won't make it through the sanitizer. The input may also contain SVG markup.\n   *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and\n   *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.\n   *\n   * @param {string} html HTML input.\n   * @returns {string} Sanitized HTML.\n   *\n   */\n  function $SanitizeProvider() {\n    this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n      return function(html) {\n        var buf = [];\n        htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n          return !/^unsafe/.test($$sanitizeUri(uri, isImage));\n        }));\n        return buf.join('');\n      };\n    }];\n  }\n\n  function sanitizeText(chars) {\n    var buf = [];\n    var writer = htmlSanitizeWriter(buf, angular.noop);\n    writer.chars(chars);\n    return buf.join('');\n  }\n\n\n// Regular Expressions for parsing tags and attributes\n  var START_TAG_REGEXP =\n          /^<((?:[a-zA-Z])[\\w:-]*)((?:\\s+[\\w:-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)\\s*(>?)/,\n      END_TAG_REGEXP = /^<\\/\\s*([\\w:-]+)[^>]*>/,\n      ATTR_REGEXP = /([\\w:-]+)(?:\\s*=\\s*(?:(?:\"((?:[^\"])*)\")|(?:'((?:[^'])*)')|([^>\\s]+)))?/g,\n      BEGIN_TAG_REGEXP = /^</,\n      BEGING_END_TAGE_REGEXP = /^<\\//,\n      COMMENT_REGEXP = /<!--(.*?)-->/g,\n      DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,\n      CDATA_REGEXP = /<!\\[CDATA\\[(.*?)]]>/g,\n      SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n  // Match everything outside of normal chars and \" (quote character)\n      NON_ALPHANUMERIC_REGEXP = /([^\\#-~| |!])/g;\n\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\n  var voidElements = makeMap(\"area,br,col,hr,img,wbr\");\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\n  var optionalEndTagBlockElements = makeMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n      optionalEndTagInlineElements = makeMap(\"rp,rt\"),\n      optionalEndTagElements = angular.extend({},\n          optionalEndTagInlineElements,\n          optionalEndTagBlockElements);\n\n// Safe Block Elements - HTML5\n  var blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap(\"address,article,\" +\n      \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n      \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul\"));\n\n// Inline Elements - HTML5\n  var inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap(\"a,abbr,acronym,b,\" +\n      \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n      \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n// SVG Elements\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\n// Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\n// They can potentially allow for arbitrary javascript to be executed. See #11290\n  var svgElements = makeMap(\"circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,\" +\n      \"hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,\" +\n      \"radialGradient,rect,stop,svg,switch,text,title,tspan,use\");\n\n// Special Elements (can contain anything)\n  var specialElements = makeMap(\"script,style\");\n\n  var validElements = angular.extend({},\n      voidElements,\n      blockElements,\n      inlineElements,\n      optionalEndTagElements,\n      svgElements);\n\n//Attributes that have href and hence need to be sanitized\n  var uriAttrs = makeMap(\"background,cite,href,longdesc,src,usemap,xlink:href,ng-click\");\n\n  var htmlAttrs = makeMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n      'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\n      'valign,value,vspace,width');\n\n// SVG attributes (without \"id\" and \"name\" attributes)\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\n  var svgAttrs = makeMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n      'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\n      'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\n      'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\n      'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\n      'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\n      'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\n      'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\n      'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\n      'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\n      'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\n      'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\n      'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\n      'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\n      'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\n\n  var validAttrs = angular.extend({},\n      uriAttrs,\n      svgAttrs,\n      htmlAttrs);\n\n  function makeMap(str, lowercaseKeys) {\n    var obj = {}, items = str.split(','), i;\n    for (i = 0; i < items.length; i++) {\n      obj[lowercaseKeys ? angular.lowercase(items[i]) : items[i]] = true;\n    }\n    return obj;\n  }\n\n\n  /**\n   * @example\n   * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n   *\n   * @param {string} html string\n   * @param {object} handler\n   */\n  function htmlParser(html, handler) {\n    if (typeof html !== 'string') {\n      if (html === null || typeof html === 'undefined') {\n        html = '';\n      } else {\n        html = '' + html;\n      }\n    }\n    var index, chars, match, stack = [], last = html, text;\n    stack.last = function() { return stack[stack.length - 1]; };\n\n    while (html) {\n      text = '';\n      chars = true;\n\n      // Make sure we're not in a script or style element\n      if (!stack.last() || !specialElements[stack.last()]) {\n\n        // Comment\n        if (html.indexOf(\"<!--\") === 0) {\n          // comments containing -- are not allowed unless they terminate the comment\n          index = html.indexOf(\"--\", 4);\n\n          if (index >= 0 && html.lastIndexOf(\"-->\", index) === index) {\n            if (handler.comment) handler.comment(html.substring(4, index));\n            html = html.substring(index + 3);\n            chars = false;\n          }\n          // DOCTYPE\n        } else if (DOCTYPE_REGEXP.test(html)) {\n          match = html.match(DOCTYPE_REGEXP);\n\n          if (match) {\n            html = html.replace(match[0], '');\n            chars = false;\n          }\n          // end tag\n        } else if (BEGING_END_TAGE_REGEXP.test(html)) {\n          match = html.match(END_TAG_REGEXP);\n\n          if (match) {\n            html = html.substring(match[0].length);\n            match[0].replace(END_TAG_REGEXP, parseEndTag);\n            chars = false;\n          }\n\n          // start tag\n        } else if (BEGIN_TAG_REGEXP.test(html)) {\n          match = html.match(START_TAG_REGEXP);\n\n          if (match) {\n            // We only have a valid start-tag if there is a '>'.\n            if (match[4]) {\n              html = html.substring(match[0].length);\n              match[0].replace(START_TAG_REGEXP, parseStartTag);\n            }\n            chars = false;\n          } else {\n            // no ending tag found --- this piece should be encoded as an entity.\n            text += '<';\n            html = html.substring(1);\n          }\n        }\n\n        if (chars) {\n          index = html.indexOf(\"<\");\n\n          text += index < 0 ? html : html.substring(0, index);\n          html = index < 0 ? \"\" : html.substring(index);\n\n          if (handler.chars) handler.chars(decodeEntities(text));\n        }\n\n      } else {\n        // IE versions 9 and 10 do not understand the regex '[^]', so using a workaround with [\\W\\w].\n        html = html.replace(new RegExp(\"([\\\\W\\\\w]*)<\\\\s*\\\\/\\\\s*\" + stack.last() + \"[^>]*>\", 'i'),\n            function(all, text) {\n              text = text.replace(COMMENT_REGEXP, \"$1\").replace(CDATA_REGEXP, \"$1\");\n\n              if (handler.chars) handler.chars(decodeEntities(text));\n\n              return \"\";\n            });\n\n        parseEndTag(\"\", stack.last());\n      }\n\n      if (html == last) {\n        throw $sanitizeMinErr('badparse', \"The sanitizer was unable to parse the following block \" +\n            \"of html: {0}\", html);\n      }\n      last = html;\n    }\n\n    // Clean up any remaining tags\n    parseEndTag();\n\n    function parseStartTag(tag, tagName, rest, unary) {\n      tagName = angular.lowercase(tagName);\n      if (blockElements[tagName]) {\n        while (stack.last() && inlineElements[stack.last()]) {\n          parseEndTag(\"\", stack.last());\n        }\n      }\n\n      if (optionalEndTagElements[tagName] && stack.last() == tagName) {\n        parseEndTag(\"\", tagName);\n      }\n\n      unary = voidElements[tagName] || !!unary;\n\n      if (!unary) {\n        stack.push(tagName);\n      }\n\n      var attrs = {};\n\n      rest.replace(ATTR_REGEXP,\n          function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {\n            var value = doubleQuotedValue\n                || singleQuotedValue\n                || unquotedValue\n                || '';\n\n            attrs[name] = decodeEntities(value);\n          });\n      if (handler.start) handler.start(tagName, attrs, unary);\n    }\n\n    function parseEndTag(tag, tagName) {\n      var pos = 0, i;\n      tagName = angular.lowercase(tagName);\n      if (tagName) {\n        // Find the closest opened tag of the same type\n        for (pos = stack.length - 1; pos >= 0; pos--) {\n          if (stack[pos] == tagName) break;\n        }\n      }\n\n      if (pos >= 0) {\n        // Close all the open elements, up the stack\n        for (i = stack.length - 1; i >= pos; i--)\n          if (handler.end) handler.end(stack[i]);\n\n        // Remove the open elements from the stack\n        stack.length = pos;\n      }\n    }\n  }\n\n  var hiddenPre=document.createElement(\"pre\");\n  /**\n   * decodes all entities into regular string\n   * @param value\n   * @returns {string} A string with decoded entities.\n   */\n  function decodeEntities(value) {\n    if (!value) { return ''; }\n\n    hiddenPre.innerHTML = value.replace(/</g,\"&lt;\");\n    // innerText depends on styling as it doesn't display hidden elements.\n    // Therefore, it's better to use textContent not to cause unnecessary reflows.\n    return hiddenPre.textContent;\n  }\n\n  /**\n   * Escapes all potentially dangerous characters, so that the\n   * resulting string can be safely inserted into attribute or\n   * element text.\n   * @param value\n   * @returns {string} escaped text\n   */\n  function encodeEntities(value) {\n    return value.\n    replace(/&/g, '&amp;').\n    replace(SURROGATE_PAIR_REGEXP, function(value) {\n      var hi = value.charCodeAt(0);\n      var low = value.charCodeAt(1);\n      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }).\n    replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n      return '&#' + value.charCodeAt(0) + ';';\n    }).\n    replace(/</g, '&lt;').\n    replace(/>/g, '&gt;');\n  }\n\n  /**\n   * create an HTML/XML writer which writes to buffer\n   * @param {Array} buf use buf.jain('') to get out sanitized html string\n   * @returns {object} in the form of {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * }\n   */\n  function htmlSanitizeWriter(buf, uriValidator) {\n    var ignore = false;\n    var out = angular.bind(buf, buf.push);\n    return {\n      start: function(tag, attrs, unary) {\n        tag = angular.lowercase(tag);\n        if (!ignore && specialElements[tag]) {\n          ignore = tag;\n        }\n        if (!ignore && validElements[tag] === true) {\n          out('<');\n          out(tag);\n          angular.forEach(attrs, function(value, key) {\n            var lkey=angular.lowercase(key);\n            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n            if (validAttrs[lkey] === true &&\n                (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n              out(' ');\n              out(key);\n              out('=\"');\n              out(encodeEntities(value));\n              out('\"');\n            }\n          });\n          out(unary ? '/>' : '>');\n        }\n      },\n      end: function(tag) {\n        tag = angular.lowercase(tag);\n        if (!ignore && validElements[tag] === true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        if (tag == ignore) {\n          ignore = false;\n        }\n      },\n      chars: function(chars) {\n        if (!ignore) {\n          out(encodeEntities(chars));\n        }\n      }\n    };\n  }\n\n\n// define ngSanitize module and register $sanitize service\n  var linky = angular.module('linky', []);\n  linky.provider('$sanitize', $SanitizeProvider);\n  /* global sanitizeText: false */\n\n  /**\n   * @ngdoc filter\n   * @name linky\n   * @kind function\n   *\n   * @description\n   * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and\n   * plain email address links.\n   *\n   * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n   *\n   * @param {string} text Input text.\n   * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.\n   * @returns {string} Html-linkified text.\n   *\n   * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n   *\n   */\n  linky.filter('linky', ['$sanitize', function($sanitize) {\n    var LINKY_URL_REGEXP =\n            /((ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\n        MAILTO_REGEXP = /^mailto:/i;\n\n    return function(text, target) {\n      if (!text) return text;\n      var match;\n      var raw = text;\n      var html = [];\n      var url;\n      var i;\n      while ((match = raw.match(LINKY_URL_REGEXP))) {\n        // We can not end in these as they are sometimes found at the end of the sentence\n        url = match[0];\n        // if we did not match ftp/http/www/mailto then assume mailto\n        if (!match[2] && !match[4]) {\n          url = (match[3] ? 'http://' : 'mailto:') + url;\n        }\n        i = match.index;\n        addText(raw.substr(0, i));\n        addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n        raw = raw.substring(i + match[0].length);\n      }\n      addText(raw);\n      return $sanitize(html.join(''));\n\n      function addText(text) {\n        if (!text) {\n          return;\n        }\n        html.push(sanitizeText(text));\n      }\n\n      function addLink(url, text) {\n        html.push('<a ');\n        if (!angular.isDefined(target)) {\n          html.push('href=\"',\n              url.replace(/\"/g, '&quot;'),\n              '\">');\n        } else {\n          if(target === 'external') { //open link using a custom function\n            html.push('ng-click=\"openUrl(\\'',\n                url.replace(/\"/g, '&quot;'),\n                '\\')\">');\n          } else {\n            html.push('target=\"',\n                target,\n                '\" ');\n            html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n          }\n        }\n\n        addText(text);\n        html.push('</a>');\n      }\n    };\n  }]);\n\n\n  /**\n   * essential for rendering new sanitized content as angular components\n   * if not used while sanitizing content  - text will be treated as a plain html\n   */\n\n  linky.directive('compile', function($compile) {\n    // directive factory creates a link function\n    return function(scope, element, attrs) {\n      scope.$watch(\n          function(scope) {\n            // watch the 'compile' expression for changes\n            return scope.$eval(attrs.compile);\n          },\n          function(value) {\n            // when the 'compile' expression changes\n            // assign it into the current DOM\n            element.html(value);\n\n            // compile the new DOM and link it to the current\n            // scope.\n            // NOTE: we only compile .childNodes so that\n            // we don't get into infinite loop compiling ourselves\n            $compile(element.contents())(scope);\n          }\n      );\n    };\n  });\n\n})();\n","window.webcast = window.webcast || {};\n\nwindow.webcast.PollView = function (element, parent, $webcastPoll)\n{\n    this.parent = parent;\n\n    this.$webcastPoll = $webcastPoll;\n\n    _.extend(this, {\n        getResizableContainerElement : function()\n        {\n            return _this.$webcastPoll ? _this.$webcastPoll.parent() : null;\n        },\n        getLayoutName: function () {\n            var _this = this;\n\n            var $resizableContainer = _this.getResizableContainerElement();\n            var pollViewPortWidth = $resizableContainer ? $resizableContainer.width() : null;\n            var pollViewPortHeight = $resizableContainer? $resizableContainer.height() : null;\n            var result = '';\n            if (pollViewPortHeight < 315 || pollViewPortWidth < 670) {\n                result = 'small';\n            } else {\n                result = 'regular';\n            }\n\n            return result;\n        },\n        syncDOMPollResults: function () {\n            var _this = this;\n\n            function updateAnswerResult(answerIndex, showResults, pollResults, popularAnswers) {\n\n                if (showResults && pollResults ) {\n\n                    var answerContent = !isNaN(pollResults.answers[answerIndex + ''])?  (+pollResults.answers[answerIndex + '']) : 0;\n                    var isPopularAnswer = popularAnswers.split(',').indexOf(answerIndex + '') !== -1;\n                    var totalVoters = !isNaN(pollResults.totalVoters) ? (+pollResults.totalVoters) : 0;\n                    var answerPercentage = totalVoters > 0 ? (Math.round( (answerContent / totalVoters * 100) * 10 ) / 10) : 0;\n\n                    if (isPopularAnswer) {\n                        _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answer').addClass('popular');\n                    }else\n                    {\n                        _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answer').removeClass('popular');\n                    }\n\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + 'Result\"]').css('width',answerPercentage + '%');\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + 'ResultText\"]').text(answerPercentage + '%');\n\n                } else {\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answer').removeClass('popular');\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + 'Result\"]').css('width','0%');\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + 'ResultText\"]').text('');\n                }\n            }\n\n            if (_this.$webcastPoll) {\n                var $totalsContainer = _this.$webcastPoll.find(\"[name='respondsWidget']\");\n\n                if ($totalsContainer) {\n                    var pollResults = _this.parent.pollData.pollResults;\n                    var hasPollContent = _this.parent.pollData.content;\n                    var showTotals = _this.parent.pollData.showTotals;\n                    var showResults = _this.parent.pollData.showResults;\n\n                    if ( hasPollContent && pollResults )\n                    {\n                        var popularAnswers = '';\n                        var popularValue = 0;\n\n                        if (showResults) {\n                            for (var propertyName in pollResults.answers) {\n                                var answerValue = pollResults.answers[propertyName];\n                                if (answerValue) { // make sure that 0 will not be marked as popular value\n                                    if (answerValue > popularValue) {\n                                        popularAnswers = propertyName;\n                                        popularValue = answerValue;\n                                    }\n                                    else if (answerValue === popularValue) {\n                                        popularAnswers = popularAnswers ? (popularAnswers + ',' + propertyName) : propertyName;\n                                    }\n                                }\n                            }\n                        }\n\n                        updateAnswerResult(1,showResults, pollResults, popularAnswers);\n                        updateAnswerResult(2,showResults, pollResults, popularAnswers);\n                        updateAnswerResult(3,showResults, pollResults, popularAnswers);\n                        updateAnswerResult(4,showResults, pollResults, popularAnswers);\n                        updateAnswerResult(5,showResults, pollResults, popularAnswers);\n\n                        if (showTotals && pollResults.totalVoters) {\n                            var label = '';\n\n                            if (pollResults.totalVoters && !isNaN(pollResults.totalVoters))\n                            {\n                                var totalVotersAsNumber = parseInt(pollResults.totalVoters);\n                                if (totalVotersAsNumber && totalVotersAsNumber > 10000) {\n                                    label = (totalVotersAsNumber - (totalVotersAsNumber % 1000)) / 1000 + \"K\";\n                                } else {\n                                    label = pollResults.totalVoters;\n                                }\n                                $totalsContainer.find(\"[name='value']\").text(label);\n                                $totalsContainer.find(\"[name='text']\").text(totalVotersAsNumber === 1 ? 'Response' : 'Responses');\n                            }else {\n                                $totalsContainer.find(\"[name='text']\").text('Responses');\n                                $totalsContainer.find(\"[name='value']\").text('0'); // we are setting a filler value so the UI will not jump once we later update it\n                            }\n                        } else {\n                            $totalsContainer.find(\"[name='text']\").text('Responses');\n                            $totalsContainer.find(\"[name='value']\").text('0'); // we are setting a filler value so the UI will not jump once we later update it\n                        }\n                    }else\n                    {\n                        $totalsContainer.find(\"[name='text']\").text('Responses');\n                        $totalsContainer.find(\"[name='value']\").text('0'); // we are setting a filler value so the UI will not jump once we later update it\n                        updateAnswerResult(1, false);\n                        updateAnswerResult(2, false);\n                        updateAnswerResult(3, false);\n                        updateAnswerResult(4, false);\n                        updateAnswerResult(5, false);\n                    }\n\n                }\n            }\n        },\n        syncDOMViewState: function () {\n            var _this = this;\n            if (_this.$webcastPoll) {\n                if (_this.parent.getViewConfig() === 'producerOnly') {\n                    _this.$webcastPoll.addClass('producer-view');\n                } else {\n                    _this.$webcastPoll.removeClass('producer-view');\n                }\n            }\n        },\n        syncDOMUserVoting: function () {\n            var _this = this;\n            if (_this.$webcastPoll) {\n                var pollContent = _this.parent.pollData.content;\n\n                if (pollContent) {\n\n                    if(_this.parent.getViewConfig() !== 'producerOnly') {\n                        var selectedAnswerSelector = '[name=\"answer' + _this.parent.userVote.answer + '\"]';\n\n                        if (_this.parent.userVote.answer) {\n\n                            _this.$webcastPoll.find('.answer')\n                                .not('.answer>' + selectedAnswerSelector)\n                                .removeClass('selected')\n                                .addClass('not-selected');\n\n                            _this.$webcastPoll.find(selectedAnswerSelector)\n                                .closest('.answer')\n                                .addClass('selected')\n                                .removeClass('not-selected');\n                        } else {\n\n                            _this.$webcastPoll.find('.answer')\n                                .removeClass('selected')\n                                .addClass('not-selected');\n                        }\n                    }\n\n                    if (_this.parent.canUserVote()) {\n                        _this.$webcastPoll.addClass('allow-voting');\n                    } else {\n                        _this.$webcastPoll.removeClass('allow-voting');\n                    }\n                }\n\n            }\n        },\n        syncDOMAnswersVisibility : function()\n        {\n            var _this = this;\n\n            if (_this.parent.pollData.showAnswers)\n            {\n                _this.showPollDOMContent();\n            }else\n            {\n                _this.showPollDOMQuestionOnly();\n            }\n        },\n        syncPollDOM: function () {\n            var _this = this;\n\n            function updateAnswer(answerIndex, pollData) {\n                var answerContent = pollData.answers[answerIndex + ''];\n                if (answerContent) {\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').text(answerContent).closest('.answer').show();\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answers-widget-row').show();\n                } else {\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answers-widget-row').hide();\n                    //supporting large layout\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answer').hide();\n                }\n            }\n\n            if (_this.parent.pollData.pollId) {\n                // ## should check that requested poll is shown\n\n                // Make sure we have a container\n                if (!_this.$webcastPoll) {\n                    _this.$webcastPoll = _this.getWebcastPollElement();\n                }\n\n                if (_this.parent.pollData.errorContent)\n                {\n                    _this.showPollDOMError();\n                }else {\n                    var pollContent = _this.parent.pollData.content;\n\n                    if (pollContent) {\n\n                        var numberOfAnswers = 0;\n                        $.each(pollContent.answers, function(key, element) {\n                            numberOfAnswers++;\n                        });\n\n                        _this.$webcastPoll.addClass('poll-size-' + numberOfAnswers);\n\n                        _this.$webcastPoll.find('[name=\"question\"]').text(pollContent.question);\n                        updateAnswer(1, pollContent);\n                        updateAnswer(2, pollContent);\n                        updateAnswer(3, pollContent);\n                        updateAnswer(4, pollContent);\n                        updateAnswer(5, pollContent);\n\n                        _this.syncDOMAnswersVisibility();\n\n                    } else {\n                        _this.$webcastPoll.find('[name=\"question\"],[name=\"answer1\"],[name=\"answer2\"],[name=\"answer3\"],[name=\"answer4\"],[name=\"answer5\"]').text('');\n                        _this.showPollDOMLoader();\n                    }\n\n                    _this.syncDOMViewState();\n                    _this.syncDOMPollResults();\n                    _this.syncDOMUserVoting();\n                }\n\n\n            } else {\n                // ## should hide poll if any is shown\n            }\n        },\n        showPollDOMLoader: function () {\n            var _this = this;\n            if (_this.$webcastPoll) {\n                _this.$webcastPoll.find('[name=\"pollContent\"]').hide();\n                _this.$webcastPoll.find('[name=\"questionOnlyContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"errorContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"loadingContainer\"]').show();\n            }\n        },\n        showPollDOMError: function () {\n            var _this = this;\n            if (_this.$webcastPoll) {\n                _this.$webcastPoll.find('[name=\"pollContent\"]').hide();\n                _this.$webcastPoll.find('[name=\"questionOnlyContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"loadingContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"errorContainer\"]').fadeIn('slow');\n            }\n        },\n        showPollDOMQuestionOnly: function () {\n            var _this = this;\n\n            if (_this.$webcastPoll) {\n                _this.$webcastPoll.find('[name=\"loadingContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"pollContent\"]').hide();\n                _this.$webcastPoll.find('[name=\"errorContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"questionOnlyContainer\"]').fadeIn('slow');\n            }\n        },\n        showPollDOMContent: function () {\n            var _this = this;\n\n            if (_this.$webcastPoll) {\n                _this.$webcastPoll.find('[name=\"loadingContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"questionOnlyContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"errorContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"pollContent\"]').fadeIn('slow');\n            }\n        }\n    },{\n        getResizableContainerElement : function()\n        {\n            return $(element).parent();\n        }\n    });\n};\n\n\n\n\n","/**\n * Created by guyjacubovski on 10/13/2014.\n */\nvar kngLayout=angular.module('kngLayout',[]);","kngLayout.addPanelDirective=function (name,factory)  {\n\n    this.directive(name, function (shortcutService) {\n\n\n        //scope for all panels\n        var generalScope = {\n            id: '@id',\n            collapsed: '@',\n            ktitle: '@',\n            size: '@',\n            minSize: '@',\n            order:'@',\n            visible:'='\n\n        };\n        var templateInfo={};\n\n        //if factory present, then create the directiveInfo from it\n        if (factory) {\n            templateInfo = factory();\n        }\n\n        templateInfo.name=name;\n        angular.extend(generalScope, templateInfo.scope);\n\n        var template=\"<div class='k-panel'  ng-transclude></div>\";\n        var templateUrl=templateInfo.templateUrl ;\n\n        if (templateInfo.templateUrl) {\n            template = undefined;\n        }\n\n        return {\n            restrict: 'E',\n            require: [name],  //find kPanel on parents (without current element)\n            replace: true,\n            transclude: true,\n            scope: generalScope,\n            template: template,\n            templateUrl: templateUrl,\n            link: function (scope, element, attrs, required) {\n\n               // klog.warn(\"Added {0} {1} {2}\",name,scope.collapsed,scope.showHeader)\n                scope.elem = element;\n\n\n                if(attrs.keycodecollapse) {\n\n                    shortcutService.bindKey(attrs.keycodecollapse,scope,scope.toggleCollapse);\n\n                }\n\n                scope.getTitleToolTip=function() {\n                    if (attrs.keycodecollapse) {\n                        return scope.ktitle+\" \"+shortcutService.getKeyToolTip(attrs.keycodecollapse,true);\n                    }\n                    return scope.ktitle;\n                };\n                scope.translateToPixels=function(value,scale) {\n                    if (!value) {\n                        return undefined;\n                    }\n\n                    var endsWith = function(suffix) {\n                        return value.indexOf(suffix, this.length - suffix.length) !== -1;\n                    };\n\n                    if (endsWith(\"px\")) {\n                        return parseInt(value);\n                    }\n                    return scale* parseFloat(value) / 100.0;\n                };\n\n                scope.getSizeValue=function(scale) {\n                    return scope.translateToPixels(scope.size,scale);\n                };\n\n                scope.getMinSizeValue=function(scale) {\n                    return scope.translateToPixels(scope.minSize,scale);\n                };\n\n                var kPanelParent=null;\n\n                //find the first panel \"derived\" controller\n                 var runner=scope.$parent;\n                 while (runner) {\n                     if (runner.panelcontroller) {\n                     kPanelParent=runner.panelcontroller;\n                     break;\n                     }\n                    runner=runner.$parent;\n                 }\n\n                var $this=required[0];\n                scope.kPanelParent=kPanelParent;\n                if (scope.kPanelParent) {\n                    scope.kPanelParent.addChildPanel(scope);\n                } else {\n                    //in this case, we need to register to the onsize of the window, since we are a top most panel\n                    $( window ).resize(function() {\n                        scope.resize();\n                    });\n                }\n\n                if (templateInfo && templateInfo.link) {\n                    $this.setTemplateBehaviour(templateInfo.link);\n                }\n                scope.recalcLayout();\n                scope.$on('$destroy',function() {\n                    if (scope.kPanelParent) {\n                        scope.kPanelParent.removeChildPanel(scope);\n                    }\n                });\n\n            },\n            controller: function ($scope) {\n\n                $scope.panels = [];\n                $scope.qnaModeratorMode = configuration.qnaModeratorMode;\n                $scope.panelcontroller = this;\n\n                // klog.warn($scope.id+\" = \"+$scope.collapsed);\n\n                $scope.toggleCollapse = function () {\n                    if (templateInfo.toggleCollapse) {\n                        templateInfo.toggleCollapse($scope);\n                        return;\n                    }\n                    //Quick and dirty.\n                    $scope.collapsed = !$scope.isCollapsed();\n                    $scope.kPanelParent.collapseChanged();\n                };\n\n                this.getScope=function() {\n                    return $scope;\n                };\n\n                $scope.isCollapsed=function() {\n                    return  $scope.collapsed && ($scope.collapsed===true ||  $scope.collapsed.toLowerCase() === \"true\");\n                };\n\n                $scope.isVisible=function() {\n                    return  $scope.visible;\n\n                }\n\n                this.toggleCollapse = function () {\n                    $scope.toggleCollapse();\n                };\n\n                this.setTemplateBehaviour = function (link) {\n                    try {\n\n                        $scope.templateBehaviour = link($scope);\n\n                        if ($scope.templateBehaviour &&\n                            $scope.templateBehaviour.childAdded) {\n\n                            $scope.panels.forEach(function (panel) {\n                                $scope.templateBehaviour.childAdded(panel);\n                            });\n                        }\n\n                    }\n                    catch (e) {\n                        alert(e);\n                    }\n                };\n\n                $scope.resize =function() {\n                    if ($scope.elem === undefined) {\n                        return;\n                    }\n                    if ($scope.templateBehaviour &&\n                        $scope.templateBehaviour.resize) {\n                        $scope.templateBehaviour.resize();\n                    }\n                    $scope.recalcLayout();\n                };\n\n                $scope.recalcLayout = function () {\n                    //not created yet\n                    if ($scope.elem === undefined) {\n                        return;\n                    }\n                    if ($scope.templateBehaviour &&\n                        $scope.templateBehaviour.recalcLayout) {\n                        $scope.templateBehaviour.recalcLayout();\n                    }\n                    else {\n                        var clientWidth = $scope.elem[0].clientWidth;\n                        var clientHeight = $scope.elem[0].clientHeight;\n\n                        var dx = (100) / $scope.panels.length;\n                        for (var i = 0; i < $scope.panels.length; i++) {\n                            var child = $scope.panels[i];\n                            child.elem[0].style.position = 'absolute';\n                            child.elem[0].style.top = '0px';\n                            child.elem[0].style.left = '0px';\n                            child.elem[0].style.width = '100%';\n                            child.elem[0].style.height = '100%';\n\n                            child.recalcLayout();\n                        }\n\n                    }\n                    $scope.panels.forEach(function(child) {\n                        child.recalcLayout();\n                    });\n\n\n                };\n\n                this.addChildPanel = function (panel) {\n                    $scope.panels.push(panel);\n                    if ($scope.templateBehaviour &&\n                        $scope.templateBehaviour.childAdded) {\n                        $scope.templateBehaviour.childAdded(panel);\n                    }\n\n                    $scope.recalcLayout();\n                };\n                this.removeChildPanel = function (panel) {\n                    var index=$scope.panels.indexOf(panel);\n                    if (index<0) {\n                        return;\n                    }\n                    $scope.panels.splice(index, 1 );\n\n                    if ($scope.templateBehaviour &&\n                        $scope.templateBehaviour.childRemoved) {\n                        $scope.templateBehaviour.childRemoved(panel);\n                    }\n\n                    $scope.recalcLayout();\n                };\n\n\n\n                this.collapseChanged = function (panel) {\n                    $scope.recalcLayout();\n                };\n\n                this.getSizeValue = $scope.getSizeValue;\n                this.getMinSizeValue=$scope.getMinSizeValue;\n            }\n        };\n    });\n};\nkngLayout.addPanelDirective(\"kpanel\");\n","kngLayout.addPanelDirective(\"kUniformPanel\", function() {\n    return {\n        scope: {\n            orientation: '@'\n        },\n        link: function ($scope) {\n\n            var scope = $scope;\n\n            return {\n                childAdded: function (panel) {\n\n                    //klog.debug(\"a\");\n                },\n                recalcLayout: function () {\n                    var clientWidth = $scope.elem[0].clientWidth;\n                    var clientHeight = $scope.elem[0].clientHeight;\n\n                    var runner = 0;\n                    var dx = 100 / $scope.panels.length;\n\n                    for (var i = 0; i < $scope.panels.length; i++) {\n                        var child = $scope.panels[i];\n\n                        if ($scope.orientation === 'vertical') {\n                            $(child.elem).css(\n                                {\n                                    'position': 'absolute',\n                                    'top': runner + '%',\n                                    'left': '0px',\n                                    'width': '100%',\n                                    'height': dx + '%'\n                                });\n                        }\n                        else {\n                            $(child.elem).css(\n                                {\n                                    'position': 'absolute',\n                                    'left': runner + '%',\n                                    'top': '0px',\n                                    'height': '100%',\n                                    'width': dx + '%'\n                                });\n\n                        }\n                        runner += dx;\n                    }\n\n                }\n            };\n        }\n    };\n});\n","kngLayout.addPanelDirective(\"kSmartPanelAligment\", function() {\n\n    return {\n        scope: {\n            slidesAspectRatio : '@',\n            videoApectRatio : '@'\n\n        },\n\n        link: function ($scope) {\n\n            var scope = $scope;\n            scope.$watch('slidesAspectRatio', function (val) {\n                recalcLayout();\n            });\n            scope.$watch('videoApectRatio', function (val) {\n                recalcLayout();\n            });\n\n            var minVideoWidth=30; //10%\n\n            var slideHeight = 0 ;\n            var slideWidth = 0;\n            var videoWidth = 0;\n            var videoHeight = 0;\n            //case 1\n            var spaceY = 3; //3%\n            var spaceX = 3;\n\n            elementWatcher.onresize($scope.elem[0], function () {\n                recalcLayout();\n            });\n\n\n\n            var calcSizes=function() {\n                //klog.info(\"pane:\" + clientWidth + \" x \" + clientHeight);\n\n\n                //equations:\n                // 3*spaceX + slideWidth + videoWidth  = 100;\n                // 2*spaceY + slideHeight   = 100;\n                // videoWidth>minVideoWidth\n                //  slideWidth/slideHeight=SAR;\n                //  videoWidth/videoHeight=VAR;\n\n                var clientWidth = scope.elem[0].clientWidth;\n                var clientHeight = scope.elem[0].clientHeight;\n\n\n                var SAR = (scope.slidesAspectRatio) * (clientHeight / clientWidth);\n                var VAR = (scope.videoApectRatio) * (clientHeight / clientWidth);\n\n\n                spaceY = 0;\n                spaceX = 1;\n\n                //from the first equation above we can calculate the Z param\n                var   Z = (minVideoWidth-100+3 * spaceX)/SAR + 100 -2 * spaceY;\n\n                slideHeight = 100 - 2 * spaceY - Math.max(0,Z);\n                slideWidth = slideHeight * SAR;\n                videoWidth = 100 - slideWidth - 3 * spaceX;\n                videoHeight = videoWidth / VAR;\n\n                if (videoHeight > slideHeight) {\n                    //readjust\n                    spaceX = (100 - slideWidth - slideHeight * VAR) / 3;\n                    videoWidth = 100 - slideWidth - 3 * spaceX;\n                    videoHeight = videoWidth / VAR;\n                }\n\n\n            }\n\n            function setPanelSize(panel,left,top,width,height) {\n                panel.elem.css({\n                    'visibility': 'visible',\n                    opacity: 1,\n                    'top': top + '%',\n                    'left': left + '%',\n                    'width': width + '%',\n                    'height': height + '%'\n                });\n            }\n\n            var recalcLayout = function () {\n\n                var panels=scope.panels;\n\n                if (panels.length === 0) {\n                    return;\n                }\n\n                panels.sort(function(a, b){\n                   return a.order - b.order;\n                });\n\n                if (panels.length > 1) {\n                    calcSizes();\n                    setPanelSize(panels[0],spaceX,(50-slideHeight/2),slideWidth,slideHeight);\n                    setPanelSize(panels[1],slideWidth + 2 * spaceX,(50-slideHeight/2),videoWidth,slideHeight);\n                }\n                else {\n                    setPanelSize(panels[0],0,0,100,100);\n                }\n\n\n            };\n\n\n            return {\n                recalcLayout: recalcLayout,\n                childAdded: function (panel) {\n                    /*\n                    panel.elem.css( {\n                        \"-webkit-transition\": \"top 0.3s, left 0.3s, width 0.3s, height 0.3s\",\n                        \"transition-timing-function\": \"ease\"\n                    });*/\n                    scope.$watch( function() {\n                         return panel.visible;\n                    },function(a,b) {\n                        recalcLayout();\n                    });\n                },\n                childRemoved: function(panel) {\n                    /*\n                    panel.elem.css( {\n                        \"-webkit-transition\": \"top 0s, left 0s, width 0s, height 0s\",\n                        \"transition-timing-function\": \"ease\"\n                    });*/\n                }\n            }\n        }\n    }\n});","\nkngLayout.addPanelDirective(\"kFillPanel\", function() {\n\n    return {\n        scope: {\n            collapsedWidth: '@'\n        },\n        link: function ($scope) {\n\n            var scope = $scope;\n\n\n            var recalcLayout = function () {\n\n                scope.panels=scope.panels.sort(function(a,b) {\n                    return a.order>b.order;\n                });\n\n\t            var panels=scope.panels.filter ( function(panel) {\n                    return panel.isVisible();\n                });\n\n                var collapsed = panels.filter(function (panel) {\n                    return panel.isCollapsed();\n                });\n                var expanded = panels.filter(function (panel) {\n                    return !panel.isCollapsed();\n\n                });\n\n                var expMargin=0; //pixels between expanded panels\n\n                var clientWidth = scope.elem[0].clientWidth;\n                var clientHeight = scope.elem[0].clientHeight;\n\n                var collapsedSize = parseInt(scope.collapsedWidth);\n\n                if (collapsedSize === undefined || isNaN(collapsedSize)) {\n\n                    collapsedSize = 30;\n\n                }\n\n                if (panels.length===1) {\n\n                    scope.panels.forEach( function(panel) {\n                        if (!panel.isVisible()) {\n                            panel.elem.css('display', 'none');\n                        } else {\n                            panel.elem.css ( {\n                                'top' : '0px',\n                                'bottom': clientHeight + 'px',\n                                'left' : \"0px\",\n                                'width' :   clientWidth+'px'});\n                        }\n                    });\n                    return;\n                }\n\n                var right = clientWidth;\n                //hide all collapsed\n                for (var i = 0; i < collapsed.length; i++) {\n\n                    var width=collapsed[i].getSizeValue(clientWidth);\n                    collapsed[i].elem.css ( {\n                        'top' : '0px',\n                        'bottom': clientHeight + 'px',\n                        'left' : (right-collapsedSize) + \"px\",\n                        'width' :   width+'px'});\n\n                    right-=collapsedSize;\n                }\n\n\n                var rightPercent=100*right/clientWidth;\n                var marginPercent=100*expMargin/clientWidth;\n\n                if (collapsed.length>0) {\n                    rightPercent -= marginPercent;\n                }\n\n                if (expanded.length > 0) {\n                    for (  i = expanded.length-1; i >=0; i--) {\n                        var panelWidth=rightPercent;\n\n                        if (expanded[i].size) {\n                            var dx= expanded[i].getSizeValue(clientWidth);\n                            panelWidth=100*dx/clientWidth;//move to %, and override\n                        }\n\n                        //adjust\n                        if (expanded[i].minSize) {\n                            var minPanelWidth= expanded[i].getMinSizeValue(clientWidth);\n                            minPanelWidth=100*minPanelWidth/clientWidth;//move to %\n\n                            panelWidth=Math.max(panelWidth,minPanelWidth);\n                        }\n\n\n                        expanded[i].elem.css ( {\n                            'top' : '0%',\n                            'bottom':  '100%',\n                            'left' : rightPercent-panelWidth + \"%\",\n                            'width' : panelWidth + \"%\"});\n\n                        rightPercent-=panelWidth+marginPercent;\n                    }\n                }\n            };\n            return {\n                recalcLayout: recalcLayout,\n                childAdded: function (panel) {\n                    panel.elem.addClass( \"fillPanelAnimation\" );\n                }\n            };\n        }\n    };\n});","\nkngLayout.addPanelDirective(\"kSplitPanel\", function() {\n\n    return {\n        scope: {\n            orientation: '@',\n            showHandle : '='\n\n        },\n        link: function ($scope) {\n\n            var scope = $scope;\n            var drag = false;\n            var lastPanelSize = null;\n            var vertical = scope.orientation === 'vertical';\n            var classes = (vertical) ? \"split-handler-vertical split-handler-resize\" : \"split-handler-horizontal split-handler-resize\";\n            if (scope.showHandle) {\n                classes+=(!vertical)  ? \" split-handler-horizontal-handle\" : \" split-handler-vertical-handle\";\n            }\n            var handler = angular.element('<div class=\"'+classes+' split-handler-resize\"></div>');\n\n            var pane1, pane2;\n\n            var lastPos = null;\n            var lastPosBeforeDlbClick=null;\n\n            var changeSplitPoint = function (pos) {\n\n\n\n                var bounds = scope.elem[0].getBoundingClientRect();\n                //klog.debug(\"vertical=\" + vertical + \";\" + \"pos=\"+pos);\n\n\n\n\n                lastPos = pos;\n                //     $(handler[0]).addClass(\"split-handler-resize\");\n\n\n                var pane1Min,pane2Min;\n\n                if (!vertical) {\n\n                    var height = bounds.bottom - bounds.top;\n\n                    lastPanelSize=height;\n\n                    pane1Min = pane1.getMinSizeValue(height) || 100;\n                    pane2Min = pane2.getMinSizeValue(height) || 100;\n\n                    var releventPos = pos;\n\n                    if (pos < pane1Min) return;\n\n                    if (height - pos < pane2Min) {\n                        releventPos = height-pane2Min;\n                    }\n\n                    var e1h = releventPos * 100 / height;\n                    var e2h = (height - releventPos) * 100 / height;\n                    if (pane2.isVisible()) {\n                        handler.css('top', e1h + '%');\n                        pane1.elem.css('height', e1h + '%');\n                        pane2.elem.css({\n                            'top': e1h + '%',\n                            'height': (e2h) + '%',\n                            'right': '0%',\n                            'width': '100%'\n                        });\n                    } else {\n                        pane1.elem.css('height', '100%');\n                        pane2.elem.css('display', 'none');\n                        handler.css('display', 'none');\n\n                    }\n\n                } else {\n\n                    var width = bounds.right - bounds.left;\n\n                    pane1Min = pane1.getMinSizeValue(width) || 100;\n                    pane2Min = pane2.getMinSizeValue(width) || 100;\n\n                    if (!lastPosBeforeDlbClick && pos < pane1Min) return;\n                    if (!lastPosBeforeDlbClick && width - pos < pane2Min) return;\n\n                    var e1w = pos * 100 / width;\n                    var e2w = (width - pos) * 100 / width;\n                    if (lastPosBeforeDlbClick) {\n                        e2w = (width - lastPosBeforeDlbClick) * 100 / width;\n                    }\n                    var hw = (pos - 2) * 100 / width;\n\n                    handler.css('left', hw + '%');\n                    pane1.elem.css('width', e1w + '%');\n                    pane2.elem.css({\n                        'left': e1w + '%',\n                        'width': (e2w) + '%',\n                        'top': '0%',\n                        'height': '100%'\n                    });\n                }\n            }\n\n            var initHandler = function () {\n                //    if (scope.resizeSplitter==undefined ||\n                //      scope.resizeSplitter==true) {\n                scope.elem.bind('mousemove', function (ev) {\n                    if (!drag) return;\n\n                    var bounds = scope.elem[0].getBoundingClientRect();\n\n                    if (!vertical) {\n                        //  klog.debug(\"mousemove vertical with\", ev.clientY - bounds.top);\n                        changeSplitPoint(ev.clientY - bounds.top);\n                    }\n                    else {\n                        //// klog.debug(\"mousemove horizontal with\", ev.clientX - bounds.left);\n                        changeSplitPoint(ev.clientX - bounds.left);\n                    }\n\n                    scope.recalcLayout();\n\n                });\n\n                handler.bind('mousedown', function (ev) {\n                    ev.preventDefault();\n                    drag = true;\n                });\n                handler.bind('dblclick',function(ev) {\n\n                    var bounds = scope.elem[0].getBoundingClientRect();\n\n                    [pane1.elem,pane2.elem,handler].forEach(function (elem) {\n                        elem.addClass( \"fillPanelAnimation\" );\n                        elem.bind('transitionend',function(e) {\n                            elem.removeClass( \"fillPanelAnimation\" );\n\n                        });\n                    });\n                    if (lastPosBeforeDlbClick) {\n                        changeSplitPoint(lastPosBeforeDlbClick);\n                        lastPosBeforeDlbClick=null;\n                    } else {\n                        lastPosBeforeDlbClick=lastPos;\n                        changeSplitPoint(bounds.right-45);\n                    }\n                });\n\n                angular.element(document).bind('mouseup', function (ev) {\n                    drag = false;\n                });\n                //  }\n            };\n\n            var initialize = function () {\n                if (pane1 && pane2) {\n                    return;\n                }\n\n                if (scope.panels.length === 2 && scope.elem) {\n                    pane1 = scope.panels[0];\n                    pane2 = scope.panels[1];\n                    pane1.elem.after(handler);\n\n                    initHandler();\n\n                    var splitPoint=pane1.size;\n                    if (splitPoint === undefined)  {\n                        if (pane2.size) {\n                            if (!vertical) {\n                                splitPoint = pane2.getSizeValue(scope.elem[0].clientHeight);\n                            } else {\n                                splitPoint = pane2.getSizeValue(scope.elem[0].clientWidth);\n\n                            }\n                        } else {\n                            splitPoint=300;\n                        }\n                    }\n                    if (!vertical) {\n                        changeSplitPoint(scope.elem[0].clientHeight - splitPoint);\n                    }else {\n                        changeSplitPoint(scope.elem[0].clientWidth- splitPoint);\n\n                    }\n                }\n            };\n\n            initialize();\n\n            return {\n                childAdded: function (panel) {\n                    initialize();\n                  //  panel.elem.addClass( \"fillPanelAnimation\" );\n\n                },\n                resize:function() {\n                    if (lastPos !== null) {\n                        var bounds = scope.elem[0].getBoundingClientRect();\n                        if (!vertical) {\n                            var newHeight = bounds.bottom - bounds.top;\n                            lastPos = newHeight - (lastPanelSize - lastPos);\n                        } else {\n                            var newWidth = bounds.right - bounds.left;\n                            lastPos = newWidth - (lastPanelSize - lastPos);\n\n                        }\n                    }\n                },\n                recalcLayout: function () {\n                    initialize();\n                    if (pane1 && pane2 &&\n                        lastPos !== null) {\n                        changeSplitPoint(lastPos);\n                    }\n\n                }\n            };\n        }\n    };\n});\n\n","kngLayout.addPanelDirective(\"kTabPanel\", function () {\n    return {\n        scope: {\n            showHeader: '='\n        },\n        templateUrl: \"../common/kngLayout/directives/partials/kTabPanelTemplate.html\",\n        link: function ($scope) {\n            var scope = $scope;\n            var visibleTabPage=null;\n\n            scope.isRtcPanel = configuration.participantsPanel;\n\n            scope.isTabSelected=function(panel) {\n                return !scope.isCollapsed() && visibleTabPage===panel;\n            };\n            scope.clickOnTabHeader=function() {\n               scope.toggleCollapse();\n            };\n            scope.onTabPageSelected=function(panel,e) {\n                if (visibleTabPage!==panel) {\n                    visibleTabPage = panel;\n                    recalcLayout();\n\n                    if (scope.isCollapsed()) {\n                        scope.toggleCollapse();\n                    }\n                }\n                else {\n                    //close the tab is clicking on same icon\n                    scope.toggleCollapse();\n                }\n                if (e) {\n                    e.stopPropagation();\n                }\n            };\n\n            var recalcLayout = function () {\n              //  scope.title=scope.panels[0].ktitle;\n            //    scope.icon=scope.panels[0].icon;\n                var sortedPanels = null; // sorted list of panels to manipulate\n                if (visibleTabPage) {\n                    // sort the panels where the one to be shown in the last one\n                    var indexOfVisiblePage = scope.panels.indexOf(visibleTabPage);\n                    sortedPanels = scope.panels.slice(0);\n                    sortedPanels.splice(indexOfVisiblePage,1); // remove the visible panel from array\n                    sortedPanels.push(visibleTabPage); // push the visible panel to the end of the array\n                }else\n                {\n                    sortedPanels = scope.panels; // no active panel exists - use the list as is\n                }\n\n\n                sortedPanels.forEach(function(panel) {\n                    panel.elem.css({\n                        'top': '0px',\n                        'bottom': '0px',\n                        'left':  \"0px\",\n                        'right': '0px'\n                    });\n\n                    // use the show/hide to modify the visibility of the element immediately (to prevent overlapping of the panel being hidden and the one that we are going to show\n                    if (visibleTabPage===panel)\n                    {\n                        panel.elem.show();\n                    }else\n                    {\n                        panel.elem.hide();\n                    }\n\n                });\n\n            };\n            return {\n                recalcLayout: recalcLayout,\n                childAdded: function (panel) {\n                    if (visibleTabPage===null) {\n                        visibleTabPage = panel;\n                    }\n                }\n            };\n        }\n    };\n});\n\n","kngLayout.addPanelDirective(\"kTabPagePanel\", function () {\n    return {\n        scope: {\n            icon: '@'\n        },\n        toggleCollapse: function (scope) {\n            scope.kPanelParent.getScope().onTabPageSelected(scope);\n        },\n        link:function (scope) {\n            return {\n\n            };\n        }\n    };\n});\n\n","kngLayout.directive('kFlyoutPanel', function ($timeout) {\n    return {\n        restrict: 'E',\n        transclude: true,\n\n        scope: {\n            ktitle: '@ktitle',\n            id: '@id',\n            expanded:\"=\",\n            width:'='\n        },\n        link: function (scope, elem, attrs) {\n\n            scope.elem = elem;\n\n            scope.$watch('expanded',function() {\n\n\n                if (scope.expanded) {\n                    elem.css({\"right\": \"0px\", \"width\": scope.width+\"px\"});\n                } else {\n                    elem.css({\"right\": -scope.width+\"px\", \"width\": scope.width+\"px\"});\n                }\n\n                scope.wasEverExpanded= scope.wasEverExpanded || scope.expanded;\n            });\n        },\n        templateUrl:'../common/kngLayout/directives/partials/kFlyoutPanelTemplate.html'\n    };\n});\n","kngLayout.addPanelDirective(\"kTitlePanel\", function () {\n    return {\n        scope: {\n            showHeader: '=',\n            icon: '@'\n        },\n        templateUrl: \"../common/kngLayout/directives/partials/kPanelTemplate.html\"\n    }\n});\n\n","kngLayout.addPanelDirective(\"kUnsupportedBrowserPanel\", function () {\n    return {\n        scope: {},\n        templateUrl: \"../common/kngLayout/directives/partials/kUnsupportedBrowserPanel.html\"\n    }\n});\n\n","/**\n * Created by guyjacubovski on 10/13/2014.\n */\nvar kAPI=angular.module('kAPI',[]);","/* globals _ */\n/* globals Promise */\n/* globals kserviceInfo */\n/* globals _ */\n\n(function() {\n'use strict';\n\n    angular.module('kAPI').factory('kalturaAPICaller', function ($http, kserviceinfo) {\n\n        var kserviceInfo = kserviceinfo, ks = kserviceInfo.KS;\n        var multiRequestParams=null;\n        var multiRequestPromises=[];\n\n\n        var loginPromise = null;\n\n        var login = function() {\n\n            if (loginPromise) {\n                return loginPromise;\n            }\n\n            if (ks === null) {\n                loginPromise = new Promise(function (resolve, reject) {\n                    internalcall({\n                        service: \"session\",\n                        action: \"start\",\n                        type: kserviceInfo.adminKS ? 2 : 0,\n                        userId: kserviceInfo.userId,\n                        secret: kserviceInfo.userSecret,\n                        partnerId: kserviceInfo.partnerId,\n                        privileges: 'list:' + configuration.MediaEntryId + ',setrole:WEBCAST_PRODUCER_DEVICE_ROLE,sview:*,download:'+ configuration.MediaEntryId+',privacycontext:MediaSpace,enableentitlement',\n                    }).then(function (result) {\n                        ks = result;\n                        kserviceInfo.KS = result;\n\n                        klog.info(\"logged in with user '{0}' in with ks={1}\", kserviceInfo.userId, ks);\n                        resolve(result);\n\n                    }, function(err){\n                        reject(err);\n                    });\n                });\n            }\n            else {\n\n                loginPromise=Promise.resolve(ks);\n            }\n\n            return loginPromise;\n        };\n\n        function internalcall(params,ignoreMultiRequest) {\n\n            //we chain the requests in a multi-request calls\n            if (multiRequestParams  && !ignoreMultiRequest) {\n\n                var  multiRequestCount=multiRequestPromises.length+1;\n                for(var propertyName in params) {\n                    if (params.hasOwnProperty(propertyName)) {\n                        //clone the property\n                        Object.defineProperty(multiRequestParams, multiRequestCount + \":\" + propertyName,\n                            Object.getOwnPropertyDescriptor(params, propertyName));\n                    }\n                }\n                return new Promise(function (success, failure) {\n                    multiRequestPromises.push({service: params.service, action : params.action, success: success, failure:failure});\n                });\n            }\n\n            return new Promise(function (success, failure) {\n\n\t            var startTime=new Date(),endTime;\n\n                params.format = 1; //return JSONP\n                params.clientTag=\"KWP:\"+kUpgradeServiceInfo.app_version;\n\n                if (ks !== null) {\n                    params.ks = ks;\n                }\n\t            // var recursiveEncoded = $.param(params) //convert params to url query\n                var url = kserviceInfo.serverAddress + \"/api_v3/index.php\";// + recursiveEncoded;\n\n\n                $http.post(url, JSON.stringify(params), {headers:{\"content-type\":\"application/json\"}}).success(function (result, code, headers) {\n                // $http.get(url).success(function (result, code, headers) {\n\t                var headersString=\"\"\n                    var xkaltura=null;\n                    if (headers) {\n\t                    var head=headers()\n                        if (head) {\n                            headersString=\"; X-Me: \"+ head['x-me']+ \"; X-Kaltura-Session: \"+head['x-kaltura-session'];\n                            xkaltura= head[\"x-kaltura\"];\n\n                        }\n                    }\n                    endTime=new Date();\n                    try {\n                        if (code===200 && result===null) {\n                            klog.info(\"API returned empty result when doing API call:\\n{0}{1}\\nheaders={2}\\n time it took {3} ms\", url, headersString, JSON.stringify(head),endTime-startTime);\n                            success();\n                            return;\n                        }\n                        if (!result || result.objectType===\"KalturaAPIException\") {\n                            klog.warn(\"Error when doing API call:\\n{0}{1}\\nheaders={2}\\nmessage={3} time it took {4} ms\", url, headersString, JSON.stringify(head),JSON.stringify(result),endTime-startTime);\n                            var error={ code: code, message: \"no response, error code: \"+xkaltura ? xkaltura : code};\n                            failure(result || error);\n                            return;\n                        }\n                        klog.debug(\"API call was successful:\\n{0}{1}\\n time it took {2}  ms\",url,headersString, endTime-startTime);\n                        success(result);\n                    } catch (e) {\n                        klog.warn(\"Exception doing API call:\\n{0}{1}\\n{2} time it took {3}  ms\",url,headersString,  e,endTime-startTime);\n                    }\n                }).error(function (data, status, headers, config) {\n\n                    endTime=new Date();\n\n                    klog.warn(\"Error doing API call:\\n{0}\\n status={1} time it took {2} ms\",url,  status,endTime-startTime);\n                    failure(status);\n\n                });\n            });\n        }\n\n        function startMultirequest() {\n            multiRequestPromises=[];\n            multiRequestParams = { service: \"multirequest\", action: null };\n        }\n\n        function execMultirequest( requests) {\n\n            var  doCall=function() {\n                var params = multiRequestParams;\n                var oldMultiRequestPromises = multiRequestPromises;\n                multiRequestParams = null;\n                multiRequestPromises = [];\n                return internalcall(params).then(function (result) {\n\t                var failure = false;\n                    for (var i = 0; i < result.length; i++) {\n\n                        if (result[i] && result[i].objectType === \"KalturaAPIException\") {\n                            klog.warn(\"Error from multirequest #{0} (params={1}) message={2}\", i, JSON.stringify(params), JSON.stringify(result[i]));\n                            failure = true;\n                            oldMultiRequestPromises[i].failure(result[i]);\n                            continue;\n                        }\n\n                        oldMultiRequestPromises[i].success(result[i]);\n                    }\n                    if (failure) {\n                        return Promise.reject(result);\n                    }\n                    return Promise.resolve(result);\n                }, function (error) {\n                    return Promise.reject(error);\n                });\n            };\n\n\n            var sessionStartIsPartOfMutliRequest = !!_.find(multiRequestPromises,{service : 'session', action : \"start\"});\n\n            var promise =  null;\n            if (sessionStartIsPartOfMutliRequest || ks) {\n                promise=doCall();\n            } else {\n                promise = login().then(function () {\n                    return doCall();\n                });\n            }\n            if (!requests) {\n                return promise;\n            } else {\n                return promise.then(function (res) {\n                    return Promise.all(requests).then(function () {\n                        return res;\n                    })\n                });\n            }\n        }\n\n        function call(params, fetchAll) {\n            if (multiRequestParams || ks) {\n                return doApiCall(params, fetchAll);\n            } else {\n                return login().then(function () {\n                    return doApiCall(params, fetchAll);\n                });\n            }\n        }\n\n        function doApiCall(params, fetchAll) {\n            //allow fetch all only for non multiRequest calls\n            if(fetchAll && !multiRequestParams) {\n                return internalcall(params).then(function (initialResults) {\n                    return fetchAllObjects(params, initialResults);\n                }).catch(function (reason) {\n                    return Promise.reject(reason);\n                });\n            } else {\n                return internalcall(params);\n            }\n        }\n\n        function fetchAllObjects(params, results) {\n\n            return new Promise(function (success, failure) {\n                //check if additional calls are needed.\n                if(results.objects && results.totalCount &&\n                    results.objects.length < results.totalCount) {\n                    var maxPageSize = results.objects.length > 0 ? results.objects.length : 500; //assuming requested page size was the server's max\n                    var currentObjectCount = results.objects.length;\n                    var currentPageIndex = 2;\n                    //clean up request params (added to request parameters after first api call)\n                    delete params.callback;\n                    delete params.format;\n                    delete params.ks;\n                    startMultirequest();\n                    while(currentObjectCount < results.totalCount){\n                        //update request params\n                        params['pager:pageIndex'] = currentPageIndex;\n                        params['pager:pageSize'] = maxPageSize;\n                        //advance counters\n                        currentPageIndex++;\n                        currentObjectCount += maxPageSize;\n                        //add a call to the multi-request\n                        call(params, false);\n                    }\n                    execMultirequest().then(function (additionalResults) {\n                        //concat results\n                        _.each(additionalResults, function (result) {\n                            if(result.objects) {\n                                Array.prototype.unshift.apply(results.objects, result.objects);\n                            }\n                        });\n                        success(results);\n                    }).catch(function (reason) {\n                        failure(reason);\n                    });\n                } else {\n                    //returning initial results\n                    success(results);\n                }\n            });\n        }\n\n        return {\n            login: login,\n            call : call ,\n            getKS: function() { return ks},\n            startMultirequest:startMultirequest,\n            execMultirequest:execMultirequest\n        };\n    });\n\n    angular.module('kAPI').service('kAPISessionService', function (kalturaAPICaller) {\n        return {\n            get: function () {\n                return kalturaAPICaller.call({\n                    service: \"session\",\n                    action: \"get\"\n                });\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIbaseEntryService', function (kalturaAPICaller) {\n        return {\n            ENTRY_DISPLAY_IN_SEARCH_TYPE: {SYSTEM:-1, PARTNER_ONLY:1},\n            list: function () {\n                return kalturaAPICaller.call({\n                    service: \"baseEntry\",\n                    action: \"list\",\n                    \"filter:kalturaLiveEntryFilter\": \"\"\n                });\n            },\n            get: function (mediaEntryId) {\n                return kalturaAPICaller.call({\n                    service: \"baseEntry\",\n                    action: \"get\",\n                    \"entryId\": mediaEntryId\n                });\n            },\n            update: function (mediaEntryId, updateParams) {\n                var params = {\n                    service: \"baseEntry\",\n                    action: \"update\",\n                    entryId: mediaEntryId\n                };\n                _.extend(params, updateParams);\n                return kalturaAPICaller.call(params);\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIMetadataProfileService', function (kalturaAPICaller) {\n        return {\n            list: function (systemName) {\n\n                var params={\n                    service: \"metadata_metadataprofile\",\n                    action: \"list\"\n                };\n                if (systemName) {\n\n                    params[\"filter:systemNameEqual\"]=systemName;\n                }\n                return kalturaAPICaller.call(params);\n            },\n            update:function(id,xsdData){\n                return kalturaAPICaller.call({\n                    service: \"metadata_metadataprofile\",\n                    action: \"update\",\n                    \"metadataProfile:objectType\":\"KalturaMetadataProfile\",\n                    id: id,\n                    xsdData: xsdData\n                });\n            },\n            delete:function(id){\n                return kalturaAPICaller.call({\n                    service: \"metadata_metadataprofile\",\n                    action: \"delete\",\n                    id: id\n                });\n            },\n            add:function(name,xsdData, objectType){\n                return kalturaAPICaller.call({\n                    service: \"metadata_metadataprofile\",\n                    action: \"add\",\n                    \"metadataProfile:objectType\":\"KalturaMetadataProfile\",\n                    \"metadataProfile:metadataObjectType\":objectType, // \"annotationMetadata.Annotation\" | \"codeCuePointMetadata.CodeCuePoint\"\n                    \"metadataProfile:name\": name,\n                    \"metadataProfile:systemName\": name,\n                    xsdData: xsdData\n                });\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIMetadataService', function (kalturaAPICaller) {\n        return {\n            add: function (objectId,metadataProfileId,objectType,xmlData) {\n                return kalturaAPICaller.call({\n                    service: \"metadata_metadata\",\n                    action: \"add\",\n                    metadataProfileId: metadataProfileId,\n                    objectId: objectId,\n                    xmlData: xmlData,\n                    objectType:objectType\n\n                });\n            },\n            update: function (id,xmlData) {\n                return kalturaAPICaller.call({\n                    service: \"metadata_metadata\",\n                    action: \"update\",\n                    id: id,\n                    xmlData: xmlData\n\n                });\n            },\n            get: function (id) {\n                return kalturaAPICaller.call({\n                    service: \"metadata_metadata\",\n                    action: \"get\",\n                    id: id\n                });\n            },\n            list: function (objectId,metadataProfileId) {\n                var params={\n                    service: \"metadata_metadata\",\n                        action: \"list\",\n                        \"filter:objectIdEqual\": objectId\n                };\n\n                if (metadataProfileId) {\n                    params[\"filter:metadataProfileIdEqual\"] =metadataProfileId;\n                }\n                return kalturaAPICaller.call(params);\n            },\n            delete:function(objectId) {\n                return kalturaAPICaller.call({\n                    service: \"metadata_metadata\",\n                    action: \"delete\",\n                    id: objectId\n                });\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIResponseProfileService', function (kalturaAPICaller) {\n        return {\n            add: function (systemName,relatedProfilesName) {\n                return kalturaAPICaller.call({\n                    service: \"responseprofile\",\n                    action: \"add\",\n                    \"addResponseProfile:objectType\": \"KalturaResponseProfile\",\n                    \"addResponseProfile:systemName\": systemName,\n                    \"addResponseProfile:name\": systemName,\n                    \"addResponseProfile:type\": 1,\n                    \"addResponseProfile:fields\":\"id,name,createdAt,updatedAt,parentId,partnerData,text,tags,userId,startTime,endTime\",\n                    \"addResponseProfile:relatedProfiles:0:objectType\":\"KalturaDetachedResponseProfile\",\n                    \"addResponseProfile:relatedProfiles:0:name\":relatedProfilesName,\n                    \"addResponseProfile:relatedProfiles:0:type\": 1,\n                    \"addResponseProfile:relatedProfiles:0:fields\":\"id,objectId,createdAt, xml\",\n                    \"addResponseProfile:relatedProfiles:0:filter:objectType\":\"KalturaMetadataFilter\",\n                    \"addResponseProfile:relatedProfiles:0:filter:metadataObjectTypeEqual\":\"annotationMetadata.Annotation\",\n                    \"addResponseProfile:relatedProfiles:0:mappings:0:objectType\":\"KalturaResponseProfileMapping\",\n                    \"addResponseProfile:relatedProfiles:0:mappings:0:parentProperty\":\"id\",\n                    \"addResponseProfile:relatedProfiles:0:mappings:0:filterProperty\":\"objectIdEqual\"\n                });\n            },\n\n            addPollsResponseProfile: function (systemName,relatedProfilesName) {\n                return kalturaAPICaller.call({\n                    service: \"responseprofile\",\n                    action: \"add\",\n                    \"addResponseProfile:objectType\": \"KalturaResponseProfile\",\n                    \"addResponseProfile:systemName\": systemName,\n                    \"addResponseProfile:name\": systemName,\n                    \"addResponseProfile:type\": 1,\n                    \"addResponseProfile:fields\":\"id,name,createdAt,updatedAt,parentId,partnerData,text,tags,userId,startTime,endTime\",\n                    \"addResponseProfile:relatedProfiles:0:objectType\":\"KalturaDetachedResponseProfile\",\n                    \"addResponseProfile:relatedProfiles:0:name\":relatedProfilesName,\n                    \"addResponseProfile:relatedProfiles:0:type\": 1,\n                    \"addResponseProfile:relatedProfiles:0:fields\":\"id,objectId,createdAt, xml\",\n                    \"addResponseProfile:relatedProfiles:0:filter:objectType\":\"KalturaMetadataFilter\",\n                    \"addResponseProfile:relatedProfiles:0:filter:metadataObjectTypeEqual\":\"annotationMetadata.Annotation\",\n                    \"addResponseProfile:relatedProfiles:0:mappings:0:objectType\":\"KalturaResponseProfileMapping\",\n                    \"addResponseProfile:relatedProfiles:0:mappings:0:parentProperty\":\"id\",\n                    \"addResponseProfile:relatedProfiles:0:mappings:0:filterProperty\":\"objectIdEqual\"\n                });\n            },\n\n\n            delete: function(id) {\n                return kalturaAPICaller.call({\n                    service: \"responseprofile\",\n                    action: \"delete\",\n                    id: id});\n            },\n            list: function(systemName) {\n                var request={\n                        service: \"responseprofile\",\n                        action: \"list\"};\n\n                if (systemName) {\n                    request['filter:systemNameEqual']=systemName;\n                }\n                return kalturaAPICaller.call(request);\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIliveQnaService', function (kalturaAPICaller) {\n        var tag='qna';\n        return {\n\n            list: function (mediaEntryId,responseProfileSystemName, from,upTo) {\n                var params = {\n                    service: \"cuepoint_cuepoint\",\n                    action: \"list\",\n                    'filter:objectType': 'KalturaAnnotationFilter',\n                    'filter:cuePointTypeEqual': 'annotation.Annotation',\n                    'filter:tagsLike':tag,\n                    \"filter:entryIdEqual\": mediaEntryId,\n                    'filter:orderBy': \"+updatedAt\",\n                    'filter:isPublicEqual': 1\n                };\n\n                if (responseProfileSystemName) {\n                    params['responseProfile:objectType']=\"KalturaResponseProfileHolder\";\n                    params[\"responseProfile:systemName\"]=responseProfileSystemName;\n                }\n\n                if (from) {\n                    params[\"filter:updatedAtGreaterThanOrEqual\"] = from;\n                }\n                if(upTo){\n                    params[\"filter:updatedAtLessThanOrEqual\"] = upTo;\n                }\n\n                return kalturaAPICaller.call(params);\n            },\n            addAnnotationCuePoint: function(mediaEntryId,textAnnotation,parentId,videoTimeStamp,searchableOnEntry){\n                klog.info(\"add annotation CuePoint entry=\" + mediaEntryId);\n\n                var params = {\n                    service: \"cuePoint_cuePoint\",\n                    action: \"add\",\n                    \"cuePoint:objectType\": \"KalturaAnnotation\",\n                    \"cuePoint:entryId\": mediaEntryId,\n                    \"cuePoint:text\":textAnnotation,\n                    \"cuePoint:isPublic\": 1\n                };\n\n                if (parentId) {\n                    params[\"cuePoint:parentId\"]=parentId;\n                }\n\n                if (videoTimeStamp){\n                    params[\"cuePoint:startTime\"] = videoTimeStamp;\n                }\n\n                if(searchableOnEntry && searchableOnEntry === true){\n                    params[\"cuePoint:searchableOnEntry\"] = 1;\n                }\n                else{\n                    params[\"cuePoint:searchableOnEntry\"] = 0;\n                }\n\n\n                return kalturaAPICaller.call(params);\n            },\n            updateAnnotationCuePoint: function(cuePointID,time){\n                klog.info(\"updating annotation CuePoint entry=\" + cuePointID);\n\n                var params = {\n                    service: \"cuePoint_cuePoint\",\n                    action: \"update\",\n                    id:cuePointID,\n                    \"cuePoint:objectType\": \"KalturaAnnotation\",\n                    \"cuePoint:endTime\": time\n                };\n\n                return kalturaAPICaller.call(params);\n\n            },\n            updateAnnotationCuePointTag:function(cuePointID, tagsToAdd){\n               // klog.info(\"updating annotation CuePoint entry=\" + cuePointID+\" adding annotation cue point qna tag.\");\n\n                var params = {\n                    service: \"cuePoint_cuePoint\",\n                    action: \"update\",\n                    id:cuePointID,\n                    \"cuePoint:objectType\": \"KalturaAnnotation\",\n                    \"cuePoint:tags\": tagsToAdd ? tagsToAdd : tag\n\n                };\n\n                return kalturaAPICaller.call(params);\n            }\n\n\n        };\n    });\n\n    angular.module('kAPI').service('kAPIliveQnaMockService', function (kalturaAPICaller) {\n        return {\n            list : function(id,from,to){\n\n                var listPromise = new Promise(function(resolve, reject) {\n\n                    var qnaData = [];\n\n                    function randomString(){\n\n                        var strings = [\n                            \"very short content!,,?\",\n                            \"very long content very long content very long content very long content \" +\n                            \"very long content very long content very long content very long content very \" +\n                            \"long content very long content very long content very long content very long \" +\n                            \"content very long content very long content very long content very long content very \" +\n                            \"long content very long content \",\n                            \"standard content.Hello Can u please help me the ux is amazing but i am too stupid to understand\",\n                            \"very weird chars ^@#$ 2$3242123)(*&^%$#@!)$*!(@#!)$@#\"\n                        ];\n\n\n                        var selected = Math.floor((Math.random() * 4));\n\n                        return strings[selected];\n\n                    }\n                    var size = 0;\n                    if(from === undefined){\n\n                        size = configuration.numberOfMockQnaThreads;\n                    }\n                    else{\n                        if(kserviceInfo.mockQnaUpdates){\n                            //Between 0 to 3 updates;\n                            size = Math.floor((Math.random() * 4));\n                        }\n                    }\n                    for(var i=0; i < size;i++){\n\n                        var creationTime = 0;\n\n                        if(from === undefined) {\n                            creationTime = new Date(1).getTime() / 1000;\n                        }\n                        else{\n                            creationTime = new Date().getTime() / 1000;\n                        }\n                        qnaData[i] = { userId:\"david david david david david david david david\" + i,text : randomString() , createdAt:creationTime,threadID:\"123\"};\n                    }\n\n                    resolve({objects:qnaData});\n\n                    //We might want to simulate a random fail.\n                    //reject(Error(\"It broke\"));\n\n                });\n\n                return listPromise;\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIliveAnalyticsService', function (kalturaAPICaller) {\n        return {\n            get: function (id, action, reportType, fromTime, toTime, liveString) {\n                //var toDate = new Date().getTime();\n                var params = {\n                    service: \"livereports\",\n                    'action': action,\n                    'reportType': reportType,\n                    'filter:entryIds':id\n                };\n\n                if (fromTime !== undefined) {\n                    $.extend(params,{'filter:fromTime': fromTime.toString(), 'filter:toTime': toTime.toString()});\n                }\n\n\n                var retval = kalturaAPICaller.call(params);\n\n                return retval;\n            }\n        };\n    });\n\n\n    angular.module('kAPI').service('kAPIProducerActionsService', function (kalturaAPICaller){\n        return {\n            createCodeCuepointAction : function(actionData) {\n                if (!actionData || !_.every(['actionId', 'mediaEntryId', 'actionContent', 'actionName'], _.partial(_.has, actionData))) {\n                    throw new Error('missing required properties');\n                }\n\n                klog.debug('new code cue point data {0}', actionData);\n\n\n                klog.info(\"adding code cue point for action '\" + actionData.actionName + \"' (id '\" + actionData.actionId + \"')\");\n\n                var tags = actionData.actionName + ',id:' + actionData.actionId;\n\n                var request = {\n                    service: \"cuePoint_cuePoint\",\n                    action: \"add\",\n                    \"cuePoint:objectType\": \"KalturaCodeCuePoint\",\n                    \"cuePoint:code\": '{\"message\" : \"content inside partner data\"}',\n                    \"cuePoint:partnerData\": JSON.stringify(actionData.actionContent),\n                    \"cuePoint:entryId\": actionData.mediaEntryId,\n                    \"cuePoint:tags\": tags\n                };\n\n                return kalturaAPICaller.call(request);\n            }\n        };\n    });\n\n\n    angular.module('kAPI').service('kAPIcuePointService', function (kalturaAPICaller) {\n        return {\n            CUE_POINT_STATUS: {READY:1, DELETED:2, HANDLED:3, PENDING:4},\n            get:function(id) {\n                var params = {\n                    service: \"cuepoint_cuepoint\",\n                    action: \"get\",\n                    \"id\": id\n                };\n                return kalturaAPICaller.call(params);\n            },\n            update: function (id,type,code) {\n                var params = {\n                    service: \"cuepoint_cuepoint\",\n                    action: \"update\",\n                    \"id\": id,\n                    \"cuePoint:objectType\": type\n                };\n                if (code) {\n                    params[\"cuePoint:code\"] = code;\n                }\n                return kalturaAPICaller.call(params);\n            },\n\n            updateStatus: function (id,status) {\n                var request = {\n                    service: \"cuepoint_cuepoint\",\n                    action: \"updateStatus\",\n                    \"id\": id,\n                    \"status\": status\n                };\n                return kalturaAPICaller.call(request);\n\n            },\n            list : function()\n            {\n                var requestData = null;\n                if (arguments.length > 1)\n                {\n                    requestData = {\n                        mediaEntryId : arguments[0],\n                        types : arguments[1],\n                        minimumUpdatedAt : arguments.length > 2 ? arguments[2] : null,\n                        minimumCreatedAt : null,\n                        tags : arguments.length > 3 ? arguments[3] : null\n                    };\n                }else\n                {\n                    requestData = arguments[0];\n                }\n\n                if (!_.every(['mediaEntryId','types'], _.partial(_.has,requestData)))\n                {\n                    throw new Error('missing required properties');\n                }\n\n                klog.debug(\"service: 'cuepoint_cuepoint', action : 'list',  for media id '{0}' data {1}\", requestData.mediaEntryId,requestData);\n\n                var request = {\n                    service: \"cuepoint_cuepoint\",\n                    action: \"list\",\n                    'filter:objectType': 'KalturaCuePointFilter',\n                    \"filter:entryIdEqual\": requestData.mediaEntryId,\n                    'filter:orderBy': '+updatedAt'\n                };\n\n                if (requestData.types) {\n                    request[\"filter:cuePointTypeIn\"]=requestData.types;\n                }\n\n                if (requestData.minimumUpdatedAt) {\n                    request[\"filter:updatedAtGreaterThanOrEqual\"] = requestData.minimumUpdatedAt;\n                }\n\n                if (requestData.minimumCreatedAt) {\n                    request[\"filter:createdAtGreaterThanOrEqual\"] = requestData.minimumCreatedAt;\n                }\n\n                if (requestData.tags) {\n                    request[\"filter:tagsMultiLikeOr\"] = requestData.tags;\n                }\n\n                return kalturaAPICaller.call(request, true);\n            },\n\n            add: function (mediaEntryId, title, description,partnerData,tags) {\n                klog.info(\"addCuePoint entry=\" + mediaEntryId + \" title=\" + title);\n\n                var params = {\n                    service: \"cuePoint_cuePoint\",\n                    action: \"add\",\n                    \"cuePoint:objectType\": \"KalturaThumbCuePoint\",\n                    \"cuePoint:entryId\": mediaEntryId,\n                    \"cuePoint:subType\": 1   //slide and not chapter\n                };\n\n                if (title) {\n                    params[\"cuePoint:title\"] = title;\n                }\n                if (description) {\n                    params[\"cuePoint:description\"] = description;\n                }\n                if (partnerData) {\n                    params[\"cuePoint:partnerData\"] = _.isObject(partnerData) ? JSON.stringify(partnerData) : partnerData;\n                }\n\n                if (tags) {\n                    params[\"cuePoint:tags\"] = tags;\n                }\n                return kalturaAPICaller.call(params);\n            },\n\n            createCodeCuePoint : function(cuePointData)\n            {\n                if (!_.every(['mediaEntryId','code','tags'], _.partial(_.has,cuePointData)) && !_.every(['mediaEntryId','partnerData','tags'], _.partial(_.has,cuePointData)))\n                {\n                    throw new Error('missing required properties');\n                }\n\n                var requestCodeValue = null;\n                if (!cuePointData.code && cuePointData.partnerData)\n                {\n                    requestCodeValue =  {message : 'content inside partner data'};\n                }else\n                {\n                    requestCodeValue = cuePointData.code;\n                }\n\n                klog.info(\"add code cue point entry for media id \" + cuePointData.mediaEntryId);\n                klog.debug('new code cue point data {0}',cuePointData);\n\n                var request = {\n                    service: \"cuePoint_cuePoint\",\n                    action: \"add\",\n                    \"cuePoint:objectType\": \"KalturaCodeCuePoint\",\n                    \"cuePoint:code\": _.isObject(requestCodeValue) ? JSON.stringify(requestCodeValue) : requestCodeValue,\n                    \"cuePoint:entryId\": cuePointData.mediaEntryId,\n                    \"cuePoint:tags\" : cuePointData.tags\n                };\n\n                if (cuePointData.partnerData) {\n                    request[\"cuePoint:partnerData\"] = _.isObject(cuePointData.partnerData) ? JSON.stringify(cuePointData.partnerData) : cuePointData.partnerData;\n                }\n\n                if (cuePointData.startTime) {\n                    request[\"cuePoint:startTime\"] = cuePointData.startTime;\n                }\n\n                if (cuePointData.systemName) {\n                    request[\"cuePoint:systemName\"] = cuePointData.systemName;\n                }\n\n                if (cuePointData.description) {\n                    request[\"cuePoint:description\"] = cuePointData.description;\n                }\n                return kalturaAPICaller.call(request);\n            },\n            updateCodeCuePoint : function(cuePointId, cuePointData) {\n\n                var request = {\n                    service: \"cuepoint_cuepoint\",\n                    action: \"update\",\n                    \"id\": cuePointId,\n                    \"cuePoint:objectType\": \"KalturaCodeCuePoint\"\n                };\n\n                if (cuePointData.partnerData) {\n                    request[\"cuePoint:partnerData\"] = _.isObject(cuePointData.partnerData) ? JSON.stringify(cuePointData.partnerData) : cuePointData.partnerData;\n                }\n                if (cuePointData.code) {\n                    request[\"cuePoint:code\"] = _.isObject(cuePointData.code) ? JSON.stringify(cuePointData.code) : cuePointData.code;\n                }\n\n                return kalturaAPICaller.call(request);\n            },\n            createAnnotationCuePoint : function (cuePointData)\n            {\n                if (!_.every(['mediaEntryId','text','partnerData','tags'], _.partial(_.has,cuePointData))) {\n                    throw new Error('missing required properties');\n                }\n\n                klog.info(\"add code annotation cue point for media id \" + cuePointData.mediaEntryId);\n                klog.debug('new annotation cue point data {0}',cuePointData);\n\n                var request = {\n                    service: \"cuePoint_cuePoint\",\n                    action: \"add\",\n                    \"cuePoint:objectType\": \"KalturaAnnotation\",\n                    \"cuePoint:entryId\": cuePointData.mediaEntryId,\n                    \"cuePoint:isPublic\": 1,\n                    \"cuePoint:searchableOnEntry\" : 1,\n                    \"cuePoint:tags\" : cuePointData.tags,\n                    \"cuePoint:partnerData\" :\n                        _.isObject(cuePointData.partnerData) ?\n                            JSON.stringify(cuePointData.partnerData) : cuePointData.partnerData,\n                    \"cuePoint:text\" :\n                        _.isObject(cuePointData.text) ? JSON.stringify(cuePointData.text) : cuePointData.text\n                };\n\n                if (cuePointData.parentId)\n                {\n                    request[ \"cuePoint:parentId\"] = cuePointData.parentId;\n                }\n\n                return kalturaAPICaller.call(request);\n            },\n            updateAnnotationCuePoint : function (cuePointId, cuePointData)\n            {\n                if(!_.isObject(cuePointData.text) && !_.isObject(cuePointData.partnerData)) {\n                    throw new Error('missing required properties');\n                }\n\n                klog.info(\"updating annotation CuePoint: \" + cuePointId);\n\n                var request = {\n                    service: \"cuePoint_cuePoint\",\n                    action: \"update\",\n                    id:cuePointId,\n                    \"cuePoint:objectType\": \"KalturaAnnotation\",\n                };\n                if(cuePointData.data) {\n                    request[\"cuePoint:partnerData\"] = _.isObject(cuePointData.partnerData) ?\n                                                    JSON.stringify(cuePointData.partnerData) : cuePointData.partnerData;\n                }\n                if(cuePointData.text) {\n                    request[\"cuePoint:text\"] = _.isObject(cuePointData.text) ?\n                                                JSON.stringify(cuePointData.text) : cuePointData.text;\n                }\n\n                if (cuePointData.parentId)\n                {\n                    request[ \"cuePoint:parentId\"] = cuePointData.parentId;\n                }\n\n                return kalturaAPICaller.call(request);\n            },\n            addCodeCuePoint: function (mediaEntryId,systemName, startTime, code, description, tags) {\n                //** NOTE - this function is obslete, use function 'createCodeCuePoint' instead **//\n                return this.createCodeCuePoint({\n                    mediaEntryId : mediaEntryId,\n                    systemName : systemName,\n                    code:code,\n                    description:description,\n                    tags : tags,\n                    startTime:startTime\n                });\n            },\n            delete: function (id) {\n                return kalturaAPICaller.call({\n                    service: \"cuePoint_cuePoint\",\n                    action: \"delete\",\n                    \"id\": id\n                }).then(function (result) {\n                    klog.info(\"deleted cuepoint '\" + id + \"' \");\n                }, function(err){\n                    klog.error(\"failed to delete cue point #\" + id + \" \" + err);\n                });\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIPollsService', function (kalturaAPICaller){\n       return {\n           addPollObject: function () {\n               klog.info(\"creating poll object\");\n\n               var params = {\n                   service: \"poll_poll\",\n                   action: \"add\",\n                   \"pollType\": \"SINGLE_ANONYMOUS\"\n               };\n\n               return kalturaAPICaller.call(params);\n           },\n\n           resetVotes:function(pollId,answerIds) {\n\n               klog.info(\"resetVotes for pollId [\" + pollId + \"] answerIds [\"+answerIds+\"]\");\n\n               var params = {\n                   service: \"poll_poll\",\n                   action: \"resetVotes\",\n                   \"pollId\": pollId,\n                   \"answerIds\": answerIds.join(',')\n               };\n               return kalturaAPICaller.call(params);\n           },\n\n           getPollVotes: function (pollId, answerIds) {\n               klog.info(\"getPollVotes for pollId [\" + pollId + \"] \");\n\n               var params = {\n                   service: \"poll_poll\",\n                   action: \"getVotes\",\n                   \"pollId\": pollId,\n                   \"answerIds\": answerIds\n               };\n               return kalturaAPICaller.call(params);\n           },\n\n           getVotes: function (pollId, answers) {\n               var _this = this;\n               var answerAsString = answers.join(\",\");\n               return _this.getPollVotes(pollId, answerAsString).then(function (item) {\n                       if (angular.isObject(item)) {\n                           Promise.resolve(item);\n                       } else\n                       if (angular.isString(item)) {\n                           return Promise.resolve(JSON.parse(item));\n                       }\n                   }, function (err) {\n                       klog.error(\"Failed to get votes for pollId: \" + pollId + \" :\" + err);\n                       return Promise.reject(err);\n                   })\n                   .catch(function (err) {\n                       klog.error(\"Error while getting votes for pollId: \" + pollId + \" :\" + err);\n                       return Promise.reject(err);\n                   });\n           },\n\n           voteAsPlayer : function(mediaEntryId, pollId, metadataProfileId, answerId, userId){\n               var params = {\n                   \"service\": \"cuePoint_cuePoint\",\n                   \"action\": \"add\",\n                   \"cuePoint:objectType\": \"KalturaAnnotation\",\n                   \"cuePoint:entryId\": mediaEntryId,\n                   \"cuePoint:isPublic\": 0,\n                   \"cuePoint:searchableOnEntry\": 0,\n                   \"cuePoint:tags\": 'id:' + pollId\n               };\n\n               var params2 = {\n                   service: \"metadata_metadata\",\n                   action: \"add\",\n                   metadataProfileId: metadataProfileId,\n                   objectId: \"{1:result:id}\",\n                   xmlData: '<metadata><Answer>' + answerId + '</Answer><UserId>' + userId + '</UserId></metadata>',\n                   objectType: \"annotationMetadata.Annotation\"\n               };\n\n               kalturaAPICaller.startMultirequest();\n               kalturaAPICaller.call(params);\n               kalturaAPICaller.call(params2);\n               return kalturaAPICaller.execMultirequest();\n           }\n       };\n    });\n\n    angular.module('kAPI').service('kAPIdocumentService', function (kalturaAPICaller, kAPIbaseEntryService) {\n        return {\n            addFromUploadedFile : function(context)\n            {\n                if (!context || !_.every(['entryId','uploadTokenId','fileName'], _.partial(_.has,context)))\n                {\n                    return Promise.reject({message : 'missing required arguments'});\n                }\n\n                //get current entry\n                return kAPIbaseEntryService.get(context.entryId).then(\n                    function (result)\n                    {\n                        var coEditors = result['entitledUsersEdit'] + \",\" + result['userId'];\n                        var coPublishers = result['entitledUsersPublish'] + \",\" + result['userId'];\n                        var pdfExtentions = '.pdf';\n                        var conversionProfileId = context.fileName.substr(-pdfExtentions.length) === pdfExtentions ?\n                            configuration.presentationConversionPdfProfileId : configuration.presentationConversionProfileId;\n\n                        //add new document entry\n                        return kalturaAPICaller.call({\n                            service: \"document_documents\",\n                            action: \"addfromuploadedfile\",\n                            uploadTokenId : context.uploadTokenId,\n                            \"documentEntry:parentEntryId\" : context.entryId,\n                            \"documentEntry:entitledUsersEdit\" : coEditors,\n                            \"documentEntry:entitledUsersPublish\" : coPublishers,\n                            \"documentEntry:objectType\":\"KalturaDocumentEntry\",\n                            \"documentEntry:description\" : context.fileName,\n                            \"documentEntry:type\" : 10,\n                            \"documentEntry:conversionProfileId\" : conversionProfileId,\n                            \"documentEntry:documentType\" : 13\n                        });\n                    \n                    },\n                    function (err)\n                    {\n                        return Promise.reject(err);\n                    }\n                );\n            },\n            getDocumentEntryById: function (id) {\n\n                return kalturaAPICaller.call({\n                    service: \"document_documents\",\n                    action: \"get\",\n                    entryId: id\n                    //This should be loaded from enums.,\"statusln\":\"Hello world PHP.\"\n                });\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIthumbAssetService', function (kalturaAPICaller) {\n        return {\n            list: function (mediaEntryId) {\n                return kalturaAPICaller.call({\n                    service: \"thumbAsset\",\n                    action: \"list\",\n                    \"filter:entryIdEqual\": mediaEntryId\n                });\n            },\n            delete: function (id) {\n                klog.info(\"delete  thumbAsset=\" + id);\n                kalturaAPICaller.call({\n                    service: \"thumbasset\",\n                    action: \"delete\",\n                    \"thumbAssetId\": id\n                }).then(function (result) {\n                    klog.info(\"deleted thumb asset '\" + id + \"' \");\n                    return Promise.resolve(result);\n                });\n            },\n            add: function (mediaEntryId, cuePointId) {\n                klog.info(\"addthumbAsset entry=\" + mediaEntryId + \" cuePointId=\" + cuePointId);\n                return kalturaAPICaller.call({\n                    service: \"thumbAsset\",\n                    action: \"add\",\n                    \"thumbAsset:objectType\": \"KalturaTimedThumbAsset\",\n                    \"entryId\": mediaEntryId,\n                    \"thumbAsset:cuePointId\": cuePointId\n                });\n            },\n            setContent: function (id, imageURL) {\n                klog.info(\"thumbAssetadded setting content for id=\" + id + \" imageUrl=\" + imageURL);\n                return kalturaAPICaller.call({\n                    service: \"thumbAsset\",\n                    action: \"setContent\",\n                    \"contentResource:objectType\": \"KalturaUrlResource\",\n                    \"contentResource:url\": imageURL,\n                    id: id\n                });\n            },\n            getUrl: function (assetId) {\n                klog.info(\"get url from assetId=\" + assetId );\n                return kalturaAPICaller.call({\n                    service: \"thumbAsset\",\n                    action: \"getUrl\",\n                    id: assetId\n                });\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIflavorAssetService', function (kalturaAPICaller) {\n        return {\n            list: function (entryId, tagsLike) {\n                return kalturaAPICaller.call({\n                    service: \"flavorAsset\",\n                    action: \"list\",\n                    \"filter:entryIdIn\": entryId,\n                    \"filter:tagsLike\": tagsLike\n                });\n            },\n            getUrl: function (flavorId,fileName,replaceKS) {\n                return kalturaAPICaller.call({\n                    service: \"flavorAsset\",\n                    action: \"getUrl\",\n                    id: flavorId,\n                    \"options:objectType\":\"KalturaFlavorAssetUrlOptions\",\n                    \"options:fileName\":fileName\n                }).then( function(url) {\n                    if (replaceKS) {\n                        url = url.replace(/\\/ks\\/([^\\/]+)\\//gi, '/ks/' + kalturaAPICaller.getKS() + '/');\n                    }\n                    return url;\n                });\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIUIConfService', function (kalturaAPICaller) {\n        return {\n            UI_CONF_TYPES: {KALTURA_WEBCASTING_STUDIO: 21},\n            get: function (id) {\n                return kalturaAPICaller.call({\n                    service: \"uiConf\",\n                    action: \"get\",\n                    \"id\": id\n                });\n            },\n            listTemplates: function(filterParameters) {\n\n                var request = {\n                    service: \"uiConf\",\n                    action: \"listTemplates\"\n                };\n\n                if (filterParameters) {\n                    request[\"filter:objectType\"] = \"KalturaUiConfFilter\";\n                    for (var property in filterParameters) {\n                        request[\"filter:\" + property] = filterParameters[property];\n                    }\n                }\n\n                return kalturaAPICaller.call(request);\n            },\n            list: function(uiConfParametersObject) {\n                var request = {\n                    service: \"uiconf\",\n                    action: \"list\"\n                };\n\n                if (uiConfParametersObject) {\n                    request[\"filter:objectType\"] = \"KalturaUiConfFilter\";\n                    for (var property in uiConfParametersObject) {\n                        request[\"filter:\" + property] = uiConfParametersObject[property];\n                    }\n                }\n\n                return kalturaAPICaller.call(request);\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPIliveAnalyticsServiceMock', function (kalturaAPICaller, kAPISystemService) {\n        \n        var mockTime=false;\n\n\n        if (mockTime) {\n\n            var firstTime = new Date();\n            var pace = 1;\n            var offset=1000;\n\n             kAPISystemService.getServerTime = function () {\n                    var now = new Date();\n\n                    return offset+ firstTime.getTime() + (now.getTime() - firstTime.getTime()) * pace;\n                };\n        }\n\n\n\n        var historyInMinutes=40*1; //2 hours\n        var futureInMinutes=60*10; // 10 hours\n        var interval=10*1000;\n\n        var graphOffsetInTime=kAPISystemService.getServerTime()-historyInMinutes*60*1000;//convert into seconds\n\n        var currentTimeInSeconds=graphOffsetInTime;\n        var endTimeInSeconds=kAPISystemService.getServerTime()+futureInMinutes*60*1000;\n\n        var generatedGraph=[];\n        var index=0;\n\n        while (currentTimeInSeconds<endTimeInSeconds) {\n            var value=Math.max(0,Math.floor(index*10+1000*Math.sin(index/100*3.14*2)));\n            var bufferTime=Math.random()*100;\n            generatedGraph.push( { time: currentTimeInSeconds, audience:value, peakAudience:value, avgBitrate:(value+7), bufferTime:bufferTime });\n            currentTimeInSeconds+=interval;\n            index++;\n        }\n\n        var currentGraphIndex=function() {\n            var index=Math.floor((kAPISystemService.getServerTime() -graphOffsetInTime)/interval); //10 seconds interval\n            return Math.max(0,Math.min(generatedGraph.length-1,index));\n        };\n\n        return {\n            get: function (id, action, reportType, fromTime, toTime, liveString) {\n\n                var currentIndex=currentGraphIndex();\n\n                if (action===\"getreport\") {\n\n                    if (reportType===\"ENTRY_TOTAL\") {\n                        var result = {\n                            objects: [generatedGraph[currentIndex]]\n                        };\n                        return result;\n                    }\n                }\n                if (action===\"getevents\") {\n\n                    var data = \"\";\n                    var current=Math.floor(kAPISystemService.getServerTime()/1000);\n                    for (var i=0;i<=currentIndex;i++) {\n                        var dataTime=Math.floor(generatedGraph[i].time/1000);\n                        if (dataTime>=current+fromTime &&\n                            dataTime<=current+toTime) {\n                            data += dataTime + \",\" + generatedGraph[i].audience + \";\";\n                        }\n                    }\n                    return  [ { data : data }];\n                }\n                return null;\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPISystemService', function (kalturaAPICaller) {\n\n        var serverTimeDiff = 0;\n\n        // when using jsonp we do not get http headers since the request is actually done by the browser\n        // so this is a simple http\n        function getTimeFromServer()\n        {\n            kalturaAPICaller.call({ service: \"system\", action: \"getTime\"}).then(\n                function(data){\n                    serverTimeDiff = new Date().getTime() - data*1000;\n                    klog.debug('got ' + data + ' from server. Setting serverTimeDiff to '+ serverTimeDiff);\n                });\n        }\n        var timer = setInterval(function(){getTimeFromServer();}, 10*1000);\n\n        return {\n            get: function (id) {\n                return kalturaAPICaller.call({\n                    service: \"uiConf\",\n                    action: \"get\",\n                    \"id\": id\n                });\n            },\n            getServerTime : function(){\n                return (new Date().getTime()) - serverTimeDiff;\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kAPILiveStreamService', function (kalturaAPICaller) {\n\n        return {\n            isLive: function (mediaEntryId) {\n                return kalturaAPICaller.call({\n                    service: \"liveStream\",\n                    action: \"isLive\",\n                    id: mediaEntryId,\n                    protocol: \"rtmp\"\n                });\n            },\n            update: function (mediaEntryId, liveEntryPropertiesObject) {\n                var apiCallParameter = {\n                    service: \"liveStream\",\n                    action: \"update\",\n                    entryId: mediaEntryId\n                };\n                if (liveEntryPropertiesObject) {\n                    apiCallParameter[\"liveStreamEntry:objectType\"] = \"KalturaLiveStreamEntry\";\n                    for (var property in liveEntryPropertiesObject) {\n                        var key = 'liveStreamEntry:' + property;\n                        apiCallParameter[key] = liveEntryPropertiesObject[property];\n                    }\n                }\n                return kalturaAPICaller.call(apiCallParameter);\n            },\n            allocateConferenceRoom: function(mediaEntryId, env) {\n                if (kserviceInfo.mockConfServer) {\n                    return Promise.resolve(kserviceInfo.mockConfServer);\n                }\n                var apiCallParameter = {\n                    service: \"liveStream\",\n                    action: \"allocateConferenceRoom\",\n                    entryId: mediaEntryId\n                };\n                if (env)\n                {\n                    apiCallParameter.env = env;\n                }\n                return kalturaAPICaller.call(apiCallParameter);\n            }\n        };\n    });\n\n\n    angular.module('kAPI').service('kEventNotificationTemplate', function (kalturaAPICaller) {\n\n        return {\n            sendCommand: function (command,templateName,eventParams) {\n                var request = {\n                    service: \"eventNotification_eventNotificationTemplate\",\n                    action: \"sendCommand\",\n                    command: command,\n                    \"notificationTemplateSystemName\": templateName,\n                    \"pushNotificationParams:objectType\": \"KalturaPushNotificationParams\"\n                };\n                var index=0;\n                _.each( eventParams, function(value,key) {\n                    request[\"pushNotificationParams:userParams:item\"+index+\":objectType\"]=\"KalturaPushNotificationParams\";\n                    request[\"pushNotificationParams:userParams:item\"+index+\":key\"]=key;\n                    request[\"pushNotificationParams:userParams:item\"+index+\":value:objectType\"]=\"KalturaStringValue\";\n                    request[\"pushNotificationParams:userParams:item\"+index+\":value:value\"]=value;\n                    index++;\n                });\n\n                return kalturaAPICaller.call(request);\n            }\n        };\n    });\n\n    angular.module('kAPI').service('kEntryServerNodeService', function (kalturaAPICaller) {\n\n        return {\n            list: function (entryId, type) {\n                var request = {\n                    service: \"entryservernode\",\n                    action: \"list\",\n                    \"filter:objectType\":\"KalturaEntryServerNodeFilter\",\n                    \"filter:entryIdIn\":entryId,\n                    \"filter:serverTypeIn\":type\n                };\n                return kalturaAPICaller.call(request);\n            }\n        };\n    });\n\n    angular.module('kAPI').factory('kalturaAPI',function(kalturaAPICaller, $http, kserviceinfo, $injector) {\n\n        return {\n            startMultirequest: kalturaAPICaller.startMultirequest,\n            execMultirequest: kalturaAPICaller.execMultirequest,\n            sessionService: $injector.get('kAPISessionService'),\n            responseProfileService: $injector.get('kAPIResponseProfileService'),\n            baseEntryService: $injector.get('kAPIbaseEntryService'),\n            metadataProfileService: $injector.get('kAPIMetadataProfileService'),\n            metadataService: $injector.get('kAPIMetadataService'),\n            flavorAssetService: $injector.get('kAPIflavorAssetService'),\n            thumbAssetService: $injector.get('kAPIthumbAssetService'),\n            cuePointService: $injector.get('kAPIcuePointService'),\n            qnaService : kserviceInfo.mockQnaApi ? $injector.get('kAPIliveQnaMockService') : $injector.get('kAPIliveQnaService'),\n            pollsService : $injector.get('kAPIPollsService'),\n            producerActionsService : $injector.get('kAPIProducerActionsService'),\n            liveAnalyticsService: kserviceInfo.mockAnalyticsAPI ? $injector.get('kAPIliveAnalyticsServiceMock') : $injector.get('kAPIliveAnalyticsService'),\n            documentService : $injector.get('kAPIdocumentService'),\n            UIConfService: $injector.get('kAPIUIConfService'),\n            liveStreamService: $injector.get('kAPILiveStreamService'),\n            eventNotificationTemplate:$injector.get('kEventNotificationTemplate'),\n            entryServerNode:$injector.get('kEntryServerNodeService'),\n            login: kalturaAPICaller.login,\n            getServerTime : $injector.get('kAPISystemService').getServerTime\n        };\n    });\n\n})();\n","/* globals kserviceInfo */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n\n\n    angular.module('kAPI').service('kalturaService',  function( $injector, $http, kalturaAPI, gettextCatalog, $interval, $timeout, $q) {\n        var sessionSrv;\n\n        function delay(fn,t) {\n            return new Promise( function(s,f) {\n                $timeout( function() {\n                    fn().then(s).catch(f);\n                },t);\n            });\n        }\n\n\n\n        var oneMinute=60*1000;\n        var check_ks_expiry_in_progress=false;\n        function check_ks_expiry() {\n            klog.debug(\"check_ks_expiry\");\n            kalturaAPI.login().then(function () {\n                if (kserviceInfo.ks_expiry &&\n                    (new Date().getTime() > kserviceInfo.ks_expiry.getTime() - 4 * 60 * oneMinute)) { //check 4 hours min.\n\n                    klog.error(\"KS has expeired!! ({0} vs {1})  check_ks_expiry_in_progress={2}\", new Date(),\n                        kserviceInfo.ks_expiry, check_ks_expiry_in_progress);\n\n                    if (!check_ks_expiry_in_progress) {\n                        check_ks_expiry_in_progress = true;\n\n                        var kdialogService = $injector.get('kdialog');\n                        kdialogService.alert(gettextCatalog.getString(\"Application session has expired<br>Please re-launch\"), false).then(function () {\n                            check_ks_expiry_in_progress = false;\n                        }, function () {\n                            check_ks_expiry_in_progress = false;\n                        });\n                    }\n                }\n            });\n        }\n\n        //return MMMDDYYYY date from unix timestamp\n        function getDateFromTimestamp(timestamp)\n        {\n            var a = new Date(timestamp * 1000);\n            var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n            var year = a.getFullYear();\n            var month = months[a.getMonth()];\n            var date = a.getDate();\n            var time = month + ' '+date + ' '+year;\n            time=a.toDateString();\n            return time;\n        }\n\n        check_ks_expiry();\n        $interval(check_ks_expiry,10*oneMinute);//check every 10 min.\n\n        return {\n\n            isLive: function (mediaEntryId) {\n                return kalturaAPI.login().then( function () {\n                    return  kalturaAPI.liveStreamService.isLive(mediaEntryId);\n                },function(fail) {\n                    return Promise.reject(fail);\n                });\n            },\n\n            getLiveEntryInfo: function(entryId) {\n\n                return kalturaAPI.login().then( function () {\n\n                    var liveEntryInfo = kalturaAPI.baseEntryService.get(entryId);\n\n                    return liveEntryInfo;\n                },function(fail) {\n                    return Promise.reject(fail);\n                });\n            },\n\n\n            updateLiveEntryInfo: function(entryId, parametersObj) {\n                return kalturaAPI.login().then( function () {\n\n                   return  kalturaAPI.liveStreamService.update(entryId, parametersObj);\n\n                }, function(fail) {\n                    return Promise.reject(fail);\n                });\n            },\n\n            getDocumentSlides : function(docEntryId) {\n                klog.info(\"kalturaService.getDocumentSlides(): getDocumentSlides docEntryId=\" + docEntryId);\n\n                if (docEntryId) {\n                    if (docEntryId===\"MOCKSLIDES\") {\n                        return Promise.resolve({slidesUrl: configuration.mockSlides, document:{ description: \"mock\" }});\n                    }\n                    return kalturaAPI.login().then (function(result) {\n                        var url=null;\n                        kalturaAPI.startMultirequest();\n                        return kalturaAPI.execMultirequest([\n                            kalturaAPI.documentService.getDocumentEntryById(docEntryId),\n                            kalturaAPI.flavorAssetService.list(docEntryId,\"images\"),\n                            kalturaAPI.flavorAssetService.list(docEntryId,\"source\"),\n                            kalturaAPI.flavorAssetService.getUrl(\"{2:result:objects:0:id}\",'metadata.xml',true)\n                                .then( function(metadataUrl) {\n                                    url = metadataUrl;\n                            })]).then(function(results){\n                                klog.info(\"base url for \"+docEntryId+ \" \"+url);\n                                return Promise.resolve({ slidesUrl:url, document:results[0], fileExt: results[2].objects[0].fileExt});\n                        });\n\n                    });\n                }else\n                {\n                    return Promise.reject();\n                }\n            },\n\n            deleteRecordedEntry : function(mediaEntryId) {\n                return kalturaAPI.liveStreamService.update(mediaEntryId, { recordedEntryId: null, redirectEntryId: null });\n            },\n\n            clearPushServerNotifications:function(entryId,pushServerNotificationsToClear) {\n                var promises=[];\n                var params =  {\n                    entryId: entryId\n                };\n                _.each(pushServerNotificationsToClear,function(templateName) {\n                    promises.push(kalturaAPI.eventNotificationTemplate.sendCommand(\"CLEAR_QUEUE\",templateName,params).catch(function(err) {\n                        klog.info(\"Exception while calling  eventNotificationTemplate:CLEAR_QUEUE \"+JSON.stringify(err));\n                        return $q.resolve();\n                    }));\n                });\n                return $q.all(promises);\n\n            },\n\n            getServerTime: function(){\n\n                return kalturaAPI.getServerTime();\n            },\n\n            getAverageRates : function(entryID, start, end){\n                return kalturaAPI.login().then(function() {\n                    return kalturaAPI.liveAnalyticsService.get(entryID, \"getreport\", \"ENTRY_TOTAL\", start, end, 1);\n                });\n            },\n\n            getLiveEntryTimeline : function(entryID, start, end){\n                return kalturaAPI.login().then(function() {\n                    return kalturaAPI.liveAnalyticsService.get(entryID, \"getevents\", \"ENTRY_TIME_LINE\", start, end);\n                });\n            },\n\n            updateVODEntryAfterArchive : function (vodEntryId,liveEntry){\n                if(vodEntryId) {\n                    return kalturaAPI.login().then(function() {\n                        return kalturaAPI.baseEntryService.get(vodEntryId).then(function (vodEntry) {\n                            var vodCreationTime = vodEntry.createdAt;\n                            var vodCreateDate = getDateFromTimestamp(vodCreationTime);\n                            var updateParams = {\n                                \"baseEntry:name\" : vodEntry.name + ' ' + vodCreateDate,\n                                \"baseEntry:description\" : liveEntry.description,\n                                \"baseEntry:tags\" : liveEntry.tags,\n                                \"baseEntry:displayInSearch\" : kalturaAPI.baseEntryService.ENTRY_DISPLAY_IN_SEARCH_TYPE.PARTNER_ONLY\n                            };\n                            return kalturaAPI.baseEntryService.update(vodEntryId, updateParams);\n                        }).catch(function (reason) {\n                            return Promise.reject(reason);\n                        });\n                    });\n                } else {\n                    return Promise.resolve('No VOD entry is linked to this live entry');\n                }\n            }\n        };\n    });\n})();\n\n\n","'use strict';\n\nfunction PromisesQueue(filterFn) {\n    this._lastRequest=Promise.resolve();\n    this._delayTimeBetweenSameActionTypeMS = 1000;\n    this._actionNameAndIdMap={};\n    this._lastExecutionTimePerAction={};\n    this._id=0;\n    this._disableSameAction=true;\n    this._filterFn=filterFn;\n    this._pendingActions = 0;\n}\n\nPromisesQueue.prototype.getNumberOfPendingActions = function()\n{\n    return (this._pendingActions);\n};\n\nPromisesQueue.prototype.add=function(func,actionName) {\n\n    var _this=this;\n    var id=++this._id;\n \n    //klog.debug(\"action {0} id={1}\",actionName,id);\n\n    function onActionDone(result,statusMessage)\n    {\n        _this._pendingActions--;\n        statusMessage = statusMessage || '';\n        klog.debug('PromisesQueue.onActionDone(): action \"{0}\" done with status {1}, number of remaining actions in queue = {2}', actionName, statusMessage,_this._pendingActions);\n\n        return result;\n    }\n\n    function handleActionRegistered(result)\n    {\n        _this._actionNameAndIdMap[actionName]=id;\n        _this._pendingActions++;\n        klog.debug('PromisesQueue.onActionDone(): new action \"{0}\" pending invokation, number of actions in queue = {1}', actionName, _this._pendingActions);\n        return result;\n    }\n\n    var processNext=function() {\n        //klog.debug(\"addPromise invoke {0}\",actionName);\n\n        if (_this._disableSameAction && actionName &&\n            _this._actionNameAndIdMap[actionName] &&\n            _this._actionNameAndIdMap[actionName] !== id) {\n\n            klog.debug(\"PromisesQueue.onActionDone(): Request #{0} was cancelled, since there is a newer one ({1})\", id, _this._actionNameAndIdMap[actionName]);\n            return onActionDone(Promise.reject({reason : 'redundant'}), 'cancelled, there is a newer request for that type');\n        }\n\n        //if this action was done before\n        if (_this._lastExecutionTimePerAction[actionName]) {\n            if (_this._lastExecutionTimePerAction[actionName] + _this._delayTimeBetweenSameActionTypeMS >= new Date().getTime()) {\n                var timeToWait = _this._delayTimeBetweenSameActionTypeMS - (new Date().getTime() - _this._lastExecutionTimePerAction[actionName]);\n\n                klog.debug(\"PromisesQueue.onActionDone(): action of type {0} and id {1} was done less than {2} ms ago, waiting {3} ms\", actionName, id, _this._delayTimeBetweenSameActionTypeMS, timeToWait);\n\n                var delay = function(ms) {\n                    return new Promise(function (resolve, reject) {\n                        setTimeout(resolve, ms);\n                    });\n                };\n\n                return delay(timeToWait+1).then(function(){ return processNext(); });\n            }\n        }\n\n        delete _this._actionNameAndIdMap[actionName];\n\n        _this._lastExecutionTimePerAction[actionName] = new Date().getTime();\n\n        if (_this._filterFn) {\n            if (_this._filterFn(_this._actionNameAndIdMap, actionName)) {\n                return onActionDone(Promise.reject({reason : 'ignored'}),'filtered out');\n            }\n        }\n\n        // call the function\n        try {\n            var ret = func();\n            // if someone made a mistake and passed a non-Promise function we want to protect oneself\n            if (ret instanceof Promise){\n                return ret.then(function(result)\n                {\n                    return onActionDone(result,'action resolved');\n                },function(result)\n                {\n                    return onActionDone(Promise.reject(result),'action rejected');\n                });\n            }\n\n            return onActionDone(Promise.resolve(),'action invoked');\n        }\n        catch(e){\n            return onActionDone(Promise.reject(e),'action failed');\n        }\n\n    };\n\n    handleActionRegistered();\n\n    this._lastRequest=this._lastRequest.then(function() {\n        return processNext();\n    }, function(reason) {\n        klog.error(reason);\n        return processNext();\n    });\n\n    return  this._lastRequest;\n\n};\n","/* globals _ */\n/* globals klog */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function Provider() {\n\n        var ArchiveTagsExcludeList = [];\n        var KwpUsedTags = [];\n\n\n        /**************************\n         Service definition\n         ***************************/\n        function CuePointsService($timeout, kalturaAPI) {\n\n            var producerFetchListTag = 'webcast:fetch-list';\n\n            var self = this;\n            var cuePointsList = [];\n            var unHandledCuePoints = [];\n            var lastFetchedCuePointUpdatedAt = 0;\n            var ready = null;\n            var onReady = null;\n            var notifiers = [];\n            var promisesQueue = new PromisesQueue(function (actionNameAndIdMap, actionName) {\n                if (actionName === producerFetchListTag && Object.keys(actionNameAndIdMap).length !== 0) {\n                    klog.info(\"cuepoint list request was cancelled, since there are other add/update command\");\n                    return true;\n                }\n                return false;\n            });\n\n            function suspendCuePointFetching(operationFunction, operationType) {\n                return promisesQueue.add(operationFunction, 'external-' + operationType);\n            }\n\n            function init() {\n                ready = new Promise(function (success, reject) {\n                    onReady = success;\n                });\n\n                fetchCuePoints();\n            }\n\n            function handleArchiveCuePoints(cuePoint) {\n                var tags = cuePoint.tags ?  cuePoint.tags.split(/[\\s,]+/) : [];\n                if (_.intersection(ArchiveTagsExcludeList,tags).length==0) {\n                    var unHandledCuePointFound = false;\n                    for (var j = 0; j < unHandledCuePoints.length; j++) {\n                        if (unHandledCuePoints[j].id === cuePoint.id) {\n                            if (cuePoint.status === kalturaAPI.cuePointService.CUE_POINT_STATUS.HANDLED) {\n                                unHandledCuePoints.splice(j, 1);\n                            }\n                            unHandledCuePointFound = true;\n                            break;\n                        }\n                    }\n                    if (!unHandledCuePointFound && cuePoint.status !== kalturaAPI.cuePointService.CUE_POINT_STATUS.HANDLED) {\n                        unHandledCuePoints.push(cuePoint);\n                    }\n                }\n\n            }\n\n            /**\n             * enriching the current cuepoint with its' action state - 'added' or 'updated'\n             * @param cuePoint\n             */\n            function enrichCuePointWithActionState(cuePoint) {\n\n                var existingCuePointIndex = _.findIndex(cuePointsList, {id : cuePoint.id});\n                var existingCuePoint = existingCuePointIndex === -1 ? null : cuePointsList[existingCuePointIndex];\n\n                var handled = false;\n\n                if (!existingCuePoint) {\n                    klog.debug(\"CuePointsService.enrichCuePointWithActionState(): adding cuepoint with id '{0}'\", cuePoint.id);\n                    cuePointsList.push(cuePoint);\n                    notify(cuePoint, 'cuepoint-added');\n                    cuePoint.actionState = 'added';\n                    handled = true;\n                }else if (existingCuePoint.updatedAt !== cuePoint.updatedAt)\n                {\n                    klog.debug(\"CuePointsService.enrichCuePointWithActionState(): updating cuepoint with id '{0}'\", cuePoint.id);\n                    cuePointsList.splice(existingCuePointIndex,1);\n                    cuePointsList.push(cuePoint);\n                    notify(cuePoint, 'cuepoint-updated');\n                    cuePoint.actionState = 'updated';\n                    handled = true;\n                }\n\n                return handled;\n            }\n\n            function fixCuePointDates(cuePoint) {\n                cuePoint.originalCreatedAt = cuePoint.createdAt;\n                cuePoint.originalUpdatedAt = cuePoint.updatedAt;\n                cuePoint.createdAt = cuePoint.createdAt * 1000;\n                cuePoint.updatedAt = cuePoint.updatedAt * 1000;\n            }\n\n            function fetchCuePoints() {\n\n                var scheduleNext = function () {\n                    $timeout(function () {\n                        fetchCuePoints();\n                    }, 1000);\n                };\n\n                try {\n                    promisesQueue.add(function () {\n                        var tags = KwpUsedTags.join();\n                        return kalturaAPI.cuePointService.list(configuration.MediaEntryId, \"codeCuePoint.Code,thumbCuePoint.Thumb,annotation.Annotation\", lastFetchedCuePointUpdatedAt, tags).then(function (res) {\n                            try {\n\n                                if (promisesQueue.getNumberOfPendingActions() - 1) // reduce 1 which is current iteration\n                                {\n                                    klog.info(\"CuePointsService.fetchCuePoints(): has other pending requests, ignoring list request results\");\n\n                                    return Promise.resolve();\n                                }\n\n                                if (res.objects.length > 0) {\n\n                                    var updatedCuePoints = [];\n                                    res.objects.forEach(function (cuePoint) {\n\n                                        fixCuePointDates(cuePoint);\n\n                                        if(enrichCuePointWithActionState(cuePoint)) {\n                                            handleArchiveCuePoints(cuePoint);\n                                            updatedCuePoints.push(cuePoint);\n                                            lastFetchedCuePointUpdatedAt = cuePoint.originalUpdatedAt;\n                                        }\n                                    });\n\n                                    if (updatedCuePoints.length) {\n                                        notifyNewCuePointsFetched(updatedCuePoints);\n                                    }\n                                }\n\n                                if (onReady !== null) {\n                                    onReady();\n                                    onReady = null;\n                                }\n\n                            }\n                            catch (e) {\n                                klog.error(e);\n\n                            }\n                            return Promise.resolve(res);\n                        });\n                    }, producerFetchListTag).then(function () {\n                        scheduleNext();\n                    }, function () {\n                        scheduleNext();\n                    });\n\n                }\n                catch (e) {\n                    klog.error(e);\n                    scheduleNext();\n\n\n                }\n            }\n\n            function notifyNewCuePointsFetched(cuePoints) {\n\n                if (!_.isArray(cuePoints)) {\n                    cuePoints = [cuePoints];\n                }\n\n                notifiers.forEach(function (notifier) {\n                    try {\n                        if (notifier.event === 'new-cuepoints-fetched') {\n                            notifier.fn(cuePoints);\n                        }\n                    } catch (e) {\n                        klog.error(e);\n                    }\n                });\n            }\n\n            function notify(cuePoint, event) {\n                notifiers.forEach(function (notifier) {\n                    try {\n                        if (notifier.event === event) {\n                            notifier.fn(cuePoint);\n                        }\n                    } catch (e) {\n                        klog.error(e);\n                    }\n                });\n            }\n\n\n            function on(fn, event) {\n                notifiers.push({fn: fn, event : event});\n            }\n\n            function hasUnHandledCuePoints() {\n                return (unHandledCuePoints.length > 0);\n            }\n\n            // delete all cue points from adapter type(s)\n            function handleResetEntryDeleteCuePoint(mediaEntryId) {\n                var cuePointTypes = [];\n\n                return kalturaAPI.cuePointService.list(mediaEntryId, cuePointTypes.join()).then(function (result) {\n                    var cuePoints=result.objects;\n\n                    // put all the cue point IDs in cuePointHash\n                    var cuePointHash = {};\n                    _.each(cuePoints, function(cp){\n                        cuePointHash[cp.id] = 1;\n                    });\n\n                    cuePoints = _.filter(cuePoints, function(cp){\n                        var excludeTagIndex =\n                            _.findIndex(ArchiveTagsExcludeList,\n                                function (tagToExclude)\n                                {\n                                    //tags to exclude strings are a subset of the cue points tags\n                                    //f.e: 'poll-data' is a tag to exclude, in the cue point the tags field will look\n                                    //'poll-data,pollId:<xxxxxxx>'\n                                    return (cp.tags).indexOf(tagToExclude) > -1;\n                                }\n                            );\n                        if (excludeTagIndex < 0){\n                            // if this cue point has a parent and we want to delete it too, don't delete this cue point since it will be auto deleted by the server.\n                            if (cp.parentId && cuePointHash[cp.parentId] === 1) {\n                                return false;\n                            }\n                            return true;\n                        }\n                        return false;\n                    });\n\n                    var promises = [];\n\n                    klog.info(\"found \" + cuePoints.length + \" cue points to delete \");\n                    var chunks = _.chunk(cuePoints, 20);\n                    _.each(chunks,function(chunk){\n                        kalturaAPI.startMultirequest();\n                        _.each(chunk, function(cp){\n                            kalturaAPI.cuePointService.delete(cp.id);\n                        });\n                        promises.push(kalturaAPI.execMultirequest());\n                    });\n\n                    return Promise.all(promises);\n\n                }, function(err){\n                    klog.error(\"failed to delete cue points \" + err);\n                });\n            }\n\n            function getAllCuePoints()\n            {\n                return cuePointsList;\n            }\n\n            function isReady()\n            {\n                return ready;\n            }\n\n            self.hasUnHandledCuePoints = hasUnHandledCuePoints;\n            self.handleResetEntryDeleteCuePoint = handleResetEntryDeleteCuePoint;\n            self.getAllCuepoints = getAllCuePoints;\n            self.isReady = isReady;\n            self.suspendCuePointFetching = suspendCuePointFetching;\n            self.on = on;\n\n            init();\n\n        }\n\n        /*************************\n         Provider functions\n         ************************/\n\n        function addTagToArchiveExcludeList(tag) {\n\n            ArchiveTagsExcludeList.push(tag);\n        }\n\n        function addKwpUsedTags(tag) {\n\n            KwpUsedTags.push(tag);\n        }\n\n        this.addTagToArchiveExcludeList = addTagToArchiveExcludeList;\n        this.addKwpUsedTags = addKwpUsedTags;\n\n        this.$get = function ($injector) {\n\n            return $injector.instantiate(CuePointsService);\n        };\n\n    }\n\n    angular.module('kAPI').provider('cuePointsService', Provider);\n\n})();","(function()\n{\n    \"use strict\";\n\n    var module = angular.module('k-deck-slides',['kProducerActions','gettext', 'kAPI', 'kUI']);\n})();\n\n","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider) {\n        // NOTICE: Several module actions are handled separately in folder 'producer-actions'\n    }\n\n    angular.module('k-deck-slides').config(registerAdapter);\n\n})();","'use strict';\n\n\n\nfunction SlidesUploaderController($scope) {\n    this.template = \"../common/kDeckSlides/partials/slidesUploaderView.html\";\n\n};\n\n\nangular.module('k-deck-slides').controller('slidesUploaderController', SlidesUploaderController);\n","(function(){\n    \"use strict\";\n\n    function service($rootScope, $q,$timeout,slidesService,kalturaAPI)\n    {\n        var processUploadRequestCounter = 0;\n        var self = this;\n\n\n        /**\n         * Performs a repeated check against the server to check when the presentation is ready to be used.\n         * @param entryId\n         * @param attemptsLeft\n         * @returns {*}\n         */\n        function monitorFileUploadStatus(entryId, requestIdentifier, attemptsLeft) {\n\n            var deferred = $q.defer();\n\n            if (!angular.isNumber(attemptsLeft)) {\n                attemptsLeft = configuration.presentationProcessingMaxAttempts;\n            }\n\n            if (attemptsLeft <= 0) {\n                klog.warn('kSlidesUploader.monitorFileUploadStatus(): checking document status maximum attempts reached.');\n                return $q.reject({});\n            }\n            klog.info('kSlidesUploader.monitorFileUploadStatus(): checking document status. Attempt #{0}', attemptsLeft);\n\n            $timeout(function () {\n                kalturaAPI.documentService.getDocumentEntryById(entryId).then(function(result)\n                {\n                    // this function verify that the request was not aborted.\n                    if (requestIdentifier !== processUploadRequestCounter)\n                    {\n                        klog.info('kSlidesUploader.processUpload(): this request with identifier {0} was aborted', requestIdentifier);\n                        return $q.reject({error: {token: 'abort'}});\n                    }\n\n                    return result;\n                }).then(function (result) {\n                    klog.info('kSlidesUploader.monitorFileUploadStatus(): checking document status returned with status {0} ', result.status);\n\n                    if (result.status === 2) {\n                        deferred.resolve({});\n                    }else {\n                        // handle result as failure\n                        return $q.reject({error: { token : 'processing' },message : 'entry status not equals ready status'});\n                    }\n                }).catch(function (reason) {\n\n                    if (reason && reason.error && reason.error.token === 'abort') {\n                        deferred.reject(reason);\n                    }else if (reason && reason.error && reason.error.token === 'processing') {\n                        klog.info('kSlidesUploader.monitorFileUploadStatus(): document slides are still in creation process');\n                        monitorFileUploadStatus(entryId, requestIdentifier, attemptsLeft - 1).then(function (result) {\n                            deferred.resolve(result);\n                        }, function (reason) {\n                            deferred.reject(reason);\n                        });\n                    }else {\n                        deferred.reject(reason);\n\n                    }\n                });\n            }, configuration.presentationProcessingMaxDelay);\n\n            return deferred.promise;\n        }\n\n        function abortProcessUpload()\n        {\n            klog.info('kSlidesUploader.processUpload(): aborting request with identifier {0} was aborted', processUploadRequestCounter);\n            processUploadRequestCounter++;\n        }\n\n        function processUpload(name, token)\n        {\n            var deferred = $q.defer();\n            processUploadRequestCounter++;\n\n            // we use a wrapped function to be able to abort a request (using a local identifier)\n            (function(name, token, requestIdentifier) {\n\n                klog.info('kSlidesUploader.processUpload(): handling upload with name ' + name + ', upload token ' + token + \", request identifier \" + requestIdentifier);\n\n                if (requestIdentifier !== processUploadRequestCounter)\n                {\n                    deferred.reject({error: {token: 'abort'}});\n                }\n                kalturaAPI.documentService.addFromUploadedFile({\n                    entryId: configuration.MediaEntryId,\n                    'uploadTokenId': token,\n                    fileName: name\n                }).then(function(result)\n                {\n                    // this function verify that the request was not aborted.\n                    if (requestIdentifier !== processUploadRequestCounter)\n                    {\n                        klog.info('kSlidesUploader.processUpload(): this request with identifier {0} was aborted', requestIdentifier);\n                        return $q.reject({error: {token: 'abort'}});\n                    }\n\n                    return result;\n                }).then(function (result) {\n                    var entryId = result.id;\n\n                    monitorFileUploadStatus(entryId,requestIdentifier).then(function(result)\n                    {\n                        // this function verify that the request was not aborted.\n                        if (requestIdentifier !== processUploadRequestCounter)\n                        {\n                            klog.info('kSlidesUploader.processUpload(): this request with identifier {0} was aborted', requestIdentifier);\n                            return $q.reject({error: {token: 'abort'}});\n                        }\n\n                        return result;\n                    }).then(function () {\n                        klog.info('kSlidesUploader.processUpload(): document with id {0} is ready (request identifier {1})', entryId, requestIdentifier);\n                        deferred.resolve({entryId: entryId});\n                    },function(reason)\n                    {\n                        klog.error(\"kSlidesUploader.processUpload(): error while processing document entry from upload file with error {0}\", JSON.stringify(reason));\n                        deferred.reject(reason);\n                    });\n\n                }).catch(function (reason) {\n                    klog.error(\"kSlidesUploader.processUpload(): failed to create document entry from upload file with error {0}\", JSON.stringify(reason));\n                    deferred.reject(reason);\n                });\n            })(name,token, processUploadRequestCounter);\n\n            return deferred.promise;\n        }\n\n        var convertSize = function(size){\n            var val = '';\n\n            //  display gigbytes\n            if(Math.floor(size / 1024 / 1024 / 1024) >= 1) {\n                val += Math.round(size / 1024 / 1024 / 1024 * 100)/100 + 'Gb';\n            }\n            // display megabytes if file size more than 5mb\n            // otherwise display kilobytes\n            else if(Math.floor(size / 1024 / 1024) >= 5) {\n                val += Math.round(size / 1024 / 1024 * 100)/100 + 'Mb';\n            }\n            else {\n                val += Math.round(size / 1024, 2) + 'Kb';\n            }\n            return val;\n        };\n\n        function removeSlides()\n        {\n            return slidesService.removeSlides();\n        }\n\n        function replaceSlides(slidesEntryId)\n        {\n            return slidesService.replaceSlides(slidesEntryId);\n        }\n\n\n\n        this.removeSlides = removeSlides;\n        this.abortProcessUpload = abortProcessUpload;\n        this.replaceSlides = replaceSlides;\n        this.convertSize = convertSize;\n        this.processUpload = processUpload;\n\n    }\n\n\n    angular.module('k-deck-slides').service('kSlidesUploader',service);\n\n\n})();\n\n","/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function SlidesService(kalturaService, $http, kdialog, $rootScope, kProducerActions, $q,\n                           kaPlayerViewControlsService, PLAYER_VIEW_MODE, PLAYER_VIEW_STATE)\n    {\n        var self = this;\n\n        var activeDocumentEntryId = '';\n        var loadPromise = null;\n        var presentationSlides = [];\n        var activeDocumentFileName = '';\n        var slidesSize = null;\n        var selectedSlideAsset = null;\n\n\n        function backwardCompatibilityForSlidesFromKMS()\n        {\n            // IMPORTANT: this function must be called after kProducerAction is ready\n            var currentSelectDeckDocument = kProducerActions.getState('actions.select-deck-document',null);\n\n            if (configuration.documentEntryId && !currentSelectDeckDocument)\n            {\n                klog.info(\"loading default presentation provided by KMS with document id \" + configuration.documentEntryId);\n                replaceSlides(configuration.documentEntryId);\n            }\n        }\n\n\n        // register to cuepoint changes only after cuepoint service is ready\n        kProducerActions.isReady().then(function() {\n\n            backwardCompatibilityForSlidesFromKMS();\n\n            syncProducerActions();\n\n            // listen to changes from server and act accordingly\n            kProducerActions.subscribeStateChange(function() {\n                syncProducerActions();\n            });\n        });\n\n        function syncProducerActions()\n        {\n            //docEntry update\n            var deckDocumentId = kProducerActions.getState('actions.select-deck-document.documentEntryId','');\n\n            if ( deckDocumentId !== activeDocumentEntryId) {\n                reload();\n            }\n        }\n\n        function reload()\n        {\n            if (loadPromise) {\n                // make sure we are not currently running and then re-load document\n                loadPromise.finally(function() {\n                    loadPromise = null; // make sure load will run from fresh\n                    load();\n                });\n            }else {\n                load();\n            }\n        }\n\n\n        /**\n         * Loads slides into service (if provided a relevant document to load)\n         * @returns {null|Promise|*|{options, files}}\n         */\n        function load()\n        {\n            if (loadPromise) {\n                return loadPromise;\n            }\n\n            var deferred = $q.defer();\n            loadPromise = deferred.promise;\n\n            var onPresentationSlidesLoaded = function (slides)\n            {\n                // update presentation slides and current slide parameters\n                presentationSlides = slides || [];\n\n                if (slides && slides.length > 0) {\n                    var img = new Image();\n                    img.src = slides[0].src;\n                    img.onload = function (e) {\n\n                        // get slides dimensions\n                        slidesSize = {\n                            'width': e.srcElement.naturalWidth,\n                            'height': e.srcElement.naturalHeight\n                        };\n                        $rootScope.$broadcast('slidesSizeSet',slidesSize);\n\n\n                        deferred.resolve(slides);\n                    };\n                }\n                else {\n                    deferred.resolve(slides);\n                }\n            };\n\n            var loadSlidesFromMetadataXml = function (documentEntryId, result, isPdf) {\n                var slides = [];\n                var itemsArr = $(result.data).find(isPdf ? 'item' : 'slide');\n                for (var i = 0, len = itemsArr.length; i < len; i++) {\n\n                    var children = itemsArr[i].children;\n                    var slideURL = null;\n                    var content = \"\";\n                    var notes = \"\";\n                    var id = i;\n                    var slideName = '';\n                    var title = \"slide #\" + (i + 1);\n                    for (var j = 0, len2 = children.length; j < len2; j++) {\n                        if (children[j].localName === \"imagefile\" || children[j].localName === \"name\") {\n                            slideURL = baseUrl + children[j].textContent;\n                            id = slideName = children[j].textContent;\n                        }\n                        if (children[j].localName === \"text\") {\n                            content = children[j].innerHTML;\n                        }\n                        if (children[j].localName === \"notes\") {\n                            notes = children[j].innerHTML;\n                            notes = notes.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n                        }\n                        if (children[j].localName === \"title\") {\n                            title = children[j].innerHTML;\n                        }\n                    }\n\n                    var index = i;\n\n                    // Adding document entry id to make sure we can later compare for uniquness\n                    slides.push({\n                        documentEntryId: documentEntryId,\n                        src: slideURL,\n                        index: index,\n                        title: title,\n                        notes: notes,\n                        content: content,\n                        id: id,\n                        slideName: slideName,\n                        type: 'slide'\n                    });\n                    // }\n                }\n                return Promise.resolve(slides);\n            };\n            var baseUrl = 'slides/';\n\n            kProducerActions.isReady().then(function()\n            {\n                var requiredDocumentId = kProducerActions.getState('actions.select-deck-document.documentEntryId','');\n\n                if (activeDocumentEntryId === requiredDocumentId) {\n                    deferred.resolve({state: 'no_change'});\n                }else {\n                    // raise presentationChanged event after a successful change\n                    loadPromise.then(function () {\n                        klog.info('slidesService.load(): broadcasting \"PresentationChanged\"');\n                        $rootScope.$broadcast(\"PresentationChanged\");\n                    });\n\n                    var documentEntryId = activeDocumentEntryId  = requiredDocumentId;\n\n                    if (requiredDocumentId) {\n                        // reset internal parameters\n                        presentationSlides = [];\n                        activeDocumentFileName = '';\n\n                        // scenario: has presentation document to load\n                        klog.info(\"slidesService.load(): loading document with entry id '{0}' from server\", documentEntryId);\n                        kalturaService.getDocumentSlides(documentEntryId).then(function (result) {\n                            activeDocumentFileName = result.document ? result.document.description : '';\n                            var url = result.slidesUrl;\n                            baseUrl = url.substring(0, url.lastIndexOf('/') + 1);\n                            var isPdf = result.fileExt.toLowerCase() === 'pdf';\n\n                            if (isPdf) {\n                                url = url.replace('metadata.xml', 'imagesList.xml');\n                            }\n\n\t                        var relocateUrl = !isPdf ? \"/relocate/metadata.xml\" : \"/relocate/imagesList.xml\";\n\n                            if (!url.endsWith(relocateUrl)) {\n                                //this is to avoid bug in backend where download action doesn't have CORS header on rediret\n                                url += relocateUrl;\n                            }\n\n                            return $http.get(url).then(function (result) {\n                                return loadSlidesFromMetadataXml(documentEntryId, result, isPdf);\n                            });\n                        }).catch(function(error) {\n                            var message = (error ? error.message : '');\n                            kdialog.alert(message, true).then(function () {\n                                window.close();\n                            });\n                        }).then(onPresentationSlidesLoaded);\n                    }\n                    else {\n                        // scenario: no active presentation document.\n                        onPresentationSlidesLoaded();\n                    }\n                }\n            });\n            return loadPromise;\n\n        }\n\n        function removeSlides()\n        {\n            return replaceSlides(null);\n        }\n\n        function replaceSlides (newSlidesEntryId)\n        {\n            newSlidesEntryId = newSlidesEntryId || ''; // make sure new slides entry id is not null (to remove slides we use empty string\n\n            klog.info('SlidesService.replaceSlides(): updating presentation document to id {0}', newSlidesEntryId);\n            kProducerActions.setStateOrientedAction('select-deck-document',{documentEntryId : newSlidesEntryId });\n            return $q.resolve();\n        }\n\n        function getPresentationSlides()\n        {\n            return presentationSlides;\n        }\n\n        function getSlideSize()\n        {\n            return slidesSize;\n        }\n\n        function getSlidesAspectRatio()\n        {\n            return slidesSize ? (slidesSize.width / slidesSize.height) : (16.0 / 9.0);\n        }\n        \n        function getActiveDocumentInfo()\n        {\n            if (activeDocumentEntryId) {\n                return {id : activeDocumentEntryId,  name : activeDocumentFileName, slides : presentationSlides};\n\n            }else {\n                return null;\n            }\n        }\n\n        function changeSelectedSlide(slideAsset)\n        {\n            selectedSlideAsset = slideAsset;\n            kProducerActions.setStateOrientedAction('select-a-thumb',\n                {\n                    slideName: slideAsset.slideName,\n                    documentEntryId: slideAsset.documentEntryId,\n                    title: slideAsset.title,\n                    content: slideAsset.content,\n                    type: 'slide'\n                });\n            //after sending the slide change update player view mode if needed\n            updatePlayerViewMode();\n        }\n        \n        function updatePlayerViewMode()\n        {\n            //if player view mode is video only - change to default slide view mode\n            if(kaPlayerViewControlsService.getCurrentViewId() === PLAYER_VIEW_MODE.VIDEO_ONLY) {\n                kaPlayerViewControlsService.changeViewById(PLAYER_VIEW_MODE.PIP_VIDEO_LARGE, PLAYER_VIEW_STATE.UNLOCKED);\n            }\n        }\n\n        self.getPresentationSlides = getPresentationSlides;\n        self.getSlidesSize = getSlideSize;\n        self.getSlidesAspectRatio = getSlidesAspectRatio;\n        self.getActiveDocumentInfo = getActiveDocumentInfo;\n        self.replaceSlides = replaceSlides;\n        self.removeSlides = removeSlides;\n        self.changeSelectedSlide = changeSelectedSlide;\n\n        self.load = load;\n\n    }\n\n    angular.module('k-deck-slides').service('slidesService', SlidesService);\n\n})();\n\n","/* globals _ */\n/* globals angular */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function () {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider, cuePointsServiceProvider) {\n        var handler = {\n            transmitMode : 'always'\n        };\n\n        kProducerActionsProvider.registerAction('select-deck-document', 'codeCuePoint.Code', handler);\n        cuePointsServiceProvider.addTagToArchiveExcludeList('select-deck-document');\n    }\n\n    angular.module('k-deck-slides').config(registerAdapter);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider) {\n        var handler = {\n            checkContentRelevancy : function(state,actionContent,api)\n            {\n                var result;\n                if (_.get(state,'podcasting.type') === '')\n                {\n                    var lastSelectAThumbActionCuePoint = api.getLastTransmittedAction('select-a-thumb');\n                    var lastRemoveSelectedThumbCuePoint = api.getLastTransmittedAction('remove-selected-thumb');\n                    var lastSelectPollState = api.getLastTransmittedAction('select-poll-state');\n\n                    if (lastRemoveSelectedThumbCuePoint)\n                    {\n                        if ((lastSelectAThumbActionCuePoint &&\n                            lastSelectAThumbActionCuePoint.createdAt > lastRemoveSelectedThumbCuePoint.createdAt) ||\n                            (lastSelectPollState && lastSelectPollState.createdAt > lastRemoveSelectedThumbCuePoint.createdAt))\n                        {\n                            result = true;\n                        } else {\n                            result = api.isNewContent('remove-selected-thumb', actionContent);\n                        }\n                    }else\n                    {\n                        result = true;\n                    }\n                }\n                return result;\n            },\n            updateState : function(state,content)\n            {\n                var modified = false;\n\n                if (_.get(state,'podcasting.type') !== '') {\n                    _.set(state,'podcasting.type','');\n                    modified = true;\n                }\n\n                return modified;\n            }\n        };\n\n        kProducerActionsProvider.registerAction('remove-selected-thumb','codeCuePoint.Code', handler);\n    }\n\n    angular.module('k-deck-slides').config(registerAdapter);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider) {\n        var handler = {\n            checkContentRelevancy : function(state,actionContent,api)\n            {\n                var result = false;\n\n                if (_.get(state,'podcasting.type') === 'thumb')\n                {\n                    var lastSelectAThumbActionCuePoint = api.getLastTransmittedAction('select-a-thumb');\n                    var lastRemoveSelectedThumbCuePoint = api.getLastTransmittedAction('remove-selected-thumb');\n                    var lastSelectPollState = api.getLastTransmittedAction('select-poll-state');\n\n                    if (lastSelectAThumbActionCuePoint)\n                    {\n                        if ((lastRemoveSelectedThumbCuePoint &&\n                            lastRemoveSelectedThumbCuePoint.createdAt > lastSelectAThumbActionCuePoint.createdAt) ||\n                            (lastSelectPollState && lastSelectPollState.createdAt > lastSelectAThumbActionCuePoint.createdAt))\n                        {\n                           result = true;\n                        } else {\n                            result = api.isNewContent('select-a-thumb', actionContent);\n                        }\n                    }else\n                    {\n                        result = true;\n                    }\n                }\n                return result;\n            },\n            updateState : function (state,content)\n            {\n                var modified = false;\n\n                if (_.get(state,'podcasting.type') !== 'thumb') {\n                    _.set(state,'podcasting.type','thumb');\n                    modified = true;\n                }\n\n                return modified;\n            }\n\n        };\n\n        kProducerActionsProvider.registerAction('select-a-thumb', 'codeCuePoint.Thumb', handler);\n    };\n\n\n    angular.module('k-deck-slides').config(registerAdapter);\n\n})();","(function()\n{\n    \"use strict\";\n\n    var module = angular.module('k-assets-timeline',['kProducerActions', 'kPolls']);\n    module.constant('ASSET_TYPE', {SLIDE : 'slide', POLL: 'poll'});\n\n})();","\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider, cuePointsServiceProvider) {\n\n        /**\n         * will create a timeline assets state object: {docId : \"'slideName-1', 'pollId-1', 'slideName-2' ... \"}\n         */\n        kProducerActionsProvider.registerAction('timeline-assets-state','codeCuePoint.Code', {transmitMode : 'always'});\n        cuePointsServiceProvider.addTagToArchiveExcludeList('timeline-assets-state');\n\n    }\n\n    angular.module('k-assets-timeline').config(registerAdapter);\n\n})();","/* globals _ */\n\n(function () {\n\n    \"use strict\";\n\n    angular.module('k-assets-timeline').directive('assetsTimeline', function () {\n\n        return {\n            restrict: 'E',\n\n            transclude: true,\n\n            replace: true,\n\n            templateUrl: '../common/kAssetsTimeline/directives/assetsTimelineView.html',\n\n            controller: function ($scope, $rootScope, slidesService, gettextCatalog, onlineStatusService,\n                                  shortcutService, $timeout, kAssetsTimelineService, kPollsService, ASSET_TYPE, POLL_STATE_STATUS) {\n\n                var self = this;\n\n                $scope.events = [];\n                $scope.onlineAPI = onlineStatusService.onlineAPI();\n                $scope.isReady = false;\n                $scope.locked = {state: true};\n                $scope.visibleSlides = 0;\n                $scope.currentText = gettextCatalog.getString(\"Current\");\n                $scope.nextText = gettextCatalog.getString(\"Next\");\n                $scope.visibleSlidesCount = 1;\n                $scope.ready = false;\n                $scope.showPollWizard = false;\n                $scope.centeredAssetIndex = -1;\n                $scope.dragInProgress = false;\n                \n                var centeredAsset = null;\n                var pivotX = 0;\n                var element = null;\n                var clientWidth = null;\n                var iconNodes = null;\n                var tileHeight = null;\n                var eventWidth = null;\n                var aspectRatio = null;\n                var maximumSize = null;\n                var minimumSize = null;\n\n                $scope.currentEventIndex = function () {\n                    return kAssetsTimelineService.getAssetIndexInTimelineArray(kAssetsTimelineService.currentTimelineAsset);\n                };\n\n                $scope.oneSlidePrev = CreateCommand(\"\", \"kicon-arrow\", function () {\n                    klog.info(\"Relative prev\");\n                    var prevAsset = kAssetsTimelineService.getPrevAsset(centeredAsset, false);\n                    $scope.locked.state = false;\n                    if (prevAsset) {\n                        $scope.centerevent(prevAsset);\n                    }\n                });\n\n                $scope.oneSlideNext = CreateCommand(\"\", \"kicon-arrow flat-button-rotated\", function () {\n                    klog.info(\"Relative next\");\n                    $scope.locked.state = false;\n                    $scope.centerNextAsset();\n                });\n\n                $scope.centerNextAsset = function () {\n                    var nextAsset = kAssetsTimelineService.getNextAsset(centeredAsset, false, false);\n                    if (nextAsset) {\n                        $scope.centerevent(nextAsset);\n                    } else {\n                        $scope.centerevent(centeredAsset, true);\n                    }\n                };\n\n                $scope.centerAddedAsset = function ()\n                {\n                    var nextAsset = kAssetsTimelineService.getNextAsset(centeredAsset, true, false);\n                    if (nextAsset) {\n                        $scope.centerevent(nextAsset);\n                    } else {\n                        $scope.centerevent(centeredAsset, true);\n                    }\n                };\n\n                $scope.uploadFocused = CreateCommand(gettextCatalog.getString(\"\"), \"\", function () {\n                    klog.info('event quick upload');\n                    $scope.eventdblclick(centeredAsset);\n                });\n\n                $scope.syncTimelineCommand = CreateCommand(gettextCatalog.getString(\"Sync back\"), \"kicon-target\", function () {\n                    $scope.locked.state = true;\n                    if (kAssetsTimelineService.currentTimelineAsset) {\n                        setCenteredAsset(kAssetsTimelineService.currentTimelineAsset);\n                        $scope.centerNextAsset();\n                    }\n                });\n\n                var timelineAssetsLoaded = function (recalcLayoutOptions) {\n                    var ev = [];\n\n                    kAssetsTimelineService.timelineAssets.forEach(function (slide) {\n                        ev.push(slide);\n                    });\n\n                    klog.info('{0} slide loaded!', ev.length);\n                    $scope.events = ev;\n\n                    // if the centered asset is deleted we want to make the one before it the centered one\n                    if (kAssetsTimelineService.getAssetIndexInTimelineArray(centeredAsset) < 0){\n                        var asset = kAssetsTimelineService.getAssetByIndex($scope.centeredAssetIndex < ev.length ? $scope.centeredAssetIndex : ev.length - 1);\n                        $scope.centerevent(asset);\n                    }\n\n                    if (ev.length > 0) {\n                        $scope.locked.state = true;\n                        //refresh centered event only if doesn't exist OR if poll was added\n                        if (kPollsService.getLocallyCreatedPollId()) {\n                            $scope.centerAddedAsset();\n                        } else if (!centeredAsset) {\n                            $scope.centerNextAsset();\n                        } else {\n                            $scope.centerevent(centeredAsset, true, true); //no change in center event is needed\n                        }\n                    }\n\n                    $scope.recalcLayoutOptions = recalcLayoutOptions;\n                    $scope.safeApply(function () {\n                        $timeout(function () {\n                            // recalculate layout after dom was updated (since the recalculation rely on dom elements\n                            recalcLayout($scope.recalcLayoutOptions);\n                            shouldOpenAnAddPollWizard();\n                            $scope.locked.state = false;\n                        }, 200);\n                    });\n                    $rootScope.$broadcast('timelineloaded');\n                };\n\n                $scope.eventdblclick = function (event)\n                {\n                    if(!kAssetsTimelineService.isTimelineLocked() && kAssetsTimelineService.canBroadcastAsset(event)) {\n                        if (kAssetsTimelineService.currentTimelineAsset !== event) {\n                            klog.info(' eventdblclick! ' + event.title);\n                            kAssetsTimelineService.currentTimelineAsset = event;\n                            $scope.locked.state = true;\n                        }\n                    }\n                };\n\n                Number.prototype.clamp = function (min, max) {\n                    return Math.min(Math.max(this, min), max);\n                };\n\n                function gauss(a, b, c, x) {\n                    var gaussVal = a * Math.exp(-(x - b) * (x - b) / (2 * c * c));\n                    return gaussVal.clamp(0, 1);\n                }\n\n                function calcEventMeasurements() {\n                    element = document.getElementById('eventsdock-events');\n\n                    //not loaded yet\n                    if (!element) {\n                        return;\n                    }\n                    clientWidth = element.clientWidth;\n                    iconNodes = $(element).find('.eventsTimeline-event');\n\n                    aspectRatio = slidesService.getSlidesAspectRatio();\n\n\n                    maximumSize = element.clientHeight;\n                    minimumSize = maximumSize / 2;\n                    tileHeight = Math.min(clientWidth / 5, minimumSize);\n                    eventWidth = (aspectRatio * tileHeight);\n                }\n\n                // options is an object.\n                // supported options are:\n                // {\n                //  'elementSizes': 'same', // all elements are of the same size, any other value will use the co sinus form\n                //  'renderAllSlides': true // should all slides be rendered, or just the visible ones\n                // }\n                function recalcLayout(options) {\n\n                    calcEventMeasurements();\n                    var renderAllSlides = options && options.renderAllSlides;\n                    var sameSizeElements = options && options.elementSizes && options.elementSizes === 'same';\n                    var halfClientWidth = clientWidth / 2;\n                    var maxfallout = 0.1;\n                    var x = renderAllSlides ? 0 : halfClientWidth - pivotX - eventWidth / 2;\n                    $scope.visibleSlidesCount = Math.max(1, Math.floor(clientWidth / eventWidth + 0.5));\n\n                    var centerX = clientWidth / 2;\n                    try {\n\n                        for (var i = 0; i < iconNodes.length; i++) {\n\n                            var distance = ((x + eventWidth / 2) - centerX) / clientWidth;\n                            var distanceInTiles = (((x + eventWidth / 2) - centerX)) / eventWidth;\n\n                            //var fallout=scale1*Math.cos(distance * Math.PI*2);\n                            var fallout = gauss(1, 0, maxfallout, distance);\n                            var actualHeight = sameSizeElements ? minimumSize : tileHeight + fallout * (maximumSize - minimumSize);\n                            var actualWidth = aspectRatio * actualHeight;\n\n                            var xshift = (actualWidth - eventWidth) * distanceInTiles;\n                            //      klog.debug(\"icon=\"+i+\" distance=\"+distance+ \" fallout=\"+fallout+\" xshift=\"+xshift)\n                            var left = (x + eventWidth / 2) - (actualWidth / 2) + xshift;\n\n                            if (renderAllSlides || (left + actualWidth >= 0 && left < clientWidth)) {\n\n                                // set the top margin of the image for the icon\n                                // iconNodes[index].style.marginLeft='-'+aspectRatio*size*1/4+'10px';\n                                var newCss = {\n                                    'left': left + 'px',\n                                    'width': actualWidth + 'px',\n                                    'height': actualHeight + 'px',\n                                    'top': (maximumSize - actualHeight) / 2 + 'px',\n                                    'zIndex': sameSizeElements ? 100 : Math.round(100 * actualHeight + distanceInTiles),\n                                    'display' : 'block'\n                                };\n                                if (renderAllSlides){\n                                    newCss.transition = 'left 0.1s ease';\n                                }\n\n                                $(iconNodes[i]).css(newCss);\n\n                                if (!$(iconNodes[i]).is(\":visible\")){\n                                    $(iconNodes[i]).show({duration:0});\n                                }\n                            }\n                            else {\n\n                                $(iconNodes[i]).hide();\n                            }\n\n                            x += (eventWidth - 2 );\n                        }\n                    }\n                    catch (e) {\n                        alert(e);\n                    }\n                }\n\n                // move event in location from to be at position to\n                function moveElement(from, to) {\n                    kAssetsTimelineService.changeAssetToPosition(from, to);\n                }\n\n                // options {updateServer: true / false}\n                function updateAssetsState(options){\n                    kAssetsTimelineService.updateTimeLineAssetsState(options);\n                }\n\n                function scrollToDraggedElement(index){\n\n                    var widthToNode = -1*clientWidth/2;\n                    for (var i = 0; i < index; i++) {\n                        widthToNode += $(iconNodes[i]).width();\n                    }\n\n                    widthToNode = Math.max(widthToNode,0);\n\n                    $(\"#eventsdock-events\").scrollLeft(widthToNode);\n                }\n\n                function setCenteredAsset(asset){\n                    centeredAsset = asset;\n                    $scope.centeredAssetIndex = asset ? kAssetsTimelineService.getAssetIndexInTimelineArray(asset) : -1;\n                }\n\n                function scrollToDroppedElement(index){\n                    $scope.locked.state = false;\n                    var asset = kAssetsTimelineService.getAssetByIndex(index);\n                    $scope.centerevent(asset, true);\n                }\n\n                function setDragInProgress(value){\n                    $scope.dragInProgress = value;\n                }\n\n                kAssetsTimelineService.isReady().then(function () {\n                    $scope.$watch(function () {\n                        return kAssetsTimelineService.currentTimelineAsset;\n                    }, function () {\n                        $timeout(function () {\n                            setCenteredAsset(kAssetsTimelineService.currentTimelineAsset);\n                            if ($scope.locked.state) {\n                                $scope.centerNextAsset();\n                            }\n                        }, 100);\n\n                    });\n\n                    var element = document.getElementById('eventsdock-events');\n                    elementWatcher.onresize(element, function () {\n                        $scope.centerevent(centeredAsset, true);\n                    });\n\n                    setCenteredAsset(kAssetsTimelineService.currentTimelineAsset);\n                    timelineAssetsLoaded();\n                    $scope.$on(\"AssetsTimelineChanged\", function(event, args) {\n                        timelineAssetsLoaded(args? args.recalcLayoutOptions : undefined);\n                    });\n                    $scope.$on(\"openPollWizard\", function (event, pollData) {\n                       if(pollData && pollData.pollId) {\n                            openPollWizard(pollData.pollId);\n                       }\n                    });\n                    $scope.$on(\"pollWizardClosed\", function () {\n                        $scope.showPollWizard = false;\n                    });\n\n                    $scope.isReady = true;\n\n                });\n\n                $scope.eventclicked = function (event, element) {\n                    if (!$scope.dragInProgress) {\n                        $scope.locked.state = false;\n                        $scope.centerevent(event);\n                    }\n                };\n\n                var animate = new Animate();\n\n                /**\n                 *\n                 * @param event\n                 * @param noanimation\n                 * @param suspendLayoutUpdate suspend layout recalc, set true only if the UI is not yet synced with the events array. (f.e - when adding asset by other producer)\n                 */\n\n                $scope.centerevent = function (event, noanimation, suspendLayoutUpdate) {\n\n                    calcEventMeasurements();\n                    if ($scope.events.length === 0) {\n                        return;\n                    }\n\n                    var value = kAssetsTimelineService.getAssetIndexInTimelineArray(event);\n                    if (!noanimation &&\n                        value === kAssetsTimelineService.getAssetIndexInTimelineArray(centeredAsset)) {\n                        return;\n                    }\n\n                    var newScrollOffset = kAssetsTimelineService.getAssetIndexInTimelineArray(event) * (eventWidth - 2);\n\n                    if (noanimation) {\n                        pivotX = newScrollOffset;\n\n                        if (!suspendLayoutUpdate) {\n                            recalcLayout();\n                        }\n                    }\n                    else {\n                        animate.transition(pivotX, newScrollOffset,\n                            function (val) {\n                                pivotX = val;\n\n                                recalcLayout();\n                            }, 500, 15);\n\n                    }\n                    if (event) {\n                        setCenteredAsset(event);\n                    }\n                };\n\n                $scope.eventmouseleave = function (e) {\n\n\n                };\n\n                $scope.isCenteredEvent = function (event) {\n                    if (centeredAsset) {\n                        if (!_.isEmpty(centeredAsset.slideName)) {\n                            return centeredAsset.slideName === event.slideName;\n                        } else {\n                            return centeredAsset.id === event.id;\n                        }\n                    } else {\n                        //centered asset was removed\n                        return false;\n                    }\n\n                };\n\n                $scope.isElementDraggable = function(event) {\n                    return (event.type === ASSET_TYPE.POLL && kPollsService.getPollState(event.id).status === POLL_STATE_STATUS.PRELIMINARY);\n                };\n\n                //auto display 'add poll' wizard if the current producer added a poll\n                function shouldOpenAnAddPollWizard() {\n                    //only open current poll wizard if we are not displaying the wizard now\n                    if (kPollsService.getLocallyCreatedPollId() && !$scope.showPollWizard && $scope.events.length > 0) {\n                        $scope.pollObject =\n                        {\n                            id: kPollsService.getLocallyCreatedPollId(),\n                            state: 'active',\n                            question: '',\n                            answers: {}\n                        };\n                        kPollsService.setLocallyCreatedPollId(null);\n                        $timeout(function () {\n                            $scope.showPollWizard = true;\n                        }, 1000);\n                    }\n                }\n\n                function openPollWizard(pollId)\n                {\n                    var pollAsset = kAssetsTimelineService.getAssetById(pollId);\n                    var pollText = pollAsset.text;\n                    $scope.pollObject =\n                    {\n                        id: pollAsset.id,\n                        state: pollText.state,\n                        question: pollText.question,\n                        answers: pollText.answers\n                    };\n                    $scope.showPollWizard = true;\n                }\n\n                shortcutService.bindCommand($scope, $scope.oneSlideNext, shortcutService.keyCodes.WEBCAST_KEYPRESS_TIMELINE_FORWARD);\n\n                shortcutService.bindCommand($scope, $scope.oneSlidePrev, shortcutService.keyCodes.WEBCAST_KEYPRESS_TIMELINE_BACKWARDS);\n\n                shortcutService.bindCommand($scope, $scope.syncTimelineCommand, shortcutService.keyCodes.WEBCAST_KEYPRESS_TIMELINE_GO_TO_CURRENT);\n\n                shortcutService.bindCommand($scope, $scope.uploadFocused, shortcutService.keyCodes.WEBCAST_KEYPRESS_TIMELINE_SET_FOCUSED_AS_CURRENT);\n\n                self.recalcLayout = recalcLayout;\n                self.moveElement = moveElement;\n                self.updateAssetsState = updateAssetsState;\n                self.scrollToDraggedElement = scrollToDraggedElement;\n                self.scrollToDroppedElement = scrollToDroppedElement;\n                self.setDragInProgress = setDragInProgress;\n            },\n            link: function () {\n            }\n        };\n    });\n\n}());","(function () {\n    \"use strict\";\n\n    /**\n     *\n     * Use on a parent element, when you want its' children's font to be rescaled according to its' size.\n     * Each child element should have the parent's 'scalableClass' attribute value as a class so this directive will\n     * handle it.\n     * In addition, each 'scalable' child should hold a max and min font size attributes\n     *\n     * e.g\n     *\n     * <div class=\"container\" k-timeline-font-scale scalableClass=\"scaleMe\" initHeight=\"220\" >\n     *\n     *      <div class=\"scaleMe text1\" initFontSize=13>{{some text1}}</div>\n     *      <div class=\"scaleMe text2\" initFontSize=45>{{some text2}}</div>\n     *\n     * </div>\n     *\n     *\n     */\n    function Directive($timeout) {\n\n        function link(scope, element, attrs, ctrls)\n        {\n            var $element = $(element);\n\n            var $parent = $element.parent();\n\n            var scalableClass = element.attr('scalableClass') || 'scalableClass';\n\n            var initHeight = element.attr('initHeight') || 130;\n\n            //waiting for DOM rendering to end\n            $timeout (\n                function () {\n\n                    $element.resize(function ()\n                    {\n                        //go over each child element with a class defined in 'scalableClass' attribute\n                        $element.find('.' + scalableClass).each(function ()\n                        {\n                            var initFontSize = $(this).attr('initFontSize') || 13;\n\n                            var scale = $element.height() / initHeight;\n\n                            var newFontSize = initFontSize * scale;\n\n                            $(this).attr('style', 'font-size:' + newFontSize + 'px !important');\n\n                        });\n                    });\n                }\n            );\n        }\n\n        return {\n            restrict: 'A',\n            link: link\n        };\n\n    }\n\n    angular.module('k-assets-timeline').directive('kTimelineFontScale', Directive);\n\n}());\n","/* globals _ /\n / globals klog /\n / globals PromisesQueue /\n / globals Promise */\n\n(function (){\n    \"use strict\";\n\n    function Directive(kPollsService, $rootScope)\n    {\n\n        function Controller($scope)\n        {\n            /**\n             * poll is editable if it is in a preliminary state\n             * @param pollId\n             * @returns {boolean}\n             */\n            $scope.isPollEditable = function ()\n            {\n                var pollState = kPollsService.getPollState($scope.pollAsset.id);\n                return pollState.status === 'preliminary';\n            };\n\n            /**\n             * a complete poll is a poll with a Question and the first two answers.\n             * also, a complete and valid poll have only consecutive answers\n             * (if answers num. 1,2,4 are set - the poll is invalid)\n             * @return boolean if the poll is complete\n             */\n            $scope.isPollComplete = function () {\n                return kPollsService.isPollComplete($scope.pollAsset);\n            };\n\n            $scope.getCurrentAddedPoll = function ()\n            {\n                return kPollsService.getLocallyCreatedPollId();\n            };\n\n            $scope.openPollWizard = function ()\n            {\n                $('.open-poll-wizard').blur();\n                $rootScope.$broadcast(\"openPollWizard\", {pollId: $scope.pollAsset.id});\n            };\n\n        }\n\n        function Link(scope, element, attrs, ctrls)\n        {\n\n        }\n\n        return {\n            restrict: 'E',\n            templateUrl: '../common/kAssetsTimeline/directives/k-poll-asset.html',\n            scope: {'pollAsset':'=', 'isCentered':'='},\n            link: Link,\n            controller: Controller,\n            controllerAs: 'vm'\n        };\n\n    }\n\n\n    angular.module('k-assets-timeline').directive('kPollAsset', Directive);\n\n\n})();\n","(function () {\n    \"use strict\";\n\n    function Directive($timeout) {\n\n        function Controller()\n        {\n        }\n\n        function link(scope, element, attrs, ctrls)\n        {\n            var ctrl = ctrls[0];\n            var assetsTimeLine = ctrls[1];\n            var $element = $(element);\n            var $parent = $element.parent();\n\n            attrs.$observe('kDraggableAsset', function(allowDrag) {\n                if (allowDrag === 'true' && !$element.data('ui-draggable')){\n                    $element.draggable({\n                        axis: \"x\",\n                        scroll: true,\n                        opacity: 0.85,\n                        cursorAt: { left: 10 },\n                        connectToSortable: \"#eventsdock-wrapper-for-sortable\",\n                        zIndex: 99999,\n                        delay: 200,\n                        refreshPositions: true,\n                        beforeStart: function () {\n                            assetsTimeLine.recalcLayout({'elementSizes': 'same', 'renderAllSlides': true});\n\n                            // set containment so wont be able to drag past end\n                            var containmentX1 = $parent.offset().left;\n                            var containmentY1 = $parent.offset().top;\n                            var containmentX2 = ($parent.outerWidth() +  $parent.offset().left - $element.outerWidth());\n                            var containmentY2 = ($parent.outerHeight() +  $parent.offset().top - $element.outerHeight());\n                            $element.draggable( \"option\", \"containment\", [containmentX1, containmentY1, containmentX2, containmentY2] );\n                        },\n                        start: function (event, ui) {\n                            assetsTimeLine.setDragInProgress(true);\n                            assetsTimeLine.scrollToDraggedElement($(event.target).index());\n                        },\n                        stop: function (event, ui) {\n                            var targetPos = $(event.target).index();\n                            // No need to update positions, just to make the service update the server\n                            assetsTimeLine.updateAssetsState({ updateServer:true });\n                            assetsTimeLine.setDragInProgress(false);\n                            assetsTimeLine.scrollToDroppedElement(targetPos);\n                        }\n                    });\n                }\n                else if ($element.data('ui-draggable')){\n\n                    $element.draggable( 'destroy' );\n                }\n            });\n        }\n\n        return {\n            restrict: 'A',\n            controller: Controller,\n            require: ['kDraggableAsset','^assetsTimeline'],\n            link: link\n        };\n    }\n\n    angular.module('k-assets-timeline').directive('kDraggableAsset', Directive);\n}());","(function () {\n    \"use strict\";\n\n    function Directive($timeout) {\n\n        function Controller()\n        {\n\n        }\n\n        function link(scope, element, attrs, ctrls)\n        {\n            var ctrl = ctrls[0];\n            var assetsTimeLine = ctrls[1];\n            var $element = $(element);\n            var $parent = $element.parent();\n\n\n            $element.droppable({\n                tolerance: \"intersect\",\n                over: function( event, ui ){\n                    var draggableIndex = $(ui.draggable).index();\n                    var droppableIndex = $(event.target).index();\n                    assetsTimeLine.moveElement(draggableIndex, droppableIndex);\n                    // Do local update, we don't want any update to go to the server, just on stop\n                    assetsTimeLine.updateAssetsState( { updateServer: false } );\n                }\n            });\n        }\n\n        return {\n            restrict: 'A',\n            controller: Controller,\n            require: ['kDroppableAsset','^assetsTimeline'],\n            link: link\n        };\n    }\n\n    angular.module('k-assets-timeline').directive('kDroppableAsset', Directive);\n}());","(function () {\n    \"use strict\";\n\n    function Directive() {\n\n        function Controller()\n        {\n\n        }\n\n        function link(scope, element, attrs, ctrls)\n        {\n            element.disableSelection();\n\n            attrs.$observe('kSortable', function(sortableOn) {\n                if (sortableOn === 'true'){\n                    element.sortable();\n                }\n                else if (element.hasClass('ui-sortable')) {\n                    element.sortable('destroy');\n                }\n            });\n        }\n\n        return {\n            restrict: 'A',\n            controller: Controller,\n            require: ['kSortable'],\n            link: link\n        };\n    }\n\n    angular.module('k-assets-timeline').directive('kSortable', Directive);\n}());","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function () {\n    \"use strict\";\n\n        function Service(kProducerActions, kalturaService, kaPlayerViewControlsService,\n                         slidesService, $q, $rootScope, kPollsService, POLL_STATE_STATUS,\n                        ASSET_TYPE, POLL_STATE, PLAYER_VIEW_STATE, PLAYER_VIEW_MODE)\n        {\n            var self = this;\n\n            var isReadyPromise = null;\n\n            var slideEntryCompositeKey = ['slideName','documentEntryId'];\n\n            var timelineAssets = [];\n\n            var currentTimelineAsset = null;\n\n            function load()\n            {\n\n                var deferred = $q.defer();\n\n                kProducerActions.isReady().then(function()\n                {\n                    //initial sync\n                    syncProducerStateActions();\n\n                    // listen to state changes from server and act accordingly\n                    kProducerActions.subscribeStateChange(function() {\n                        syncProducerStateActions();\n\n                        // if there was a change in the timeline-assets-state - broadcast it\n                        var timelineState = kProducerActions.getState('actions.timeline-assets-state');\n                        var currentTimeLineState = getTimeLineAssetState();\n                        if (!angular.equals(currentTimeLineState, timelineState)) {\n                            var broadcastOptions = {};\n                            if(timelineState && timelineState.docId !== currentTimeLineState.docId) {\n                                broadcastOptions.recalcLayoutOptions = {\n                                    'elementSizes': 'regular',\n                                    'renderAllSlides': true\n                                };\n                            }\n                            updateTimelineAssets(broadcastOptions);\n                        }\n                    });\n\n                    //listen to instance changes from server\n\n                    kProducerActions.subscribeInstanceChange(function () {\n                    // TODO [es] filter by type of instance\n                        updateTimelineAssets();\n                        klog.info('kAssetsTimelineService.load(): broadcasting \"AssetsTimelineReady\"');\n                    });\n\n                    //get every presentation changes\n                    $rootScope.$on(\"PresentationChanged\", function() {\n                        //update local assets array\n                        updateTimelineAssets();\n                        //sync actions state\n                        syncProducerStateActions();\n                    });\n\n                    //load slides\n                    slidesService.load().then(\n                        function (res) {\n                            if(res && res.state) {\n                                //support fist load with poll and with no slides\n                                if (res.state === 'no_change') {\n                                    updateTimelineAssets();\n                                    syncProducerStateActions();\n                                }\n                            }\n                            deferred.resolve({});\n                        },\n                        function (err) {\n                            deferred.reject(err);\n                        }\n                    );\n\n                    $rootScope.$on('pollAdded',\n                        function(event, data) {\n                            if(data && data.poll) {\n                                var prevIndex = (data.prevIndex !== undefined) ? data.prevIndex : -1;\n                                addAsset(prevIndex, data.poll, ASSET_TYPE.POLL);\n                            }\n                        }\n                    );\n\n                });\n                //return after all preparations ended\n                isReadyPromise =  deferred.promise;\n\n            }\n\n            function syncProducerStateActions ()\n            {\n                //active asset update\n                var selectedAsset = null;\n                switch(kProducerActions.getState('podcasting.type')) {\n                    case '':\n                        currentTimelineAsset = null;\n                        break;\n                    case 'thumb':\n                        selectedAsset = kProducerActions.getState('actions.select-a-thumb');\n                        if(selectedAsset) {\n                            selectedAsset.type = 'slide';\n                            if(!areAssetsDataEquals(currentTimelineAsset, selectedAsset)) {\n                                var existingAsset = findAssetInCurrentAssetsTimeline(selectedAsset);\n                                if(existingAsset) {\n                                    currentTimelineAsset = existingAsset;\n                                } else {\n                                    currentTimelineAsset = _.clone(selectedAsset);\n                                    currentTimelineAsset.detached = true;\n                                }\n                            }\n                        } else {\n                            currentTimelineAsset = null;\n                        }\n                        break;\n                    case 'poll':\n                        selectedAsset = kProducerActions.getState('actions.select-poll-state');\n                        if(selectedAsset) {\n                            selectedAsset.type = 'poll';\n                            var matchingAsset = findAssetInCurrentAssetsTimeline(selectedAsset);\n\n                            if(!areAssetsDataEquals(currentTimelineAsset, matchingAsset)) {\n                                currentTimelineAsset = _.clone(matchingAsset);\n                                kPollsService.setSelectedPoll(currentTimelineAsset);\n                            }\n                        } else {\n                            currentTimelineAsset = null;\n                        }\n                        break;\n                    default :\n                        break;\n                }\n            }\n\n            function updateTimelineAssets(broadcastOptions)\n            {\n                // TODO - check if an actual change occurred\n                //init timeline assets\n                timelineAssets = [];\n                //update timeline assets\n                if(checkTimelineAssetsStateRelevancy()) {\n                    //order timeline assets according to timelineAssetsState\n                    syncTimelineAssetsWithState();\n                } else {\n                    //order timeline assets:\n                    //polls first (ordered by their position in timelineAssetsState) and then slides\n                    orderTimelineAssetsWithoutSate();\n                }\n                $rootScope.$broadcast(\"AssetsTimelineChanged\", broadcastOptions);\n\n            }\n\n            /**\n             * checks if timelineAssets state exists and if current docId equals to state docId\n             * @returns {boolean}\n             */\n            function checkTimelineAssetsStateRelevancy()\n            {\n                var currentDocId = kProducerActions.getState('actions.select-deck-document.documentEntryId');\n                var timelineState = kProducerActions.getState('actions.timeline-assets-state');\n                if(timelineState && timelineState.docId) {\n                    return currentDocId === timelineState.docId;\n                } else {\n                    return false;\n                }\n            }\n\n            /**\n             * sync current timeline assets array order with timeline state order\n             */\n            function syncTimelineAssetsWithState()\n            {\n                var slides = slidesService.getPresentationSlides();\n                var polls = kPollsService.getActivePollsDataAsArray();\n\n                var timelineState = getTimelineStateAsArray();\n                _.each(timelineState, function (assetId) {\n\n                    var slideAsset = _.find(slides, function (slide) {\n                       return slide.slideName === assetId;\n                    });\n                    if(slideAsset) {\n                        timelineAssets = timelineAssets.concat(slideAsset);\n                    } else {\n                        var pollAssetIndex = _.findIndex(polls, function (poll) {\n                            return poll.id === assetId;\n                        });\n                        if(pollAssetIndex > -1) {\n                            var pollAsset = polls.splice(pollAssetIndex, 1);\n                            timelineAssets = timelineAssets.concat(pollAsset);\n                        }\n                    }\n                });\n                //if exists, adding unordered polls to the timeline head\n                if(!_.isEmpty(polls)) {\n                    Array.prototype.unshift.apply(timelineAssets, polls);\n                }\n            }\n\n            /**\n             * order current timeline assets array (not using timeline state order - just for polls if exists)\n             */\n            function orderTimelineAssetsWithoutSate()\n            {\n                var slides = slidesService.getPresentationSlides();\n                var polls = kPollsService.getActivePollsDataAsArray();\n                var reorderedPolls = [];\n\n                var timelineState = getTimelineStateAsArray();\n                //reorder polls if needed\n                if(timelineState) {\n                    //reorder polls according to relative order in timeline state\n                    _.each(timelineState, function (assetId) {\n                        var pollAssetIndex = _.findIndex(polls, function (poll) {\n                            return poll.id === assetId;\n                        });\n                        if(pollAssetIndex > -1) {\n                            var pollAsset = polls.splice(pollAssetIndex, 1);\n                            reorderedPolls = reorderedPolls.concat(pollAsset);\n                        }\n                    });\n                    //if exists, adding unordered polls to the timeline head\n                    if(!_.isEmpty(polls)) {\n                        reorderedPolls = polls.concat(reorderedPolls);\n                    }\n                } else {\n                    reorderedPolls = polls;\n                }\n                //add slides ti timeline assets array\n                timelineAssets = reorderedPolls.concat(slides);\n            }\n\n            /**\n             * Gets the url of current asset even when it is not asset of current deck/presentation\n             * @returns {*} a deferred response with the url of currently shown poll\n             */\n            function getCurrentAssetUrl()\n            {\n                var deferred = $q.defer();\n\n                if (currentTimelineAsset) {\n                    if(currentTimelineAsset.type === ASSET_TYPE.SLIDE) {\n                        getCurrentSlideUrl(deferred);\n                    }\n                }else {\n                    // there isn't an active asset - reject the request\n                    deferred.reject({});\n                }\n\n                return deferred.promise;\n            }\n\n            function getTimelineStateAsArray()\n            {\n                var timelineState = kProducerActions.getState('actions.timeline-assets-state');\n                if(timelineState && timelineState.state) {\n                    //get the state string\n                    timelineState = timelineState.state;\n                    //convert to array\n                    return timelineState.split(',');\n                }\n\n                return null;\n            }\n            \n            function getCurrentSlideUrl(deferred)\n            {\n                // the producer is currently showing a slide (has active slide either part of current deck or of previous one)\n                if (currentTimelineAsset.src) {\n                    // the active slide is part of current deck - just return the current slide url.\n                    // if it wasn't the current slide object will be without this property (and others)\n                    deferred.resolve({url: currentTimelineAsset.src});\n                }else if (currentTimelineAsset.documentEntryId && currentTimelineAsset.slideName) {\n                    //this is not a slide from this current slide deck, need to fetch its' url from server\n                    kalturaService.getDocumentSlides(currentTimelineAsset.documentEntryId).then(function (result) {\n                        var url = result.slidesUrl;\n                        var baseUrl = url.substring(0, url.lastIndexOf('/') + 1);\n                        deferred.resolve({url : baseUrl + currentTimelineAsset.slideName});\n                    }, function (error) {\n                        deferred.reject({});\n                    });\n                } else {\n                    // we have no way to determine the url of current slide - reject the request\n                    deferred.reject({});\n                }\n            }\n\n            /**\n             * Adding pollAsset after specific asset if provided\n             * @param prevAssetIndex\n             * @param assetData\n             * @param type\n             */\n            function addAsset(prevAssetIndex, assetData, type)\n            {\n                if (assetData) {\n                    if(type === ASSET_TYPE.POLL) {\n                        //update current timeline assets array with new poll\n                        var tempPoll = createAsset(\n                            {\n                                id: assetData.id,\n                                state: POLL_STATE.ACTIVE,\n                                answers: {},\n                                question: {},\n                                type : ASSET_TYPE.POLL\n                            });\n\n                        timelineAssets.splice(prevAssetIndex + 1, 0, tempPoll);\n                        updateTimeLineAssetsState({ updateServer: true });\n                    }\n                }\n            }\n\n            function changeAssetToPosition(oldPosition, newPosition) {\n                var tmp = timelineAssets[oldPosition];\n                timelineAssets.splice(oldPosition, 1);\n                timelineAssets.splice(newPosition, 0, tmp);\n            }\n\n            function updateTimeLineAssetsState(options) {\n\n                if (options && options.updateServer) {\n                    // get the last state & current state and do stuff only if we had a change\n                    var oldTimeLineState = kProducerActions.getState('actions.timeline-assets-state');\n                    var currentTimeLineState = getTimeLineAssetState();\n                    if (!angular.equals(currentTimeLineState, oldTimeLineState)) {\n                        kProducerActions.setStateOrientedAction(\n                            'timeline-assets-state',\n                            currentTimeLineState\n                        );\n                        $rootScope.$broadcast(\"AssetsTimelineChanged\");\n                    }\n                }\n                else {\n                    $rootScope.$broadcast(\"AssetsTimelineChanged\", {\n                        'recalcLayoutOptions': {\n                            'elementSizes': 'same',\n                            'renderAllSlides': true\n                        }\n                    });\n                }\n            }\n\n            function getTimeLineAssetState() {\n                //updating timeline state with the new timeline assets order\n                var currentDocInfo = slidesService.getActiveDocumentInfo();\n                var currentDocId = currentDocInfo ? currentDocInfo.id : '';\n                return {docId : currentDocId , state : extractStateFromTimelineAssets()};\n            }\n            \n            function extractStateFromTimelineAssets()\n            {\n                var timelineState = [];\n                _.each(timelineAssets, function (asset) {\n                   var assetId = asset.id ? asset.id : asset.slideName;\n                    timelineState.push(assetId);\n                });\n                return timelineState.join();\n            }\n\n            function areAssetsDataEquals(assetA, assetB)\n            {\n                if (!assetA && !assetB) {\n                    return true;\n                }\n                if (!assetA || !assetB) {\n                    return false;\n                }\n                if(assetA.type !== assetB.type) {\n                    return false;\n                }\n                if(assetA.type === ASSET_TYPE.SLIDE) {\n                    return areSlidesDataEquals(assetA, assetB);\n                }\n                if(assetA.type === ASSET_TYPE.POLL) {\n                    return arePollsDataEquals(assetA, assetB);\n                }\n            }\n\n            function areSlidesDataEquals(slideA,slideB)\n            {\n                var result = true;\n                _.each(slideEntryCompositeKey,function(propertyName) {\n                    if (slideA[propertyName] !== slideB[propertyName]) {\n                        result = false;\n                    }\n                });\n                return result;\n            }\n\n            function arePollsDataEquals(pollA, pollB)\n            {\n                return angular.equals(pollA, pollB);\n            }\n\n            function findAssetInCurrentAssetsTimeline(assetState)\n            {\n                if(assetState.type === ASSET_TYPE.SLIDE) {\n                    var existingSlide = _.find(timelineAssets,{documentEntryId : assetState.documentEntryId, slideName : assetState.slideName});\n                    if(existingSlide) {\n                        return existingSlide;\n                    }\n                } else if (assetState.type === ASSET_TYPE.POLL) {\n                    var existingPoll = _.find(timelineAssets,{id : assetState.pollId});\n                    if(existingPoll) {\n                        return existingPoll;\n                    }\n                }\n                return null;\n            }\n\n            function changeAsset(asset)\n            {\n                if (!asset) {\n                    klog.info('kAssetsTimelineService.changeAsset(): requested to remove current asset.');\n\n                    if (!currentTimelineAsset) {\n                        klog.info('kAssetsTimelineService.changeAsset(): not showing any asset at the moment');\n                        return;\n                    }\n\n                    currentTimelineAsset = null;\n\n                    kProducerActions.setStateOrientedAction('remove-selected-thumb',{});\n                    kaPlayerViewControlsService.changeViewById(PLAYER_VIEW_MODE.VIDEO_ONLY, PLAYER_VIEW_STATE.LOCKED);\n                }else {\n                    klog.info('kAssetsTimelineService.changeAsset(): replacing current asset with \"{0}\"', JSON.stringify(asset));\n\n                    if (areAssetsDataEquals(currentTimelineAsset, asset)) {\n                        klog.info('kAssetsTimelineService.changeAsset(): the requested asset is equal to active asset. ignore request');\n                        return;\n                    }\n\n                    if(asset.type === ASSET_TYPE.SLIDE) {\n                        slidesService.changeSelectedSlide(asset);\n                    } else if (asset.type === ASSET_TYPE.POLL) {\n                        kPollsService.changeSelectedPoll(asset);\n                    }\n\n                    currentTimelineAsset = createAsset(asset);\n                }\n            }\n\n            /**\n             * Creates Asset per type\n             * @param asset\n             * @returns {*}\n             */\n            function createAsset(asset)\n            {\n                if (asset.type === ASSET_TYPE.SLIDE) {\n                    return {\n                        documentEntryId: asset.documentEntryId,\n                        src: asset.src,\n                        index: asset.index,\n                        title: asset.title,\n                        notes: asset.notes,\n                        content: asset.content,\n                        id: asset.id,\n                        slideName: asset.slideName,\n                        type: 'slide'\n                    };\n                } else if (asset.type === ASSET_TYPE.POLL) {\n                    return {\n                        data: asset.data || {},\n                        text: asset.text || {},\n                        id: asset.id || '',\n                        type: 'poll'\n                    };\n                }\n            }\n\n            /**\n             * get prev asset only if not out of array bounds\n             * if out of bound return current\n             * @returns {*}\n             */\n            function gotoPrevAsset()\n            {\n                var asset = getPrevAsset(currentTimelineAsset, false);\n                if(!asset) {\n                    return currentTimelineAsset;\n                }\n                return asset;\n            }\n\n            /**\n             * get next asset only if not out of array bounds\n             * if out of bound return current\n             * @returns {*}\n             */\n            function gotoNextAsset()\n            {\n                var asset = getNextAsset(currentTimelineAsset, false, false);\n                if(!asset) {\n                    return currentTimelineAsset;\n                }\n                return asset;\n            }\n\n            /**\n             * get next asset\n             * @param asset current asset\n             * @param isAdded is a new asset added - won't need to verify broadcasting validity\n             * @param broadcast if asset should be broadcasted\n             * @returns {*}\n             */\n            function getNextAsset (asset, isAdded, broadcast)\n            {\n                if (asset && timelineAssets.length > 0) {\n                    var assetIndex = getAssetIndexInTimelineArray(asset);\n                    return getNextValidAsset(assetIndex + 1, isAdded, broadcast);\n                }\n                else {\n                    if (timelineAssets.length > 0) {\n                        //get first valid asset\n                        return getNextValidAsset(0, isAdded, broadcast);\n                    }else {\n                        return null;\n                    }\n                }\n            }\n\n            /**\n             * get prev asset\n             * @param asset\n             * @param broadcast is this asset should be broadcasted\n             * @returns {*}\n             */\n            function getPrevAsset (asset, broadcast)\n            {\n                if (asset && timelineAssets.length > 0) {\n                    var assetIndex = getAssetIndexInTimelineArray(asset);\n                    return getPrevValidAsset(assetIndex - 1, broadcast);\n                }\n                else {\n                    if (timelineAssets.length > 0) {\n                        //get first valid asset\n                        return getNextValidAsset(0, false, broadcast);\n                    }else {\n                        return null;\n                    }\n                }\n            }\n\n            /**\n             * get first prev valid asset\n             * @param startingIndex\n             * @param broadcast if asset should be broadcasted\n             * @returns {*}\n             */\n            function getPrevValidAsset(startingIndex, broadcast)\n            {\n                while (startingIndex >= 0) {\n                    if(!broadcast || canBroadcastAsset(timelineAssets[startingIndex])) {\n                        return timelineAssets[startingIndex];\n                    }\n                    startingIndex--;\n                }\n                //no prev valid asset was found\n                return null;\n            }\n\n            /**\n             * get next valid asset\n             * @param startingIndex\n             * @param isAdded is a new asset added - won't need to verify broadcasting validity\n             * @param broadcast if asset shuold be broadcasted\n             * @returns {*}\n             */\n            function getNextValidAsset(startingIndex, isAdded, broadcast)\n            {\n                while (startingIndex < timelineAssets.length) {\n                    if(!broadcast || isAdded || canBroadcastAsset(timelineAssets[startingIndex])) {\n                        return timelineAssets[startingIndex];\n                    }\n                    startingIndex++;\n                }\n                //no valid asset was found\n                return null;\n            }\n\n            /**\n             * return an asset object by a given ID\n             * @param assetId\n             * @returns {*}\n             */\n            function getAssetById(assetId)\n            {\n                return _.find(timelineAssets, function (asset) {\n                   return asset.type === 'poll' ?\n                            asset.id === assetId : asset.slideName === assetId;\n                });\n            }\n\n            function getAssetByIndex(index)\n            {\n                return timelineAssets[index];\n            }\n\n            function debugFlipToNextAsset ()\n            {\n                try {\n                    currentTimelineAsset = gotoNextAsset();\n                }\n                catch(e)\n                {\n\n                }\n            }\n\n            function getAssetIndexInTimelineArray(asset)\n            {\n                if(asset) {\n                    return _.findIndex(timelineAssets, function (obj) {\n                        if(obj.type === asset.type) {\n                            if(obj.type === 'poll') {\n                                return obj.id === asset.id;\n                            } else {\n                                return obj.slideName === asset.slideName;\n                            }\n                        }else {\n                            return false;\n                        }\n                    });\n                } else {\n                    return -1;\n                }\n\n            }\n\n            function isReady()\n            {\n                return isReadyPromise;\n            }\n\n            /**\n             * returns if current displayed asset is locking timeline from replacing it\n             * @returns {boolean}\n             */\n            function isTimelineLocked()\n            {\n                var locked = false;\n                if(currentTimelineAsset && currentTimelineAsset.type === 'poll') {\n                    var pollState = kProducerActions.getState('actions.select-poll-state');\n                    locked = pollState && pollState.status === POLL_STATE_STATUS.IN_PROGRESS;\n                }\n                return locked;\n            }\n\n            /**\n             * return true if a given asset is valid for broadcast\n             * @param asset\n             * @returns {boolean|*}\n             */\n            function canBroadcastAsset(asset)\n            {\n                var broadcast = true;\n                if(asset && asset.type === ASSET_TYPE.POLL) {\n                    broadcast = kPollsService.isPollComplete(asset);\n                }\n                return broadcast;\n            }\n\n            Object.defineProperty(Service.prototype, \"currentTimelineAsset\", {\n                get: function () {\n                    return currentTimelineAsset;\n                },\n                set: function (asset) {\n                    changeAsset(asset);\n                }\n            });\n\n            Object.defineProperty(Service.prototype, \"timelineAssets\", {\n                get: function () {\n                    return timelineAssets;\n                }\n            });\n\n\n            /**\n             * load service\n             * Usage will be valid only after isReady\n             */\n            load();\n            \n            /**\n             * public functions\n             */\n\n            self.getCurrentAssetUrl = getCurrentAssetUrl;\n            self.changeAsset = changeAsset;\n            self.getNextAsset = getNextAsset;\n            self.getPrevAsset = getPrevAsset;\n            self.gotoNextAsset = gotoNextAsset;\n            self.gotoPrevAsset = gotoPrevAsset;\n            self.getAssetById = getAssetById;\n            self.getAssetIndexInTimelineArray = getAssetIndexInTimelineArray;\n            self.isTimelineLocked = isTimelineLocked;\n            self.canBroadcastAsset = canBroadcastAsset;\n            self.debugFlipToNextAsset = debugFlipToNextAsset;\n            self.changeAssetToPosition = changeAssetToPosition;\n            self.getAssetByIndex = getAssetByIndex;\n            self.updateTimeLineAssetsState = updateTimeLineAssetsState;\n\n            self.isReady = isReady;\n\n        }\n\n\n    angular.module('k-assets-timeline').service('kAssetsTimelineService', Service);\n\n})();","/**\n * Created by guyjacubovski on 10/13/2014.\n */\nvar kUI=angular.module('kUI',[]);","'use strict';\n\nkUI.directive('kwpButton', function () {\n    return {\n        restrict: 'E',\n        transclude: true,\n        replace: true, //TODO: deprecated should br removed.\n\n        scope: {\n            command: '=',\n            showText: '=?',\n            id: '@',\n            clickInterval: '=',\n            tooltipPlacement: '@'\n        },\n        link: function (scope, elem) {\n            if (scope.showText === undefined) {\n                scope.showText = false;\n            }\n            if (scope.tooltipPlacement === undefined) {\n                scope.tooltipPlacement = \"bottom\";\n            }\n\n            if (!scope.showText) {\n                var height = elem.css(\"height\");\n                elem.css(\"width\", height);\n            }\n\n            scope.iconid = function () {\n\n\n                var runner = elem;\n                while (!runner[0].id) {\n                    runner = $(runner).parent();\n\n                    if (!runner) {\n                        return \"icon\";\n                    }\n                }\n                return runner[0].id + \"-icon\";\n            }\n\n            scope.mousedown = function () {\n                if (scope.clickInterval) {\n                    scope.command.do();\n\n\n                    var interval = scope.clickInterval,\n                        current = interval;\n                    scope.timer = setInterval(function () {\n                        current -= 10;\n                        if (current < 0) {\n                            scope.command.do();\n                            interval -= 50;\n                            current = Math.max(10, interval);\n                        }\n                    }, 10);\n                }\n            };\n            scope.mouseup = function () {\n                if (scope.clickInterval) {\n                    clearInterval(scope.timer);\n                }\n            };\n            scope.click = function () {\n                if (!scope.clickInterval) {\n                    scope.command.do();\n                }\n            };\n        },\n        templateUrl: \"../common/kUI/directives/partials/kwpButtonTemplate.html\"\n    };\n});\n\n","/**\n * Created by asafrobinovich on 11/27/14.\n */\n'use strict';\n\nkUI.directive('kwpGraph', function () {\n    return {\n        restrict: 'E',\n        transclude: true,\n        replace: true,\n        scope: {\n            graphData: '=',\n            tooltips: '=',\n            totalPoints: '='\n        },\n        link: function (scope, elem) {\n            scope.data = {\n                sliderVal : 0\n            };\n\n            var data = [],\n                t = new Date(),\n                maxGraphValue = 5,\n                initData = [[],[]],\n                lastThumbWidth = -1;\n\n            if (scope.tooltips) {\n                $(\"<div id='kwp-graph-tooltip'></div>\").css({\n                    position: \"absolute\",\n                    display: \"none\",\n                    border: \"1px solid #fdd\",\n                    padding: \"2px\",\n                    \"background-color\": \"#fee\",\n                    opacity: 0.80\n                }).appendTo(\"body\");\n\n                $(\"#placeholder\").bind(\"plothover\", function (event, pos, item) {\n\n                    if (item) {\n                        // show tooltips only for positive values\n                        if (item.datapoint[1] >= 0) {\n                            var time = new Date(item.datapoint[0]);\n                            var count = item.datapoint[1];\n\n                            $(\"#kwp-graph-tooltip\").html(time.toLocaleTimeString() + \": \" + count)\n                                .css({top: item.pageY + 5, left: item.pageX - 70})\n                                .fadeIn(200);\n                        }\n                    } else {\n                        $(\"#kwp-graph-tooltip\").hide();\n                    }\n                });\n            }\n\n            scope.$watch('graphData',function(){\n                var updateSliderVal = false;\n                // if the slider is in the max, and we get new data we want to move it to the new max.\n                // in case there are less than totalPoints in the graph we set scope.data.sliderVal to zero\n                if (parseInt(scope.data.sliderVal) === scope.getSliderMax()){\n                    updateSliderVal = true;\n                }\n                data = [];\n                maxGraphValue = 5;\n                scope.graphData.forEach(function(point){\n                    t.setTime(point.x * 1000);\n                    data.push( [t.getTime(), point.y] );\n                    if (point.y > maxGraphValue){\n                        maxGraphValue = point.y;\n                    }\n                });\n\n                $(elem).find(\"#kwpGraphSlider\").attr('max', scope.getSliderMax());\n                if (updateSliderVal) {\n                    scope.data.sliderVal = scope.getSliderMax();\n                }\n                update(false);\n            }, true);\n\n            var plot = $.plot(\"#placeholder\",initData, {\n                series: {\n                        shadowSize: 2,\n                        color:\"#76b55d\",\n                        lines :{\n                            lineWidth : 4\n                        }\n                },\n                yaxis: {\n                    min: 0,\n                        max: maxGraphValue,\n                        color:\"#403f40\",\n                        tickDecimals:0\n                },\n                xaxis: {\n                    //this is the mode for display time\n                    mode: \"time\",\n                    timeformat: \"%H:%M\",\n                    timezone: \"browser\",\n                    color:\"#141414\"\n                    },\n                    grid: {\n                        backgroundColor: \"#323032\",\n                        borderWidth : 0,\n                        hoverable:true\n                }\n            });\n\n            $(elem).resize(function(){\n                plot.resize();\n                plot.setupGrid();\n                plot.draw();\n                update(true);\n            });\n\n            $(elem).find(\".flot-text\").css({color: \"#999999\",'font-size': \"x-small\"});\n\n            scope.getSliderMax = function() {\n                return Math.max(0, data.length - scope.totalPoints);\n            };\n\n            var update = function(force) {\n                var selectorText = \"#kwpGraphSlider::-webkit-slider-thumb\";\n\n                // What is -4? the width we get it of the entire element, but we want the thumb only,\n                // so we remove a magic number for some spacing between the thumb and the slider\n                var newThumbWidth = Math.min(\n                    Math.round((scope.totalPoints/data.length) * $(kwpGraphSlider).width()),\n                    $(kwpGraphSlider).width()-4);\n\n                if (newThumbWidth !== lastThumbWidth){\n\n                    for (var i=0; i < document.styleSheets.length; i++) {\n                       if (document.styleSheets[i].title === \"kwpGraphCSS\"){\n                           for (var j =0; j < document.styleSheets[i].cssRules.length; j++) {\n                               if (document.styleSheets[i].cssRules[j].selectorText === selectorText) {\n                                   document.styleSheets[i].removeRule(j);\n                                   break;\n                               }\n                           }\n                           document.styleSheets[i].addRule(selectorText, \"width: \" + newThumbWidth + \"px !important\");\n                           break;\n                       }\n                    }\n                    lastThumbWidth = newThumbWidth;\n                }\n\n                if ((scope.getSliderMax() === parseInt(scope.data.sliderVal)) || force) {\n                    var newdata = [];\n\n                    //30 minutes\n                    newdata = [];\n                    for (var k = parseInt(scope.data.sliderVal); k < parseInt(scope.data.sliderVal) + scope.totalPoints; k++) {\n                        newdata.push(data[k]);\n                    }\n\n                    //and how you plot it again\n                    plot.getOptions().yaxes[0].max = maxGraphValue;\n                    plot.setData([newdata]);\n                    plot.setupGrid();\n                    plot.draw();\n                }\n            };\n\n            scope.goToNowCommand = CreateCommand(\"\", \"kicon-target\", function (){\n                scope.data.sliderVal = scope.getSliderMax();\n                update(true);\n            });\n\n            scope.showGoToNowBtn = function() {\n                return (parseInt(scope.data.sliderVal) !== scope.getSliderMax());\n            };\n\n            scope.showSlider = function() {\n                return (scope.graphData.length > scope.totalPoints);\n            };\n\n            update(true);\n\n            scope.onSlider = function() {\n                update(true);\n            };\n        },\n        templateUrl: \"../common/kUI/directives/partials/kwpGraphTemplate.html\"\n    };\n});","'use strict';\n\nkUI.directive('kuiCopyToClipboard',function ($compile,$interval,$filter, $timeout) {\n\n    var COPIED_ICON_TIMEOUT_DELAY = 5000;\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace:true,\n        scope: {\n            tooltipLocation: '@'\n        },\n        templateUrl: \"../common/kUI/directives/partials/kuiCopyToClipboard.html\",\n        link: function (scope, $element, attrs) {\n            scope.text = attrs.text;\n            scope.onCopyClick = onCopyClick;\n            scope.isCopied = false;\n            scope.iconTimeoutDelayPromise = null;\n\n            function onCopyClick() {\n                copyToClipboard();\n                scope.isCopied = true;\n\n                scope.iconTimeoutDelayPromise = $timeout(function () {\n                    scope.isCopied = false;\n                    scope.iconTimeoutDelayPromise = null;\n                }, COPIED_ICON_TIMEOUT_DELAY);\n            }\n\n            function copyToClipboard() {\n                var el = document.createElement('textarea');\n                el.value = scope.text;\n                el.setAttribute('readonly', '');\n                el.style.position = 'absolute';\n                el.style.opacity = 0;\n                el.style.left = '-9999px';\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand('copy');\n                document.body.removeChild(el);\n            }\n\n            scope.$on('$destroy', function() {\n                if (scope.iconTimeoutDelayPromise) {\n                    $timeout.cancel(scope.iconTimeoutDelayPromise);\n                }\n            });\n        }\n    };\n});","/**\n * Created by David.OZ on 4/5/15.\n */\nvar kQna = angular.module('kQna',['kAPI','kCef', 'kProducerActions','kEntryManagementModule']);\n\nkQna.constant('THREAD_STATE',{NONE:\"None\",ANSWERED:\"Answered\",\n    FOLLOWUP:\"FollowUp\",DONE:\"Done\",PENDING:\"Pending\",ANNOUNCED:\"ANNOUNCED\",CLEAR:\"Cleared\",DELETED:\"Deleted\",FORWARDED:\"Assigned\"});\n\nkQna.constant('QandA_ResponseProfile',\"QandA_ResponseProfile\");\n\nkQna.constant('QandA_ResponseProfile_user',\"QandA_ResponseProfile_user\");\n\nkQna.constant('QandA_cuePointEnums',{\"Question\":1, \"Answer\":2, \"Announcement\":3,\"AnswerOnAir\":4});\n\nkQna.constant('QandA_ResponseProfileSystemName',\"QandA\");\n\nkQna.constant('QandA_MetadataProfileSystemName',\"Kaltura-QnA\");\n\nkQna.constant('qnaEventNotificationTemplates',[\"PUBLIC_QNA_NOTIFICATIONS\",\"USER_QNA_NOTIFICATIONS\"]);\n\n\nkQna.service('qnaSuspendFetching',function () {\n    var value=false;\n    var pending=0;\n    this.suspend = function() {\n        //console.warn(\"suspend\",pending);\n        pending++;\n    };\n    this.resume = function() {\n        //console.warn(\"resume \",pending);\n        if (pending>0) {\n            pending--;\n        }\n    };\n    this.isSuspended=function() {\n        return pending>0;\n    };\n});\n","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider, cuePointsServiceProvider) {\n\n        kProducerActionsProvider.registerAction('player-qna-settings-update','codeCuePoint.Code', {transmitMode : 'always'});\n        cuePointsServiceProvider.addTagToArchiveExcludeList('player-qna-settings-update');\n\n    }\n\n    angular.module('kQna').config(registerAdapter);\n\n})();","/**\n * Created by David.OZ on 4/14/15.\n */\n\n'use strict';\n\nkQna.directive('kwpQnaRelativeTime',function ($compile,$interval,$filter) {\n\n\n\n    var updaters=[];\n\n    setInterval( function () {\n        updaters.forEach(function(update) {\n            try {\n                update();\n            }catch (e) {\n                klog.warn(\"Exception while updating {0} {1}\", e.message, e.stack);\n            }\n        });\n    },30000);//60 seconds\n\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace:true,\n        scope:{\n            onTimeChange :'&'\n        },\n        template: \"<span class='qnaThreadTime' tooltip-placement='left' uib-tooltip='{{::time|date:\\\"medium\\\"}}' ></span>\",\n        link: function (scope, $element, attrs) {\n\n            //TODO: need to work with date object\n            scope.time=new Date(attrs.time*1000);\n\n            //scope.onTimeChange(function(newEntry){\n            //\n            //    scope.time = newEntry.getTime() * 1000;\n            //\n            //    update();\n            //\n            //});\n\n            function update() {\n\n                scope.currentTime = new Date();\n\n                if (scope.currentTime - scope.time < 120 * 1000) {\n                    if (!$element.hasClass(\"now\")) {\n                        $element.addClass(\"now\");\n                        $element.removeClass(\"notNow\");\n                    }\n                } else {\n                    if (!$element.hasClass(\"notNow\")) {\n                        $element.removeClass(\"now\");\n                        $element.addClass(\"notNow\");\n                    }\n                }\n                var time=$filter(\"lastCreated\")(scope.currentTime-scope.time ,scope.time);\n                $element.text(time);\n            }\n\n            update();\n\n            updaters.push(update);\n\n\n            scope.$on('$destroy', function(){\n                var index=updaters.indexOf(update);\n                if (index>=0) {\n                    updaters.splice(index, 1);\n                }\n            });\n\n        }\n    };\n});","'use strict';\n\nkQna.factory('qnaExport', ['kCef' ,'sessionService', function (kCef,sessionService) {\n\n    var translateEntry=function(entry) {\n\n        var content = entry.getContent();\n\n        content = content.replace(/\"/g, '\"\"');\n\n        return \",\\\"\" + content + \"\\\"\";\n\n    };\n\n    var translateThread=function(thread) {\n\n        var threadEntries = thread.getEntries();\n\n        if (threadEntries.length === 0) {\n\n            return \"\";\n\n        }\n\n        var firstEntry = threadEntries[0];\n\n        var csv = String.format(\"{0},{1},{2}\",new Date(firstEntry.getTime()*1000), firstEntry.getOwner(), firstEntry.isAnnouncement() ? \"Yes\" : \"No\" );\n\n        threadEntries.forEach(function(entry){\n\n            csv+=translateEntry(entry);\n\n        });\n\n\n        return csv;\n\n    };\n\n\n    var exportCSVText=function(qnaThreadsList) {\n        //var csv = \"\\uFEFFTime, User, Announcement?, Thread\";\n        var csv = \"Time, User, Announcement?, Thread\";\n\n        qnaThreadsList.forEach(function (thread) {\n            csv += \"\\n\";\n            csv += translateThread(thread);\n        });\n\n        return csv;\n    };\n\n    var exportToCSV=function(qnaThreadList) {\n\n        var downloadFileName = sessionService.getTitle()+\"-qna.csv\";\n\n        qnaThreadList.sort(function(a,b) {\n            return a.getCreationTime()- b.getCreationTime();\n        });\n        var csv = exportCSVText(qnaThreadList);\n\n        if (kCef.available) {\n            kCef.sendIPC('saveAsDialog',downloadFileName,  \"Comma-separated values\",[\"csv\"],\"Select file for export\").then(function (fileName) {\n                if (fileName) {\n                    kCef.sendIPC(\"saveFile\",fileName, csv).then(function () {\n                        klog.info(\"Exporting file completed.\");\n                    },function(err){\n                        klog.error(\"Export to file failed.\"+err);\n                    });\n                }\n            }).catch( function(f) {\n                klog.error(\"Saving the filed caused an exception.\");\n            });\n        }\n        else{\n\t        download(downloadFileName, csv);\n        }\n    };\n\n\n    return {\n        exportQnaDataToFile : function(qnaThreadsList) {\n            exportToCSV(qnaThreadsList);\n        }\n    };\n}]);\n","/**\n * Created by David.OZ on 6/1/15.\n */\n'use strict';\nkQna.factory('metaDataGenerator', function () {\n\n    var xsdSchemeOrder = ['Assignees','State','ThreadId','Type','ThreadCreatorId'];\n\n    function _xmlParser(xmlText) {\n\n        var xml = $.parseXML(xmlText);\n\n        var $xml = $( xml ).find('metadata').children();\n\n        var obj={};\n\n        $.each( $xml, function(inx, node){\n            if (node.nodeType===1) {\n                obj[node.nodeName] = node.textContent;\n            }\n        });\n\n        return _merge({},obj);\n    }\n\n    function _createMetadataXmlFromObject(obj) {\n\n        obj = _merge({},obj);\n\n        var xml=\"<metadata>\";\n\n        var convertProp = function(propertyName,propertyValue) {\n            xml += \"<\" + propertyName + \">\" + propertyValue + \"</\" + propertyName + \">\";\n        };\n\n        for(var propertyName in obj) {\n\n            if (obj.hasOwnProperty(propertyName)){\n\n                if (obj[propertyName] instanceof Array) {\n\n                    obj[propertyName].forEach(function (value) {\n                        convertProp(propertyName,value);\n                    });\n\n                } else {\n                    convertProp(propertyName, obj[propertyName]);\n                }\n            }\n\n\n        }\n        xml+=\"</metadata>\";\n        return xml;\n    }\n\n    function _merge(metaDataObject,dataObjectToAppend){\n\n        var property = null;\n\n        var returnedObject = {};\n\n        for (var i = 0;i < xsdSchemeOrder.length; i++) {\n\n            property = xsdSchemeOrder[i];\n\n            if(metaDataObject.hasOwnProperty(property)){\n\n                if(dataObjectToAppend.hasOwnProperty(property)){\n                    returnedObject[property] = dataObjectToAppend[property];\n                }\n                else{\n                    returnedObject[property] = metaDataObject[property];\n                }\n\n            }else{\n                if(dataObjectToAppend.hasOwnProperty(property)){\n                    returnedObject[property] = dataObjectToAppend[property];\n                }\n            }\n        }\n        return returnedObject;\n    }\n\n    return {\n\n        merge : _merge,\n\n        createObj : function(metadataUnorderedObject){\n\n            return _merge({},metadataUnorderedObject);\n\n        },\n\n        createXmlFromObj : _createMetadataXmlFromObject,\n\n        createObjFromXml : _xmlParser\n\n    };\n\n});\n","/**\n * Created by David.OZ on 6/1/15.\n */\n\n\"use strict\";\n\nkQna.factory('QnaThread', ['metaDataGenerator','kalturaAPI','THREAD_STATE',function(metaDataGenerator,kalturaAPI,THREAD_STATE) {\n\n    //TODO:This should come from a constant of a profile module or as a parameter to remove dependency.\n    var myUserId = kserviceInfo.userId;\n\n    function CreateQnaThreadStateMachine() {\n\n        return StateMachine.create({\n\n            initial: THREAD_STATE.NONE,\n\n            events: [\n                {\n                    name: 'clear',\n                    from: [THREAD_STATE.PENDING,THREAD_STATE.CLEAR,THREAD_STATE.NONE],\n                    to: THREAD_STATE.CLEAR\n                },\n                {\n                    name: 'delete',\n                    from: [THREAD_STATE.PENDING,THREAD_STATE.NONE],\n                    to: THREAD_STATE.DELETED\n                },\n                {\n                    name: 'pending',\n                    from: [THREAD_STATE.PENDING, THREAD_STATE.ANSWERED, THREAD_STATE.CLEAR, THREAD_STATE.FOLLOWUP, THREAD_STATE.DONE, THREAD_STATE.NONE],\n                    to: THREAD_STATE.PENDING\n                },\n                {\n                    name: 'answer',\n                    from: [THREAD_STATE.PENDING, THREAD_STATE.ANSWERED, THREAD_STATE.FOLLOWUP, THREAD_STATE.DONE],\n                    to: THREAD_STATE.ANSWERED\n                },\n                {\n                    name: 'done',\n                    from: [THREAD_STATE.ANSWERED, THREAD_STATE.FOLLOWUP, THREAD_STATE.DONE, THREAD_STATE.PENDING,THREAD_STATE.NONE],\n                    to: THREAD_STATE.DONE\n                },\n                {\n                    name: 'follow',\n                    from: [THREAD_STATE.ANSWERED, THREAD_STATE.PENDING, THREAD_STATE.DONE, THREAD_STATE.FOLLOWUP,THREAD_STATE.NONE],\n                    to: THREAD_STATE.FOLLOWUP\n                },\n            ]\n        });\n    }\n\n    function QnaThread(threadId) {\n\n        this.threadID = threadId;\n\n        this.threadStateID = threadId;\n\n        this.fsm = CreateQnaThreadStateMachine();\n\n        this.entries = [];\n\n        this.lastRecivedUpdateTime = null;\n\n        this.lastRecievedEntry = null;\n\n    }\n\n    //We mark a thread state using its last entry.This allows to track thread history while maintaining the last\n    //updated state in the last thread.\n    QnaThread.prototype._markThread = function(updateObj){\n\n        var entries = this.entries;\n\n        var lastQnaEntry = entries[entries.length - 1];\n        lastQnaEntry.setState(updateObj);\n    };\n    QnaThread.prototype.updateStateWithoutUpdate=function() {\n        switch(this.entries.last().getState()) {\n            case THREAD_STATE.DONE:\n                this.fsm.done();\n                break;\n            case THREAD_STATE.PENDING:\n                this.fsm.pending();\n                break;\n            case THREAD_STATE.FOLLOWUP:\n                this.fsm.follow();\n                break;\n            case THREAD_STATE.ANSWERED:\n                this.fsm.answer();\n                break;\n            case THREAD_STATE.CLEAR:\n                this.fsm.clear();\n                break;\n        }\n    };\n\n    QnaThread.prototype.appendEntry = function(qnaEntry) {\n\n        this.entries.push(qnaEntry);\n\n        //Message from user which is NOT me.\n        if(qnaEntry.isQuestion() ) {\n\n            this.lastRecivedUpdateTime = qnaEntry.getTime();\n\n            this.lastRecievedEntry = qnaEntry;\n        }\n\n        qnaEntry.setThread(this);\n\n\n        //Change thread state if last message contains a done or follow up signature.\n        if(qnaEntry.getState() === THREAD_STATE.DONE){\n\n            this.fsm.done();\n            return;\n        }\n        if(qnaEntry.getState() === THREAD_STATE.FOLLOWUP){\n\n            this.fsm.follow();\n            return;\n        }\n\n        if(qnaEntry.getState() === THREAD_STATE.CLEAR){\n\n            this.fsm.clear();\n            return;\n\n        }\n\n        //Message from user which is NOT me.\n        if(qnaEntry.isQuestion() ){\n\n            if(qnaEntry.getState() !== THREAD_STATE.ANSWERED) {\n                this.fsm.pending();\n            } else {\n                this.fsm.answer();\n            }\n\n        //Message made by ME.\n        }else{\n\n            //This thread is not an announcement therefore this entry is an answer.\n            if(this.entries.length > 1){\n\n                this.fsm.answer();\n\n            }\n\n            //This is an announcement made by me.\n            else{\n\n                this.fsm.pending();\n\n            }\n        }\n    };\n\n\n    QnaThread.prototype.getEntry= function(id){\n\n        for (var i=0;i<this.entries.length;i++) {\n            if (this.entries[i].getId()===id) {\n                return this.entries[i];\n            }\n        }\n        return null;\n    };\n\n    QnaThread.prototype.getEntries = function(){\n\n        return this.entries;\n    };\n\n    QnaThread.prototype.clear = function() {\n\n        this.fsm.clear();\n\n        this._markThread({State:THREAD_STATE.CLEAR});\n\n    };\n\n    QnaThread.prototype.delete = function() {\n\n        this.fsm.delete();\n\n        this._markThread({State:THREAD_STATE.DELETED});\n\n    };\n\n    QnaThread.prototype.done = function() {\n\n        this.fsm.done();\n\n        this._markThread({State:THREAD_STATE.DONE});\n\n    };\n\n    QnaThread.prototype.forward = function(assignedTo) {\n\n        this.fsm.forward();\n\n        this._markThread({State:THREAD_STATE.FORWARDED,Assignees:assignedTo});\n\n    };\n\n    QnaThread.prototype.followUp = function() {\n\n        this.fsm.follow();\n\n        this._markThread({State:THREAD_STATE.FOLLOWUP});\n\n    };\n\n    QnaThread.prototype.getThreadID = function() {\n\n        return this.threadID;\n\n    };\n\n    QnaThread.prototype.getThreadStateID = function(){\n        return this.threadID + this.entries.length.toString() + this.fsm.current;\n    };\n\n    QnaThread.prototype.getLatestReceivedEntry = function() {\n\n        return this.lastRecievedEntry;\n\n    };\n\n    QnaThread.prototype.getLastEntry = function() {\n\n        if(this.entries.length > 0) {\n\n            return this.entries[this.entries.length - 1];\n\n        }\n\n        return null;\n\n    };\n\n    QnaThread.prototype.getFirstQuestion = function() {\n\n        if(this.entries.length > 0) {\n\n            return this.entries[0];\n\n        }\n\n        return null;\n\n    };\n\n\n    QnaThread.prototype.getCreationTime = function() {\n\n        if(this.entries.length > 0) {\n\n            return this.entries[0].getTime();\n\n        }\n\n        return null;\n\n    };\n\n    QnaThread.prototype.getThreadTime = function() {\n\n        if(this.lastRecivedUpdateTime === null){\n\n            if(this.entries.length > 0) {\n\n                return this.entries[this.entries.length - 1].getTime();\n\n            }\n            return 0;\n\n        }\n\n        return this.lastRecivedUpdateTime;\n\n    };\n\n    QnaThread.prototype.isAnnouncement = function() {\n\n        return this.entries.length === 1 && this.entries[0].isAnnouncement();\n\n    };\n\n    QnaThread.prototype.isFollowUp = function() {\n\n        return this.fsm.current === THREAD_STATE.FOLLOWUP;\n\n    };\n\n    QnaThread.prototype.isAnswered = function() {\n\n        return this.fsm.current === THREAD_STATE.ANSWERED;\n\n    };\n\n    QnaThread.prototype.isDone = function() {\n\n        return this.fsm.current === THREAD_STATE.DONE;\n\n    };\n\n    QnaThread.prototype.isPending = function() {\n        var metadata = this.getCuePointMetaData();\n        var isDeletedAnnouncement = metadata && metadata.State === THREAD_STATE.DELETED && metadata.Type === \"Announcement\";\n\n        return this.fsm.current === THREAD_STATE.PENDING && !isDeletedAnnouncement;\n    };\n\n    QnaThread.prototype.getState = function(){\n\n        return this.fsm.current;\n\n    };\n\n    QnaThread.prototype.isForwarded = function(){\n\n        return this.fsm.current === THREAD_STATE.FORWARDED;\n\n    };\n\n    QnaThread.prototype.toString = function(){\n\n        return this.getThreadID();\n\n    };\n\n    QnaThread.prototype.getCuePointMetaData = function() {\n        var entry =  this.entries.length ? this.entries[0]: null;\n        return entry ? entry.cuePoint.metadata : null;\n    };\n\n    return QnaThread;\n}]);","/**\n * Created by David.OZ on 6/1/15.\n */\n\"use strict\";\n\nkQna.factory('QnaEntry',['metaDataGenerator','kalturaAPI','QandA_ResponseProfile','QandA_cuePointEnums', 'qnaSuspendFetching', 'THREAD_STATE','QandA_ResponseProfile_user',function(metaDataGenerator,kalturaAPI,QandA_ResponseProfile,QandA_cuePointEnums,qnaSuspendFetching, THREAD_STATE, QandA_ResponseProfile_user) {\n\n    //TODO: remove this dependency.\n    var myUserId = kserviceInfo.userId;\n\n    var anonymousUsersHash = (function(){\n        var _hash = [];\n        var _counter = 0;\n        return {\n            getIDFromHash: function(hash){\n                if(!_hash[hash]){\n                    _counter = _counter+1;\n                    _hash[hash] = _counter;\n                }\n                return _hash[hash];\n            }\n        };\n    })();\n\n    //Updates the metadata both locally and remotely on the server.\n    function fillMissingMetaData(metaObj,metadataId,cuePoint){\n\n        var missingData = {};\n\n        if(metaObj.ThreadId === undefined){\n\n            missingData.ThreadId = cuePoint.id;\n\n        }\n        if(metaObj.State === undefined){\n\n            missingData.State = \"Pending\";\n\n        }\n\n        metaObj = metaDataGenerator.merge(metaObj,missingData);\n\n        qnaSuspendFetching.suspend();\n        kalturaAPI.metadataService.update(metadataId,metaDataGenerator.createXmlFromObj(metaObj)).then(function() {\n            qnaSuspendFetching.resume();\n        },function() {\n            qnaSuspendFetching.resume();\n        })\n\n        return metaObj;\n\n    }\n\n    function QnaEntry(cuePoint,metaData) {\n\n        var metadata = (metaData)?metaData:cuePoint.relatedObjects[QandA_ResponseProfile].objects[0];\n\n        var metadataXml = metadata.xml;\n\n        var metaDataId = metadata.id;\n\n        this.thread = null;\n\n        var metaObj = metaDataGenerator.createObjFromXml(metadataXml);\n\n        if(metaObj.ThreadId === undefined || metaObj.State === undefined){\n\n            metaObj = fillMissingMetaData(metaObj,metaDataId,cuePoint);\n\n        }\n\n        $.extend(cuePoint,{ metadata: metaObj, metadataId: metaDataId});\n\n        this.userData = null;\n        if (cuePoint.relatedObjects && cuePoint.relatedObjects[QandA_ResponseProfile_user])\n        {\n            this.userData = cuePoint.relatedObjects[QandA_ResponseProfile_user].objects[0];\n        }\n\n        delete cuePoint.relatedObjects;\n\n        this.cuePoint = cuePoint;\n\n        this.type = cuePoint.metadata.Type ? QandA_cuePointEnums[cuePoint.metadata.Type] : undefined;\n    }\n\n    QnaEntry.prototype.getId = function() {\n\n        return this.cuePoint.id;\n\n    };\n\n    QnaEntry.prototype.setState = function(stateObj) {\n\n        //klog.info(\"Q&A setState \"+this.cuePoint.id+\" \" +JSON.stringify(stateObj));\n\n        var _this=this;\n        this.cuePoint.metadata = metaDataGenerator.merge(this.cuePoint.metadata,stateObj);\n\n        var xml=metaDataGenerator.createXmlFromObj(this.cuePoint.metadata);\n\n        qnaSuspendFetching.suspend();\n        return kalturaAPI.metadataService.update(this.cuePoint.metadataId, xml)\n            .then(function(res) {\n\n                klog.info(\"Q&A: Change metadata {0} (id={1})for cuePoint {2} successful (UpdatedAt={3})\",xml,res.id,_this.getId(),res.updatedAt);\n\n                if (stateObj.State === THREAD_STATE.DELETED && _this.cuePoint.metadata.Type === 'Announcement') {\n                    return _this._addingTagsToAnnotation()\n                        .then(function () {\n                            qnaSuspendFetching.resume();\n                        });\n                }\n                else {\n                    qnaSuspendFetching.resume();\n                }\n\n            }, function(err){\n                qnaSuspendFetching.resume();\n                klog.error(\"Q&A:  Change metadata FAILED!!! {0}\",err);\n            });\n    };\n\n    QnaEntry.prototype._addingTagsToAnnotation = function () {\n        var _this = this;\n\n        return kalturaAPI.qnaService.updateAnnotationCuePointTag(_this.cuePoint.id, _this.cuePoint.tags + ', ' + 'Annotation_Deleted')\n            .then(function (res) {\n                klog.info('Q&A update Annotation CuePoint Tag succeeded ' + JSON.stringify(res));\n            })\n            .catch(function (err) {\n                klog.error('Q&A: Change CuePoint Tag FAILED! ' + JSON.stringify(err));\n            });\n    };\n\n    QnaEntry.prototype.getContent = function() {\n\n        return this.cuePoint.text;\n\n    };\n\n    QnaEntry.prototype.wasEntryCreatedByMe = function() {\n\n        return this.cuePoint.userId === myUserId;\n\n    };\n\n    QnaEntry.prototype.getTime = function() {\n\n        return this.cuePoint.createdAt;\n\n    };\n\n    QnaEntry.prototype.getUpdateTime = function() {\n\n        return this.cuePoint.updatedAt;\n\n    };\n\n\n    QnaEntry.prototype.getOwner = function() {\n\n        if (this.type === QandA_cuePointEnums.Question){\n\n            // If this is an anonymous user, the ThreadCreatorId will be ##<anonymousUserName>HashSeparator<HashCode(can be negative)>##\n            // To identify it it should\n            // * start and end with ##\n            // * has the string \"HashSeparator\"\n            // * after the \"HashSeparator\" have only a number (or a negative number)\n\n            var HashSeparator = \"HashSeparator\";\n            var userId = this.cuePoint.metadata.ThreadCreatorId;\n            var startEndToken = \"##\";\n\n            if (userId.startsWith(startEndToken) && userId.endsWith(startEndToken)){\n                var lastHashSeparatorIndex = userId.lastIndexOf(HashSeparator);\n                if (lastHashSeparatorIndex >= 0){\n                    var hashCode = userId.substring(lastHashSeparatorIndex + HashSeparator.length, userId.length - startEndToken.length);\n                    if (!isNaN(hashCode) && isFinite(hashCode)){\n                        return userId.substring(startEndToken.length, lastHashSeparatorIndex) + anonymousUsersHash.getIDFromHash(hashCode);\n                    }\n                }\n            }\n\n            let firstLast = this.getFirstLast();\n            if (firstLast)\n                return firstLast;\n            return this.cuePoint.metadata.ThreadCreatorId;\n        }\n        if (this.cuePoint.userId && this.userData)\n        {\n            let firstLast = this.getFirstLast();\n            if (firstLast)\n                return firstLast;\n        }\n        return this.cuePoint.userId;\n\n    };\n\n    QnaEntry.prototype.getThreadId = function() {\n\n        return this.cuePoint.metadata.ThreadId;\n\n    };\n\n    QnaEntry.prototype.isAnnouncement = function() {\n\n        return this.type === QandA_cuePointEnums.Announcement;\n\n    };\n\n    QnaEntry.prototype.getState = function(){\n\n        return this.cuePoint.metadata.State;\n\n    };\n\n    QnaEntry.prototype.getThreadCreatorId = function(){\n\n        return this.cuePoint.metadata.ThreadCreatorId;\n\n    };\n\n    QnaEntry.prototype.getMetaDataId = function(){\n\n        return this.cuePoint.metadataId;\n\n    };\n\n    QnaEntry.prototype.getMetaData = function(){\n\n        return this.cuePoint.metadata;\n\n    };\n\n    QnaEntry.prototype.getType = function(){\n\n        return this.cuePoint.metadata.Type;\n\n    };\n\n    QnaEntry.prototype.getStartTime = function(){\n\n        return this.cuePoint.startTime;\n\n    };\n\n    QnaEntry.prototype.getEndTime = function(){\n\n        return this.cuePoint.endTime;\n\n    };\n\n    QnaEntry.prototype.isAnswerOnAir = function(){\n\n        return this.type === QandA_cuePointEnums.AnswerOnAir;\n\n    };\n\n    QnaEntry.prototype.isQuestion = function(){\n\n        return this.type === QandA_cuePointEnums.Question;\n\n    };\n\n    QnaEntry.prototype.setThread = function(thread){\n\n        this.thread = thread;\n    };\n\n    QnaEntry.prototype.getThread = function(thread){\n\n        return this.thread;\n    };\n\n    QnaEntry.prototype.toString = function() {\n\n        return JSON.stringify(this);\n\n    };\n\n    QnaEntry.prototype.getFirstLast = function() {\n        if (this.userData)\n        {\n\n            let firstLast = '';\n            if (this.userData.firstName)\n            {\n                firstLast += this.userData.firstName;\n            }\n            if (this.userData.lastName)\n            {\n                firstLast += ' ' + this.userData.lastName;\n            }\n            return firstLast;\n        }\n        return null;\n    }\n\n    return QnaEntry;\n\n}]);\n","/**\n * Created by David.OZ on 5/19/15.\n */\n/**\n * Created by David.OZ on 6/1/15.\n */\n\n\"use strict\";\n\nkQna.factory('QnaThreadsManager', function(metaDataGenerator,kalturaAPI,QnaThread,THREAD_STATE, $rootScope) {\n\n\n    function QnaThreadsManager(){\n        this.threads = [];\n        this.onAirThreads = [];\n        this.threadsDictionary = {};\n        this.displayEntries = [];\n        this._counters = {};\n        this._counters[THREAD_STATE.NONE] =     { total: 0 };\n        this._counters[THREAD_STATE.ANSWERED] = { total: 0 };\n        this._counters[THREAD_STATE.FOLLOWUP] = { total: 0 };\n        this._counters[THREAD_STATE.DONE] =     { total: 0 };\n        this._counters[THREAD_STATE.PENDING] =  { total: 0, newMessages: 0 };\n        this._counters[THREAD_STATE.ANNOUNCED]= { total: 0 };\n        this._counters[THREAD_STATE.FORWARDED]= { total: 0 };\n        this._counters[THREAD_STATE.CLEAR] =    { total: 0 };\n    }\n\n\n    QnaThreadsManager.prototype.updateCounters = function(from,to, metadata, isFirstFetch){\n\n        if(from !== null){\n            this._counters[from].total -= 1;\n\n            if (this._counters[from].total === 0 && from === THREAD_STATE.PENDING) {\n                this._counters[THREAD_STATE.PENDING].newMessages = 0;\n            }\n        }\n        if(to !== null && !_isMarkedAsDeleted(metadata)){\n            this._counters[to].total += 1;\n\n            // Update New-Messages counter\n            if (!isFirstFetch && to === THREAD_STATE.PENDING) {\n                this._counters[THREAD_STATE.PENDING].newMessages++;\n                $rootScope.$emit('NewIncomingMessage');\n            }\n        }\n\n        //klog.warn(\"Q&A: Moved from {0} to {1} = {2}\",from,to,$.map(this._counters,function(a,b) { return b+\"=\"+a.total;}).join(\";\"));\n    };\n\n    function _isMarkedAsDeleted(metadata) {\n        return metadata && metadata.State === THREAD_STATE.DELETED;\n    }\n\n    /*\n     * This function parses the data received from server and updates the live data data structure respectively.\n     * Assumption:data is a list QnaThreads.\n     */\n    QnaThreadsManager.prototype.appendQnaData = function(newItems, isFirstFetch){\n\n        //klog.debug(\"Q&A: got new items from server ({0}) \",newItems.length);\n\n        for(var i = 0;i < newItems.length;i++) {\n\n            var qnaEntry = newItems[i];\n\n            var type = qnaEntry.getType();\n\n            if(qnaEntry.getType() === \"AnswerOnAir\"){\n\n                var updated=false;\n                for(var j=0;j<this.onAirThreads.length;j++) {\n                    if (this.onAirThreads[j].getId()===qnaEntry.getId()) {\n                        this.onAirThreads[j]=qnaEntry;\n                        updated=true;\n                        break;\n                    }\n                }\n                if (!updated) {\n                    this.onAirThreads.push(qnaEntry);\n                }\n                continue;\n            }\n\n            var qnaEntryThreadId = qnaEntry.getThreadId();\n\n            var qnaThread = this.threadsDictionary[qnaEntryThreadId];\n\n            var fromThreadState = null;\n\n            var targetThreadState = null;\n\n            //This is a new entry which does not belong to any thread, therefore we create a new thread.\n            if (qnaThread === undefined)\n            {\n\n                qnaThread = new QnaThread(qnaEntryThreadId);\n\n                this.threads.push(qnaThread);\n\n                this.displayEntries.push(qnaEntry);\n\n                this.threadsDictionary[qnaEntryThreadId] = qnaThread;\n\n            }\n            //We add to an existing thread, we first verify if this thread location (priority) should be changed.\n            else\n            {\n                fromThreadState = qnaThread.getState();\n\n                var oldEntry=qnaThread.getEntry(qnaEntry.getId());\n                if (oldEntry) {\n                    //update existing one if state has changed and update time is newer\n                    if (oldEntry.getUpdateTime()<=qnaEntry.getUpdateTime() &&\n                        oldEntry.getState()!==qnaEntry.getState()) {\n                        klog.info(\"Q&A: Updated stated from server for {0} \",qnaEntry.toString());\n                        oldEntry.cuePoint.metadata.State = qnaEntry.getState();\n                        oldEntry.getThread().updateStateWithoutUpdate(qnaEntry.getState());\n                        this.updateCounters(fromThreadState, qnaEntry.getState(), qnaThread.getCuePointMetaData() ,isFirstFetch);\n                    }\n                    continue;\n                }\n\n\n                //This is the case where we need to set a new priority to this thread and move it be the first.This happens when the entry is\n                //an announcement or if the entry is a Question/Response from user.\n                if (qnaEntry.isQuestion() )\n                {\n                    let foundNonQuestion = false;\n                    for (let i = 0; i < qnaThread.entries.length; i++)\n                    {\n                        if (!qnaThread.entries[i].isQuestion())\n                        {\n                            foundNonQuestion = true;\n                        }\n                    }\n                    if (!foundNonQuestion)\n                    {\n                        var ThreadIndex = this.threads.indexOf(qnaThread);\n                        this.threads.splice(ThreadIndex, 1);\n                        var entryIndex = this.displayEntries.indexOf(qnaThread.entries[0]);\n                        var tmpEntry = this.displayEntries.splice(entryIndex, 1);\n                        this.threads.push(qnaThread);\n                        // this.threads.unshift(qnaThread);\n                        this.displayEntries.push(qnaThread.entries[0]);\n                        // this.displayEntries.unshift(qnaThread.entries[0]);\n                    }\n                    if (foundNonQuestion)\n                    {\n                        //We update a previous thread AND we need to remove it from its position and advance it to be the first.\n\n                        var ThreadIndex = this.threads.indexOf(qnaThread);\n\n                        var entryIndex = this.displayEntries.indexOf(qnaThread.getLatestReceivedEntry());\n\n                        klog.info(\"Q&A: Replaced entry in displayEntries entryIndex {0} to ThreadIndex {1}\", entryIndex, ThreadIndex);\n                        this.threads.splice(ThreadIndex, 1);\n                        this.displayEntries.splice(entryIndex, 1);\n                        this.threads.push(qnaThread);\n                        this.displayEntries.push(qnaEntry);\n                    }\n                }\n            }\n            klog.info(\"Q&A: Added {0} to thread {1}\",qnaEntry.toString(),qnaThread.toString());\n            //We add the entry to the thread.\n            qnaThread.appendEntry(qnaEntry);\n\n            targetThreadState = qnaThread.getState();\n\n            this.updateCounters(fromThreadState,targetThreadState, qnaThread.getCuePointMetaData(), isFirstFetch);\n\n            if(qnaEntry.isAnnouncement()){\n\n                this._counters[THREAD_STATE.ANNOUNCED].total += 1;\n            }\n        }\n\n    };\n\n    QnaThreadsManager.prototype.getThreadList = function(){\n\n        return this.threads;\n\n    };\n\n    QnaThreadsManager.prototype.getCounters = function(){\n\n        return this._counters;\n\n    };\n\n    QnaThreadsManager.prototype.clearNewMessagesCounter = function() {\n        this.counters && this.counters[THREAD_STATE.PENDING] && (this.counters[THREAD_STATE.PENDING].newMessages = 0);\n    };\n\n    QnaThreadsManager.prototype.setThreadAsDone = function(qnaThread){\n\n        var prevState = qnaThread.getState();\n\n        qnaThread.done();\n\n        this.updateCounters(prevState,THREAD_STATE.DONE);\n\n    };\n\n    QnaThreadsManager.prototype.setThreadAsDoneByThreadId = function(qnaThreadID){\n\n        var qnaThread = this.threadsDictionary[qnaThreadID];\n\n        if(qnaThread){\n            this.setThreadAsDone(qnaThread);\n        }\n        else{\n\n            klog.error(\"Error could not set thread as done since thread does not exist.\");\n\n        }\n    };\n\n\n    QnaThreadsManager.prototype.setThreadAsFollowed = function(qnaThread){\n\n        var prevState = qnaThread.getState();\n\n        qnaThread.followUp();\n\n        this.updateCounters(prevState,THREAD_STATE.FOLLOWUP);\n\n    };\n\n    QnaThreadsManager.prototype.setThreadAsForwarded = function(qnaThread,assignedTo){\n\n        var prevState = qnaThread.getState();\n\n        qnaThread.forward(assignedTo);\n\n        this.updateCounters(prevState,THREAD_STATE.FORWARDED);\n\n    };\n\n    QnaThreadsManager.prototype.setThreadAsCleared = function(qnaThread){\n\n        var prevState = qnaThread.getState();\n\n        qnaThread.clear();\n\n        this.updateCounters(prevState,THREAD_STATE.CLEAR);\n    };\n\n    QnaThreadsManager.prototype.deleteAnnouncementThread = function(qnaThread){\n        var prevState = qnaThread.getState();\n        qnaThread.delete();\n        this.updateCounters(prevState, null);\n    };\n\n    QnaThreadsManager.prototype.activeOnAirAnswer = function(id){\n\n        return this.onAirThreads.filter(function(answer) {\n            return answer.getEndTime()===undefined;\n        });\n    };\n\n    return QnaThreadsManager;\n});\n","/**\n * Created by David.OZ on 3/31/15.\n */\n\n'use strict';\n\nkQna.factory('qnaService',\n    function (kalturaService, kalturaAPI,$http,$timeout,metaDataGenerator,QnaEntry,QnaThreadsManager,THREAD_STATE,\n              QandA_cuePointEnums,QandA_ResponseProfile,QandA_ResponseProfileSystemName,QandA_MetadataProfileSystemName,\n              qnaExport,qnaSuspendFetching,kProducerActions,kEntryManagementService,qnaEventNotificationTemplates) {\n\n        var qnaThreadManager = new QnaThreadsManager();\n\n        var isLoading = true;\n\n        //Public API.\n        var _liveData = {\n\n            states : THREAD_STATE,\n\n            incomingCounters: qnaThreadManager._counters[THREAD_STATE.PENDING],\n\n            qnaThreadsList : qnaThreadManager.getThreadList(),\n\n            displayList : qnaThreadManager.displayEntries,\n\n            counters: qnaThreadManager.getCounters(),\n\n            clearNewMessagesCounter: qnaThreadManager.clearNewMessagesCounter,\n\n            liveDataIsReady : false,\n\n            //TODO: apply changes to these values if needed or remove.\n            qnaEnabled : configuration.qnaEnabled,\n\n            announcementsOnly : false,\n\n            answerOnAirEntry : null\n        };\n\n\n        var metadataProfileId = null;\n\n        var onIncomingCallbacks = [];\n        \n        var _qnaModuleSettings = { qnaEnabled: true, announcementOnly:false, time: new Date()};\n        \n        var bootPromise = null;\n\n        var customMetadataProfile = null;\n\n\n        //Represent cue point creation time.This variable holds the last known time stamp where we received cue points for.\n        var nextRequestStartTime = null;\n\n        var lastUpdateTimeInComputerClock=new Date();\n\n        var pollingGracePeriod = 0;//how much time to query backward from last CP\n        var maxPollingGracePeriod = 20;\n\n        kEntryManagementService.addPushServerNotificationsToClearOnArchive(qnaEventNotificationTemplates);\n\n        /**\n         *  register to QnA producer actions\n         */\n        function init() {\n\n            kProducerActions.isReady().then(function() {\n\n                // listen to changes from server and act accordingly\n                kProducerActions.subscribeStateChange(function () {\n\n                    onProducerStateChanged(false);\n                });\n\n                // run sync from server once to sync producer state (if server doesn't contain any relevant cuepoint)\n                onProducerStateChanged(true);\n            });\n        }\n\n        /**\n         * check if producer app is updated with the most relevant QnA settings\n         */\n        function onProducerStateChanged(forceRefreshState) {\n\n            var currentTime = new Date();\n            var qnaSettings = kProducerActions.getState('actions.player-qna-settings-update.qnaSettings');\n\n            ///todo: this is temp fix until push server will preserve state messages for longer than 24h\n            var refreshStateThesholdInHours = 12;\n\n            if (qnaSettings) {\n\n                //since push server saves notification for only a day we might need to re-add cuepoint\n                forceRefreshState = !qnaSettings.time  ||\n                    (forceRefreshState && (new Date()-new Date(qnaSettings.time) )>refreshStateThesholdInHours*60*60*1000);\n                if (qnaSettings !== _qnaModuleSettings) {\n                    klog.info('syncing state from server. \"qnaSettings\" = \"{0}\" (previous value \"{1}\")',\n                        qnaSettings, _qnaModuleSettings);\n\n                    //update current qna settings object\n                    _qnaModuleSettings.qnaEnabled = qnaSettings.qnaEnabled;\n                    _qnaModuleSettings.announcementOnly = qnaSettings.announcementOnly;\n                }\n            }\n            if (forceRefreshState || !qnaSettings)\n            {\n                //initial state - just started broadcasting and no settings cue points were found - set app defaults\n                kProducerActions.setStateOrientedAction('player-qna-settings-update',\n                    {\n                        qnaSettings: {\n                            qnaEnabled: _qnaModuleSettings.qnaEnabled,\n                            announcementOnly: _qnaModuleSettings.announcementOnly,\n                            time: currentTime\n                        }\n                    });\n            }\n\n        }\n\n        function updateListeners(){\n\n            for(var i=0;i<onIncomingCallbacks.length;i++){\n\n                var onIncomingCallBack = onIncomingCallbacks[i];\n\n                onIncomingCallBack(_liveData.counters[THREAD_STATE.PENDING].total);\n\n            }\n        }\n\n        function cuePointsDebugPrint(cuePointsList){\n\n            var cuePointCreationTime = null;\n\n            var curPointUpdateTime = null;\n\n            var cuePointxml = null;\n\n            var cuePonitId = null;\n\n            var cuePointMessage = null;\n\n            var cuePoint = null;\n\n            for(var i=0;i<cuePointsList.length;i++){\n\n                cuePoint = cuePointsList[i];\n\n                if(cuePoint.relatedObjects !== undefined){\n\n                    klog.warn(\"cuePointid:\"+cuePoint.id+\",text:\"+cuePoint.text+\",createdAt:\"+cuePoint.createdAt+\",updatedAt:\"+cuePoint.updatedAt+\",xml:\"+cuePoint.relatedObjects[QandA_ResponseProfile].objects[0].xml);\n\n                }\n                else if(cuePoint.metadata !== undefined){\n\n                    klog.warn(\"cuePointid:\"+cuePoint.id+\",text:\"+cuePoint.text+\",createdAt:\"+cuePoint.createdAt+\",updatedAt:\"+cuePoint.updatedAt+\",metadata:\"+cuePoint.metadata);\n\n                }\n                else{\n                    klog.warn(\"Problem with cuepoint.missing metadata and related object.cuepoint with id:\"+cuePoint.id);\n                }\n\n            }\n        }\n\n        function getItems(startTime,endTime) {\n\n            return kalturaAPI.login().then(function () {\n\n                return kalturaAPI.qnaService.list(configuration.MediaEntryId, QandA_ResponseProfileSystemName, startTime, endTime).then(function (res) {\n\n                    if (qnaSuspendFetching.isSuspended()) {\n                        klog.info(\"Q&A: Suspending fetching new questions/updated (pending requests) for next {0} ms\",configuration.qnaPollingInterval);\n                        return Promise.reject(\"Suspended\");\n                    }\n\n                    var retVal = [];\n\n                    var latestUpdateTime = 0;\n\n                    var cuePoint = null;\n\n                    res.objects.sort(function(a,b){\n\n                        return a.updatedAt - b.updatedAt;\n\n                    });\n\n                    for(var i = 0;i < res.objects.length;i++){\n\n                        cuePoint = res.objects[i];\n\n                        if (!(cuePoint.relatedObjects && cuePoint.relatedObjects[QandA_ResponseProfile] && cuePoint.relatedObjects[QandA_ResponseProfile].objects &&\n                            cuePoint.relatedObjects[QandA_ResponseProfile].objects.length>0 && cuePoint.relatedObjects[QandA_ResponseProfile].objects[0].xml !== undefined)){\n\n                            klog.warn(\"Skipping the following cuePoint in this request due to invalid values:\");\n\n                            cuePointsDebugPrint([cuePoint]);\n\n                            continue;\n\n                        }\n\n                        var qnaEntry = new QnaEntry(cuePoint);\n\n                        if (qnaEntry.getUpdateTime() > latestUpdateTime){\n\n                            latestUpdateTime = qnaEntry.getUpdateTime();\n                        }\n\n\n                        retVal.push(qnaEntry);\n\n                    }\n\n                    isLoading = false;\n\n                    return Promise.resolve({data:retVal,lastUpdateTime:latestUpdateTime});\n                });\n            });\n        }\n\n\n\n        //Call the KALTURA service to get new Qna values.\n        function updateValues(isFirstFetch) {\n\n\n            function requestAgain(){\n\n                $timeout(function(){\n\n                    updateValues();\n\n                },configuration.qnaPollingInterval);\n            }\n\n            if (qnaSuspendFetching.isSuspended()) {\n                klog.info(\"Q&A: Suspending fetching new questions/updated (pending requests) for next {0} ms\",configuration.qnaPollingInterval);\n                requestAgain();\n                return;\n            }\n\n            try {\n\n                getItems(Math.max(0,nextRequestStartTime-pollingGracePeriod)).then(function(result){\n\n                    var newItems = result.data;\n\n                    var latestUpdateTime = result.lastUpdateTime;\n\n                    try{\n                        //new items is a list of QnaEntry objects.\n                        if (newItems && newItems.length>0) {\n\n                            qnaThreadManager.appendQnaData(newItems, isFirstFetch);\n\n                            if (_liveData.answerOnAirEntry) {\n                                newItems.forEach(function(answer) {\n                                    if (answer.getId()===_liveData.answerOnAirEntry.getId() &&\n                                       answer.getEndTime()>0) {\n                                        _liveData.answerOnAirEntry = null;\n                                    }\n                                });\n                            }\n\n                            updateListeners();\n                        }\n\n                        if(latestUpdateTime !== 0){\n\n                            if (nextRequestStartTime!==latestUpdateTime) {\n                                lastUpdateTimeInComputerClock = new Date();\n                            }\n                            nextRequestStartTime = latestUpdateTime;\n                        }\n\n                        pollingGracePeriod = Math.min(maxPollingGracePeriod,Math.max(0, maxPollingGracePeriod  + ( lastUpdateTimeInComputerClock - new Date()   ) / 1000  ));\n                        _liveData.liveDataIsReady = true;\n\n                        requestAgain();\n                    }\n                    catch(err){\n                        klog.error(\"Error while trying to append qna updates. \"+err);\n                        requestAgain();\n                    }\n                },function(updateErr){\n                    klog.error(\"Failed updating Qna Messages, retrying. {0}\", updateErr);\n                    requestAgain();\n                });\n            }\n\n            catch(err) {\n\n                klog.error(\"Error while trying to request qna updates.\");\n                requestAgain();\n\n            }\n        }\n\n        var _exportQnaData = function(){\n\n            qnaExport.exportQnaDataToFile(_liveData.qnaThreadsList);\n\n        };\n\n\n        var _getLiveData = function(){\n\n            return _liveData.qnaThreadsList;\n\n        };\n\n\n        var bootAPI = function() {\n            if (bootPromise) {\n                return bootPromise;\n            }\n            bootPromise= kalturaAPI.login().then(function() {\n                kalturaAPI.startMultirequest();\n\n                kalturaAPI.metadataProfileService.list(QandA_MetadataProfileSystemName);\n\n                kalturaAPI.responseProfileService.list(QandA_ResponseProfileSystemName);\n\n                kalturaAPI.execMultirequest().then( function(results) {\n\n                    customMetadataProfile = results[0].objects[0];\n\n                    metadataProfileId = customMetadataProfile.id;\n                    if (results[1].objects.length===0) {\n                        kalturaAPI.responseProfileService.add(QandA_ResponseProfileSystemName, QandA_ResponseProfile).then(function (r) {\n                            klog.warn(\"response profile  was created \" + JSON.stringify(r));\n\n                        });\n                    }\n                });\n            });\n\n            return bootPromise;\n        };\n\n        bootAPI().then(function(data){\n\n            init();\n\n            //Start a \"thread\" which polls for qna data.\n            updateValues(true);\n\n        },function(err){\n\n            //Boot failed we probably have an internal server error, need to handle this case.\n            klog.error(\"qna service failed to boot.\");\n\n        });\n\n        function createItem(msgContent,type,parent,state,timeStamp,searchableOnEntry, tagsToAdd){\n\n            klog.info(\"Q&A: Creating item content='{0}' type='{1}' state='{2}' \",msgContent,type,state);\n            var xml;\n\n            var metaDataObj = null;\n\n            if(parent) {\n\n                metaDataObj = {State:state, ThreadId:parent.getThreadId(), Type:type, ThreadCreatorId:parent.getThreadCreatorId()};\n\n            } else{\n\n                metaDataObj = {State:state, Type:type};\n\n            }\n\n            xml = metaDataGenerator.createXmlFromObj(metaDataObj);\n\n            return bootAPI().then(function (){\n\n                qnaSuspendFetching.suspend();\n                kalturaAPI.startMultirequest();\n\n                kalturaAPI.qnaService.addAnnotationCuePoint(configuration.MediaEntryId, msgContent,(parent !== null)?parent.id:undefined,timeStamp,searchableOnEntry);\n                //take the id from the above response and add the annotation metadata\n                kalturaAPI.metadataService.add(\"{1:result:id}\",customMetadataProfile.id,\"annotationMetadata.Annotation\",xml);\n\n                kalturaAPI.qnaService.updateAnnotationCuePointTag(\"{1:result:id}\", tagsToAdd);\n\n                return kalturaAPI.execMultirequest().then(function(res){\n\n                    qnaSuspendFetching.resume();\n                    klog.info(\"Successful item creation.\");\n\n                    return res;\n\n                },function(err){\n                    qnaSuspendFetching.resume();\n                    klog.error(\"Error metadata.\");\n\n                });\n            });\n        }\n\n        function updateItem(qnaEntry,time){\n\n            var srcMetadata = qnaEntry.getMetaData();\n\n            var targetMetaData = metaDataGenerator.merge(srcMetadata,{State:THREAD_STATE.DONE});\n\n            var xml = metaDataGenerator.createXmlFromObj(targetMetaData);\n\n            return bootAPI().then(function (){\n\n                qnaSuspendFetching.suspend();\n\n                kalturaAPI.startMultirequest();\n\n                kalturaAPI.metadataService.update(qnaEntry.getMetaDataId(),xml);\n\n                kalturaAPI.qnaService.updateAnnotationCuePoint(qnaEntry.getId(),time);\n\n                return kalturaAPI.execMultirequest().then(function(res){\n\n                    qnaSuspendFetching.resume();\n                    klog.info(\"Successful item creation.\");\n                    return res;\n\n                },function(err){\n\n                    qnaSuspendFetching.resume();\n                    klog.error(\"Error metadata.\");\n\n                });\n            });\n\n        }\n\n\n\n        function _enableQna(){\n            kProducerActions.setStateOrientedAction('player-qna-settings-update',\n                {qnaSettings : { qnaEnabled: true, announcementOnly:false}});\n        }\n\n        function _disableQna(){\n            kProducerActions.setStateOrientedAction('player-qna-settings-update',\n                {qnaSettings : { qnaEnabled: false, announcementOnly:false}});\n        }\n\n        function _enableAnnouncementsOnly(){\n            kProducerActions.setStateOrientedAction('player-qna-settings-update',\n                {qnaSettings : { qnaEnabled: true, announcementOnly:true}});\n        }\n\n        function _disableAnnouncementsOnly(){\n            _enableQna();\n        }\n\n        function _answerOnAir(msgContent,time){\n\n            return new Promise(function(sucsess, failure){\n\n                function itemPromise(){\n                    createItem(msgContent,\"AnswerOnAir\",null,THREAD_STATE.PENDING,time, true).then(function(res){\n\n\n                        _liveData.answerOnAirEntry = new QnaEntry(res[0],res[1]);\n\n                        sucsess(res);\n\n                    },function(err){\n\n                        failure(err);\n\n                    });\n                }\n\n                if(_liveData.answerOnAirEntry   ){\n\n                    _endAnswerOnAir(time - 1).then(function(res){\n\n                        itemPromise();\n\n                    },function(err) {\n\n                        failure(err);\n\n                    });\n\n                    failure(\"Answer On Air is already running.\");\n\n                }\n\n                itemPromise();\n\n            });\n        }\n        \n        function _endAnswerOnAir(time){\n\n            return new Promise(function(sucsess, failure){\n\n                if(!_liveData.answerOnAirEntry){\n\n                    failure(\"Answer On Air is not running.\");\n\n                }\n\n                updateItem(_liveData.answerOnAirEntry,time).then(function(res){\n\n                    _liveData.answerOnAirEntry = null;\n\n                    sucsess(res);\n\n                },function(err){\n\n                    failure(err);\n\n                });\n\n            });\n\n        }\n\n            \n        return {\n\n            disableQna : function(){\n                return _disableQna();\n            },\n    \n            enableQna : function(){\n                return _enableQna();\n            },\n    \n            enableAnnouncementsOnly: function(){\n                return _enableAnnouncementsOnly();\n            },\n            disableAnnouncementsOnly: function(){\n                return _disableAnnouncementsOnly();\n            },\n            \n            makeAnnouncement: function (msgContent) {\n                //msgContent,type,parent,state\n                return createItem(msgContent,\"Announcement\",null,THREAD_STATE.PENDING);\n    \n            },\n\n            startAnswerOnAir :function(msgContent,time) {\n\n                return _answerOnAir(msgContent,time);\n\n            },\n\n            endAnswerOnAir : function(time){\n\n                return _endAnswerOnAir(time);\n\n            },\n    \n            askQuestion: function (msgContent,assignees) {\n    \n                return createItem(msgContent,\"Question\",null,THREAD_STATE.PENDING);\n    \n            },\n    \n            setQnaThreadAsDone : function(qnaThread){\n    \n                qnaThreadManager.setThreadAsDone(qnaThread);\n    \n                updateListeners();\n    \n            },\n    \n            setQnaThreadAsFollow : function(qnaThread){\n    \n                qnaThreadManager.setThreadAsFollowed(qnaThread);\n    \n                updateListeners();\n    \n            },\n    \n            setQnaThreadAsCleared : function(qnaThread){\n    \n                qnaThreadManager.setThreadAsCleared(qnaThread);\n    \n                updateListeners();\n    \n            },\n\n            deleteAnnouncementThread : function(qnaThread){\n                qnaThreadManager.deleteAnnouncementThread(qnaThread);\n                updateListeners();\n            },\n    \n            registerOnIncomingCallback : function(callbackFunc){\n    \n                onIncomingCallbacks.push(callbackFunc);\n    \n            },\n    \n            makeReply: function(entryBeingReplied,msgContent, tagsToAdd) {\n                tagsToAdd = (tagsToAdd !== undefined) ? tagsToAdd : null;\n    \n                return createItem(msgContent,\"Answer\",entryBeingReplied,THREAD_STATE.ANSWERED, null, null, tagsToAdd);\n    \n            },\n\n            isAnsweringOnAir : function(){\n                return _liveData.answerOnAirEntry!==null;\n            },\n\n            isAnotherEntryBeingAnswered : function() {\n                return qnaThreadManager.activeOnAirAnswer().filter(function(item) {\n                    if (_liveData.answerOnAirEntry === null ||\n                        item.getId() !== _liveData.answerOnAirEntry.getId()) {\n                        return true;\n                    }\n                    return false;\n                }).length>0;\n            },\n\n            endAllServerAnswerOnAir:function(time) {\n                qnaThreadManager.activeOnAirAnswer().forEach(function(item) {\n                    updateItem(item,time);\n                });\n            },\n\n            exportQnaDataToFile : _exportQnaData,\n    \n            liveData : _liveData,\n    \n            getLiveData : _getLiveData,\n    \n            getQnaModuleState: _qnaModuleSettings,\n    \n            isLoading: function() { return isLoading; },\n    \n            getRawCuePoints: function () {\n    \n                return kalturaAPI.qnaService.list(configuration.MediaEntryId,this.QandA_ResponseProfileSystemName);\n    \n            },\n    \n            QandA_ResponseProfileSystemName: QandA_ResponseProfileSystemName,\n    \n            QandA_ResponseProfile: QandA_ResponseProfile,\n\n            QandA_MetadataProfileSystemName: QandA_MetadataProfileSystemName\n        };\n});\n\n","\n'use strict'\n\nkQna.filter('lastCreated',['gettextCatalog',function(gettextCatalog){\n    // In the return function, we must pass in a single parameter which will be the data we will work on.\n    // We have the ability to support multiple other parameters that can be passed into the filter optionally\n    var minutesText = \" \"+gettextCatalog.getString(\"mins\");\n    var nowText = gettextCatalog.getString(\"Now\");\n    var multipleHoursText = gettextCatalog.getString(\"hrs\");\n    var singleHourText = gettextCatalog.getString(\"hr\");\n\n    return function(lastUpdateTime,createdAt) {\n\n        lastUpdateTime/=1000;\n\n\n        var hours = parseInt( lastUpdateTime / 3600 );\n        var minutes = parseInt( lastUpdateTime / 60 ) % 60;\n        var seconds = lastUpdateTime % 60;\n\n        if (hours === 0) {\n            //Between 1 to 2 minutes\n            if (minutes <= 1) {\n\n                return \"Now\";\n\n            }\n\n            return minutes + \" \" + minutesText;\n        }\n        //Assumption: >= than 1 hour ago.\n        if(hours < 24){\n\n            return hours + ((hours === 1) ? \" \" + singleHourText : \" \" + multipleHoursText);\n\n        }\n        else{\n\n            return createdAt.toLocaleDateString();\n        }\n    };\n}]);","/**\n * Created by David.OZ on 5/12/15.\n */\n\n'use strict';\n/*\n * Incoming screen directive.Represent the live feed screen where producer receives all incoming data from users.\n * Also this module holds connection to the model of the qnaService.\n */\nkQna.directive('kwpQnaScreenAnswerOnAirRecording', function (gettextCatalog,QnaEntry,qnaService, $timeout) {\n\n    var controller = ['$scope','qnaService','captureService','gettextCatalog', function ($scope,qnaService,captureService,gettextCatalog) {\n\n        $scope.transmitAnswerOnAir = function(parentEntry,msgText){\n\n            return captureService.getPosition().then(function (time) {\n\n                return qnaService.startAnswerOnAir(msgText,time);\n\n            });\n\n        };\n\n        $scope.transmitEndOfAnswerOnAir = function(){\n\n            return captureService.getPosition().then(function (time) {\n\n                return qnaService.endAnswerOnAir(time);\n\n            });\n\n        };\n\n        $scope.endAllServerAnswerOnAir = function(){\n\n            return captureService.getPosition().then(function (time) {\n\n                return qnaService.endAllServerAnswerOnAir(time);\n\n            });\n\n        };\n        $scope.qnaService = qnaService;//.isAnsweringOnAir();\n\n    }];\n\n    return {\n        restrict : 'E',\n\n        controller: controller,\n\n        link: function (scope, elem, attrs) {\n\n            scope.readonly = true;\n\n            var userOnAirConfirmationText = gettextCatalog.getString(\"Your question will be answered on-air.\");\n\n            var textElement = elem.find(\".editOnAirText\")[0];\n\n            scope.onAirText = scope.currentSelectedEntry.getContent();\n\n\n\n            scope.stopRecording = function() {\n\n                if (qnaService.isAnotherEntryBeingAnswered()) {\n                    return;\n                }\n                if (!scope.qnaService.isAnsweringOnAir()) {\n\n                    return;\n                }\n\n                scope.loading = true;\n\n                scope.transmitEndOfAnswerOnAir().then(function(res){\n\n                    scope.loading = false;\n\n                },function(err){\n\n                    scope.loading = false;\n\n                });\n            }\n\n\n            scope.startRecording = function() {\n\n                if (qnaService.isAnotherEntryBeingAnswered()) {\n                    return;\n                }\n                if (scope.qnaService.isAnsweringOnAir() || !scope.captureService.isBroadcasting()) {\n\n                    return;\n                }\n\n                scope.loading = true;\n\n                scope.transmitAnswerOnAir(scope.currentSelectedEntry,scope.onAirText).then(function(entry){\n\n                    scope.qnaService.makeReply(scope.currentSelectedEntry,userOnAirConfirmationText, 'qna, aoa_auto_reply');\n\n                    scope.loading = false;\n\n                },function(err){\n\n                    klog.error(\"Error sending answer on-air.\");\n\n                    scope.loading = false;\n\n                });\n            }\n\n\n            scope.toggleRecording = function(){\n\n                if(scope.loading){\n                    return;\n                }\n\n                if(!scope.qnaService.isAnsweringOnAir() && scope.captureService.isBroadcasting()){\n\n                    scope.startRecording();\n                }\n                else if(scope.qnaService.isAnsweringOnAir()){\n\n                    scope.stopRecording();\n\n                }\n                else{\n                    klog.info(\"On Air is disabled no video stream.\");\n                }\n            };\n\n            scope.onEditButtonClick = function(){\n\n                scope.readonly = !scope.readonly;\n\n                if(!scope.readonly){\n\n                    $timeout(function(){\n                        textElement.focus();\n                    },0);\n                }\n\n            };\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaScreenAnswerOnAirRecording.html\"\n    };\n});\n\n\n","kQna.directive('qnaModeratorAnalytics', function () {\n\n\tvar controller = ['$scope','qnaService','liveAnalyticsService', function ($scope,qnaService,liveAnalyticsService) {\n\t\t$scope._liveAnalyticsService = liveAnalyticsService;\n\t}];\n\n\treturn {\n\t\trestrict : 'E',\n\t\ttransclude : true,\n\t\treplace : true,\n\t\tcontroller: controller,\n\t\ttemplateUrl: \"../common/kQna/views/qnaModeratorAnalytics.html\"\n\t};\n});\n\n\n","/**\n * Created by David.OZ on 5/18/15.\n */\n'use strict';\n\nkQna.directive('kwpQnaBucketMenu',['gettextCatalog','qnaService','liveAnalyticsService', function (gettextCatalog,qnaService,liveAnalyticsService) {\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace :false,\n        link: function (scope, elem, attrs) {\n            scope._liveAnalyticsService = liveAnalyticsService;\n            scope.isSafari = function() {\n                return (/Version\\/[\\d\\.]+.*Safari/).test(window.navigator.userAgent);\n            };\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaBucketMenu.html\"\n    };\n}]);\n\n","/**\n * Created by David.OZ on 4/14/15.\n */\n\n'use strict';\n\nkQna.directive('kwpQnaMenuIncoming',function () {\n\n\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace : true,\n        link: function (scope, elem, attrs) {\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaMenuIncoming.html\"\n    };\n});","/**\n * Created by David.OZ on 4/28/15.\n */\n'use strict';\n\nkQna.directive('kwpQnaAnswerTextBox',['gettextCatalog','qnaService', function (gettextCatalog,qnaService) {\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace :false,\n        link: function (scope, elem, attrs) {\n\n            scope.replyText = \"\";\n\n            scope.reply = function(currentSelectedThread){\n\n                var replyText = scope.replyText;\n\n                scope.replyText = \"\";\n\n                scope.replyToMessage(currentSelectedThread.getFirstQuestion(),replyText);\n\n            };\n            scope.keydown = function($event,currentSelectedThread){\n                if( $event.altKey && $event.keyCode === 13 && !isIE()){\n                    var textArea = $event.currentTarget;\n                    textArea.value += '\\n';\n                    textArea.scrollTop = textArea.scrollHeight;\n                    textArea.selectionEnd= textArea.selectionEnd + 7;\n                    \n                }else if(!$event.shiftKey && !$event.altKey && $event.keyCode === 13){\n                    $event.preventDefault();\n                    if(scope.replyText.length >0){\n                        scope.reply(currentSelectedThread);\n                    }\n                }\n            };\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaAnswerTextBox.html\"\n    };\n}]);\n\n","/**\n * Created by David.OZ on 4/28/15.\n */\n/**\n * Created by David.OZ on 4/14/15.\n */\n\n'use strict';\n\nkQna.directive('kwpQnaMenuAnswer',['gettextCatalog', function (gettextCatalog) {\n\n    var controller = ['$scope','qnaService', function ($scope,qnaService) {\n\n\n    }];\n\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace : true,\n\n        link: function (scope, elem, attrs) {\n\n            scope.closeAnswerWindow = CreateCommand(\"\", \"kicon-close2\", function () {\n\n                scope.setQnaState(scope.QNA_STATES.INCOMING);\n\n            },gettextCatalog.getString(\"Close\"));\n\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaMenuAnswer.html\"\n    };\n}]);","/**\n * Created by David.OZ on 4/14/15.\n */\n'use strict';\n\nkQna.directive('xngFocus', function($timeout) {\n    return {\n        restrict : 'A', // only antribute\n        link : function (scope, element, attrs) {\n            scope.$watch(attrs.xngFocus, function (newVal) {\n                if (!!newVal) {\n                    //we need timeout here since otherwise the DOM will do focus on the button after this call\n                    $timeout(function() {\n                        element[0].focus();\n                    }, 500);\n\n                }\n            });\n        }\n    };\n});\n\nkQna.directive('kwpQnaAnnounceBox',['gettextCatalog','$timeout', function (gettextCatalog, $timeout) {\n\n    var controller = ['$scope','qnaService','kalturaService', function ($scope,qnaService,kalturaService) {\n\n        $scope.announceMessageToAll = function(msgText){\n\n            return qnaService.makeAnnouncement (msgText);\n\n        };\n\n    }];\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace :false,\n        controller: controller,\n        link: function (scope, elem, attrs) {\n\n            // This is the text that the text area starts with.\n\n            scope.announceText=\"\";\n            scope.enteringAnnouncement = false;\n\n            scope.showFooter=function(){\n                if (scope.currentQnaState !='SETTINGS'\n                    && !(scope.currentQnaState ==='ANSWER' && scope.qnaModeratorMode)\n\t                && !(scope.currentQnaState ==='ANSWER_ON_AIR_RECORD' && scope.qnaModeratorMode)\n                    && !(scope.currentQnaState ==='ANSWER_ON_AIR_SELECT' && scope.qnaModeratorMode) ) {\n                    return true\n                }\n                return false;\n            };\n            function closeTextarea() {\n                var qnaFooter = angular.element( document.querySelector('#qnaFooter' ) );\n                if(!$(qnaFooter).is(':focus')){\n                    scope.enteringAnnouncement = false;\n                }\n            }\n            scope.onBlur = function () {\n                $timeout(closeTextarea,0);\n            };\n\n            scope.keydown=function($event) {\n                if ($event.keyCode == 27) {\n                    scope.enteringAnnouncement = false;\n                }\n            };\n\n            scope.announceButtonOnClick = function() {\n\n                if (!(scope.qnaModuleState.qnaEnabled || scope.qnaModuleState.announcementOnly)){\n                    return;\n                }\n\n                //Valid for announcement.\n                if(scope.enteringAnnouncement){\n\n                    scope.enteringAnnouncement = false;\n\n                    if(scope.announceText.length>0) {\n\n\n                        scope.announceMessageToAll(scope.announceText).then(function () {\n\n                            klog.debug(\"Announcement sent to server.\");\n                            scope.announceText=\"\";\n\n                        }, function (err) {\n\n                            klog.error(\"Failed to Announce text:\" + scope.announceText);\n                            scope.announceText=\"\";\n                        });\n                    }\n                }\n                else {\n                    scope.enteringAnnouncement = true;\n\n                }\n            };\n\n            scope.closeTextBoxCommand = CreateCommand(\"\", \"kicon-close2\", function () {\n\n                if(scope.enteringAnnouncement){\n                    scope.enteringAnnouncement = false;\n                    scope.announceText=\"\";\n                }\n\n            },gettextCatalog.getString(\"Close\"));\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaAnnounceBox.html\"\n    };\n}]);\n\n","/**\n * Created by David.OZ on 5/10/15.\n */\n/**\n * Created by David.OZ on 4/14/15.\n */\n'use strict';\n\nkQna.directive('kwpQnaForwardOnAirNav',['gettextCatalog', function (gettextCatalog) {\n\n    var controller = ['$scope','qnaService','kalturaService', function ($scope,qnaService,kalturaService) {\n\n        $scope.announceMessageToAll = function(msgText){\n\n            return qnaService.makeAnnouncement (msgText);\n\n        };\n\n    }];\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace :true,\n        controller: controller,\n        link: function (scope, elem, attrs) {\n\n            var answerOnAirMessageText = \"Question will be answered on-air\";\n\n            scope.forwardMessage = function() {\n\n                //TODO:Implement.\n                //scope.setQnaState(scope.QNA_STATES.FORWARD);\n\n            };\n\n            scope.answerOnAir = function() {\n\n                var entries = scope.currentSelectedThread.getEntries();\n\n                if(entries.length > 1){\n                    scope.setQnaState(scope.QNA_STATES.ANSWER_ON_AIR_SELECT);\n                }\n                else{\n                    //Assumption:1 entry Thread which is a question.\n                    scope.setCurrentSelectedEntry(entries[0]);\n\n                    scope.setQnaState(scope.QNA_STATES.ANSWER_ON_AIR_RECORD);\n\n                }\n\n            };\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaForwardOnAirNav.html\"\n    };\n}]);\n\n","/**\n * Created by David.OZ on 5/13/15.\n */\n'use strict';\n\nkQna.directive('kwpQnaRecordBox',['gettextCatalog','$anchorScroll','$location','$timeout', function (gettextCatalog,$anchorScroll,$location,$timeout) {\n\n    var controller = ['$scope','qnaService','kalturaService', function ($scope,qnaService,kalturaService) {\n\n\n\n    }];\n\n    return {\n        restrict : 'E',\n        replace:true,\n        controller: controller,\n\n\n        link: function (scope, elem, attrs) {\n\n\n            scope.startRecording = function(){\n\n            };\n\n            scope.stopStartRecording = function(){\n\n                scope.toggleRecording();\n\n            };\n\n            scope.getPlaceHolderText = function(){\n                return gettextCatalog.getString('Use this space to write prep notes.');\n            };\n\n            scope.textAreaBlur = function(){\n                elem.find(\".answerOnAirRecordNoteArea\")[0].placeholder = scope.getPlaceHolderText();\n            };\n\n            scope.textAreaKeyDown = function(){\n                elem.find(\".answerOnAirRecordNoteArea\")[0].placeholder = '';\n            };\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaRecordBox.html\"\n    };\n}]);\n\n\n","/**\n * Created by David.OZ on 5/10/15.\n */\n'use strict';\n\n\n/*\n * Incoming screen directive.Represent the live feed screen where producer receives all incoming data from users.\n * Also this module holds connection to the model of the qnaService.\n */\nkQna.directive('kwpQnaAnswerOnAir', function () {\n\n    var controller = ['$scope','qnaService', function ($scope,qnaService) {\n\n    }];\n\n    return {\n        restrict : 'E',\n        //transclude : true,\n        replace : true,\n\n        controller: controller,\n\n        link: function (scope, elem, attrs) {\n\n            scope.currentSelectedEntry = {data:null};\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaAnswerOnAir.html\"\n    };\n});\n\n\n","/**\n * Created by David.OZ on 5/10/15.\n */\n\n'use strict';\n\n\nkQna.directive('kwpQnaAnswerOnAirMenu',['gettextCatalog', function (gettextCatalog) {\n\n    var controller = ['$scope','qnaService','kalturaService', function ($scope,qnaService,kalturaService) {\n\n        $scope.announceMessageToAll = function(msgText){\n\n            return qnaService.makeAnnouncement (msgText);\n\n        };\n\n    }];\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace :false,\n        controller: controller,\n        link: function (scope, elem, attrs) {\n\n\n\n            scope.closeAnswerOnAir = CreateCommand(\"\", \"kicon-close2\", function () {\n\n                scope.stopRecording();\n                scope.setQnaState(scope.QNA_STATES.ANSWER);\n\n            },gettextCatalog.getString(\"Close\"));\n\n\n\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaMenuAnswerOnAirRecording.html\"\n    };\n}]);\n\n","/**\n * Created by David.OZ on 5/14/15.\n */\n/**\n * Created by David.OZ on 5/10/15.\n */\n'use strict';\n\n\n/*\n * Incoming screen directive.Represent the live feed screen where producer receives all incoming data from users.\n * Also this module holds connection to the model of the qnaService.\n */\nkQna.directive('kwpQnaMenuAnswerOnAirSelect', function () {\n\n    var controller = ['$scope','qnaService', function ($scope,qnaService) {\n\n    }];\n\n    return {\n        restrict : 'E',\n        //transclude : true,\n        replace : true,\n\n        controller: controller,\n\n        link: function (scope, elem, attrs) {\n\n\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaMenuAnswerOnAirSelect.html\"\n    };\n});\n\n\n","/**\n * Created by David.OZ on 5/10/15.\n */\n\n'use strict';\n\nkQna.directive('kwpQnaScreenAnswerOnAirSelect',['gettextCatalog', function (gettextCatalog) {\n\n    return {\n        restrict : 'E',\n\n        link: function (scope, elem, attrs) {\n\n            scope.currentHighlightedIndex = 0;\n\n            scope.answerOnAirOnEntryClick = function(index){\n\n                scope.currentHighlightedIndex = index;\n\n            };\n\n            scope.selectEntry = function(){\n\n                scope.setCurrentSelectedEntry(scope.currentSelectedThread.entries[scope.currentHighlightedIndex]);\n\n                scope.setQnaState(scope.QNA_STATES.ANSWER_ON_AIR_RECORD);\n\n            };\n            scope.closeWindow = CreateCommand(\"\", \"kicon-close2\", function () {\n\n                scope.setQnaState(scope.QNA_STATES.ANSWER);\n\n            },gettextCatalog.getString(\"Close\"));\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaScreenAnswerOnAirSelect.html\"\n    };\n}]);\n\n","/**\n * Created by David.OZ on 4/14/15.\n */\nkQna.directive('kwpQnaEntry', function (qnaService, $timeout, kCef, THREAD_STATE, kdialog, gettextCatalog) {\n\n    return {\n        restrict : 'E',\n        replace : false,\n        scope : {\n            actionableEntry:'@',\n            clearableEntry:'@',\n            announcement:'@',\n            entryData:'=',\n            onEntryClick:'&',\n            showCopyAction:'@'\n        },\n        link: function (scope, elem, attrs) {\n            scope.THREAD_STATE = THREAD_STATE;\n\n            scope.contentElement = elem.find('.qnaContent');\n\n            scope.threadData = scope.entryData.getThread();\n\n            scope.threadNotPending = (scope.threadData.isDone() || scope.threadData.isFollowUp() || scope.threadData.isAnswered());\n\n            scope.threadPending = !scope.threadNotPending;\n\n            scope.threadCompleted = (scope.threadData.isDone() || scope.threadData.isAnswered());\n\n            scope.mouseEnterOnEntry = function(){\n\n                if(scope.clearableEntry){\n\n                    elem.find('.announcementButtonsContainer').show();\n\n                }\n            };\n\n            scope.mouseLeaveOnEntry = function(){\n\n                if(scope.clearableEntry){\n                    elem.find('.announcementButtonsContainer').hide();\n                }\n            };\n\n            scope.entryClick = function(){\n\n                scope.onEntryClick(scope.entryData);\n\n            };\n\n            scope.openUrl = function (url) {\n                if(kCef.available) {\n                    kCef.sendIPC('open-external-link', url);\n                } else {\n                    window.open(url,'_blank');\n                }\n            };\n\n            scope.onRevealActionButtonsHover = function($event){\n                $event.stopImmediatePropagation();\n                if(isMobile() && $event.type === 'mouseover'){\n                    return;\n                }\n\n                elem.find('.qnaEntryFooterTriggerIcon').hide();\n\n                var currentHeight = scope.contentElement.height();\n\n                if (scope.threadData.isFollowUp() || scope.threadData.isDone() || scope.threadData.isAnswered()){\n\n                    scope.contentElement.addClass('mediumSizeContent');\n                }\n                else{\n                    scope.contentElement.addClass('smallSizeContent');\n                }\n\n                scope.contentElement.height(currentHeight);\n\n                elem.find('.entryActionButtons').show();\n                elem.find('.entryActionButtons button').first().focus();\n            };\n\n            scope.onBlur = function(){\n                if(isMobile()){\n                    $timeout(function (){\n                        var buttonInFocus = $(':focus').parents('.entryActionButtons').hasClass('entryActionButtons');\n                        if(!buttonInFocus){\n                            scope.actionButtonsOverlayOff();\n                        }\n                    },0);\n                }\n            };\n            scope.actionButtonsOverlayOff = function(){\n\n                elem.find('.entryActionButtons').hide();\n\n                if (scope.threadData.isFollowUp() || scope.threadData.isDone() || scope.threadData.isAnswered()){\n\n                    scope.contentElement.removeClass('mediumSizeContent');\n\n                }\n                else{\n\n                    scope.contentElement.removeClass('smallSizeContent');\n\n                }\n\n                elem.find('.qnaEntryFooterTriggerIcon').show();\n\n            };\n\n\n            scope.setThreadAsDone = function($event){\n                $event.stopImmediatePropagation();\n                elem.find('.entryActionButtons').hide();\n\n                qnaService.setQnaThreadAsDone(scope.threadData);\n            };\n\n            scope.setThreadAsFollowed = function($event){\n                $event.stopImmediatePropagation();\n\n                elem.find('.entryActionButtons').hide();\n\n                qnaService.setQnaThreadAsFollow(scope.threadData);\n            };\n\n            scope.clear = function(){\n\n                qnaService.setQnaThreadAsCleared(scope.threadData);\n\n            };\n\n            scope.delete = function() {\n\n                kdialog.yesNoDialog({\n                    yesMessage:gettextCatalog.getString(\"Yes, Remove\"),\n                    noMessage:gettextCatalog.getString(\"No\"),\n                    title: 'Remove an announcement',\n                    message: 'Are you sure you want to remove the announcement?'\n                }).then(function () {\n                    qnaService.deleteAnnouncementThread(scope.threadData);\n                });\n            };\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaEntry.html\"\n    };\n});","/**\n * Created by David.OZ on 4/26/15.\n */\n\n\nkQna.directive('kwpQnaScreenAnswer',['gettextCatalog','$anchorScroll','$location','$timeout', function (gettextCatalog,$anchorScroll,$location,$timeout) {\n\n    var controller = ['$scope','qnaService','kalturaService', function ($scope,qnaService,kalturaService) {\n\n        $scope.replyToMessage = function(qnaEntry,message) {\n\n            qnaService.makeReply(qnaEntry,message);\n\n        };\n\n    }];\n\n    return {\n        restrict : 'E',\n        //transclude : true,\n        replace :true,\n        controller: controller,\n\n        link: function (scope, elem, attrs) {\n\n            scope.replyText = \"\";\n\n            //TODO:Seems wasteful need to check.\n            scope.scrollTo=function(entry) {\n\n                $timeout(function () {\n                    $anchorScroll(entry.getId());\n                },10);\n            };\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaScreenAnswer.html\"\n    };\n}]);\n\n\n","/**\n * Created by David.OZ on 4/28/15.\n */\n'use strict';\n\n\n/*\n * Incoming screen directive.Represent the live feed screen where producer receives all incoming data from users.\n * Also this module holds connection to the model of the qnaService.\n */\nkQna.directive('kwpQnaScreenIncoming', function ($rootScope) {\n\n    var controller = ['$scope','qnaService', function ($scope,qnaService) {\n\n        $scope.qnaThreadsData = {\n            model :   qnaService.getLiveData(),\n            displayEntries : qnaService.liveData.displayList\n        };\n        $scope.isModerationModeState = function(){\n            return $scope.qnaModeratorMode && (    $scope.currentQnaState ==='SETTINGS'\n                                                || $scope.currentQnaState ==='ANSWER'\n                                                || $scope.currentQnaState ==='ANSWER_ON_AIR_SELECT'\n                                                || $scope.currentQnaState==='ANSWER_ON_AIR_RECORD');\n        };\n        $scope.displayEntries = qnaService.liveData.displayList;\n\n        $scope.liveData = qnaService.liveData;\n\n        $scope.setIndicator=function(val) {\n\n            $scope.$parent.indicator=val;\n        };\n\n        $scope.THREAD_STATE = qnaService.THREAD_STATE;\n\n\n        $scope.setQnaThreadAsDone = function(qnaThread){\n\n            qnaService.setQnaThreadAsDone(qnaThread);\n\n        };\n\n        $scope.setQnaThreadAsFollow = function(qnaThread){\n\n            qnaService.setQnaThreadAsFollow(qnaThread);\n\n        };\n\n        $scope.setQnaThreadAsCleared = function(qnaThread){\n\n            qnaService.setQnaThreadAsCleared(qnaThread);\n\n        };\n\n        $scope.exportQnaData = function(){\n\n            qnaService.exportQnaDataToFile();\n\n        };\n        \n        qnaService.registerOnIncomingCallback(function(newVal){\n            $scope.setIndicator(newVal > 0);\n        });\n    }];\n\n    return {\n        restrict : 'E',\n        //transclude : true,\n        replace : true,\n\n        controller: controller,\n\n        link: function (scope, $elem, attrs) {\n            scope.counters = scope.qnaThreadsData.model.counters;\n            scope.$incomingMessageListContainer = $elem.find('.incoming-messages');\n            scope.$lastIncomingMessage = $elem.find('.bottom-of-incoming-messages');\n            scope.scrollDebouncingTimeout;\n            scope.unregisterNewMessageEventFunction;\n            scope.showNewMessageIndicationButton = false;\n\n            scope.NUMBER_PIXELS_FROM_THE_BOTTOM = 37;\n            scope.SUBSETS = {\n\n                INCOMING: {\n                    title: \"Incoming\",//(pending)\n                    filterFunction: function(qnaEntry){\n                        return qnaEntry.getThread().isPending();\n                    },\n                    capacity: function(){\n                        return scope.liveData.counters[scope.liveData.states.PENDING].total;\n                    }\n                },\n                COMPLETED: {\n                    title: \"Completed\",\n                    filterFunction: function (qnaEntry) {\n                        return qnaEntry.getThread().isAnswered() || qnaEntry.getThread().isDone();\n                    },\n                    capacity : function(){\n                        return scope.liveData.counters[scope.liveData.states.ANSWERED].total +\n                            scope.liveData.counters[scope.liveData.states.DONE].total;\n                    }\n                },\n                FOLLOW_UP: {\n                    title: \"Followed up\",\n                    filterFunction: function (qnaEntry) {\n                        return qnaEntry.getThread().isFollowUp();\n                    },\n                    capacity: function(){\n                        return scope.liveData.counters[scope.liveData.states.FOLLOWUP].total;\n                    }\n                },\n                FORWARDED: {\n                    title: \"Forwarded\",\n                    filterFunction: function (qnaEntry) {\n                        return qnaEntry.getThread().isForwarded();\n                    },\n                    capacity: function(){\n                        return scope.liveData.counters[scope.liveData.states.FORWARDED].total;\n                    }\n                },\n                ANNOUNCED: {\n                    title: \"Announced\",\n                    filterFunction: function (qnaEntry) {\n                        return qnaEntry.getThread().isAnnouncement();\n                    },\n                    capacity: function(){\n                        return scope.liveData.counters[scope.liveData.states.ANNOUNCED].total;\n                    }\n                }\n            };\n\n            scope.selectedSubset = scope.SUBSETS.INCOMING;\n\n            scope.selectSubset = function(filterBucket){\n\n                scope.selectedSubset = filterBucket;\n\n                scope.state.menuOpen = false;\n\n                scope.state.settingsOpen = false;\n\n                scope.setQnaState(scope.QNA_STATES.INCOMING);\n\n            };\n\n            scope.onEntryClick = function(qnaEntry){\n\n                var thread = qnaEntry.getThread();\n\n                if (!scope.qnaModuleState.qnaEnabled || scope.qnaModuleState.announcementOnly){\n                    return;\n                }\n\n                if(thread.isAnnouncement()){\n\n                    return;\n                }\n\n                scope.setCurrentReplyThread(thread);\n\n                scope.setQnaState(scope.QNA_STATES.ANSWER);\n\n            };\n\n            scope.onNewMessagesClick = function($button) {\n                // Scroll to bottom\n                scope.$lastIncomingMessage[0].scrollIntoView({ behavior: 'smooth', block: 'start' });\n                scope.clearAndHideNewMessageIndication();\n            };\n\n            // Release new message button indication on scroll bottom\n            scope.$incomingMessageListContainer.on('scroll', function (e) {\n                if (scope.liveData.incomingCounters.newMessages === 0){\n                    return;\n                }\n\n                // Debouncing the event If there's a timer, cancel it\n                if (scope.scrollDebouncingTimeout) {\n                    window.cancelAnimationFrame(scope.scrollDebouncingTimeout);\n                }\n\n                // Setup the new requestAnimationFrame()\n                scope.scrollDebouncingTimeout = window.requestAnimationFrame(function () {\n\n                    // Run our scroll functions (BL): decide when to release the message indication button\n                    var elem = $(e.currentTarget);\n                    if (elem[0].scrollHeight - elem.scrollTop() <= elem.outerHeight() + scope.NUMBER_PIXELS_FROM_THE_BOTTOM) {\n                        scope.clearAndHideNewMessageIndication();\n                    }\n                });\n            });\n\n            // show new message button indication\n            scope.unregisterNewMessageEventFunction = $rootScope.$on('NewIncomingMessage', function () {\n                var repeatItem = scope.$incomingMessageListContainer.find('.repeatedItem');\n                var repeatedItemSize = repeatItem.length ? repeatItem.first().outerHeight() : null;\n\n                // check if button should show depend if the container need scroll or empty... (prevent show on first messages)\n                if (repeatedItemSize && (scope.$incomingMessageListContainer.height() <= scope.liveData.incomingCounters.total * repeatedItemSize)\n                    && scope.liveData.incomingCounters.newMessages > 0) {\n\n                    scope.showNewMessageIndicationButton = true;\n                }\n                else {\n                    scope.clearAndHideNewMessageIndication();\n                }\n            });\n\n            scope.clearAndHideNewMessageIndication = function() {\n                // Clear Messages counter\n                scope.liveData.clearNewMessagesCounter();\n                // Hide the button counter indicator\n                scope.showNewMessageIndicationButton = false;\n            };\n\n            scope.isShowingIncomingLiveFeed = function() {\n                return scope.selectedSubset === scope.SUBSETS.INCOMING\n                    && scope.currentQnaState !='SETTINGS'\n                    && !(scope.currentQnaState ==='ANSWER' && scope.qnaModeratorMode)\n                    && !(scope.currentQnaState ==='ANSWER_ON_AIR_RECORD' && scope.qnaModeratorMode)\n                    && !(scope.currentQnaState ==='ANSWER_ON_AIR_SELECT' && scope.qnaModeratorMode);\n            };\n\n            scope.$on('$destroy', scope.unregisterNewMessageEventFunction);\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaScreenIncoming.html\"\n    };\n});\n\n\n","/**\n * Created by David.OZ on 3/31/15.\n */\n\n'use strict';\n\n/*\n * Main qna directive.keeps the global shared state of the module which is accessible by sub screens.\n * Also this module holds connection to the model of the qnaService.\n */\nkQna.directive('kwpQna', ['qnaService', function (qnaService) {\n\n    var controller = ['$scope','qnaService','captureService', function ($scope,qnaService,captureService) {\n\n\n        $scope.qnaThreadsData = {\n\n            model :   qnaService.getLiveData()\n\n        };\n\n\n        $scope.setIndicator=function(val) {\n\n            $scope.$parent.indicator=val;\n        };\n\n        $scope.captureService = captureService;\n\n    }];\n\n    return {\n        restrict : 'E',\n\n        transclude : true,\n\n        replace : true,\n\n        controller: controller,\n\n        link: function (scope, elem, attrs) {\n\n            scope.qnaModuleState = qnaService.getQnaModuleState;\n\n            scope.QNA_STATES = {INCOMING:\"INCOMING\",ANSWER:\"ANSWER\",ANSWER_ON_AIR_SELECT:\"ANSWER_ON_AIR_SELECT\",ANSWER_ON_AIR_RECORD:\"ANSWER_ON_AIR_RECORD\",SETTINGS:'SETTINGS'};\n\n            scope.state = {menuOpen:false};\n\n            //Initialized state of this module is the incoming state.\n            scope.currentQnaState = scope.QNA_STATES.INCOMING;\n\n            //Shared state of a selected qna thread in case it is selected.\n            scope.currentSelectedThread = null;\n\n            //Shared state of a selected qna entry in case it is selected.\n            scope.currentSelectedEntry = null;\n\n            scope.visibleInstructions = {answerOnAir:true};\n\n            //Shared function that allows a sub screen to switch to a different screen.\n            scope.setQnaState = function(qnaState){\n\n                scope.currentQnaState = qnaState;\n            };\n\n            scope.setCurrentSelectedEntry = function(entry){\n\n                scope.currentSelectedEntry = entry;\n\n            };\n\n            //Function to set the current selected thread of the module.\n            scope.setCurrentReplyThread = function(thread){\n\n                scope.currentSelectedThread = thread;\n\n            };\n\n            //Function to set the current selected entry of the module.\n            scope.setCurrentAnswerEntry = function(entry){\n\n                scope.currentSelectedEntry = entry;\n\n            };\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQna.html\"\n    };\n}]);\n","/**\n * Created by David.OZ on 3/31/15.\n */\n'use strict';\n/*\n * Main qna directive.keeps the global shared state of the module which is accessible by sub screens.\n * Also this module holds connection to the model of the qnaService.\n */\nkQna.directive('kwpQnaDebug', function () {\n\n    var controller = ['$scope','qnaService','kalturaAPI','$http', function ($scope,qnaService,kalturaAPI,$http) {\n\n\n\n        $scope.getAnnotationCuePoints=function() {\n            return qnaService.getRawCuePoints().then(function (res) {\n                /*\n                var data = \"<pre style='word-wrap: break-word;white-space: pre-wrap;'> \"+res+\"</pre>\";\n                window.open(\"data:text/html,\" + encodeURIComponent(data),\n                    \"_blank\", \"width=500,height=400\");\n*/\n                alert(JSON.stringify(res));\n            });\n        };\n\n        $scope.deleteAllResponseProfiles=function() {\n            return kalturaAPI.responseProfileService.list().then(function (res) {\n                var promies = [];\n                res.objects.forEach(function (item) {\n                    if (item.systemName.indexOf(qnaService.QandA_ResponseProfileSystemName) > -1 ) {\n                        promies.push(kalturaAPI.responseProfileService.delete(item.id));\n                    }\n                });\n                return Promise.all(promies);\n            });\n        };\n\n        $scope.installResponseProfile=function() {\n\n            $scope.deleteAllResponseProfiles().then(function () {\n                kalturaAPI.responseProfileService.add(qnaService.QandA_ResponseProfileSystemName, qnaService.QandA_ResponseProfile).then(function (r) {\n                    alert(\"response profile  was created \" + JSON.stringify(r));\n\n                });\n            });\n        };\n\n\n        $scope.installMetadataProfile=function() {\n\n            $http.get('../common/kQna/customeMetadata.xsd').then(function (xsd) {\n                kalturaAPI.metadataProfileService.list(qnaService.QandA_MetadataProfileSystemName).then (function (res) {\n\n                    if (res.objects.length===0) {\n\n                        return kalturaAPI.metadataProfileService.add(qnaService.QandA_MetadataProfileSystemName, xsd.data, \"annotationMetadata.Annotation\").then(function (res) {\n                            alert(JSON.stringify(res));\n                        });\n                    } else {\n                        var customMetadataProfile = res.objects[0];\n                            customMetadataProfile.xsd = xsd.data;\n\n                        return kalturaAPI.metadataProfileService.update(customMetadataProfile.id, customMetadataProfile.xsd).then(function (res) {\n                                alert(JSON.stringify(res));\n                        });\n                    }\n                });\n            });\n\n        };\n\n\n        $scope.deleteAllAnnotations=function() {\n            qnaService.getRawCuePoints().then(function(res){\n                var promises = [];\n                res.objects.forEach(function (item) {\n                    promises.push(kalturaAPI.cuePointService.delete(item.id));\n                });\n                return Promise.all(promises);\n            });\n        };\n\n        $scope.createMockAnnotations=function() {\n\n            return qnaService.makeAnnouncement(\"Announcment #1\").then(function() {\n                return qnaService.makeAnnouncement(\"Announcment #2\");\n            }).then(function() {\n                return qnaService.askQuestion(\"Question #1.1\", null).then(function (question) {\n                    return question.reply(\"Answer #1.2\").then(function (question) {\n                        return question.reply(\"Question #1.3\");\n                    });\n                });\n            }).then(function() {\n                return qnaService.askQuestion(\"Question #2\", null);\n            });\n        };\n\n    }];\n\n    return {\n        restrict : 'E',\n        transclude : true,\n        replace : true,\n        controller: controller,\n        link: function (scope, elem, attrs) {\n\n\n            //Initialized state of this module is the\n\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaDebug.html\"\n    };\n});\n\n\n","/**\n * Created by David.OZ on 5/13/15.\n */\n'use strict';\nkQna.directive('kwpQnaLoadProgress',['gettextCatalog', function (gettextCatalog) {\n\n    var controller = ['$scope','qnaService','kalturaService', function ($scope,qnaService,kalturaService) {\n\n        $scope.isLoading=function() {\n            return qnaService.isLoading();\n        };\n\n        $scope.NoMessages=function() {\n            return qnaService.liveData.counters[qnaService.liveData.states.PENDING].total === 0;\n        };\n    }];\n\n    return {\n        restrict : 'E',\n        replace:true,\n        controller: controller,\n\n        link: function (scope, elem, attrs) {\n\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaLoadProgress.html\"\n    };\n}]);\n\n\n","/**\n * Created by David.OZ on 6/14/15.\n */\n/**\n * Created by David.OZ on 4/28/15.\n */\n'use strict';\n\n\n/*\n * Incoming screen directive.Represent the live feed screen where producer receives all incoming data from users.\n * Also this module holds connection to the model of the qnaService.\n */\nkQna.directive('kwpQnaScreenSettings',['qnaService','gettextCatalog',function (qnaService,gettextCatalog) {\n\n    return {\n        restrict : 'E',\n        //transclude : true,\n        replace : false,\n\n        link: function (scope, elem, attrs) {\n\n            scope.enableQna = function(){\n\n                scope.qnaModuleState.qnaEnabled = true;\n\n                qnaService.enableQna();\n            };\n\n            scope.disableQna = function(){\n\n                scope.qnaModuleState.qnaEnabled = false;\n\n                scope.qnaModuleState.announcementOnly = false;\n\n                qnaService.disableQna();\n\n            };\n\n            scope.disableAnnouncementsOnly = function(){\n\n                scope.qnaModuleState.announcementOnly = false;\n\n                qnaService.disableAnnouncementsOnly();\n\n            };\n\n            scope.enableAnnouncementsOnly = function(){\n\n                if (scope.qnaModuleState.qnaEnabled){\n\n                    scope.qnaModuleState.announcementOnly = true;\n\n                    qnaService.enableAnnouncementsOnly();\n\n                }\n            };\n            // close function on QNA moderator mode\n            scope.closeQnaSettings = function(){\n                // go back to the current selected QNA view\n\t            this.selectSubset(this.selectedSubset);\n            };\n\n        },\n        templateUrl: \"../common/kQna/views/kwpQnaScreenSettings.html\"\n    };\n}]);\n\n\n","(function()\n{\n    \"use strict\";\n\n    var module = angular.module('kPolls',['kProducerActions']);\n\n    module.constant('Polls_MetadataProfileSystemName', 'pollVoteCustomMetadataProfile');\n    module.constant('Polls_ResponseProfileSystemName', 'pollVoteResponseProfile');\n    module.constant('POLL_DATA_STATUS', {INACTIVE: 'inactive', ACTIVE: 'active'});\n    module.constant('POLL_STATE', {DISABLED:\"disabled\", PERCENTAGES:\"percentages\", NUMBERS:\"NUMBERS\"});\n    module.constant('POLL_STATE_STATUS', {PRELIMINARY : 'preliminary', IN_PROGRESS : 'inProgress', FINISHED: 'finished'});\n    module.constant('POLL_STATE_STATUS', {PRELIMINARY : 'preliminary', IN_PROGRESS : 'inProgress', FINISHED: 'finished'});\n    module.constant('pollEventNotificationTemplates',[\"POLLS_PUSH_NOTIFICATIONS\"]);\n\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider, cuePointsServiceProvider) {\n\n        // NOTICE: Several module actions are handled separately in folder 'producer-actions'\n\n        kProducerActionsProvider.registerAction('poll-data','codeCuePoint.Code',{transmitMode : 'always', dataOrientation: 'instance'});\n        kProducerActionsProvider.registerAction('poll-results','codeCuePoint.Code',{history : true, dataOrientation : 'state', transmitMode : 'on-air-only'});\n\n        cuePointsServiceProvider.addTagToArchiveExcludeList('poll-data');\n\n    }\n\n    angular.module('kPolls').config(registerAdapter);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider) {\n        var handler = {\n\n            history : true,\n\n            checkContentRelevancy : function(state,actionContent,api)\n            {\n                var result = false;\n\n                if (_.get(state,'podcasting.type') === 'poll')\n                {\n                    var lastSelectPollState = api.getLastTransmittedAction('select-poll-state');\n\n                    if (lastSelectPollState)\n                    {\n                        var lastSelectAThumbActionCuePoint = api.getLastTransmittedAction('select-a-thumb');\n                        var lastRemoveSelectedThumbCuePoint = api.getLastTransmittedAction('remove-selected-thumb');\n                        \n                        if ((lastRemoveSelectedThumbCuePoint &&\n                            lastRemoveSelectedThumbCuePoint.createdAt > lastSelectPollState.createdAt) ||\n                            (lastSelectAThumbActionCuePoint && lastSelectAThumbActionCuePoint.createdAt > lastSelectPollState.createdAt))\n                        {\n                           result = true;\n                        } else {\n                            result = api.isNewContent('select-poll-state', actionContent);\n                        }\n                    }else\n                    {\n                        result = true;\n                    }\n                }\n                return result;\n            },\n            updateState : function (state,content)\n            {\n                var modified = false;\n\n                if (_.get(state,'podcasting.type') !== 'poll') {\n                    _.set(state,'podcasting.type','poll');\n                    modified = true;\n                }\n\n                return modified;\n            }\n        };\n\n        kProducerActionsProvider.registerAction('select-poll-state','codeCuePoint.Code', handler);\n    };\n\n    angular.module('kPolls').config(registerAdapter);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function () {\n    \"use strict\";\n    function Provider(){\n\n        function Service(kProducerActions, kalturaAPI, $q, $http, Polls_MetadataProfileSystemName,\n                         Polls_ResponseProfileSystemName, POLL_STATE, POLL_STATE_STATUS, POLL_DATA_STATUS,\n                         $rootScope, kaPlayerViewControlsService, PLAYER_VIEW_MODE, PLAYER_VIEW_STATE,pollEventNotificationTemplates,kEntryManagementService)\n        {\n            var self = this;\n            var pollingHandler = null;\n            var currentPollId = null;\n            var currentPollStatus = null;\n            var selectedPollAsset = null;\n            /**\n             * holds the poll id created by current producer.\n             * indicates if to open poll wizard for newly fetched polls\n             */\n            var locallyCreatedPollId = null;\n            var getMetadataProfilePromise = null;\n            var metadataProfileId = 0;\n            var lastPollResults = null;\n\n            function init() {\n                kProducerActions.subscribeStateChange(function() {\n                    var selectPollState = kProducerActions.getState('actions.select-poll-state');\n                    var podcastingType = kProducerActions.getState('podcasting.type');\n\n                    if (podcastingType === \"poll\"){\n                        var pollChanged = currentPollId !== selectPollState.pollId;\n                        var pollStatusChanged = currentPollStatus !== selectPollState.status;\n\n                        if (pollChanged || pollStatusChanged){\n                            switch(selectPollState.status) {\n                                case POLL_STATE_STATUS.IN_PROGRESS:\n                                    startPollingVotes(selectPollState.pollId);\n                                    break;\n                                case POLL_STATE_STATUS.FINISHED:\n                                    stopPollingVotes(selectPollState.ksHash);\n                                    currentPollId = null;\n                                    currentPollStatus = null;\n                                    lastPollResults = null;\n                                    break;\n                            }\n                        }\n\n                        currentPollId = selectPollState.pollId;\n                        currentPollStatus = selectPollState.status;\n                    }\n                });\n            }\n\n            /**\n             * Add a new poll data\n             * @param pollData an object of poll data. e.g:\n             * {\n             *      text: {\n             *              state: 'active',\n             *              question: 'is this a Q ?',\n             *              answers: {\n             *                  1: 'this is answer number 1',\n             *                  2: this is answer number 2,\n             *                  ...\n             *              }\n             *            }\n             *\n             * @returns {promise} the poll actionId (cue point id) is succeed or an error message if failed\n             */\n            function addPollData(pollData)\n            {\n                if (!pollData || !_.isObject(pollData)) {\n                    return $q.reject('pollData must be of type object');\n                }\n                if (!pollData.text || !_.isObject(pollData.text)) {\n                    return $q.reject('pollData object should contain a text property which holds an object');\n                }\n                if (!pollData.text.state) {\n                    pollData.text.state = POLL_DATA_STATUS.ACTIVE;\n                }\n\n                return kProducerActions.createInstanceOrientedAction('poll-data', pollData);\n            }\n\n            function createPollObject()\n            {\n                return kalturaAPI.pollsService.addPollObject();\n            }\n\n            /**\n             * Update poll results\n             * @param pollResults an object of poll data. e.g:\n             *              {\n             *              totalVoters: 'is this a Q ?',\n             *              answers: {\n             *                  1: 10,\n             *                  2: 20,\n             *                  ...\n             *             }\n             *\n             * @returns {promise} the poll actionId (cue point id) is succeed or an error message if failed\n             */\n            function updatePollResults(pollId, pollResults)\n            {\n                if (!pollResults || !_.isObject(pollResults)) {\n                    return $q.reject('pollResults must be of type object');\n                }\n\n                if (pollResults.totalVoters === undefined || pollResults.answers[1] === undefined){\n                    klog.error(\"pollResults is not in the correct format\" + JSON.stringify(pollResults));\n                }\n\n                // we need to enrich the poll results with the poll id so we will be able to later fetch the right one when showing the poll\n                var actionContent = _.extend({pollId : pollId},pollResults);\n                kProducerActions.setStateOrientedAction('poll-results', actionContent);\n            }\n\n            /**\n             * Update an existing poll data\n             * @param pollData\n             * @param pollId\n             * @returns {promise} the poll actionId (cue point id) is succeed or an error message if failed\n             */\n            function updatePollData(pollData, pollId)\n            {\n                if (!pollData || !_.isObject(pollData)) {\n                    return $q.reject('pollData must be of type object');\n                }\n                //at least one content should be provied for the update process\n                if (!pollData.text || !_.isObject(pollData.text)) {\n                    return $q.reject('pollData object should contain at least one property:' +\n                                                                            '\"text\" or \"data\" which holds an object');\n                }\n                if (!pollId) {\n                    return $q.reject('pollId is required');\n                }\n\n                return kProducerActions.updateInstanceOrientedAction(pollData, pollId);\n            }\n\n            /**\n             * creates new poll state\n             * e.g: {\n             *         pollId: '1_32fff3',\n             *         state:  'draft'\n             *      }\n             * @param pollState\n             * @returns {promise}\n             */\n            function updateSelectedPollState(pollState)\n            {\n                if (!pollState || !_.isObject(pollState)) {\n                    return $q.reject('pollState must be of type object');\n                }\n                if (!pollState.pollId || !pollState.status) {\n                    return $q.reject('pollState object should contain a pollId and a state properties');\n                }\n\n                return kProducerActions.setStateOrientedAction('select-poll-state',pollState);\n            }\n\n            /**\n             * get last poll state for given poll id\n             * @param pollId\n             * @returns {{pollId: *, showAnswers: boolean, showResults: (number|string), showTotals: (number|string), status: string}}\n             */\n            function getPollState(pollId)\n            {\n                //start with default poll state\n                var selectedPollState =\n                {\n                    pollId : pollId,\n                    showAnswers : false,\n                    showResults : POLL_STATE.DISABLED,\n                    showTotals : POLL_STATE.DISABLED,\n                    status : POLL_STATE_STATUS.PRELIMINARY\n                };\n                var stateHistory = kProducerActions.getStateActionHistory('select-poll-state');\n                if(!_.isEmpty(stateHistory)) {\n                    //iterating from end of array to return the most updated state\n                    _.forEachRight(stateHistory, function (pollStateObject) {\n                        if(pollStateObject) {\n                            try{\n                                if(pollStateObject.pollId === pollId) {\n                                    selectedPollState = pollStateObject;\n                                    return false;\n                                }\n                            }catch (ex) {\n                                //do nothing...\n                            }\n                        }\n                    });\n                }\n                return selectedPollState;\n            }\n\n            /**\n             * get last poll result object for given id\n             * @param pollId\n             * @returns {{pollId: *, answers: {}, totalVoters: number}}\n             */\n            function getPollResults(pollId)\n            {\n                //start with default poll result\n                var selectedPollResults = null;\n                var resultHistory = kProducerActions.getStateActionHistory('poll-results');\n                if(!_.isEmpty(resultHistory)) {\n                    //iterating from end of array to return the most updated result\n                    _.forEachRight(resultHistory, function (pollResultObject) {\n                        if(pollResultObject) {\n                            try{\n                                if(pollResultObject.pollId === pollId) {\n                                    selectedPollResults = pollResultObject;\n                                    return false;\n                                }\n                            }catch (ex) {\n                                //do nothing...\n                            }\n                        }\n                    });\n                }\n                return selectedPollResults;\n            }\n\n            /**\n             * return active polls data object\n             * @returns {*}\n             */\n            function getActivePollsDataAsArray()\n            {\n                var pollsArray = [];\n\n                var pollsObjects =  kProducerActions.getInstanceActionsContent('poll-data');\n                if(!_.isEmpty(pollsObjects)) {\n                    _.each(pollsObjects, function (actionContent, key) {\n                        if(actionContent.text.state === 'active') {\n                            // returning relevant poll information such as id, type and questions/answers\n                            pollsArray.push(_.extend({},actionContent,{id : key, type : 'poll'}));\n                        }\n                    });\n                }\n                return pollsArray;\n            }\n\n            // run multi-request on server to get aggregated data\n            function getVotesFromServer() {\n\n                // get number of answers\n                if (kProducerActions.getInstanceActionsContent('poll-data')[currentPollId] === undefined) {\n                    klog.warn(\"poll-data does not contain data for poll \" + currentPollId + ' Not fetching data from server');\n                    return;\n                }\n\n                if (kProducerActions.getInstanceActionsContent('poll-data')[currentPollId].text === undefined){\n                    klog.warn(\"poll-data does not contain text object for poll \" + currentPollId + ' Not fetching data from server');\n                    return;\n                }\n\n                if (kProducerActions.getInstanceActionsContent('poll-data')[currentPollId].text.answers === undefined){\n                    klog.warn(\"poll-data does not contain text.answers data for poll \" + currentPollId + ' Not fetching data from server');\n                    return;\n                }\n\n                var pollData = kProducerActions.getInstanceActionsContent('poll-data')[currentPollId];\n                var answers = pollData.text.answers;\n                var answerIds = [];\n                _.each(answers, function (ansText, ansKey) {\n                    answerIds.push(ansKey);\n                });\n\n                kalturaAPI.pollsService.getVotes(currentPollId, answerIds).then(function (res) {\n\n                    var pollResults =\n                        {\n                            pollId: currentPollId,\n                            answers: res.answerCounters,\n                            totalVoters: res.numVoters\n                        };\n\n                        // Get last results by pollId\n                        var stateHistory = kProducerActions.getStateActionHistory('poll-results');\n                        stateHistory = _.chain(stateHistory).filter(function (content) {\n                            return content.pollId === currentPollId;\n                        }).last().value();\n\n                        if (!angular.equals(lastPollResults, pollResults)) {\n                            lastPollResults = pollResults;\n                            $rootScope.$broadcast('poll-results-updated', lastPollResults);\n                        }\n\n                        // @todo - implement logic after we get the requierments\n                        // only upate results with the server if there was an over 5% change\n                        if (shouldUpdatePollResults(stateHistory, pollResults)) {\n\n                            updatePollResults(currentPollId, pollResults);\n                        }\n                    }\n                );\n            }\n\n            /**\n             * check if to update poll results state.\n             * @param stateHistory current poll results object know to application\n             * @param newPollResults new poll results calculated from server\n             * @returns {boolean} if to update current poll results\n             */\n            function shouldUpdatePollResults(stateHistory, pollResults)\n            {\n                var update = false;\n\n                if(pollResults.totalVoters === 0) {\n                    update = false;\n                } else if(!stateHistory && pollResults) {\n                    update = true;\n                } else if (stateHistory.totalVoters * 1.05 < pollResults.totalVoters ||\n                    stateHistory.totalVoters > pollResults.totalVoters) {\n                    //checking threshold and negative change of total voters (in case of user answer changes)\n                    update = true;\n                } else if (stateHistory.totalVoters === pollResults.totalVoters) {\n                    //in case there is no change in total voters count, check if no answers were changed by users\n                    update = !angular.equals(stateHistory.answers, pollResults.answers);\n                }\n\n                return update;\n            }\n\n            function getActivePollResults() {\n                return lastPollResults;\n            }\n\n            function startPollingVotes(pollId){\n\n                lastPollResults = null;\n\n                if (getMetadataProfilePromise === null){\n                    getMetadataProfilePromise = kalturaAPI.metadataProfileService.list(Polls_MetadataProfileSystemName);\n                }\n\n                getMetadataProfilePromise.then(function(res){\n                    metadataProfileId = res.objects[0].id;\n                    currentPollId = pollId;\n                    pollingHandler = setInterval(getVotesFromServer, 2000);\n                }, function(res){\n                    klog.warn(\"failed to get \" + Polls_MetadataProfileSystemName + \" with error \" + JSON.stringify(res));\n                    getMetadataProfilePromise = null;\n                });\n            }\n\n            function stopPollingVotes(ksHash){\n                if(pollingHandler !== null) {\n                    clearInterval(pollingHandler);\n                    pollingHandler = null;\n                    //update poll results only if current producer initiate the 'stop poll' call\n                    kalturaAPI.login().then(\n                        function (ks)\n                        {\n                            if (getKSHash(ks) === ksHash) {\n                                updatePollResults(currentPollId, lastPollResults);\n                            }\n                        }\n                    );\n                }\n            }\n\n            function changeSelectedPoll(pollAsset)\n            {\n                selectedPollAsset = pollAsset;\n                var pollState = getPollState(pollAsset.id);\n                //make sure player view mode is video only before updating selected poll\n                updatePlayerViewMode();\n                kProducerActions.setStateOrientedAction('select-poll-state', pollState);\n            }\n\n            function setSelectedPoll(pollAsset)\n            {\n                selectedPollAsset = pollAsset;\n            }\n\n            function getLocallyCreatedPollId()\n            {\n                return locallyCreatedPollId;\n            }\n\n            function setLocallyCreatedPollId(pollId)\n            {\n                locallyCreatedPollId = pollId;\n            }\n\n            /**\n             * a complete poll is a poll with a Question and the first two answers.\n             * also, a complete and valid poll have only consecutive answers\n             * (if answers num. 1,2,4 are set - the poll is invalid)\n             * @return boolean if the poll is complete\n             */\n            function isPollComplete (pollAsset)\n            {\n                var complete = false;\n                var pollText = !_.isEmpty(pollAsset) ? pollAsset.text : {};\n                if (pollText && _.isObject(pollText)) {\n                    if (!_.isEmpty(pollText.question)) {\n                        if (!_.isEmpty(pollText.answers)) {\n                            //currently the poll has a question\n                            complete = true;\n                            //to check for min. two answers\n                            var answerCount = 0;\n                            //to check that all answers are consecutive\n                            var sequenceStopped = false;\n                            _.each(pollText.answers, function (answer) {\n                                if (!_.isEmpty(answer)) {\n                                    //we have valid answer after a blank one\n                                    if (sequenceStopped) {\n                                        complete = false;\n                                    } else {\n                                        answerCount++;\n                                    }\n                                } else {\n                                    sequenceStopped = true;\n                                }\n                            });\n                            //a poll is complete if the answers sequence didn't break and there are at least 2 answers\n                            complete = complete && answerCount >= 2;\n                        }\n                    }\n                }\n                return complete;\n            }\n\n            function _debugDeleteResponseProfile() {\n                return kalturaAPI.responseProfileService.list().then(function (res) {\n                    var promies = [];\n                    res.objects.forEach(function (item) {\n                        if (item.systemName.indexOf(Polls_ResponseProfileSystemName) > -1 ) {\n                            promies.push(kalturaAPI.responseProfileService.delete(item.id));\n                        }\n                    });\n                    return Promise.all(promies);\n                });\n            }\n\n            function _debugInstallResponseProfile(){\n                self._debugDeleteResponseProfile().then(function () {\n                    kalturaAPI.responseProfileService.addPollsResponseProfile(Polls_ResponseProfileSystemName, Polls_ResponseProfileSystemName).then(function (r) {\n                        alert(\"response profile was created \" + JSON.stringify(r));\n                    });\n                });\n            }\n\n            function _debugInstallMetadataProfile(){\n\n                $http.get('../common/kPolls/resources/pollVoteCustomMetadataProfile.xsd').then(function (xsd) {\n                    kalturaAPI.metadataProfileService.list(Polls_MetadataProfileSystemName).then (function (res) {\n\n                        if (res.objects.length === 0) {\n\n                            return kalturaAPI.metadataProfileService.add(Polls_MetadataProfileSystemName, xsd.data, \"annotationMetadata.Annotation\").then(function (res) {\n                                alert(JSON.stringify(res));\n                            });\n                        } else {\n                            var customMetadataProfile = res.objects[0];\n                            customMetadataProfile.xsd = xsd.data;\n\n                            return kalturaAPI.metadataProfileService.update(customMetadataProfile.id, customMetadataProfile.xsd).then(function (res) {\n                                alert(JSON.stringify(res));\n                            }, function(res){\n                                alert('failed to install profile with error: ' + JSON.stringify(res));\n                            });\n                        }\n                    });\n                });\n            }\n\n            function updatePlayerViewMode()\n            {\n                //make sure player view mode is video only\n                //not checking for kaPlayerViewControlsService.getCurrentViewId() !== PLAYER_VIEW_MODE.VIDEO_ONLY\n                //since when webcast event doesn't have slides, player view mode is video only (unlocked)\n                kaPlayerViewControlsService.changeViewById(PLAYER_VIEW_MODE.VIDEO_ONLY, PLAYER_VIEW_STATE.LOCKED);\n            }\n\n            kEntryManagementService.addPushServerNotificationsToClearOnArchive(pollEventNotificationTemplates);\n            kEntryManagementService.addArchiveCustomAction( function() {\n                klog.info(\"Archiving polls\");\n\n                var polls= kProducerActions.getInstanceActionsContent('poll-data');\n                return _.map(polls,function(pollData, pollId) {\n                    var answerIds = _.keys(pollData.text.answers);\n\n                    return kalturaAPI.pollsService.resetVotes(pollId,answerIds).then(function (res) {\n                        klog.info(\"Reset all votes of pollId \" + pollId );\n                        return $q.resolve();\n                    });\n                });\n            });\n\n            self.updatePollResults = updatePollResults; // @todo - remove this, it's public till we kill the simulator\n            self.addPollData = addPollData;\n            self.createPollObject = createPollObject;\n            self.updatePollData = updatePollData;\n            self.updatePollState = updateSelectedPollState;\n            self.getPollState = getPollState;\n            self.getPollResults = getPollResults;\n            self.changeSelectedPoll = changeSelectedPoll;\n            self.setSelectedPoll = setSelectedPoll;\n            self.getLocallyCreatedPollId = getLocallyCreatedPollId;\n            self.setLocallyCreatedPollId = setLocallyCreatedPollId;\n            self.isPollComplete = isPollComplete;\n            self.getActivePollsDataAsArray = getActivePollsDataAsArray;\n            self._debugInstallMetadataProfile = _debugInstallMetadataProfile;\n            self._debugInstallResponseProfile = _debugInstallResponseProfile;\n            self._debugDeleteResponseProfile = _debugDeleteResponseProfile;\n\n            ////@todo - remove sample code below\n            //$rootScope.$on('poll-results-updated', function (e, res) {\n            //    alert(JSON.stringify(res));\n            //});\n            init();\n        }\n\n        this.$get = function ($injector) {\n\n            return $injector.instantiate(Service);\n        };\n    }\n\n    angular.module('kPolls').provider('kPollsService', Provider);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n/* globals alert */\n\n(function () {\n    \"use strict\";\n    function Provider(){\n\n        function Service(kProducerActions, kCef, gettextCatalog, kPollsService, POLL_DATA_STATUS, sessionService)\n        {\n            var self = this;\n\n            function init() {\n            }\n\n            function extendedPollObjectToCsv(poll, pollId) {\n\n                return String.format(\"{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11}\",\n                    poll.text.question   !== undefined ? quoteCsvString(poll.text.question)   : ' ',\n                    poll.text.answers[1] !== undefined ? quoteCsvString(poll.text.answers[1]) : ' ',\n                    poll.text.answers[2] !== undefined ? quoteCsvString(poll.text.answers[2]) : ' ',\n                    poll.text.answers[3] !== undefined ? quoteCsvString(poll.text.answers[3]) : ' ',\n                    poll.text.answers[4] !== undefined ? quoteCsvString(poll.text.answers[4]) : ' ',\n                    poll.text.answers[5] !== undefined ? quoteCsvString(poll.text.answers[5]) : ' ',\n                    poll.pollResults !== undefined && poll.pollResults.totalVoters !== undefined ? poll.pollResults.totalVoters : ' ',\n                    getAnsValueFromExtendedPollObject(poll,1),\n                    getAnsValueFromExtendedPollObject(poll,2),\n                    getAnsValueFromExtendedPollObject(poll,3),\n                    getAnsValueFromExtendedPollObject(poll,4),\n                    getAnsValueFromExtendedPollObject(poll,5)\n                );\n            }\n\n            function quoteCsvString(content) {\n                var tmp = content.replace(/\"/g, '\"\"');\n                return \"\\\"\" + tmp + \"\\\"\";\n            }\n\n            function getAnsValueFromExtendedPollObject(poll, pos) {\n                return poll.pollResults === undefined || poll.pollResults.answers[pos] === undefined ? ' ' : poll.pollResults.answers[pos];\n            }\n\n            function getDataForExport() {\n\n                var pollsObjects =  _.cloneDeep(kProducerActions.getInstanceActionsContent('poll-data'));\n                var pollsResults = kProducerActions.getStateActionHistory('poll-results');\n\n                // go over the poll results and add a pollResults to every pollObject\n                _(pollsResults).each(function(res){\n                    pollsObjects[res.pollId].pollResults = res;\n                });\n\n                var csv = \"question, answer1, answer2, answer3, answer4, answer5, total_votes, votes1, votes2, votes3, votes4, votes5\";\n                _(pollsObjects).each(function (poll, pollId) {\n                    if (poll.text.state === POLL_DATA_STATUS.ACTIVE && kPollsService.isPollComplete(poll)) {\n                        csv += \"\\n\";\n                        csv += extendedPollObjectToCsv(poll, pollId);\n                    }\n                });\n\n                return csv;\n            }\n\n            function exportPollsDataToFile() {\n\n                var csv = getDataForExport();\n\n                if (kCef.available) {\n                    var downloadFileName = sessionService.getTitle()+\"-poll.csv\";\n\n                    kCef.sendIPC('saveAsDialog',downloadFileName, \"Comma-separated values\",[\"csv\"],gettextCatalog.getString(\"Select file for export\")).then(function (fileName) {\n\n                        if (fileName) {\n\n                            kCef.sendIPC(\"saveFile\",fileName, csv).then(function () {\n\n                                klog.info(\"Exporting file completed.\");\n\n                            },function(err){\n\n                                klog.error(\"Export to file failed.\"+err);\n\n                            });\n                        }\n\n                    }).catch( function(f) {\n\n                        klog.error(\"Saving the filed caused an exception.\");\n\n                    });\n                }\n                else{\n                    alert(\"Need to use native application.\\n \" + csv);\n                }\n            }\n\n            self.exportPollsDataToFile = exportPollsDataToFile;\n\n            init();\n        }\n\n        this.$get = function ($injector) {\n\n            return $injector.instantiate(Service);\n        };\n    }\n\n    angular.module('kPolls').provider('kPollsExportService', Provider);\n\n})();","/* globals _ */\n\n/**\n * Provides a service for getting polls state and data as a poll container object for\n * the main poll view and external poll screen displays\n */\n(function () {\n    \"use strict\";\n\n    function Service(kAssetsTimelineService, kProducerActions, kPollsService ,\n                     POLL_STATE_STATUS, POLL_STATE, localHardwareService)\n    {\n        var self = this;\n\n        var lastPollContainer = {\n            configuration : {\n                currentView: 'sharedView'\n            },\n            userVote : {metadataId: null, answer: null, inProgress: false, canUserVote: false, isReady: false},\n            pollData : {\n                pollId: null,\n                errorContent: null,\n                content: null,\n                showResults: false,\n                showTotals: false,\n                pollResults: null,\n                showAnswers : false\n            },\n            canUserVote : function () {\n                return lastPollContainer.userVote.canUserVote;\n            }\n        };\n\n        function getUpdatedPollContainer(currentPollContainer)\n        {\n            lastPollContainer = currentPollContainer ? currentPollContainer : lastPollContainer;\n\n            var currentPollAsset = kAssetsTimelineService.currentTimelineAsset;\n            var currentPollState = kProducerActions.getState('actions.select-poll-state');\n            var currentPollResults = kProducerActions.getState('actions.poll-results');\n\n            if(currentPollState) {\n                //update poll state\n                _.extend(lastPollContainer.pollData,\n                    {\n                        pollId : currentPollAsset.id,\n                        content : currentPollAsset.text,\n                        showTotals: true, //producer should always see the totals and results is any exists\n                        showAnswers : currentPollState.showAnswers,\n                        showResults: currentPollState.showResults\n                    }\n                );\n                _.extend(lastPollContainer.userVote,\n                    {\n                        canUserVote : currentPollState.status !== POLL_STATE_STATUS.FINISHED\n                    }\n                );\n                if(currentPollState.showResults !== 'disabled') {\n                    //make sure view configuration is set to 'shared' when showing results to users\n                    _.extend(lastPollContainer.configuration,\n                        {\n                            currentView: 'sharedView'\n                        }\n                    );\n                }\n                //if initial state - make sure the reaults UI is being initialized\n                if (currentPollState.status === POLL_STATE_STATUS.PRELIMINARY) {\n                    _.extend(lastPollContainer.pollData,\n                        {\n                            pollResults: null\n                        }\n                    );\n                }\n                //if final results need to be taken\n                else if (currentPollState.status === POLL_STATE_STATUS.FINISHED) {\n                    //if current poll results state is not for this current poll, get results from history\n                    if(!currentPollResults || currentPollResults.pollId !== currentPollState.pollId) {\n                        currentPollResults = kPollsService.getPollResults(currentPollAsset.id);\n                    }\n                    //update poll results in needed\n                    _.extend(lastPollContainer.pollData,\n                        {\n                            pollResults: currentPollResults\n                        }\n                    );\n                }\n            }\n\n            postPollContainerChanged(lastPollContainer);\n            return lastPollContainer;\n        }\n        \n        function updatePollContainerResults(currentPollContainer, pollResults)\n        {\n            lastPollContainer = currentPollContainer ? currentPollContainer : lastPollContainer;\n\n            _.extend(lastPollContainer.pollData,\n                {\n                    pollResults: pollResults\n                }\n            );\n\n            postPollContainerChanged(lastPollContainer);\n            return lastPollContainer;\n        }\n\n        function updatePollContainerData(currentPollContainer)\n        {\n            lastPollContainer = currentPollContainer ? currentPollContainer : lastPollContainer;\n\n            var currentPoll = _.find(kPollsService.getActivePollsDataAsArray(), function (poll) {\n                return poll.id === kAssetsTimelineService.currentTimelineAsset.id;\n            });\n            if(currentPoll) {\n                _.extend(lastPollContainer.pollData,\n                    {\n                        content : currentPoll.text\n                    }\n                );\n            }\n\n            postPollContainerChanged(lastPollContainer);\n            return lastPollContainer;\n        }\n\n        function postPollContainerChanged(lastPollContainer)\n        {\n            if(localHardwareService.getFullScreenWindow()) {\n                var newPollState = JSON.stringify(lastPollContainer);\n                ipcRenderer.send('pollUpdate', {type: 'poll', data: newPollState});\n            }\n        }\n\n        self.getUpdatedPollContainer = getUpdatedPollContainer;\n        self.updatePollContainerResults = updatePollContainerResults;\n        self.updatePollContainerData = updatePollContainerData;\n\n    }\n\n    angular.module('kPolls').service('kPollContainer', Service);\n\n\n})();","//@todo - testing code - remove\n(function () {\n    \"use strict\";\n\n    function Directive() {\n        function Controller(kPollsService,$scope,$timeout, $q, kProducerActions, kalturaAPI, Polls_MetadataProfileSystemName) {\n\n            var self = this;\n\n            function createEmptyPollText() {\n                return {\n                    question: '',\n                    answers: {\n                        1: '',\n                        2: '',\n                        3: '',\n                        4: '',\n                        5: ''\n                    }\n                };\n            }\n\n\n            function refreshPollsList()\n            {\n                var polls = kProducerActions.getInstanceActionsContent('poll-data');\n\n                var newPollsList = [];\n                var index = 0;\n                _.each(polls, function(poll, id)\n                {\n                    index++;\n                    var text = poll.text || createEmptyPollText();\n\n                    newPollsList.push({id : id, text : text,  name : index,  tooltip : text.question || '{missing}' } );\n                });\n\n                self.polls = newPollsList;\n                syncCreateContent();\n            }\n\n            function syncCreateContent()\n            {\n                var poll = self.create.selectedPollId ? _.find(self.polls, {id : self.create.selectedPollId}) : null;\n\n                if (poll)\n                {\n                    _.extend(self.create,\n                        {  text : _.cloneDeep(poll.text)});\n                }else\n                {\n                    _.extend(self.create,\n                        {text : createEmptyPollText()});\n                }\n\n            }\n\n\n            function refreshSelectPollStatus()\n            {\n                var selectPollState = kProducerActions.getState('actions.select-poll-state');\n                var podcastingType = kProducerActions.getState('podcasting.type');\n\n                if (podcastingType === 'poll' && selectPollState)\n                {\n                    self.currentyShownPoll = {id : selectPollState.pollId, status : selectPollState.status, showAnswers : selectPollState.showAnswers,  allowVoting : selectPollState.allowVoting, showResults : selectPollState.showResults, showTotals : selectPollState.showTotals};\n                }else\n                {\n                    self.currentyShownPoll = null;\n                }\n\n            }\n            function init()\n            {\n                kProducerActions.isReady().then(function()\n                {\n                    kProducerActions.subscribeInstanceChange(refreshPollsList);\n\n                    kProducerActions.subscribeStateChange(function() {\n                        refreshSelectPollStatus();\n                    });\n\n                    refreshSelectPollStatus();\n                    refreshPollsList();\n\n                });\n\n                $scope.$watch('vm.create.selectedPollId',function()\n                {\n                    syncCreateContent();\n                })\n\n\n                syncCreateContent();\n\n            }\n            function createPoll()\n            {\n                self.create.message = 'submitting...';\n                var promise = null;\n\n                var documentEntryId = kProducerActions.getState('actions.select-deck-document.documentEntryId');\n\n                var content = { text : self.create.text};\n                if (self.create.selectedPollId)\n                {\n                    promise = kPollsService.updatePollData(content, self.create.selectedPollId);\n                }else {\n                    promise = kPollsService.addPollData(content);\n                }\n\n                promise.then(function(result)\n                {\n                    self.create.message = 'done';\n\n                    $timeout(function()\n                    {\n                        if (self.create.message === 'done')\n                        {\n                            self.create.message = '';\n                        }\n                    },2000);\n                    if(!self.create.selectedPollId){\n                        self.create.selectedPollId = result.id;\n                    }\n                },function(reason)\n                {\n                    self.create.message = reason;\n                });\n            }\n\n            function voteAsPlayer()\n            {\n                //alert(self.pollResults.selectedPollId + ' ' + self.voteAsPlayerData.vote);\n                kalturaAPI.metadataProfileService.list(Polls_MetadataProfileSystemName).then(function(res){\n                    kalturaAPI.pollsService.voteAsPlayer(configuration.MediaEntryId, self.pollResults.selectedPollId, res.objects[0].id, self.voteAsPlayerData.vote, \"myUserId\");\n                });\n            }\n\n            function updateResults()\n            {\n                if (self.pollResults.selectedPollId )\n                {\n                    self.pollResults.message = 'submitting...';\n\n                    kPollsService.updatePollResults(self.pollResults.selectedPollId, self.pollResults.text);\n\n                    self.pollResults.message = 'done';\n\n                    $timeout(function () {\n                        if (self.pollResults.message === 'done') {\n                            self.pollResults.message = '';\n                        }\n                    }, 2000);\n                }else\n                {\n                    self.pollResults.message = 'aborted. please select poll...';\n                }\n            }\n\n\n            function updateStatus() {\n                if (self.pollStatus.selectedPollId && self.pollStatus.state)\n                {\n                    self.pollStatus.message = 'submitting...';\n\n                    kPollsService.updatePollState({\n                        'pollId': self.pollStatus.selectedPollId,\n                        'status': self.pollStatus.status,\n                        showAnswers : self.pollStatus.showAnswers,\n                        showResults: self.pollStatus.showResults,\n                        showTotals: self.pollStatus.showTotals\n                    });\n\n\n                    self.pollStatus.message = 'done';\n\n                    $timeout(function () {\n                        if (self.pollStatus.message === 'done') {\n                            self.pollStatus.message = '';\n                        }\n                    }, 2000);\n                }else\n                {\n                    self.pollStatus.message = 'aborted. please select poll and state...';\n                }\n\n            }\n\n            self.updateResults = updateResults;\n            self.currentyShownPoll = null;\n            self.createPoll = createPoll;\n            self.updateStatus = updateStatus;\n            self.voteAsPlayer = voteAsPlayer;\n            self.create = {selectedPollId : null, message : '', text : null};\n            self.pollStatus = {\n                message : '',\n                selectedPollId : '',\n                state : 'show',\n                availableResults : [{id : 'disabled', name: 'disabled'},{id : 'percentages', name: 'Percentages'}],\n                showResults : 'disabled',\n                availableTotals : [{id : 'disabled', name: 'disabled'},{id : 'numbers', name: 'Numbers'}],\n                status : 'preliminary',\n                showTotals : 'disabled',\n                showAnswers : false,\n                allowVoting : false};\n            self.pollResults = {message : '', selectedPollId : '', text : {\n                totalVoters: '',\n                answers: {\n                    1: '',\n                    2: '',\n                    3: '',\n                    4: '',\n                    5: ''\n                }}};\n            self.polls = [];\n            self.availableStatus = [{id : 'preliminary', name: 'Preliminary'},{id : 'inProgress', name : 'In Progress'}, ,{id : 'finished', name : 'Finished'}];\n            self.voteAsPlayerData = {vote: 1};\n\n            init();\n        }\n\n        function Link(scope, element, attrs, ctrls) {\n\n        }\n\n        return {\n            restrict: 'A',\n            scope: {},\n            templateUrl: '../common/kPolls/directives/k-polls-simulator.html',\n            controller: Controller,\n            link: Link,\n            controllerAs: 'vm',\n            bindToController: {\n            }\n        };\n    }\n\n    angular.module('kPolls').directive('kPollsSimulator', Directive);\n\n})();","//@todo - testing code related to simulator - remove\n(function () {\n    \"use strict\";\n\n    function Directive() {\n        function Controller() {\n\n            var self = this;\n\n        }\n\n        function Link(scope, element, attrs, ctrls) {\n\n        }\n\n        return {\n            restrict: 'A',\n            scope: {},\n            templateUrl: '../common/kPolls/directives/k-select-list.html',\n            controller: Controller,\n            link: Link,\n            controllerAs: 'vm',\n            bindToController: {\n                items : '=',\n                selectedId : '=',\n                emptyLabel : '@'\n            }\n        };\n    }\n\n    angular.module('kPolls').directive('kSelectList', Directive);\n\n})();","/* globals _ */\n/* globals klog */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function (){\n    \"use strict\";\n\n    function Directive(kPollsService, kProducerActions, $uibModal, $rootScope, $window, $timeout,\n                       gettextCatalog, POLL_DATA_STATUS, POLL_STATE_STATUS)\n    {\n        var FULL_DIALOG_HEIGHT = 425;\n        var DIALOG_LEFT_OFFSET = 40;\n        var DIALOG_TOP_OFFSET = 20;\n\n\n        function Controller(kPollsService, $modalInstance, $scope, $rootScope)\n        {\n            $scope.isLoading = false;\n\n            $scope.remainingCharsCount =\n            {\n                question : \"110\",\n                answer : \"60\"\n            };\n\n            $scope.getWizardTitle = function ()\n            {\n                if(_.isEmpty($scope.poll.question)) {\n                    return gettextCatalog.getString('Add a New Poll Question');\n                }else if(!$scope.isPollValid()) {\n                    return gettextCatalog.getString('Add Answers');\n                }else {\n                    return gettextCatalog.getString('Edit Poll');\n                }\n            };\n            \n            $scope.getWizardSubTitle = function ()\n            {\n                if(_.isEmpty($scope.poll.question)) {\n                    return '';\n                }else if(!$scope.isPollValid()) {\n                    return gettextCatalog.getString('(up to 5)');\n                } else {\n                    return '';\n                }\n            };\n\n            $scope.savePoll = function () {\n\n                $scope.isLoading = true;\n\n                var newPollData = {\n                  text: {\n                      state : $scope.poll.state,\n                      question : $scope.poll.question,\n                      answers : $scope.poll.answers\n                  }\n                };\n\n                updatePollData(newPollData);\n            };\n\n            /**\n             * closing the modal and saving only if poll is valid or not broadcasted\n             */\n            $scope.minimizeAndSave = function ()\n            {\n                if($scope.isPollValid() || !$scope.isPollBeingBroadcast()) {\n                    $scope.savePoll();\n                } else {\n                    //close wizard without saving\n                    $scope.poll.question = $scope.initialPollData.question;\n                    _.each($scope.initialPollData.answers, function (answer, key) {\n                        $scope.poll.answers[key] = answer;\n                    });\n                    closeModal();\n                }\n            };\n\n            $scope.deletePoll = function ()\n            {\n                var updatedPollData = {\n                    text: {\n                        state : POLL_DATA_STATUS.INACTIVE,\n                        question : $scope.poll.question,\n                        answers : $scope.poll.answers\n                    }\n                };\n\n                updatePollData(updatedPollData);\n            };\n\n            $scope.isPollAnswersEmpty = function ()\n            {\n                var empty = true;\n                if(!_.isEmpty($scope.poll.answers)) {\n                    _.each($scope.poll.answers, function (answer) {\n                       if(!_.isEmpty(answer)) {\n                           empty = false;\n                       }\n                    });\n                }\n                return empty;\n            };\n\n            $scope.isPollValid = function ()\n            {\n                var complete = false;\n                if(!_.isEmpty($scope.poll.question)) {\n                    if(!_.isEmpty($scope.poll.answers)) {\n                        //currently the poll has a question\n                        complete = true;\n                        //to check for min. two answers\n                        var answerCount = 0;\n                        //to check that all answers are consecutive\n                        var sequenceStopped = false;\n                        _.each($scope.poll.answers, function (answer) {\n                            if(!_.isEmpty(answer)) {\n                                //we have valid answer after a blank one\n                                if(sequenceStopped) {\n                                    complete = false;\n                                } else {\n                                    answerCount++;\n                                }\n                            } else {\n                                sequenceStopped = true;\n                            }\n                        });\n                        //a poll is complete if the answers sequence didn't break and there are at least 2 answers\n                        complete = complete && answerCount >= 2;\n                    }\n                }\n                return complete;\n            };\n\n            $scope.removeAnswer = function (answerId)\n            {\n                var newAnswerObject = {};\n                _.each($scope.poll.answers, function (answer, id) {\n                    //no need to add the requested answer to remove\n                    var answerKey = parseInt(id);\n                    if(answerKey !== answerId) {\n                        if(id < answerId) {\n                            newAnswerObject[answerKey] = answer;\n                        }else {\n                            newAnswerObject[answerKey - 1] = answer;\n                        }\n                    }\n                });\n\n                $scope.poll.answers = newAnswerObject;\n            };\n\n            $scope.$on('modal.closing', function(event, reason, closed)\n            {\n                if ($scope.isLoading) {\n                    event.preventDefault();\n                }\n            });\n\n            $scope.hideInputRemoveIcon = function ($event)\n            {\n                var element = $($event.currentTarget).parent();\n                var removeIcon = element.find('.remove-poll-answer');\n                var charCount = element.find('.poll-char-count');\n                if(removeIcon && charCount) {\n                    removeIcon.css({'visibility' : 'hidden'});\n                    charCount.css({'visibility' : 'visible'});\n                }\n            };\n\n            $scope.resetInputStyle = function ($event)\n            {\n                var element = $($event.currentTarget).parent();\n                var removeIcon = element.find('.remove-poll-answer');\n                var charCount = element.find('.poll-char-count');\n                if(removeIcon && charCount) {\n                    removeIcon.attr('style','');\n                    charCount.attr('style','');\n                }\n            };\n\n            /**\n             * Private functions\n             */\n\n            //update poll data only if in preliminary state\n            function updatePollData (newPollData)\n            {\n                if($scope.isEditable) {\n\n                    kPollsService.updatePollData(newPollData, $scope.poll.id).then(\n                        function (poll)\n                        {\n                            closeModal();\n                        },\n                        function (err)\n                        {\n                            //todo deal with update poll error\n                            $scope.isLoading = false;\n                            klog.error(err);\n                        });\n                } else {\n                    //close wizard without saving\n                    closeModal();\n                }\n            }\n            \n            function closeModal()\n            {\n                $scope.isLoading = false;\n                $rootScope.$broadcast(\"pollWizardClosed\");\n                $modalInstance.close();\n            }\n\n            \n        }\n        \n        function Link(scope, element, attrs, ctrls)\n        {\n            scope.isEditable = false;\n            scope.isDeletable = false;\n\n            scope.$watch(function(){return scope.visible;}, function(value)\n            {\n                if(value === true){\n                    $timeout(function () {\n                        scope.open();\n                    });\n                }\n            });\n\n            scope.isPollBeingBroadcast = function ()\n            {\n                var isBroadcast = false;\n                //checking if current poll is being broadcast\n                var podcastingType = kProducerActions.getState('podcasting.type');\n                if(podcastingType === 'poll') {\n                    var selectedPollState = kProducerActions.getState('actions.select-poll-state');\n                    if(selectedPollState && selectedPollState['pollId'] === scope.poll.id) {\n                        return true;\n                    }\n                }\n\n                return isBroadcast;\n            };\n\n            scope.open = function()\n            {\n                $rootScope.$broadcast(\"pollWizardOpened\");\n\n                scope.initialPollData = _.cloneDeep(scope.poll);\n                \n                var modalInstance = $uibModal.open({\n                    scope: scope,\n                    controller: Controller,\n                    templateUrl: '../common/kPolls/directives/k-poll-wizard-modal.html',\n                    backdrop: 'static',\n                    windowTopClass: 'poll-wizard-modal',\n                    keyboard  : false\n                });\n\n                updateInitialPollState();\n\n                // listen to poll state changes from server and act accordingly\n                kProducerActions.subscribeStateChange(function()\n                    {\n                        updatePollState();\n                    }\n                );\n\n                function updateInitialPollState()\n                {\n                    var pollState = kPollsService.getPollState(scope.poll.id);\n                    if(pollState) {\n                        scope.isEditable = pollState.status === POLL_STATE_STATUS.PRELIMINARY;\n                        scope.isDeletable = scope.isEditable && !scope.isPollBeingBroadcast();\n                    }\n                }\n\n                function updatePollState()\n                {\n                    var pollState = kProducerActions.getState('actions.select-poll-state');\n                    if(pollState && pollState['pollId'] ===  scope.poll.id) {\n                        scope.isEditable = pollState.status === POLL_STATE_STATUS.PRELIMINARY;\n                        scope.isDeletable = scope.isEditable && !scope.isPollBeingBroadcast();\n                    }\n                }\n\n                modalInstance.rendered.then(function ()\n                {\n                    onResize();\n\n                    $timeout(function () {\n                        onResize();\n                    }, 200);\n\n                    angular.element($window).on('resize', onResize);\n\n                    $('.modal-dialog').resize(\n                        function ()\n                        {\n                            onResize();\n                        }\n                    );\n\n                    scope.$on('$destroy', cleanUp);\n\n                });\n\n                function onResize()\n                {\n                    $timeout(function () {\n                        //DOM has finished rendering\n                        var targetPosition = $('.centered-event').offset();\n                        if(targetPosition) {\n                            var left = targetPosition.left - $(document).scrollLeft() - DIALOG_LEFT_OFFSET;\n                            var top = 0;\n                            //if there is enough height for a full poll dialog\n                            if(targetPosition.top > FULL_DIALOG_HEIGHT) {\n                                top = targetPosition.top - $(document).scrollTop() - ($('.modal-dialog').height() + DIALOG_TOP_OFFSET);\n                            }\n                            if(left < 30 || top < 30) {\n                                onResize();\n                            } else {\n                                $('.modal-dialog').css({top: top, left: left, transition:'all 0.5s linear'});\n                            }\n                        }\n                        else{\n                            klog.warn(\"failed to get centered-event - poll wizard will not show in the correct place\");\n                        }\n                    });\n                }\n\n                modalInstance.result.then(function(){\n                    //Get triggers when modal is closed\n                    $rootScope.$broadcast(\"pollWizardClosed\");\n                }, function(){\n                    //gets triggers when modal is dismissed.\n                    $rootScope.$broadcast(\"pollWizardClosed\");\n\n                });\n\n                function cleanUp()\n                {\n                    angular.element($window).off('resize', onResize);\n                    $('.modal-dialog').off('resize', onResize);\n                }\n            };\n        }\n\n        return {\n            restrict: 'E',\n            scope: {visible:'=', poll:'='},\n            link: Link,\n            controllerAs: 'vm',\n            transclude: true,\n            replace: true,\n            backdrop : 'static'\n        };\n        \n    }\n\n    angular.module('kPolls').directive('kPollWizardModal', Directive);\n\n\n})();","/* globals _ /\n / globals klog /\n / globals PromisesQueue /\n / globals Promise */\n\n(function (){\n    \"use strict\";\n\n    function Directive(kPollsService, $rootScope)\n    {\n\n        function Controller($scope)\n        {\n            $scope.addPoll = function ()\n            {\n                    $scope.addPollEnabled = false;\n                    $scope.isLoading = true;\n\n                    //creating an empty poll\n                    kPollsService.addPollData({text: {}}).then(\n                        function (poll) {\n                            //update that current producer created a new poll (need to open the 'add new poll' wizard)\n                            kPollsService.setLocallyCreatedPollId(poll.id);\n                            $rootScope.$broadcast(\"pollAdded\", {prevIndex: $scope.prevIndex, poll: poll});\n                        },\n                        function (err) {\n                            $scope.isLoading = false;\n                            $scope.addPollEnabled = true;\n                            klog.error(err);\n                        }\n                    );\n            };\n\n            $rootScope.$on(\"pollWizardOpened\", function () {\n                $scope.isLoading = false;\n            });\n\n            $rootScope.$on(\"pollWizardClosed\", function () {\n                $scope.addPollEnabled = true;\n            });\n        }\n\n        function Link(scope, element, attrs, ctrls)\n        {\n            scope.addPollEnabled = true;\n            scope.isLoading = false;\n        }\n\n        return {\n            restrict: 'E',\n            templateUrl: '../common/kPolls/directives/k-poll-add.html',\n            scope: {'prevIndex':'='},\n            link: Link,\n            controller: Controller,\n            controllerAs: 'vm'\n        };\n\n    }\n\n\n    angular.module('kPolls').directive('kPollAdd', Directive);\n\n\n})();\n","(function () {\n    \"use strict\";\n\n    function Directive()\n    {\n        function Controller($scope, kPollsExportService)\n        {\n\n            $scope.exportPolls = function()\n            {\n                kPollsExportService.exportPollsDataToFile();\n            };\n\n        }\n\n        function Link(scope, element, attrs, ctrls) {\n\n        }\n\n        return {\n            restrict: 'A',\n            scope: {},\n            templateUrl: '../common/kPolls/directives/k-polls-settings.html',\n            controller: Controller,\n            link: Link,\n            controllerAs: 'vm',\n            bindToController: {\n            }\n        };\n    }\n\n    angular.module('kPolls').directive('kPollsSettings', Directive);\n\n})();","//this is an empty file","\n(function()\n{\n    'use strict';\n\n    var module = angular.module('k-main-asset', ['kPolls', 'kProducerActions', 'k-assets-timeline']);\n    module.constant('ASSET_TYPE', {SLIDE : 'slide', POLL: 'poll'});\n})();","(function () {\n    \"use strict\";\n\n    function Directive() {\n        function Controller($scope, $rootScope, slidesService, onlineStatusService, shortcutService,\n                            kAssetsTimelineService, ASSET_TYPE, kPollsService)\n        {\n            var presentationLoadedUnregister= null;\n\n            $scope.timelineAssets = [];\n            $scope.selectedAssetIndex = {val : null};\n\n            $scope.allreadyClicked = false;\n            $scope.onlineAPI = onlineStatusService.onlineAPI();\n\n            $scope.detachedSlideUrl = null;\n            $scope.hasActiveAsset = false;\n\n            $scope.currentAssetType = ASSET_TYPE.SLIDE;\n\n            $scope.$watch(\n                function()\n                {\n                    return kAssetsTimelineService.currentTimelineAsset;\n                },\n                function()\n                {\n                    syncCurrentAsset();\n                }\n            );\n\n            function syncCurrentAsset()\n            {\n                $scope.hasActiveAsset = false;\n\n                var currentAsset = kAssetsTimelineService.currentTimelineAsset;\n\n                if(currentAsset) {\n\n                    if(currentAsset.type === ASSET_TYPE.SLIDE) {\n                        $scope.currentAssetType = ASSET_TYPE.SLIDE;\n                        syncCurrentSlide();\n                    } else if(currentAsset.type === ASSET_TYPE.POLL) {\n                        $scope.currentAssetType = ASSET_TYPE.POLL;\n                        $scope.hasActiveAsset = true;\n                    }\n\n                }else {\n                    // no asset is currently presented\n                    $scope.currentAssetType = null;\n                }\n\n                $scope.setSelectedAssetIndex();\n\n            }\n            \n            function syncCurrentSlide()\n            {\n                $scope.detachedSlideUrl = '';\n\n                var currentDocEntryInfo = slidesService.getActiveDocumentInfo();\n                if(currentDocEntryInfo &&\n                    (kAssetsTimelineService.currentTimelineAsset.documentEntryId === currentDocEntryInfo.id)) {\n                    //asset is part of current timeline assets\n                    $scope.hasActiveAsset = true;\n                } else {\n                    //asset is detached from current timeline assets\n                    $scope.hasActiveAsset = true;\n                    kAssetsTimelineService.getCurrentAssetUrl().then(function(result)\n                    {\n                        $scope.detachedSlideUrl = result.url;\n                    },function()\n                    {\n                        // the is only here for safety since we know that we have current slide key so we should be able to extract url\n                        $scope.detachedSlideUrl = 'http://missing-image-url';\n                    });\n                }\n\n            }\n\n            var timelineAssetsLoaded = function () {\n\n                $scope.timelineAssets=kAssetsTimelineService.timelineAssets;\n\n                $scope.$evalAsync(function()\n                {\n                    syncCurrentAsset();\n                });\n\n                $rootScope.$broadcast('mainSlideLoaded');\n            };\n\n            $scope.prevCommand = CreateCommand(\"\",\"kicon-arrow\",function ()\n            {\n                if(!kAssetsTimelineService.isTimelineLocked()){\n                    // move to prev slide only if such a slide exists\n                    if (kAssetsTimelineService.currentTimelineAsset) {\n                        var prevSlide = kAssetsTimelineService.getPrevAsset(kAssetsTimelineService.currentTimelineAsset, true);\n\n                        if (prevSlide) {\n                            kAssetsTimelineService.currentTimelineAsset = prevSlide;\n                        }\n                    }\n\n                    $scope.setSelectedAssetIndex();\n                }\n            });\n\n            $scope.nextCommand = CreateCommand(\"\",\"kicon-arrow\",function ()\n            {\n                if(!kAssetsTimelineService.isTimelineLocked()) {\n                    kAssetsTimelineService.currentTimelineAsset =\n                        kAssetsTimelineService.getNextAsset(kAssetsTimelineService.currentTimelineAsset, false, true);\n                    $scope.setSelectedAssetIndex();\n                }\n            });\n\n\n            $scope.setSelectedAssetIndex = function() {\n\n                $scope.selectedAssetIndex.val = kAssetsTimelineService.currentTimelineAsset ?  ($scope.getAssetIndex(kAssetsTimelineService.currentTimelineAsset) + 1) : '';\n            };\n\n            $scope.setPos = function(assetIndex)\n            {\n                if (isNaN(assetIndex) ||  assetIndex < 1 || assetIndex > $scope.numberOfSlides()){\n                    $scope.setSelectedAssetIndex();\n                    return false;\n                }\n                //In case someone tries a float\n                assetIndex = parseInt(assetIndex);\n                //getting requested asset\n                var requestedAsset = $scope.timelineAssets[assetIndex-1];\n                //jump to asset only if it is valid\n                if(requestedAsset.type === ASSET_TYPE.SLIDE ||\n                    requestedAsset.type === ASSET_TYPE.POLL && kPollsService.isPollComplete(requestedAsset)) {\n                    kAssetsTimelineService.currentTimelineAsset = requestedAsset;\n                }\n                $scope.setSelectedAssetIndex();\n            };\n\n            $scope.getAssetIndex = function()\n            {\n                var currentAsset = kAssetsTimelineService.currentTimelineAsset;\n                if (currentAsset) {\n                    return kAssetsTimelineService.getAssetIndexInTimelineArray(currentAsset);\n                }\n                else {\n                    return -1;\n                }\n\n            };\n\n            $scope.numberOfSlides = function() {\n                if(kAssetsTimelineService.timelineAssets){\n                    return kAssetsTimelineService.timelineAssets.length;\n                }\n                else{\n                    return -1;\n                }\n\n            };\n\n            $scope.isVisible = function(asset)\n            {\n                var currentAsset = kAssetsTimelineService.currentTimelineAsset;\n                if(currentAsset && asset) {\n                    return kAssetsTimelineService.getAssetIndexInTimelineArray(currentAsset) ===\n                                                kAssetsTimelineService.getAssetIndexInTimelineArray(asset);\n                }\n                else{\n                    return false;\n                }\n            };\n\n            kAssetsTimelineService.isReady().then(function() {\n                timelineAssetsLoaded();\n                presentationLoadedUnregister = $scope.$on(\"AssetsTimelineChanged\",timelineAssetsLoaded);\n            });\n\n            $scope.$on('$destroy',function()\n            {\n                if (presentationLoadedUnregister)\n                {\n                    presentationLoadedUnregister();\n                }\n            });\n\n            $scope.showNavigationToggle = function ()\n            {\n                return !kAssetsTimelineService.isTimelineLocked() && $scope.timelineAssets.length > 0;\n            };\n\n            // NextCommand\n            shortcutService.bindCommand($scope,$scope.nextCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_FORWARD_ENTER);\n            shortcutService.bindCommand($scope,$scope.nextCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_FORWARD_RIGHT);\n            shortcutService.bindCommand($scope,$scope.nextCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_FORWARD_DOWN);\n            shortcutService.bindCommand($scope,$scope.nextCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_FORWARD_PAGE_DOWN);\n            shortcutService.bindCommand($scope,$scope.nextCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_FORWARD_SPACE);\n\n            // PrevCommand\n            shortcutService.bindCommand($scope,$scope.prevCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_BACKWARDS_LEFT);\n            shortcutService.bindCommand($scope,$scope.prevCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_BACKWARDS_UP);\n            shortcutService.bindCommand($scope,$scope.prevCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_BACKWARDS_PAGE_UP);\n            shortcutService.bindCommand($scope,$scope.prevCommand,shortcutService.keyCodes.WEBCAST_KEYPRESS_SLIDE_BACKWARDS_SPACE);\n        }\n\n        function Link(scope, element, attrs, ctrl) {\n        }\n\n        return {\n            restrict: 'A',\n            scope: {},\n            templateUrl: '../common/kMainAsset/directives/k-main-asset.html',\n            controller: Controller,\n            link: Link\n        };\n    }\n\n    angular.module('k-main-asset').directive('kMainAsset', Directive);\n\n})();\n\n\n\n","/* globals _ /\n / globals klog /\n / globals PromisesQueue /\n / globals Promise */\n\n(function (){\n    \"use strict\";\n\n    function Directive(kAssetsTimelineService, kProducerActions, ASSET_TYPE, kPollContainer, POLL_STATE)\n    {\n\n        function Controller($scope)\n        {\n            \n        }\n\n        function Link(scope, element, attrs, ctrls)\n        {\n\n            var pollContainer = {\n                configuration : {\n                    currentView: 'producerOnly'\n                },\n                userVote : {metadataId: null, answer: null, inProgress: false, canUserVote: false, isReady: false},\n                pollData : {\n                    pollId: null,\n                    errorContent: null,\n                    content: null,\n                    showResults: false,\n                    showTotals: false,\n                    pollResults: null,\n                    showAnswers : false\n                },\n                getViewConfig : function () {\n                    return pollContainer.configuration.currentView;\n                },\n                canUserVote : function () {\n                    return pollContainer.userVote.canUserVote;\n                }\n            };\n\n            var $webcastPoll = $(element).children().first();\n\n            var pollView =  new window.webcast.PollView(element, pollContainer, $webcastPoll);\n            \n            //watch for container height changes\n            $(element).parent().resize(\n                function()\n                {\n                    scope.layout = pollView.getLayoutName();\n                }\n            );\n\n            //watch for assets changes\n            scope.$watch(\n                function()\n                {\n                    return kAssetsTimelineService.currentTimelineAsset;\n                },\n                function()\n                {\n                    scope.layout = pollView.getLayoutName();\n                    //make sure new poll asset will have its' pollContainer view state in \"producerOnly\"\n                    _.extend(pollContainer.configuration,\n                        {\n                            currentView: 'producerOnly'\n                        }\n                    );\n                    updateCurrentPollState();\n                }\n            );\n\n            //listen to possible poll data change\n            kProducerActions.subscribeInstanceChange(function ()\n            {\n                updatePollData();\n            });\n\n            // listen to poll state changes from server and act accordingly\n            kProducerActions.subscribeStateChange(function()\n                {\n                    updateCurrentPollState();\n                }\n            );\n\n            scope.$on(\"poll-results-updated\",\n                function (event, pollResults)\n                {\n                    if(kAssetsTimelineService.currentTimelineAsset &&\n                        kAssetsTimelineService.currentTimelineAsset.type === ASSET_TYPE.POLL &&\n                        kAssetsTimelineService.currentTimelineAsset.id === pollResults.pollId) {\n\n                        var updatedPollContainer = kPollContainer.updatePollContainerResults(pollContainer, pollResults);\n                        extendPollContainer(updatedPollContainer);\n                        pollView.syncDOMPollResults();\n                    }\n                }\n            );\n\n            function updateCurrentPollState()\n            {\n                if(kAssetsTimelineService.currentTimelineAsset &&\n                    kAssetsTimelineService.currentTimelineAsset.type === ASSET_TYPE.POLL) {\n                    var updatedPollContainer = kPollContainer.getUpdatedPollContainer(pollContainer);\n                    extendPollContainer(updatedPollContainer);\n                    //update poll main asset view\n                    pollView.syncPollDOM();\n                }\n            }\n\n            function updatePollData()\n            {\n                if(kAssetsTimelineService.currentTimelineAsset &&\n                    kAssetsTimelineService.currentTimelineAsset.type === ASSET_TYPE.POLL) {\n                    var updatedPollContainer = kPollContainer.updatePollContainerData(pollContainer);\n                    extendPollContainer(updatedPollContainer);\n                    //update poll main asset view\n                    pollView.syncPollDOM();\n                }\n\n            }\n\n            function extendPollContainer(updatedPollContainer)\n            {\n                _.extend(pollContainer,updatedPollContainer);\n                _.extend(pollContainer.data, {showResults: POLL_STATE.PERCENTAGES});\n            }\n\n            //init current poll state\n            updateCurrentPollState();\n        }\n\n        return {\n            restrict: 'E',\n            templateUrl: '../common/kMainAsset/directives/k-main-poll-asset.html',\n            scope: {},\n            link: Link,\n            controller: Controller,\n            controllerAs: 'vm'\n        };\n\n    }\n\n    angular.module('k-main-asset').directive('kMainPollAsset', Directive);\n\n\n})();","/* globals _ /\n / globals klog /\n / globals PromisesQueue /\n / globals Promise */\n\n(function (){\n    \"use strict\";\n\n    function Directive(kProducerActions, kAssetsTimelineService, gettextCatalog, POLL_STATE_STATUS,\n                       ASSET_TYPE, POLL_STATE, captureService, kPollsService, kalturaAPI)\n    {\n\n        function Controller($scope)\n        {\n            $scope.setNextPollStatus = function (confirmed)\n            {\n                //get current poll state\n                var pollState = kProducerActions.getState('actions.select-poll-state');\n\n                switch ($scope.pollStatus) {\n                    case POLL_STATE_STATUS.PRELIMINARY:\n                        startPoll(pollState);\n                        break;\n                    case POLL_STATE_STATUS.IN_PROGRESS:\n                        if(confirmed) {\n                            stopPoll(pollState);\n                        } else {\n                            $scope.showConfirm = true;\n                        }\n                        break;\n                    case POLL_STATE_STATUS.FINISHED:\n                        showResults(pollState);\n                        break;\n                    default:\n                        break;\n                }\n            };\n\n            $scope.confirmStateChange = function ()\n            {\n                $scope.showConfirm = false;\n                $scope.setNextPollStatus(true);\n            };\n\n            $scope.denyStateChange = function ()\n            {\n                $scope.showConfirm = false;\n            };\n\n            function startPoll(pollState)\n            {\n                //update only if poll is in PRELIMINARY state\n                //(other producer could have changed its' status already)\n                if(pollState && pollState.status === POLL_STATE_STATUS.PRELIMINARY) {\n                    kPollsService.updatePollState(\n                        getUpdatedPollState(pollState,\n                            {\n                                'status' : POLL_STATE_STATUS.IN_PROGRESS,\n                                'showAnswers' : true,\n                                'showTotals' : POLL_STATE.NUMBERS\n                            })\n                    );\n                }\n            }\n\n            function stopPoll(pollState)\n            {\n                //update only if poll is in IN_PROGRESS state\n                //(other producer could have changed its' status already)\n                if(pollState && pollState.status === POLL_STATE_STATUS.IN_PROGRESS) {\n                    //update pollState with a unique identifier of the producer\n                    kalturaAPI.login().then(\n                        function (ks)\n                        {\n                            kPollsService.updatePollState(\n                                getUpdatedPollState(pollState,\n                                    {'status' : POLL_STATE_STATUS.FINISHED, 'ksHash' : getKSHash(ks)})\n                            );\n                        }\n                    );\n                }\n            }\n\n            function showResults(pollState)\n            {\n                //update only if poll is in FINISHED state\n                //(other producer could have changed its' status already)\n                if(pollState && pollState.status === POLL_STATE_STATUS.FINISHED) {\n                    kPollsService.updatePollState(\n                        getUpdatedPollState(pollState, {'showResults' : POLL_STATE.PERCENTAGES})\n                    );\n                }\n            }\n\n            function getUpdatedPollState(pollState, updatedValues)\n            {\n                return _.extend(\n                    {\n                        'pollId': pollState.pollId,\n                        'status': pollState.status,\n                        'showAnswers': pollState.showAnswers,\n                        'showResults': pollState.showResults,\n                        'showTotals' : pollState.showTotals\n                    },\n                    updatedValues);\n            }\n\n\n        }\n\n        function Link(scope, element, attrs, ctrls)\n        {\n            scope.showResults = false;\n            scope.pollStatus = '';\n            scope.pollStatusText = '';\n            scope.showConfirm = false;\n            scope.confirmText = gettextCatalog.getString('Are you sure?');\n\n            $('.toggle-confirm-container').resize(\n                function ()\n                {\n                    var height = $(this).height() + 'px';\n                    $('.approve-icon').css({'line-height' : height});\n                    $('.deny-icon').css({'line-height' : height});\n                    $('.confirm-text').css({'line-height' : height});\n                }\n            );\n            \n            scope.isBroadcasting = function ()\n            {\n                return captureService.isBroadcasting();\n            };\n            \n            scope.$watch(\n                function()\n                {\n                    return kAssetsTimelineService.currentTimelineAsset;\n                },\n                function()\n                {\n                    var currentAsset = kAssetsTimelineService.currentTimelineAsset;\n                    if(currentAsset && currentAsset.type === ASSET_TYPE.POLL) {\n                        updatePollState();\n                    }\n                }\n            );\n\n            // listen to poll state changes from server and act accordingly\n            kProducerActions.subscribeStateChange(function()\n                {\n                    updatePollState();\n                }\n            );\n\n            function updatePollState()\n            {\n                var pollState = kProducerActions.getState('actions.select-poll-state');\n\n                if(pollState) {\n                    scope.pollStatus = pollState.status;\n                    scope.showResults = pollState.showResults;\n                    pollStatusTextMapping(scope.pollStatus);\n                }\n            }\n\n            function pollStatusTextMapping(pollStatus)\n            {\n                switch (pollStatus) {\n                    case POLL_STATE_STATUS.PRELIMINARY:\n                        scope.pollStatusText = gettextCatalog.getString('Start Poll');\n                        break;\n                    case POLL_STATE_STATUS.IN_PROGRESS:\n                        scope.pollStatusText = gettextCatalog.getString('Stop Poll');\n                        break;\n                    case POLL_STATE_STATUS.FINISHED:\n                        scope.pollStatusText = gettextCatalog.getString('Share Final Results');\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n\n            //initial state\n            updatePollState();\n\n        }\n\n        return {\n            restrict: 'E',\n            templateUrl: '../common/kMainAsset/directives/k-main-poll-toggle.html',\n            scope: {},\n            link: Link,\n            controller: Controller,\n            controllerAs: 'vm'\n        };\n\n    }\n\n    angular.module('k-main-asset').directive('kMainPollToggle', Directive);\n\n\n})();","/**\n * Created by david.oz on 10/26/2014.\n */\nkUI.directive(\"selectAllOnFocus\",function(){\n    return {\n        restrict : 'A',\n        link : function(scope,element){\n            element.mouseup(function(event){\n                event.preventDefault();\n            });\n            element.focus(function(){\n                element.select();\n            });\n        }\n    }\n});","/**\n * Created by david.oz on 10/26/2014.\n */\nkUI.directive(\"focusOutOnEnter\",function(){\n    return {\n        restrict : 'A',\n        link : function(scope,element){\n            $(element).keyup(function (e){\n                if (e.keyCode === 13 && $(element).is(':focus')) {\n                    $(element).blur();\n                }\n            });\n        }\n    };\n});","\n\n\nkUI.directive('setCommand', function ($compile) {\n\n    return {\n        restrict: 'A',\n        replace: false,\n        terminal: true,\n        scope : {\n            setCommand : '='\n        },\n        priority : 1200,\n\n        link: function(scope,element, attrs) {\n\n            if (scope.setCommand.tooltip && scope.setCommand.tooltip !== '') {\n\n                attrs.$set('uib-tooltip', scope.setCommand.tooltip);\n\n                if (attrs.tooltipPopupDelay === undefined) {\n\n                    attrs.$set('tooltip-popup-delay', \"1200\");\n                }\n                if(attrs.tooltipPlacement === undefined) {\n                    attrs.$set('tooltip-placement', 'bottom');\n                }\n\n            }\n            if(scope.setCommand.icon && scope.setCommand.icon !== '' ) {\n\n                if (attrs.class !== undefined)\n\n                    attrs.$set('class', attrs.class + ' ' + scope.setCommand.icon);\n                else\n                    attrs.$set('class', scope.setCommand.icon);\n\n            }\n\n\n            element.bind('click',function () {\n                scope.setCommand.do();\n                scope.$apply();\n            });\n            element.removeAttr(\"set-command\");\n\n            $compile(element)(scope);\n\n        }\n    }\n});","/**\n * Created by david.oz on 11/11/2014.\n */\n\nkUI.directive('fontFitter', function () {\n    return {\n        restrict: 'A',\n        scope: {\n            maxFont: \"@\"\n        },\n\n        link: function (scope, elem, attrs) {\n\n            if (!scope.maxFont)\n                scope.maxFont=\"9999\";\n            // Establish default settings/variables\n// ====================================\n            var settings = $.extend({\n                    maximum   : \"9999\",\n                    minimum   : \"1\",\n                    maxFont   : scope.maxFont,\n                    minFont   : \"1\",\n                    fontRatio : \"12\"\n                }, attrs),\n\n// Do the magic math\n// =================\n                changes = function(el) {\n                    var $el = $(el),\n                        elw = $el.width(),\n                        width = elw > parseInt(settings.maximum) ? parseInt(settings.maximum) : elw < parseInt(settings.minimum) ? parseInt(settings.minimum) : elw,\n                        fontBase = width / parseInt(settings.fontRatio),\n                        fontSize = fontBase > parseInt(settings.maxFont) ? parseInt(settings.maxFont) : fontBase < parseInt(settings.minFont) ? parseInt(settings.minFont) : fontBase;\n                    $el.css('font-size', fontSize + 'px');\n                };\n                function resizeElement()\n                {\n                    changes(elem);\n                }\n                elementWatcher.onresize(elem,resizeElement);\n\n                scope.$on('$destroy',function()\n                {\n                    elementWatcher.remove(elem,resizeElement);\n                });\n\n\n        }\n\n\n    };\n\n});\n","/**\n * Created by david.oz on 11/11/2014.\n */\n\nkUI.directive('aspectKeep', function () {\n\n    return {\n        restrict: 'A',\n\n        link: function (scope, elem, attrs) {\n\n            var s = elem.height();\n\n\n            var scaleFunc = null;\n\n            elem = $(elem);\n\n            var scale = null;\n\n            if(attrs.hfactor){\n\n                scale = parseFloat(attrs.hfactor);\n\n                scaleFunc = function(elem){\n\n                    elem.css({\n                        'height':elem.width() * scale\n                    });\n\n                }\n            }\n            else if(attrs.wfactor){\n\n                scale = parseFloat(attrs.wfactor);\n\n                scaleFunc = function(elem){\n\n                    var currentHeight = elem.height();\n\n                    elem.css({\n                        'width':currentHeight * scale\n                    });\n                }\n\n            }else{\n                alert(\"Illegal usage!!\");\n            }\n\n\n            setInterval(function() {\n                scaleFunc(elem);\n            },500);\n\n        }\n\n\n    }\n\n});\n","(function() {\n    'use strict';\n\n    angular.module('kUI').factory('kdialog',  function ($uibModal,$rootScope) {\n        var preDialogCallback = null,\n            postDialogCallback = null,\n            dialogsOpened=0;\n\n        var modalOpen = function (params) {\n\n            var modalInstance = null;\n\n            var promise = new Promise(function (success, dismiss) {\n                if (preDialogCallback && dialogsOpened === 0) {\n                    preDialogCallback();\n                }\n\n                var dialogClosed = function () {\n                    dialogsOpened--;\n                    if (postDialogCallback && dialogsOpened === 0) {\n                        postDialogCallback();\n                    }\n                };\n\n                dialogsOpened++;\n\n                modalInstance = $uibModal.open(params);\n\n                modalInstance.result.then(function (data) {\n\n                    dialogClosed();\n\n                    if (success) {\n                        success(data);\n                    }\n\n                }, function () {\n\n                    dialogClosed();\n\n                    if (dismiss) {\n                        dismiss();\n                    }\n                });\n            });\n\n            promise.modalInstance = modalInstance;\n            return promise;\n        };\n\n\n        return {\n\n            alert: function(message,closeApp) {\n                var stack = new Error().stack;\n\n                klog.error(\"Alert \"+message+\" \"+stack);\n                return modalOpen({\n                    templateUrl: '../common/kUI/services/dialogs/alert.html',\n                    backdrop : 'static',\n                    controller: 'alertDialogController',\n                    resolve: {\n                        config:  function () {\n                            return {\n                                message: message,\n                                closeApp: closeApp\n                            };\n                        }\n                    }});\n            },\n\n\n            attention: function(titleText, messageText, closeButtonText) {\n                var modelDialog=modalOpen({\n                    backdrop : 'static',\n                    templateUrl: '../common/kUI/services/dialogs/attention.html',\n                    controller: 'attentionDialogController',\n                    resolve: {\n                        config:  function () {\n                            return {\n                                titleText: titleText,\n                                messageText: messageText,\n                                closeButtonText: closeButtonText\n                            };\n                        }\n                    }});\n                // return a tuple of instance & promise so it won't be possible to .then it\n                // this is not a correct fix, but I don't want to refactor the all thing\n                return {\n                    instance : modelDialog.modalInstance,\n                    promise : modelDialog\n                };\n            },\n\n            infoDialog: function(configuration){\n\n                return modalOpen({\n                    templateUrl: '../common/kUI/services/dialogs/info.html',\n                    controller: 'infoController',\n                    resolve: {\n                        config:  function () {\n                            return configuration;\n                        }\n                    }}).then(function(res){\n\n                    klog.info(\"Modal finished.\");\n\n                },function(err){\n\n                    klog.error(\"Error with closing the modal.\");\n\n                });\n            },\n\n            yesNoDialog: function (config) {\n\n                return modalOpen({\n                        templateUrl: '../common/kUI/services/dialogs/dialogBase.html',\n                        controller: 'dialogBaseController',\n                        resolve: {\n                            config:  function () {\n                                return config;\n                            }\n                        }});\n            },\n\n            screenSelectDialog: function (config) {\n\n                return modalOpen({\n                    templateUrl: '../common/kUI/services/dialogs/screenSelect.html',\n                    controller: 'dialogBaseController',\n                    resolve: {\n                        config:  function () {\n                            return config;\n                        }\n                    }});\n            },\n\n            disappearingDialog: function(configuration){\n\n                return modalOpen({\n                    templateUrl: '../common/kUI/services/dialogs/disappear.html',\n                    controller: 'disappearController',\n                    resolve: {\n                        config:  function () {\n                            return configuration;\n                        }\n                    }}).then(function(res){\n\n                    klog.info(\"Modal finished.\");\n\n                },function(err){\n\n                    klog.error(\"Error with closing the modal.\");\n\n                });\n            },\n\n            templatedDialog: function (config) {\n\n                return modalOpen(config);\n            },\n\n            dismiss: function (context, status) {\n                // backward compatibility - if we get an object with modalInstance on it - pass it to close,\n                // otherwise - call close on it\n                if (context && context.modalInstance) {\n                    context.modalInstance.close();\n                }else\n                {\n                    // close resolve the promise with success, while dismiss with failure\n                    if (status){\n                        context.close();\n                    }\n                    else {\n                        context.dismiss();\n                    }\n                }\n            },\n\n            setPreDialogCallback : function(f) {\n                preDialogCallback = f;\n            },\n\n            setPostDialogCallback : function(f) {\n                postDialogCallback = f;\n            }\n        };\n    });\n\n    angular.module('kUI').controller('dialogBaseController', function ($scope, $modalInstance, config, gettextCatalog, $sce) {\n\n        $scope.title = config.title ||  whiteLabelingConfiguration.appName;\n        $scope.message = $sce.trustAsHtml(config.message);\n        if (config.inputs)\n        {\n            $scope.inputs = config.inputs;\n            $scope.screenPage = 0;\n            $scope.maxPage = Math.ceil(config.inputs.length / 8) - 1;\n            $scope.selectedIndex = -1;\n        }\n        var yesMessage=config.yesMessage ||  gettextCatalog.getString(\"Yes\");\n        var noMessage=config.noMessage ||  gettextCatalog.getString(\"No\");\n\n\n        $scope.yesCommand = CreateCommand(yesMessage, \"\", function () {\n\n            $modalInstance.close();\n        });\n\n        $scope.noCommand = CreateCommand(noMessage, \"\", function () {\n\n            $modalInstance.dismiss('cancel');\n        });\n\n        $scope.screenSelectCommand = CreateCommand(yesMessage, \"\", function () {\n            var retVal = null;\n            if ($scope.selectedIndex != -1)\n            {\n                retVal = $scope.inputs[$scope.selectedIndex];\n            }\n            $modalInstance.close(retVal);\n        });\n\n        $scope.nextScreens = CreateCommand(\"\", \"\", function () {\n            $scope.screenPage++;\n        });\n\n        $scope.prevScreens = CreateCommand(\"\", \"\", function () {\n            $scope.screenPage--;\n        });\n\n        $scope.range = function(min, max) {\n            var input = [];\n            for (var i = min; i <= max; i += 1) {\n                input.push(i);\n            }\n            return input;\n        };\n\n        $scope.setSelectedIndex = function(selectedIndex)\n        {\n            $scope.selectedIndex = selectedIndex;\n        }\n\n    });\n\n    angular.module('kUI').controller('infoController', function ($scope, $modalInstance, config, gettextCatalog, $sce, upgradeService,kCef) {\n\n        $scope.template = config.templateUrl;\n\n        $scope.title = config.title;\n\n        $scope.openURL = function(url){\n            kCef.openExternal(url);\n        };\n\n        $scope.upgradeService = upgradeService;\n\n        $scope.closeCommand = CreateCommand(\"Close\", \"\", function () {\n\n            $modalInstance.close();\n        });\n    });\n\n    angular.module('kUI').controller('disappearController', function ($scope, $modalInstance, config, gettextCatalog, $sce) {\n\n        $scope.template = config.templateUrl;\n\n        $scope.title = config.title;\n\n        setTimeout(function(){\n            $scope.opacity = 0;\n        },1500);\n\n        setTimeout(function(){\n            $modalInstance.close();\n        },4500);\n\n    });\n\n\n    angular.module('kUI').controller('alertDialogController', function ($scope, $modalInstance, config, gettextCatalog,$sce) {\n\n        $scope.message = $sce.trustAsHtml(config.message);\n\n        if (config.closeApp) {\n\n            $scope.closeCommand = CreateCommand(gettextCatalog.getString(\"Close Application\"), \"\", function () {\n\n                $modalInstance.close();\n            });\n        } else {\n            $scope.closeCommand = CreateCommand(gettextCatalog.getString(\"OK\"), \"\", function () {\n                $modalInstance.close();\n            });\n        }\n    });\n\n    angular.module('kUI').controller('attentionDialogController', function ($scope, $modalInstance, config, gettextCatalog,$sce) {\n\n        $scope.messageText = $sce.trustAsHtml(config.messageText);\n        $scope.titleText = $sce.trustAsHtml(config.titleText);\n\n        $scope.closeCommand = CreateCommand(config.closeButtonText, \"\", function () {\n            $modalInstance.close();\n        });\n    });\n})();","kUI.directive('kaDetachedDropdown', function ($rootScope, $document) {\n\n\n    return {\n        restrict: 'A',\n\n        link: function (scope, elem, attrs) {\n\n            var dropdownId = attrs.kaDetachedDropdown;\n\n            function isVisible()\n            {\n                // check if visible\n                return elem.hasClass('dropdown-visible');\n            }\n\n            function hideWidget()\n            {\n                $rootScope.$broadcast('ka-dropdown-is-open-mode',{id : dropdownId, isOpen:false});\n\n                // hide widget\n                elem.fadeTo(400,0,function()\n                {\n                    // remove class used to manage opacity while dropdown is visible\n                    elem.removeClass('dropdown-visible');\n                    elem.css('display','none');\n                });\n\n                // un-register to document click to auto-close if needed\n                $document.unbind('click', documentClickBind);\n            }\n\n            function showWidget()\n            {\n                $rootScope.$broadcast('ka-dropdown-is-open-mode',{id : dropdownId, isOpen:true});\n\n                // show widget\n                elem.fadeTo(400,0.9, function () {\n\n                    // add class used to manage opacity while dropdown is visible and remove explicitly defined opacity\n                    elem.addClass('dropdown-visible').css({'opacity':'', display : 'block'});\n\n                    // register to document click to auto-close if needed\n                    $document.unbind('click', documentClickBind);\n                    $document.bind('click', documentClickBind);\n                });\n            }\n\n            function documentClickBind(event) {\n                // check if user clicked outside of widget\n                var dpContainsTarget = elem.find(event.target).length > 0;\n                if (isVisible() && !(dpContainsTarget)) {\n                    // widget is visible and user clicked ouside - hide widget\n                    hideWidget();\n                }\n            }\n\n            scope.$on(\"ka-dropdown-toggle-request\",function(e,args) {\n                // handle only the relevant detached dropdown\n                if (attrs.kaDetachedDropdown === args.id)\n                {\n                    if (isVisible())\n                    {\n                        hideWidget();\n                    }else\n                    {\n                        showWidget();\n                    }\n                }\n            });\n\n            scope.$on('$destroy',function()\n            {\n                // make sure you unbind from the 'click' to prevent memory leak.\n                $document.unbind('click',documentClickBind);\n            });\n\n            // hide the element before it shown.\n            elem.css({opacity : 0,display : 'none'});\n        }\n\n\n    }\n\n});\n","(function () {\n    \"use strict\";\n\n    function Directive($timeout) {\n\n        function link(scope, element, attrs, ctrls)\n        {\n            var regex = new RegExp(\"^[^\\n\\r]*$\");\n\n            var $element = $(element);\n\n            element.on('keypress', function(e) {\n                var char = String.fromCharCode(e.which);\n                var text = angular.element(e.srcElement).val();\n                if(!regex.test(char) || !regex.test(text)) {\n                    event.preventDefault();\n                }\n            });\n\n\n            $timeout(function ()\n            {\n                $element.height(0).height($element[0].scrollHeight);\n            },200);\n\n            element\n                .on( 'change keyup keydown paste cut',\n                    function (){\n                        $element.height(0).height($element[0].scrollHeight);\n                    });\n        }\n\n        return {\n            restrict: 'A',\n            link: link\n        };\n\n    }\n\n    kUI.directive('kTextarea', Directive);\n\n}());\n","/**\n * Created by asafrobinovich on 10/14/14.\n */\n\nvar kUpgradeModule = angular.module('kUpgradeModule', ['gettext', 'kAPI', 'kUI']);\n\nkUpgradeModule.constant('WebcastingVersionInfoUIConfName', 'WebcastingVersionInfo');\n","(function () {\n    \"use strict\";\n\n    angular.module('kUpgradeModule').controller('upgradeController', ['$scope', 'upgradeService', 'gettextCatalog', '$modalInstance','kCef', function ($scope, upgradeService, gettextCatalog, $modalInstance,kCef) {\n\n        $scope.srv = upgradeService;\n        $scope.downloadProgress=0;\n        $scope.isMandatory=upgradeService.upgradeInfo().isMandatory;\n\n        $scope.upgradeCommand = CreateCommand( gettextCatalog.getString(\"Yes, Upgrade now\"), \"\", function () {\n            upgradeService.upgradeCommand();\n        });\n\n        if (!upgradeService.upgradeInfo().isMandatory) {\n            $scope.declineUpgradeCommand = CreateCommand(gettextCatalog.getString(\"No, remind me later\"), \"\", function () {\n                upgradeService.declineUpgrade();\n                $modalInstance.dismiss('cancel');\n            });\n        }\n        else {\n            $scope.declineUpgradeCommand = CreateCommand(gettextCatalog.getString(\"No, close application\"), \"\", function () {\n                $modalInstance.dismiss('cancel');\n                window.close();\n            });\n\n        }\n        if (upgradeService.upgradeInfo().isMandatory) {\n            $scope.cancelCommand = CreateCommand(gettextCatalog.getString(\"Cancel and close\"), \"\", function () {\n                $modalInstance.dismiss('cancel');\n            });\n        }\n        else {\n            $scope.cancelCommand = CreateCommand(gettextCatalog.getString(\"Cancel\"), \"\", function () {\n                $modalInstance.dismiss('cancel');\n            });\n\n        }\n\n        kCef.on(\"downloadProgress\", function(status) {\n            klog.warn(\"updateProgress \" + JSON.stringify(status));\n            $scope.downloadProgress = status.progress;\n            if (status.isCompleted) {\n                klog.warn(\"Completed downloading file \" + status.fullPath + \" running it\");\n                kCef.openShell(status.fullPath);\n                window.close();\n            }\n        });\n    }]);\n})();\n","/* globals kserviceInfo */\n/* globals JSON */\n/* globals Promise */\n\n(function () {\n    \"use strict\";\n\n    angular.module('kUpgradeModule').factory('upgradeService', function (kalturaAPI, kUpgradeServiceInfo, kdialog, gettextCatalog, kCef, WebcastingVersionInfoUIConfName) {\n\n        var declinedAvailableUpdate = false;\n        var isUpgrading = false;\n        var upgradeInfo;\n        var systemLatestVersion = \"1.0.0.0\";\n\n        function checkForUpdates() {\n            if (configuration.checkForUpdates) {\n                kalturaAPI.login().then(function () {\n\n                    var getOSVersionPromise = kCef.available ? kCef.sendIPC(\"getOsMake\") : Promise.resolve('osx');\n\n                    getOSVersionPromise.then(function(result) {\n                        var osMake = result;\n\n                        if (configuration.GlobalUIConf && configuration.PartnerUiConf)\n                        {\n                            var partnerVersionInfo = parsePartnerUIConf(configuration.PartnerUiConf);\n                            var serverVersionInfo = parseGlobalUIConf({objects:[configuration.GlobalUIConf],totalCount:1}, osMake);\n                            validateAppVersion(partnerVersionInfo, serverVersionInfo);\n                            return;\n                        }\n\n                        kalturaAPI.startMultirequest();\n\n                        kalturaAPI.UIConfService.get(kUpgradeServiceInfo.uiConfID);\n                        kalturaAPI.UIConfService.listTemplates({ \"partnerIdEqual\": 0, \"objTypeEqual\": kalturaAPI.UIConfService.UI_CONF_TYPES.KALTURA_WEBCASTING_STUDIO, \"nameLike\": WebcastingVersionInfoUIConfName });\n                        if (kserviceInfo.playerUIConf) {\n                            kalturaAPI.UIConfService.get(kserviceInfo.playerUIConf);\n                        }\n\n                        kalturaAPI.execMultirequest().then(function(results){\n                            if (_.isObject(results)) {\n                                delete results[2].confFile;\n                                delete results[2].config;\n                            }\n                            klog.info(\"results from upgrade service multi request: \" + JSON.stringify(results));\n                            var partnerVersionInfo = parsePartnerUIConf(results[0]);\n                            var serverVersionInfo = parseGlobalUIConf(results[1], osMake);\n                            validateAppVersion(partnerVersionInfo, serverVersionInfo);\n                            verifyMinimalPlayerVersion(results[2]);\n\n                        }, function(errors){\n                            klog.error(\"got errors while running the upgrade service multi request \" + JSON.stringify(errors));\n                        });\n                    });\n                });\n            }\n        }\n\n        function validateAppVersion(partnerVersionInfo, serverVersionInfo)\n        {\n            systemLatestVersion = serverVersionInfo.recommendedVersion;\n            kUpgradeServiceInfo.systemLatestVersion = serverVersionInfo.recommendedVersion;\n            if (serverVersionInfo.playerMinimalVersion) {\n                kUpgradeServiceInfo.playerMinimalVersion = serverVersionInfo.playerMinimalVersion;\n            }\n            upgradeInfo = getUpgradeInfo(partnerVersionInfo, serverVersionInfo, kUpgradeServiceInfo.app_version);\n            if (upgradeInfo.upgradeAvailable){\n                showUpgradeDialog(upgradeInfo);\n            }\n        }\n\n        function parsePartnerUIConf(result) {\n            var config = JSON.parse(result.config);\n            return {\n                url: result.swfUrl,\n                minimalVersion: config.minimalVersion,\n                ignoreOptionalUpdates : config.ignoreOptionalUpdates\n            };\n        }\n\n        function parseGlobalUIConf(listResults, osMake) {\n            if (listResults.objects.length === 0){\n                klog.error(\"failed getting uiconf with name [\" + WebcastingVersionInfoUIConfName + \"]\");\n            }\n            else{\n                if (listResults.objects.length > 1) {\n                    klog.warn(\"there are [\" + listResults.objects.length + \"] object of type \" + WebcastingVersionInfoUIConfName + \" using the first\");\n                }\n                return JSON.parse(listResults.objects[0].config)[osMake];\n            }\n        }\n\n        // get the decision regarding upgrade\n        // returns: {\n        //  upgradeAvailable: true / false\n        //  isMandatory: true / false\n        //  versionName: 1.2.3.4\n        //  url: http://www.kaltura.com/install.exe\n        // }\n        function getUpgradeInfo(partnerVersionInfo, serverVersionInfo, currentAppVersion) {\n\n            function getVersionName() {\n                if (useRecommendedVersion){\n                    return serverVersionInfo.recommendedVersion;\n                }\n                if (useSystemMinimalVersion){\n                    return serverVersionInfo.minimalVersion;\n                }\n                return partnerVersionInfo.minimalVersion;\n            }\n\n            function getVersionUrl() {\n                if (useRecommendedVersion){\n                    return serverVersionInfo.recommendedVersionUrl;\n                }\n                if (useSystemMinimalVersion){\n                    return serverVersionInfo.minimalVersionUrl;\n                }\n                return partnerVersionInfo.url;\n            }\n\n            var upgradeAvailable = false;\n            var isMandatory = false;\n            var useSystemMinimalVersion = false;\n            var minimalVersion = partnerVersionInfo.minimalVersion;\n            var useRecommendedVersion = false;\n\n            // system min <= producer min\n            if (cmpVersion(serverVersionInfo.minimalVersion, partnerVersionInfo.minimalVersion) >= 0) {\n                useSystemMinimalVersion = true;\n                minimalVersion = serverVersionInfo.minimalVersion;\n            }\n\n            // app version < minVersion\n            if (cmpVersion(currentAppVersion, minimalVersion) < 0) {\n                upgradeAvailable = true;\n                isMandatory = true;\n            }\n\n            // if we allow optional updates and recommendedVersion > currentAppVersion and recommendedVersion > minimalVersion\n            if (!partnerVersionInfo.ignoreOptionalUpdates &&\n                cmpVersion(currentAppVersion, serverVersionInfo.recommendedVersion) < 0 &&\n                cmpVersion(minimalVersion, serverVersionInfo.recommendedVersion) < 0 ) {\n                upgradeAvailable = true;\n                useRecommendedVersion = true;\n            }\n\n            return {\n                upgradeAvailable : upgradeAvailable,\n                isMandatory: isMandatory,\n                versionName: getVersionName(),\n                url: getVersionUrl()\n            };\n        }\n\n        function showUpgradeDialog(upgradeInfo) {\n            kdialog.templatedDialog({\n\n                templateUrl: '../common/upgrade/upgrade.html',\n                controller: 'upgradeController',\n                keyboard: false,\n                backdrop: 'static'\n            }).then(\n                function () {\n                },\n                function () {\n                    if (upgradeInfo.isMandatory) {\n                        window.close();\n                    }\n                }\n            );\n        }\n\n        function verifyMinimalPlayerVersion(UIConf) {\n            if (UIConf) {\n                var ver = UIConf.html5Url.match(/\\/html5\\/html5lib\\/v([^\\/]*)\\/mwEmbedLoader.php/);\n                if (_.isArray(ver) && ver.length === 2) {\n                    var playerVersion = ver[1];\n                    if (cmpVersion(playerVersion, kUpgradeServiceInfo.playerMinimalVersion) < 0) {\n                        klog.warn(playerVersion);\n                        kdialog.attention(gettextCatalog.getString(\"Player outdated!\"),gettextCatalog.getString(\"Player is outdated - at least v\"+kUpgradeServiceInfo.playerMinimalVersion+\" is required,<br>Please upgrade your player<br>(player id: \" + kserviceInfo.playerUIConf + \", version: \" + playerVersion + \")\"),\"OK\");\n                    }\n                }\n            }\n        }\n\n        function cmpVersion(v1, v2) {\n            if(v1===v2) {\n                return 0;\n            }\n            var a1 = v1.split(\".\");\n            var a2 = v2.split(\".\");\n            for( var i = 0; i < a1.length && i < a2.length; i++ ) {\n                var intdiff = parseInt(a1[i],10) - parseInt(a2[i],10);\n                if( intdiff>0 ) {\n                    return 1;\n                }\n                else if( intdiff<0 ) {\n                    return -1;\n                }\n            }\n            var lengthdiff = a1.length - a2.length;\n            return (lengthdiff>0) ? 1 : (lengthdiff<0) ? -1 : 0;\n        }\n\n        function downloadURI(uri, name) {\n            var link = document.createElement(\"a\");\n            link.download = name;\n            link.href = uri;\n            link.click();\n        }\n\n        function upgradeCommand() {\n\t        var fileURL=upgradeInfo.url;\n\n            if (navigator.platform.startsWith(\"Mac\")) {\n                fileURL=fileURL.replace('.exe', '.dmg');\n            }\n\n            klog.warn(\"Upgrading to version \" + fileURL);\n\n            if (!upgradeInfo.url.startsWith(\"http\")){\n                //klog.error(\"url for downloading the new version seams to be invalid {0}\", latestVersionInfo.url);\n                if(!upgradeInfo.url.startsWith(\"/\")){\n                    klog.error(\"url for downloading the new version seams to be invalid {0}\", upgradeInfo.url);\n                    return;\n                }\n                else {\n                    upgradeInfo.url = kserviceInfo.serverAddress + upgradeInfo.url;\n                }\n            }\n\n            klog.warn(\"Downloading \"+fileURL);\n\n\n            var filename = fileURL.replace(/^.*[\\\\\\/]/, '');\n            var localFile = upgradeInfo.versionName +\"_\"+filename;\n\n            isUpgrading=true;\n\n            klog.warn(\"Saving to \"+localFile);\n\n            downloadURI(fileURL,localFile);\n        }\n\n        function isCurrentSystemLatest() {\n            return (cmpVersion(kUpgradeServiceInfo.app_version, systemLatestVersion) >= 0);\n        }\n\n        function getVersionStringForInfoDialog() {\n            var ret = gettextCatalog.getString(\"Version: \" ) + kUpgradeServiceInfo.app_version + \" \";\n            if (isCurrentSystemLatest()){\n                ret += gettextCatalog.getString(\"(up-to-date)\");\n            }\n            else{\n                ret += gettextCatalog.getString(\"(update available)\");\n            }\n            return ret;\n        }\n\n    return {\n            getUpgradeInfo : getUpgradeInfo, // public for unit testing\n            checkForUpdates : checkForUpdates,\n            upgradeCommand : upgradeCommand,\n            appName : kUpgradeServiceInfo.appName,\n            getVersionStringForInfoDialog : getVersionStringForInfoDialog,\n            isUpgrading : function() { return isUpgrading; },\n            upgradeInfo : function() { return upgradeInfo; },\n            currentVersion : function() { return kUpgradeServiceInfo.app_version; },\n            declineUpgrade : function() { declinedAvailableUpdate = true; }\n        };\n    });\n})();\n","angular.module('myApp', ['cfp.hotkeys'])\n    .config(function(hotkeysProvider) {\n        hotkeysProvider.includeCheatSheet = true;\n    });\n\nangular.module('kAPI').constant(\"kserviceinfo\", kserviceInfo);\nangular.module('kUpgradeModule').constant(\"kUpgradeServiceInfo\", kUpgradeServiceInfo);\n\nvar kwpApp = angular.module('kwpApp', ['gettext', 'ngAnimate', 'ui.bootstrap', 'cfp.hotkeys', 'kngLayout', 'kAPI',\n                                        'kUpgradeModule', 'kQna','kUI','kCef','webcastInfoModule','monitoringModule', 'k-deck-slides',\n                                        'kaPlayerViewControl', 'kEntryManagementModule','kProducerActions', 'kPolls', 'linky',\n                                        'k-assets-timeline', 'k-main-asset','kRTC']);\nkwpApp.constant(\"kUpgradeServiceInfo\",kUpgradeServiceInfo);\n\n\n// Set the language to use the translations in.\n// Without this code, or with 'en' we default to English.\n// the strings that can be passed passed to setCurrentLanguage are all the valid LCIDs\n// The ones we support are in po/translations.js\nangular.module('kwpApp').run(function (gettextCatalog) {\n    gettextCatalog.setCurrentLanguage('en');\n});\n\nkwpApp.config(function(){\n    Number.prototype.pad = function (size) {\n        var s = String(this);\n        if (typeof (size) !== \"number\") { size = 2; }\n\n        while (s.length < size) { s = \"0\" + s; }\n        return s;\n    }\n});\n\nkwpApp.config(['$compileProvider', function($compileProvider) {\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|file|client):/);\n    $compileProvider.imgSrcSanitizationWhitelist(/^\\s*(https?|file|client|data):/);\n}]);\n\nkwpApp.config(function($sceDelegateProvider, $logProvider){\n    $logProvider.debugEnabled(true);\n    $sceDelegateProvider.resourceUrlWhitelist([\n        'self',\n        \"http://cdnapi.kaltura.com/**\"\n    ]);\n});\n\nkwpApp.config(function($tooltipProvider) {\n\n    //This is currently a temporary fix for the tooltip.\n    $tooltipProvider.options({ animation : false, appendToBody: true,popupDelay:1000 });\n\n});\n\n\n\n/* We add the HTTP interceptor to our application. */\nkwpApp.config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('onlineStatusService');\n}]);\n\nkwpApp.run(function (upgradeService, captureService, kdialog, $rootScope) {\n    $rootScope.safeApply = function safeApply(operation, $scope) {\n\n        var phase = this.$root.$$phase;\n        if (phase !== '$apply' && phase !== '$digest') {\n            this.$apply(operation);\n            return;\n        }\n\n        if (operation && typeof operation === 'function')\n            operation();\n    };\n\n    upgradeService.checkForUpdates();\n});\n\n// prevent horizontal scroll, which causes undesired UI states\n$(function() {\n    var $body = $(document);\n    $body.bind('scroll', function() {\n        // \"Disable\" the horizontal scroll.\n        if ($body.scrollLeft() !== 0) {\n            $body.scrollLeft(0);\n        }\n    });\n});\n\nvar oldMouseStart = $.ui.draggable.prototype._mouseStart;\n$.ui.draggable.prototype._mouseStart = function (event, overrideHandle, noActivation) {\n    this._trigger(\"beforeStart\", event, this._uiHash());\n    oldMouseStart.apply(this, [event, overrideHandle, noActivation]);\n};\n","/**\n * Created by david.oz on 9/21/2014.\n */\nkwpApp.factory('shortcutService', ['$injector','$rootScope','gettextCatalog','hotkeys', function ($injector,$rootScope,gettextCatalog,hotkeys) {\n\n    var tooltipCreator = function(text,command){\n\n        var key=hotkeys.get(command);\n\n        return text + (key ? ' ('+key.format()+')' : '');\n    };\n\n    var keyInfo = function(keyDescription,tooltipText,keyMap) {\n\n        if (navigator.platform.startsWith(\"Mac\")) {\n            keyMap=keyMap.replace(\"ctrl\", \"command\");\n\n        }\n\n\n        return {\n            keyMap : keyMap,\n            tooltipText : tooltipText,\n            description : keyDescription\n        };\n\n    }\n\n    var keyInfoDictionary = {\n        \"WEBCAST_KEYPRESS_SESSION_START\":      keyInfo(gettextCatalog.getString(\"Start presentation\"),gettextCatalog.getString(\"Start presentation\"),\"ctrl+s\"),\n        \"WEBCAST_KEYPRESS_SESSION_STOP\":       keyInfo(gettextCatalog.getString(\"Pause presentation\"),gettextCatalog.getString(\"Pause presentation\"),\"ctrl+p\"),\n        \"WEBCAST_KEYPRESS_SLIDE_FORWARD_SPACE\":     keyInfo(gettextCatalog.getString(\"Move to next presentation slide\"),gettextCatalog.getString(\"Next slide\"),\"space\"),\n        \"WEBCAST_KEYPRESS_SLIDE_FORWARD_ENTER\":     keyInfo(gettextCatalog.getString(\"Move to next presentation slide\"),gettextCatalog.getString(\"Next slide\"),\"enter\"),\n        \"WEBCAST_KEYPRESS_SLIDE_FORWARD_RIGHT\":     keyInfo(gettextCatalog.getString(\"Move to next presentation slide\"),gettextCatalog.getString(\"Next slide\"),\"right\"),\n        \"WEBCAST_KEYPRESS_SLIDE_FORWARD_DOWN\":      keyInfo(gettextCatalog.getString(\"Move to next presentation slide\"),gettextCatalog.getString(\"Next slide\"),\"down\"),\n        \"WEBCAST_KEYPRESS_SLIDE_FORWARD_PAGE_DOWN\": keyInfo(gettextCatalog.getString(\"Move to next presentation slide\"),gettextCatalog.getString(\"Next slide\"),\"pagedown\"),\n        \"WEBCAST_KEYPRESS_SLIDE_BACKWARDS_SPACE\":   keyInfo(gettextCatalog.getString(\"Move to previews presentation slide\"),gettextCatalog.getString(\"Previous slide\"),\"backspace\"),\n        \"WEBCAST_KEYPRESS_SLIDE_BACKWARDS_LEFT\":    keyInfo(gettextCatalog.getString(\"Move to previews presentation slide\"),gettextCatalog.getString(\"Previous slide\"),\"left\"),\n        \"WEBCAST_KEYPRESS_SLIDE_BACKWARDS_UP\":      keyInfo(gettextCatalog.getString(\"Move to previews presentation slide\"),gettextCatalog.getString(\"Previous slide\"),\"up\"),\n        \"WEBCAST_KEYPRESS_SLIDE_BACKWARDS_PAGE_UP\": keyInfo(gettextCatalog.getString(\"Move to previews presentation slide\"),gettextCatalog.getString(\"Previous slide\"),\"pageup\"),\n        \"WEBCAST_KEYPRESS_TIMELINE_FORWARD\":   keyInfo(gettextCatalog.getString(\"Preview one slide right on the timeline\"),gettextCatalog.getString(\"Scroll right\"),\"alt+right\"),\n        \"WEBCAST_KEYPRESS_TIMELINE_BACKWARDS\": keyInfo(gettextCatalog.getString(\"Preview one slide left on the timeline\"),gettextCatalog.getString(\"Scroll left\"),\"alt+left\"),\n        \"WEBCAST_KEYPRESS_TOGGLE_AUDIENCE\":    keyInfo(gettextCatalog.getString(\"Open/Close Live analytics tab (toggle)\"),gettextCatalog.getString(\"Toggle live analytics\"),\"alt+a\"),\n        \"WEBCAST_KEYPRESS_TOGGLE_RTC\":    keyInfo(gettextCatalog.getString(\"Open/Close Self Serve tab (toggle)\"),gettextCatalog.getString(\"Toggle self serve\"),\"alt+r\"),\n        \"WEBCAST_KEYPRESS_TOGGLE_MUTE\":    keyInfo(gettextCatalog.getString(\"Mute/Unmute Microphone\"),gettextCatalog.getString(\"Toggle mute microphone\"),\"alt+m\"),\n        \"WEBCAST_KEYPRESS_TOGGLE_Q&A\":    keyInfo(gettextCatalog.getString(\"Open/Close Q&A tab (toggle)\"),gettextCatalog.getString(\"Toggle Q&A\"),\"alt+q\"),\n        \"WEBCAST_KEYPRESS_TOGGLE_NOTES\":       keyInfo(gettextCatalog.getString(\"Open/Close Notes tab (toggle)\"),gettextCatalog.getString(\"Toggle notes\"),\"alt+n\"),\n        \"WEBCAST_KEYPRESS_TOGGLE_TIMELINE_CONTENT_SETTINGS\":       keyInfo(gettextCatalog.getString(\"Open/Close timeline content settings tab (toggle)\"),gettextCatalog.getString(\"Toggle timeline content settings\"),\"alt+l\"),\n        \"WEBCAST_KEYPRESS_TIMELINE_GO_TO_CURRENT\" : keyInfo(gettextCatalog.getString(\"Take the timeline to the next slide\"),gettextCatalog.getString(\"Sync timeline and presentation\"),\"ctrl+g\"),\n        \"WEBCAST_KEYPRESS_TIMELINE_SET_FOCUSED_AS_CURRENT\" : keyInfo(gettextCatalog.getString(\"Change displayed slide - to the one being previewed on the timeline\"),gettextCatalog.getString(\"Present selected slide on timeline\"),\"alt+up\")\n    };\n\n    var _keyCodes = (function(){\n        var keys = Object.keys(keyInfoDictionary);\n\n        var keycodesDictionary = {};\n        var i =0;\n\n        for(i=0;i<keys.length;i++){\n            keycodesDictionary[keys[i]]= keys[i];\n        }\n        return keycodesDictionary;\n\n    })();\n\n    function _getKeyTooltip(KeyCode,withoutprefix){\n\n        var keyInfo=keyInfoDictionary[KeyCode];\n\n        var tooltipText=keyInfo.tooltipText;\n\n        var tooltipTextFinal = tooltipCreator(withoutprefix ? \"\" : tooltipText ,keyInfo.keyMap);\n\n        return tooltipTextFinal;\n\n    }\n\n    function _bindKey(keyCode,scope,func){\n        // QNA-moderator mode - disable all shortcuts so that the moderator will not interfere with main-presenter flows\n        if(scope.qnaModeratorMode){\n            return;\n        }\n        hotkeys.bindTo(scope)\n            .add({\n                combo: keyInfoDictionary[keyCode].keyMap,\n                description: keyInfoDictionary[keyCode].description,\n                callback: func\n            });\n    }\n\n    function _unbindKey(keyCode){\n        hotkeys.del(keyInfoDictionary[keyCode].keyMap);\n    }\n\n    function bindCommand($scope,command,shortcut) {\n        _bindKey(shortcut,$scope,command.do);\n        command.tooltip=_getKeyTooltip(shortcut);\n    }\n\n\n    return {\n        getKeyToolTip : _getKeyTooltip,\n        bindKey :     _bindKey,\n        unbindKey :    _unbindKey,\n        bindCommand: bindCommand,\n        keyCodes : _keyCodes\n    };\n}]);\n\n","kUI.filter('kdate', function() {\n    return function(kdate) {\n        return new Date(kdate);\n    };\n});\n\nkUI.filter('kdateMs', function() {\n    return function(kdate) {\n        return new Date(kdate);\n    };\n});\n\nkUI.filter('msToDate', function() {\n    return function(relTimeInMs,fullDate,withMs,withOriginalValue) {\n\n        var negetive = false;\n\n        if(relTimeInMs < 0){\n            relTimeInMs = -relTimeInMs;\n            negetive = true;\n        }\n\n        var value=relTimeInMs;\n\n        var hours = Math.floor(relTimeInMs / (1000 * 60 * 60));\n        relTimeInMs -= hours * (1000 * 60 * 60);\n\n        var mins = Math.floor(relTimeInMs / (1000 * 60));\n        relTimeInMs -= mins * (1000 * 60);\n\n        var seconds = Math.floor(relTimeInMs / (1000));\n        relTimeInMs -= seconds * (1000);\n\n        if (fullDate==undefined ||\n            fullDate==false) {\n            fullDate = (hours != 0);\n        }\n\n        var retVal;\n        if (fullDate)\n            retVal=hours.pad(2) + \":\" + mins.pad(2) + \":\" + seconds.pad(2);\n        else\n            retVal=mins.pad(2) + \":\" + seconds.pad(2);\n\n        if (withMs!=undefined &&\n            withMs){\n            retVal+=\".\"+relTimeInMs.pad(3);\n        }\n        if (withOriginalValue!=undefined &&\n            withOriginalValue){\n            retVal+=\" (\"+value+\")\";\n        }\n        if(negetive){\n            return \"-\"+retVal;\n        }\n        return retVal;\n    };\n});\n","/**\n * Created by david.oz on 9/21/2014.\n */\nkwpApp.factory('onlineStatusService', ['$q', '$injector','$rootScope','kCef', function ($q, $injector,$rootScope, kCef) {\n    /* The service has 3 Possible states.The service itself runs in the background and offers 3 isState_X functions to know the state.:\n    RUNNING: (Initial state) status running: Module is running without disturbing any requests and maybe just filtering,classifying or stamping requests.\n    RECOVERING: Module is trying to recover connection.\n    CONNECTION_TERMINATED_FATAL: The connection is dead and cannot be recovered.Application Should terminate.\n     */\n\n    /*This represents the recovery process object.Only the recovery process can/should change the state of the service */\n    var RecoveryProcess = (function () {\n\n        /* HACK HACKJ REMOVE */\n        var oldtheAppFilter;\n\n\n\n        var states = {ONLINE:0 , RECOVERING:1 , CONNECTION_TERMINATED_FATAL:2};\n\n        var currentState = {state : states.ONLINE};\n\n        var MAX_RECOVERY_ATTEMPTS = configuration.onlineRecoveryAttempts;\n\n        var RECOVERY_WAIT_TIME_MILLISECONDS = configuration.onlineRecoveryIntervalInMS;\n\n        var recoverThreadHandler = null;\n\n        var currentRecoverAttempt = 1;\n\n        var httpBuffer = (function () {\n\n            var bufferFailed = [];\n\n            var bufferBlocked = [];\n\n            /** Service initialized later because of circular dependency problem. */\n            /** Important: Do NOT try to initialize that as argument to service.  */\n            var $http;\n\n            /** This function Just returns the config of the request so the request can proceed as usual.*/\n            function startHttpRequest(config, deffered) {\n\n                deffered.resolve(config);\n\n            }\n\n            function retryHttpRequest(config, deferred) {\n                function successCallback(response) {\n                    deferred.resolve(response);\n                }\n                function errorCallback(response) {\n                    deferred.reject(response);\n                }\n                $http = $http || $injector.get('$http');\n                $http(config).then(successCallback, errorCallback);\n            }\n\n            return {\n                /**\n                 * Appends HTTP request configuration object with deferred response attached to buffer.\n                 */\n                appendFailed: function(config, deferred) {\n                    bufferFailed.push({\n                        config: config,\n                        deferred: deferred\n                    });\n                },\n                appendBlocked: function(config, deferred) {\n                    bufferBlocked.push({\n                        config: config,\n                        deferred: deferred\n                    });\n                },\n                /**\n                 * Abandon or reject (if reason provided) all the buffered requests.\n                 */\n                rejectAll: function (reason) {\n                    if (reason) {\n                        for ( var i = 0; i < bufferFailed.length; i++) {\n\n                            bufferFailed[i].deferred.reject(reason);\n\n                        }\n                        for ( i = 0; i < bufferBlocked.length; i++){\n\n                            bufferBlocked[i].deferred.reject(bufferBlocked[i].config);\n\n                        }\n                    }\n                    bufferFailed = [];\n                    bufferBlocked = [];\n                },\n                /**\n                 * Retries all the buffered requests clears the buffer.\n                 */\n                retryAll: function(updater) {\n\n                    updater = typeof updater !== 'undefined' ? updater : function(arg){return arg;};\n\n                    for(var i = 0; i < bufferFailed.length; i++){\n\n                        retryHttpRequest(updater(bufferFailed[i].config), bufferFailed[i].deferred);\n                    }\n\n                    for (i = 0; i < bufferBlocked.length; i++) {\n                        startHttpRequest(updater(bufferBlocked[i].config), bufferBlocked[i].deferred);\n                    }\n\n                    //clear buffers.\n                    bufferFailed = [];\n                    bufferBlocked = [];\n                }\n            }})();\n\n\n        //This runs every RECOVERY_WAIT_TIME_MILLISECONDS milliseconds to try and recover the network.\n        function _recoveryProcess(){\n\n            currentRecoverAttempt += 1;\n            if(currentRecoverAttempt > MAX_RECOVERY_ATTEMPTS){\n                //We could not recover from the disconnection.\n                klog.error(\"Recovery stops.the network connection/connection to our server died.we will notify the user and close.\");\n                _endRecoveryProcessFATAL();\n                return;\n            }\n            klog.warn(\"Recovering network.Attempt \"+currentRecoverAttempt+\" out of \"+MAX_RECOVERY_ATTEMPTS);\n            $rootScope.$broadcast(\"NetworkEvent\",{\"event\":\"recovering\",\"action\":\"recovering\",\"attempts\":MAX_RECOVERY_ATTEMPTS,\"interval\":RECOVERY_WAIT_TIME_MILLISECONDS,\"current_attempt\":currentRecoverAttempt});\n            //We need to try to send all the requests which are in the queue.Since we are in RECOVERY state we know we have at least one request in the queue.\n            httpBuffer.retryAll();\n            //Buffers should be empty at this point in time.We should wait for a signal to know that requests passed so we can change our state to running.\n        }\n\n\n\n        function _endRecoveryProcess(){\n\n            klog.info(\"Ending recovery process\");\n            currentRecoverAttempt = 1;\n            clearInterval(recoverThreadHandler);\n\n        }\n\n        /* We call this when the network connection was not resolved and the application could not recover.Calling this makes all pending requests to return as failed. */\n        function _endRecoveryProcessFATAL(){\n\n            _endRecoveryProcess();\n            klog.error(\"Ending recovery process FATAL.Rejecting all requests.\");\n\n\n            currentState.state = states.CONNECTION_TERMINATED_FATAL;\n\n            showDialog();\n\n            httpBuffer.rejectAll(new Error(\"FATAL ONLINE STATUS\"));\n\n        }\n\n        var kdialogService;\n        var dialog=null;\n\n        function showDialog() {\n            kdialogService = kdialogService || $injector.get('kdialog');\n\n            if (dialog) {\n                return;\n            }\n            if (kCef.available) {\n                kCef.sendIPC(\"loaded\");\n            }\n            dialog=kdialogService.templatedDialog({\n                templateUrl: './partials/onlineStatus.html',\n                controller: 'onlineController',\n                keyboard: false,\n                backdrop: 'static',\n                resolve: {\n                    config:  function () {\n                        return null;\n                    }\n                }});\n        }\n\n        function hideDialog() {\n            if (dialog) {\n                kdialogService = kdialogService || $injector.get('kdialog');\n                kdialogService.dismiss(dialog);\n                dialog = null;\n            }\n        }\n\n        function _startRecoveryProcess() {\n\n            recoverThreadHandler = setInterval(_recoveryProcess, RECOVERY_WAIT_TIME_MILLISECONDS);\n\n            $rootScope.$broadcast(\"NetworkEvent\",{\"event\":\"disconnect\",\"action\":\"recovering\",\"attempts\":MAX_RECOVERY_ATTEMPTS,\"interval\":RECOVERY_WAIT_TIME_MILLISECONDS});\n\n        }\n\n        function _notifyRequestSuccess(){\n\n            if(currentState.state === states.ONLINE){\n\n                return;\n            }\n\n            if(currentState.state === states.RECOVERING){\n\n                klog.info(\"Seems like network is back,Ending recovery process\");\n\n\n                currentState.state  = states.ONLINE;\n\n                hideDialog();\n\n                $rootScope.$broadcast(\"NetworkEvent\",{\"event\":\"reconnect\",\"action\":\"none\",\"attempts\":MAX_RECOVERY_ATTEMPTS,\"interval\":RECOVERY_WAIT_TIME_MILLISECONDS});\n\n                _endRecoveryProcess();\n\n                //We now need to flush any requests that were added to the queue while we were recovering.If any would fail we will move again to Recovering state.\n                httpBuffer.retryAll();\n            }\n        }\n\n        /* Add a request that was blocked due to some reason and should be retried when Recovery decides that the network is in a valid state.The Recovery process should resolve the request with the\n        config parameter and NOT to try the http request by himself.\n        param[in] config - The request object.\n        param[in] deffered - The promise object that was returned due to blocking and should be resolved when possible.\n         */\n        function _addBlockedRequest(config,deffered){\n\n            if(currentState.state  === states.ONLINE){\n                klog.error(\"Error blocking requests while module is running correctly.\");\n                alert(\"Internal Error.Not allowed to block requests while running correctly.\");\n                return;\n            }\n            httpBuffer.appendBlocked(config,deffered);\n        }\n\n        /*\n        Notify the recover process that a request failed.The recover process should change its state respectively or just add the failure to current requests which are recovering.\n        param[in] config - The failed request.\n        param[in] deffered - The promise object that was returned to the caller which made the request.This promise should be resolved AFTER retrying the request using http.\n         */\n        function _notifyRequestFail(config,deffered){\n\n            httpBuffer.appendFailed(config,deffered);\n\n            if(currentState.state  === states.ONLINE){\n\n                klog.warn(\"problem with the network.Seems like there is a problem with the network, we will try to recover. config=\"+JSON.stringify(config));\n\n\n                currentState.state  = states.RECOVERING;\n\n                showDialog();\n\n                _startRecoveryProcess();\n\n            }\n\n        }\n\n        function _isStateRunning(){\n            return (currentState.state  === states.ONLINE);\n\n        }\n\n        function _isStateRecovering(){\n            return (currentState.state  === states.RECOVERING);\n        }\n\n        function _getRecoverMessage(){\n            if(currentState.state  === states.RECOVERING){\n                return \"Connection to server lost. Attempting to reconnect.\\n\" +\n                    \"Attempt \"+currentRecoverAttempt+\" of \"+MAX_RECOVERY_ATTEMPTS+\"\\n.Please wait.\";\n            }\n            if(currentState.state  === states.CONNECTION_TERMINATED_FATAL){\n                return \"Connection to server lost. Unable to reconnect.\\nPlease check your internet connectivity, try restarting the application and if the problem persists contact support\";\n            }\n            return \"\";\n        }\n\n        function _isStateFatal() {\n            return (currentState.state === states.CONNECTION_TERMINATED_FATAL);\n\n\n            //return currentState.state  === states.CONNECTION_TERMINATED_FATAL;\n\n        }\n        function _getData(){\n\n            return currentState ;\n\n        }\n\n        function _getCurrentAttempt(){\n            return currentRecoverAttempt;\n        }\n        function _getRecoveryInterval(){\n            return RECOVERY_WAIT_TIME_MILLISECONDS;\n        }\n\n        function _getMaxAttempts(){\n            return MAX_RECOVERY_ATTEMPTS;\n        }\n\n        return {\n            /* Notify the module that a request completed successfully (some request).*/\n            notifyRequestSuccess : _notifyRequestSuccess,\n\n            /* Notify that a specific request failed.the module will try to recover it.*/\n            notifyRequestFail : _notifyRequestFail,\n\n            /* Add an http request which was blocked due to recover state */\n            addBlockedRequest : _addBlockedRequest,\n\n            isStateRunning : _isStateRunning,\n\n            isStateRecovering : _isStateRecovering,\n\n            isStateFatal : _isStateFatal,\n\n            getRecoverMessage : _getRecoverMessage,\n\n            getCurrentAttempt : _getCurrentAttempt,\n\n            getRecoveryInterval : _getRecoveryInterval,\n\n            getData : _getData,\n\n            getMaxAttempts : _getMaxAttempts\n\n        };\n\n    })();\n\n    var $templateCache = $templateCache || $injector.get('$templateCache');\n\n    var shouldIgnore=function (config) {\n        \n        if (config.url.indexOf(\"api_v3/index.php\")===-1) {\n            return true;\n        }\n\n        return false;\n    };\n\n    return {\n        /* The service is currently in recovering state.This function might be binded to a controller scope which will display the status.*/\n        onlineAPI : function(){\n\n          return {\n\n              isOnline : RecoveryProcess.isStateRunning,\n              isRecovering : RecoveryProcess.isStateRecovering,\n              isFatal : RecoveryProcess.isStateFatal,\n              getRecoveryAttempt : RecoveryProcess.getCurrentAttempt,\n              getRecoveryInterval : RecoveryProcess.getRecoveryInterval,\n              getMaxAttempts : RecoveryProcess.getMaxAttempts\n\n          };\n\n        },\n        request: function(config) {\n\n            if (shouldIgnore(config)) {\n                return config;\n            }\n            //In case we are in Fatal state, we just reject the request.\n            if(RecoveryProcess.isStateFatal()){\n                klog.error(\"FATAL:New requests are not allowed using http services,app should die.REJECTING\");\n                return $q.reject(new Error(\"FATAL ONLINE STATUS\"));\n            }\n\n            //We time stamp our requests when they leave for future private use.\n            if(config.requestTimestamp === undefined){\n\n                config.requestTimestamp = new Date().getTime();\n\n            }\n\n            //We are fine,HTTP connections are OK ant no failed requests in queue.we just return the original request object.\n            if(RecoveryProcess.isStateRunning()){\n\n                return config;\n            }\n\n            //We are currently in recovery state.we had a failure so we push this request to the block buffer http queue.In case the\n            //request is a already blocked request we let it pass to execution.\n            if(RecoveryProcess.isStateRecovering()){\n\n                //A previously blocked request, so we just return it so it could be executed.\n                if(config.blocked === true){\n\n                    return config;\n\n                }\n                config.blocked = true;\n\n                var deffered = $q.defer();\n\n                //We are currently recovering.this will be processed once we are fine.\n                RecoveryProcess.addBlockedRequest(config,deffered);\n\n                return deffered.promise;\n            }\n\n            klog.error(\"Error undefined state for http interceptor.\");\n\n            alert(\"Internal Error state undefined.\");\n\n            return null;\n\n        },\n\n        response: function(response) {\n\n            if (shouldIgnore(response.config)) {\n                return response;\n            }\n\n            response.config.responseTimestamp = new Date().getTime();\n\n            RecoveryProcess.notifyRequestSuccess();\n\n            return response;\n        },\n\n        responseError: function(response) {\n\n            if (shouldIgnore(response.config)) {\n                return response;\n            }\n\n            var deffered = $q.defer();\n\n            if(configuration.stopOnNetworkErrors)\n\n                RecoveryProcess.notifyRequestFail(response.config, deffered);\n\n            klog.error(\"Some error occurred on network.we are rejecting an HTTP request.error code is:\"+response.status+\".This error code is being treated asdisconnectionn until specifically defined.\");\n\n            return deffered.promise;\n\n            //alert(\"Error in JavaScript http request.\"+response.status);\n            //switch(response.status) {\n            //    //This what we will get on network disconnect\n            //    case NETWORK_STATUS.NOT_FOUND:\n            //        //We return a promise object here.Recovery Process should resolve it.\n            //        var deffered = $q.defer();\n            //\n            //        RecoveryProcess.notifyRequestFail(response.config,deffered);\n            //\n            //        return deffered.promise;\n            //\n            //    case NETWORK_STATUS.INTERNAL_SERVER_ERROR:\n            //        return $q.reject(response);\n            //        //TODO:Implement the rest of the cases.maybe we should retry all requests for some amount of time.\n            //        break;\n            //\n            //    default:\n            //        break;\n            //\n            //}\n            ////klog.error(\"Some error occurred on network.we are rejecting an HTTP request.error code is:\"+response.status+\".This error code is not being handled yet.\");\n            //return $q.reject(response);\n        }\n    };\n\n}]);\n\n","/* globals _ */\n\n'use strict'\nkwpApp.factory('localHardwareService', ['$rootScope', 'slidesService', 'kalturaService','asyncLiveEntryInfoService','$injector','kdialog','kAssetsTimelineService','kCef', function($rootScope, slidesService, kalturaService, asyncLiveEntryInfoService, $injector, kdialog, kAssetsTimelineService, kCef){\n\n    var _displays = [];\n    var _currentFullScreenDisplay;\n    var _fullScreenWindow;\n\n    var getCurrentFullScreenDisplay = function(){\n        return _currentFullScreenDisplay;\n    };\n\n    var getDisplays = function(){\n        return _displays;\n    };\n\n    var getFullScreenWindow = function(){\n        return _fullScreenWindow;\n    };\n\n    var closeFullScreenWindow = function(){\n\n        _fullScreenWindow = undefined;\n        setCurrentFullScreenDisplay(-1);\n\n        kCef.sendIPC(\"closeFullScreenWindow\");\n    };\n\n    var openFullScreenWindow = function(assetWindowUrl)\n    {\n        if(!_fullScreenWindow){\n\n            kCef.sendIPC(\"openExternalWindow\",{display: _currentFullScreenDisplay, url: assetWindowUrl}).then( function(win) {\n                _fullScreenWindow=win;\n            });\n\n        }\n        else{\n            closeFullScreenWindow();\n        }\n    };\n\n    if (kCef.available) {\n        kCef.on('displayDevices', function (result) {\n            _displays = result;\n\n\t        var tmpCurrentDisplay = undefined;\n\t        var currentDisplayExists = false;\n\n            klog.info(\"dispalyDevices: \" + JSON.stringify(_displays));\n\n            if (_currentFullScreenDisplay) {\n                _displays.forEach(function (d) {\n                    if (d.id === _currentFullScreenDisplay.id) {\n                        currentDisplayExists = true;\n                        tmpCurrentDisplay = d;\n                    }\n                });\n                if (!currentDisplayExists || (tmpCurrentDisplay && tmpCurrentDisplay.isAppWindow)) {\n                    closeFullScreenWindow();\n                    setCurrentFullScreenDisplay(-1);\n                }\n            }\n\n        });\n    }\n\n    var refreshDisplayDevices = function() {\n        if (kCef.available) {\n            kCef.sendIPC('listDisplayDevices');\n        }\n    };\n\n\n\n    var setCurrentFullScreenDisplay = function(index){\n        if (index >= 0){\n            _currentFullScreenDisplay = _displays[index];\n        }\n        else{\n            _currentFullScreenDisplay = undefined;\n        }\n    };\n\n    var GetSelectedDisplayID = function(){\n        return _currentFullScreenDisplay.id;\n    };\n\n    refreshDisplayDevices();\n\n    return {\n        refreshDisplayDevices: refreshDisplayDevices,\n        getDisplays : getDisplays,\n        setCurrentFullScreenDisplay: setCurrentFullScreenDisplay,\n        GetSelectedDisplayID: GetSelectedDisplayID,\n        getCurrentFullScreenDisplay: getCurrentFullScreenDisplay,\n        getFullScreenWindow: getFullScreenWindow,\n        closeFullScreenWindow: closeFullScreenWindow,\n        openFullScreenWindow: openFullScreenWindow\n    };\n}]);\n","'use strict';\n/**\n * Created by david.oz on 11/4/2014.\n */\n/**\n * Created by david.oz on 9/21/2014.\n */\nkwpApp.factory('asyncLiveEntryInfoService', ['$injector','$rootScope','kalturaService','$interval', function ($injector,$rootScope,kalturaService,$interval) {\n\n    var REFRESH_RATE_MS = 1000;\n\n    var registrationFunctions = [];\n\n    var currentEntryInfo = null;\n\n    var updatingLiveEntryInfo=false;\n\n    var timerHandler = null;\n\n    var _notifyTimeChangeToRegisteredUsers = function(result){\n\n        for(var i=0;i<registrationFunctions.length;i++){\n\n            var functionToExecute = registrationFunctions[i];\n\n            functionToExecute(result);\n\n        }\n    };\n\n    function processNewEntryInfo(entryInfo) {\n        var prevInfo = currentEntryInfo;\n        if ((angular.equals(prevInfo,entryInfo) === false) && !updatingLiveEntryInfo) {\n            currentEntryInfo = entryInfo;\n\n            _notifyTimeChangeToRegisteredUsers(entryInfo);\n\n        }\n    }\n\n    var _refreshLiveEntryInfoFunc = function(){\n\n        kalturaService.getLiveEntryInfo(configuration.MediaEntryId).then(function(res){\n\n            processNewEntryInfo(res);\n        });\n    };\n\n    var _stopPolling = function(){\n\n        if(timerHandler !== null) {\n            $interval.cancel(timerHandler);\n            timerHandler = null;\n        }\n\n    };\n\n    var _startPolling = function(){\n\n        if(timerHandler === null) {\n            timerHandler = $interval(_refreshLiveEntryInfoFunc, REFRESH_RATE_MS);\n        }\n    }\n    _startPolling();\n\n\n    var _getCurrentEntryInfo = function(){\n\n        return currentEntryInfo;\n\n    };\n\n    var _onEntryInfoChange = function(functionToCall){\n\n        if(typeof(functionToCall) === \"function\") {\n\n            registrationFunctions.push(functionToCall);\n        }\n        else{\n            klog.error(\"Registering illegal function\");\n        }\n\n    };\n\n    var _unRegisterOnEntryInfoChange = function(func){\n\n        var index = registrationFunctions.indexOf(func);\n\n        if (index > -1) {\n            registrationFunctions.splice(index, 1);\n        }\n\n    };\n\n    function updateLiveEntryInfo(args,sendUpdateToRegistredUsers) {\n\n        if (sendUpdateToRegistredUsers && currentEntryInfo) {\n            var newEntryInfo = _.extend(currentEntryInfo, args);\n            processNewEntryInfo(newEntryInfo);\n        }\n\n        updatingLiveEntryInfo=true;\n        try {\n            return kalturaService.updateLiveEntryInfo(configuration.MediaEntryId, args).then( function(res) {\n                updatingLiveEntryInfo = false;\n                processNewEntryInfo(res);\n                return res;\n            }).catch(function (err) {\n                updatingLiveEntryInfo = false;\n                return err;\n            });\n        }catch(e) {\n            klog.error(\"Exception calling updateLiveEntryInfo \"+e)\n            updatingLiveEntryInfo = false;\n            return Promise.reject(e);\n        }\n    }\n\n\n    return {\n        getCurrentEntryInfo : _getCurrentEntryInfo,\n        registerOnEntryInfoChange : _onEntryInfoChange,\n        updateLiveEntryInfo: updateLiveEntryInfo,\n        isUpdatingLiveEntry: function() {\n            return updatingLiveEntryInfo;\n        }\n    };\n}]);\n\n","'use strict'\n/**\n * Created by asafrobinovich on 12/2/14.\n */\nkwpApp.factory('liveAnalyticsService', ['kalturaService', 'asyncLiveEntryInfoService', function (kalturaService, asyncLiveEntryInfoService){\n\n    //watching,average bitrate,avg buffering\n    var _liveData = {\n        numberOfConnectedPeople : \"0\",\n        averageBitrate : \"0\",\n        averageBufferingTimePerMinute : \"0\",\n        peakAudience : \"0\",\n        plays : null,\n        secondsViewed : null,\n        startEvent : null,\n        timestamp : \"0\",\n        graphData : [],\n        pointEvery : 10, // in seconds\n        totalGraphPoints: 180\n    };\n    _liveData.minGraphTime = _liveData.pointEvery*_liveData.totalGraphPoints;\n    var graceTime = 120;\n    var lastRealGraphValue = 0;\n    var maxTimeToQueryBack = 129600;\n    var avgStatsTimeToQueryBack = 60;\n    var avgStatsGraceTime = 2;\n    var intervalTime = 15000;\n    var MAX_ANALYTICS_TIME_BACKWARDS = configuration.maxAnalyticsBackwardQueryTime;\n\n    // call the kaltura Service to get new values.\n    var updateValues=function () {\n\n\n        var p1=kalturaService.getAverageRates(configuration.MediaEntryId, -1 * avgStatsTimeToQueryBack, -1 * avgStatsGraceTime).then(function(result){\n\n            if (result && result.objects && result.objects.length > 0) {\n\n                var liveData = result.objects[0];\n\n                if (liveData.bufferTime!==undefined) {\n                    _liveData.averageBufferingTimePerMinute = parseFloat(liveData.bufferTime);\n                    klog.debug(\"Updating bufferTime\" + _liveData.averageBufferingTimePerMinute);\n                }\n                if (liveData.avgBitrate!==undefined) {\n                    _liveData.averageBitrate   = parseInt(liveData.avgBitrate);\n                    klog.debug(\"Updating averageBitrate\" + _liveData.averageBitrate);\n                }\n\n            }else{\n\n                klog.debug(\"getAverageRates returned with no results\");\n\n            }\n\n        },function(err){\n\n            klog.error(\"Live analytics call to getAverageRates failed\");\n\n        });\n\n        var serverTime = Math.floor((kalturaService.getServerTime() /10000) * 10);\n\n        var timeToQueryBack = (lastRealGraphValue <= 0) ? -1 * maxTimeToQueryBack : lastRealGraphValue - serverTime - graceTime;\n\n        var p2=kalturaService.getLiveEntryTimeline(configuration.MediaEntryId, timeToQueryBack, -1 * graceTime).then(function(data) {\n\n            if(data && data.length > 0) {\n                klog.debug(\"getLiveEntryTimeline data was - \" + data[0].data);\n                var parsedData = parseData(data[0].data);\n                if (parsedData.length > 0) {\n                    lastRealGraphValue = parsedData[parsedData.length - 1].x;\n                }\n\n                var now = Math.floor((kalturaService.getServerTime() / 10000) * 10);\n\n                var startTime = 0;\n                if (kserviceInfo.mockAnalyticsAPI) {\n                    startTime = now;\n                } else {\n\n                    var currentEntryInfo = asyncLiveEntryInfoService.getCurrentEntryInfo();\n                    if(currentEntryInfo && currentEntryInfo.firstBroadcast){\n\n                        startTime = Math.max(currentEntryInfo.firstBroadcast,now - MAX_ANALYTICS_TIME_BACKWARDS);\n\n                    }else{\n                        if (currentEntryInfo && currentEntryInfo.firstBroadcast) {\n                            klog.warn(\"failed to get asyncLiveEntryInfoService.getCurrentEntryInfo().firstBroadcast. setting lastRealGraphValue to 0\");\n                        }\n                        lastRealGraphValue = 0;\n                    }\n                    // means that firstBroadcast is null\n                    if (startTime === null || startTime === 0) {\n                        startTime = now;\n                    }\n                }\n\n                var tmpData = mergeData(_liveData.graphData, parsedData);\n\n                var graphStartTime = Math.min((startTime / 10) * 10, (tmpData.length > 0) ? tmpData[0].x : (startTime / 10) * 10);\n                var graphEndTime = now - graceTime;\n\n                if (graphEndTime - graphStartTime < _liveData.minGraphTime) {\n                    graphStartTime = graphEndTime - _liveData.minGraphTime;\n                }\n\n                tmpData = fillDataGaps(tmpData, graphStartTime, graphEndTime, _liveData.totalGraphPoints);\n                _liveData.graphData = trimStart(tmpData, _liveData.totalGraphPoints);\n                _liveData.numberOfConnectedPeople = Math.max(_liveData.graphData[_liveData.graphData.length-1].y, 0);\n\n                klog.debug(\"Updating number of connected people tp be \"+_liveData.numberOfConnectedPeople);\n\n\n            }else{\n                klog.warn(\"getLiveEntryTimeline returned with bad result.cannot parse result.\");\n            }\n        }, function(err){\n            klog.log(\"Live analytics call to getLiveEntryTimeline failed\");\n            lastRealGraphValue = 0;\n            _liveData.graphData = [];\n        });\n\n        Promise.all([p1,p2]).finally(function() {\n            setTimeout( function() {\n                updateValues();\n            },intervalTime);\n        })\n    };\n\n    // Get 2 data arrays,\n    // delete from the first one all the data that is newer then the oldest point in the 2nd one.\n    // append the data from the 2nd one to the first one.\n    var mergeData = function(inOldData, inNewData) {\n\n        // Select minimal time. We use it to know which slides to delete from inOldData.\n        var newDataOldestPointTime = (inNewData.length > 0) ? inNewData[0].x : ((inOldData.length > 0) ? inOldData[inOldData.length-1] : 0);\n\n        for (var i = inOldData.length -1; i >= 0; i--) {\n            if (inOldData[i].x >= newDataOldestPointTime) {\n                inOldData.pop();\n            }\n        }\n\n        for (var j = 0; j < inNewData.length; j++) {\n            inOldData[inOldData.length] = inNewData[j];\n        }\n\n        return inOldData;\n    };\n\n    /* gapsStart/gapsEnd can be Smaller/Bigger than start/end values of data and will be filled respectively\n     *  with zeroes.mid points data will also be filled with zeroes in case missing.\n     * */\n    var fillDataGaps = function(data, fillGapsStart, fillGapsEnd, maxNullPointsToAdd){\n\n        if (data === undefined) {\n            return undefined;\n        }\n\n        if (data.length === 0){\n            data.push({x:fillGapsEnd, y:-1});\n        }\n\n        var firstPoint = data[0].x;\n        var lastPoint = data[data.length - 1].x;\n        var curx, nextx, i = 1;\n        // add points between lastPoint and firstPoint\n        curx = firstPoint + 10;\n        while (curx < lastPoint) {\n            nextx = data[i].x;\n            if (curx < nextx) {\n                // need to add point here\n                data.splice(i, 0, {\n                    'x': curx,\n                    'y': data[i-1].y\n                });\n            }\n            curx += 10;\n            i++;\n        }\n        // add points between fillGapsStart and firstPoint\n        curx = firstPoint - 10;\n        i = 0;\n        while (fillGapsStart <= curx && i < maxNullPointsToAdd) {\n            data.unshift({\n                'x': curx,\n                'y': -1\n            });\n            curx -= 10;\n            i++;\n        }\n        // add points after lastPoint till fillGapsEnd\n        curx = lastPoint + 10;\n        while (curx <= fillGapsEnd) {\n            data.push({\n                'x': curx,\n                'y': data[data.length - 1].y\n            });\n            curx += 10;\n        }\n\n        return data;\n    };\n\n    var parseData = function parseData(str) {\n        var os = str.split(';');\n        var objects = [];\n        os.forEach(function (sLine) {\n            if (sLine) {\n                var parts = sLine.split(',');\n                var time = parseInt(parts[0], 10);\n                var liveViewers = parseInt(parts[1],10);\n                var dvrViewers = parseInt(parts[2],10);\n                var totalViewers= liveViewers+dvrViewers;\n                objects.push({'x': time, 'y': totalViewers});\n            }\n        });\n\n        //if (objects.length === 0){\n        //    klog.warn(\"data for graph returned zero results\");\n        //    var now = new Date();\n        //    objects.push({'x': now.getTime()/10000 * 10, 'y': 0});\n        //}\n\n        return objects;\n    };\n\n    // remove simulated points from the data if we have real points to replace them with\n    var trimStart = function(data, MinGraphPoints) {\n        if (!data || data.length === 0) {\n            return data;\n        }\n        var pointsToTrim=0;\n        while(data.length-pointsToTrim > MinGraphPoints && data[pointsToTrim].y === -1) {\n            pointsToTrim++;\n        }\n        if (pointsToTrim>0) {\n            data.splice(0, pointsToTrim);\n        }\n        return data;\n    };\n\n    updateValues();\n\n    return {\n        liveData : _liveData\n    };\n}]);\n","'use strict';\n\nkwpApp.factory('captureService', function(kalturaService,sessionService,asyncLiveEntryInfoService,$rootScope){\n\n    // derived functions (classes) should override this and put the needed promises if any.\n    var externalBroadcasting = false;\n\n    //Represent the start time of the current live session.A session can be composed from several live sessions and several offline sessions.\n    var currentSessionStartTime = null;\n\n    //represent the sum of all duration from previous live segmants in the curnt session besides the one currentlly running.(should be 0 in the first iteration).\n    var totalLiveDurationPassed = 0;\n\n    // for debug only, till we get a working server - server sends unix time (seconds from 1/1/1970 00:00 UTC)\n    //sessionStartTime = (new Date().getTime() / 1000);\n\n    var explicitLive = 0;\n    var entryViewMode = 0;\n\n    var rtcBroadcasting = null;\n\n    $rootScope.$on('rtcStreamUpdated', function(event, status) {\n        rtcBroadcasting = status;\n    });\n\n    var onLiveEntryChange = function(res) {\n\n        var previousPreviewMode=isPreviewMode();\n        var previousexternalBroadcasting=externalBroadcasting;\n\n        var liveStatus = parseInt(res.liveStatus);\n        if (isNaN(liveStatus)){\n            klog.warn(\"got liveStatus: {0} which is not a number\", liveStatus);\n            liveStatus = 0; //LiveEntryStatus::STOPPED\n        }\n\n        explicitLive = (res.explicitLive === true) || (res.explicitLive === 1);\n        entryViewMode = parseInt(res.viewMode);\n\n        var currentBroadcastStartTime = parseInt(parseFloat(res.currentBroadcastStartTime) * 1000);\n\n        if (liveStatus === 1 || liveStatus === 2 || liveStatus === 3){\n            //This is a BUG fix.\n            externalBroadcasting = true;\n            // make the session service refreshSessionInfo - some refactoring here might be needed...\n            if (parseInt(currentSessionStartTime) !== parseInt(currentBroadcastStartTime)) {\n\n                currentSessionStartTime = currentBroadcastStartTime;\n\n            }\n        }\n        else {\n\n            externalBroadcasting = false;\n            currentSessionStartTime = null;\n            rtcBroadcasting = null;\n\n        }\n\n        totalLiveDurationPassed = res.lastElapsedRecordingTime;\n\n\n        if (previousexternalBroadcasting!==externalBroadcasting) {\n            $rootScope.$broadcast(\"RecordingStateChanged\", externalBroadcasting,isPreviewMode());\n        }\n\n        if (isPreviewMode()!==previousPreviewMode) {\n\n            $rootScope.$broadcast(\"PreviewModeChanged\", isPreviewMode());\n        }\n    };\n\n    asyncLiveEntryInfoService.registerOnEntryInfoChange(onLiveEntryChange);\n\n\n    function startRecording() {\n\n        return new Promise(function (success, failure) {\n\n            klog.info(\"Called startRecording on captureServiceExternal.We are slaved to the server and returning according to current state.\");\n\n            if (externalBroadcasting === true) {\n                success();\n            } else {\n                failure();\n            }\n\n        });\n    }\n\n    function stopRecording() {\n\n        return new Promise(function (success, failure) {\n\n            klog.info(\"Called stopRecording on captureServiceExternal.We are slaved to the server and returning according to current state.\");\n\n            if (externalBroadcasting === true) {\n                success();\n            } else {\n                failure();\n            }\n\n        });\n    }\n\n    function getPosition() {\n\n        return Promise.resolve(Math.round(kalturaService.getServerTime()/1000));\n    }\n\n    function getViewMode() {\n        return entryViewMode;\n    }\n\n    function isExplicitLive() {\n        return explicitLive;\n    }\n\n    function isBroadcasting() {\n        return (rtcBroadcasting===null)? externalBroadcasting : rtcBroadcasting;\n    }\n\n    function debugSetSessionStartTimeToNow(){\n        currentSessionStartTime = (new Date().getTime() / 1000);\n    }\n\n    function debugSetSessionStartTimeToUndefined(){\n        currentSessionStartTime = undefined;\n    }\n\n    function _startPreviewVideo(){\n        return new Promise(function(resolve,fail){\n            resolve(true);\n        });\n    }\n\n    function _stopPreviewVideo(){\n        return new Promise(function(resolve,fail){\n            resolve(true);\n        });\n    }\n\n    function isPreviewMode() {\n        return isBroadcasting() && explicitLive && entryViewMode===0;\n    }\n\n    function isLiveMode() {\n        return isBroadcasting() && explicitLive && entryViewMode===1;\n    }\n    var readyPromise = new Promise(function(resolve,reject){\n        resolve(true);\n    });\n\n    this.debugSetSessionStartTimeToNow = debugSetSessionStartTimeToNow;\n    this.debugSetSessionStartTimeToUndefined = debugSetSessionStartTimeToUndefined;\n    this.getPosition = getPosition;\n    this.startRecording = startRecording;\n    this.stopRecording = stopRecording;\n    this.startPreviewVideo = _startPreviewVideo;\n    this.stopPreviewVideo = _stopPreviewVideo;\n    this.isBroadcasting = isBroadcasting;\n    this.isExplicitLive = isExplicitLive;\n    this.getViewMode = getViewMode;\n    this.isPreviewMode = isPreviewMode;\n    this.isLiveMode = isLiveMode;\n    this.ready= readyPromise;\n    //this.serverGettingSignal = serverGettingSignal;\n    this.sessionStartTime = function() {return currentSessionStartTime;};\n    return this;\n});\n","(function() {\n    'use strict';\n\n    angular.module('kAPI').factory('sessionService', ['$rootScope','kalturaService','asyncLiveEntryInfoService','$injector','kdialog','kCef', function sessionService($rootScope, kalturaService, asyncLiveEntryInfoService, $injector, kdialog,kCef){\n\n        var streamProfiles = [buildEncodingConfig([900, 640, 480])];\n        var title = null;\n        var rtmpURL = null;\n        var totalDurationBeforeCurrentSegment;\n        var RECORD_STATUS =  {DISABLED:0, APPENDED:1, PER_SESSION:2};\n        var recordStatus = RECORD_STATUS.APPENDED;\n        var recordedEntryId;\n\n        var OnEntryInfoChangeFunc = function(res){\n\n            klog.debug(res);\n\n            title = res.name;\n            rtmpURL = res.primaryBroadcastingUrl + \"/\" + res.streamName;\n            recordStatus = res.recordStatus;\n            recordedEntryId = res.recordedEntryId;\n\n            if (!configuration.streamProfiles) {\n                streamProfiles = [];\n\n                res.bitrates.forEach(function (config) {\n\n                    streamProfiles.push(buildEncodingConfig(config));\n\n                });\n            } else {\n\n                streamProfiles=configuration.streamProfiles;\n            }\n\n            totalDurationBeforeCurrentSegment = res.lastElapsedRecordingTime;\n\n            klog.info(\"Profiles = \" + JSON.stringify(streamProfiles));\n        };\n\n\n\n\n        function refreshEntryInfoPromise() {\n\n            return kalturaService.getLiveEntryInfo(configuration.MediaEntryId).then(function (res) {\n\n                OnEntryInfoChangeFunc(res);\n\n            }, function (error) {\n                if (error.message==='Invalid KS \"EXPIRED\", Error \"-1,INVALID_STR\"') {\n                    error.message=\"Session has expired, please refresh your browser and relaunch app\";\n                }\n                kdialog.alert(error.message,true).then( function () {\n                   window.close();\n                });\n            });\n        }\n\n        var sessionInfoPromise = refreshEntryInfoPromise();\n\n        var readyPromise = Promise.all([sessionInfoPromise]).then(function(){\n            $rootScope.$broadcast('sessionloaded');\n            klog.info('raising sessionloaded event');\n\n            asyncLiveEntryInfoService.registerOnEntryInfoChange(OnEntryInfoChangeFunc);\n\n        }, function(){\n            klog.error('sessionInfoPromise failed');\n        });\n\n        function buildEncodingConfig(config) {\n            return {\n                bitrate: config[0],\n                width: config[1],\n                height: config[2]\n            };\n        }\n\n\n        var loadedEvents=[];\n        function isApplicationReady(ev) {\n            klog.info(\"isApplicationReady with \" + ev.name);\n            loadedEvents[ev.name]=true;\n            if (loadedEvents.dialogpoped || ( loadedEvents.sessionloaded && loadedEvents.timelineloaded && loadedEvents.mainSlideLoaded && loadedEvents.produceractionsloaded)) {\n                try {\n                    if (kCef.available) {\n                        kCef.sendIPC(\"loaded\");\n                    }\n                }\n                catch(e) {\n                    klog.error(e);\n                }\n            }\n        }\n        function goLive() {\n            return asyncLiveEntryInfoService.updateLiveEntryInfo({ viewMode: 1, recordingStatus: 2 },true);\n        }\n\n        function endLive() {\n            return asyncLiveEntryInfoService.updateLiveEntryInfo({ viewMode: 0, recordingStatus: 0 },true);\n        }\n\n        $rootScope.$on('sessionloaded', isApplicationReady);\n        $rootScope.$on('timelineloaded', isApplicationReady);\n        $rootScope.$on('mainSlideLoaded', isApplicationReady);\n        $rootScope.$on('dialogpoped', isApplicationReady);\n        $rootScope.$on('produceractionsloaded', isApplicationReady);\n\n        return {\n            RECORD_STATUS: RECORD_STATUS,\n            ready: readyPromise,\n            getTitle: function() {\n                return title;\n            },\n            getStreamProfiles: function() {\n                return streamProfiles;\n            },\n            getUrl: function(){\n               return rtmpURL;\n            },\n            getTotalDurationBeforeCurrentSegment: function() {\n                return totalDurationBeforeCurrentSegment;\n            },\n            getRecordStatus: function(){\n                return recordStatus;\n            },\n            getRecordedEntryId: function(){\n                return recordedEntryId;\n            },\n            goLive: function() {\n                return goLive();\n            },\n            endLive: function() {\n                return endLive();\n            }\n        };\n    }]);\n})();","/**\n * Created by guyjacubovski on 7/23/14.\n */\n\n(function(){\n    'use strict';\n\n    angular.module('kwpApp').controller('DebugController',function (asyncLiveEntryInfoService, kProducerActions, $scope, kalturaService, slidesService, kalturaAPI, captureService, $injector, kdialog, $interval, $timeout, cuePointsService, kPollsService, kAssetsTimelineService, kPollsExportService,kCef , rtcService) {\n\n        var _keys = {\n            stateSlidesEntryId : \"slidesEntryId\"\n        };\n\n\n        $scope.template = \"./partials/debugView.html\";\n\n        $scope._captureService = captureService;\n        $scope._cuePointService = cuePointsService;\n        $scope._rtcService = rtcService;\n        $scope.deletingSlides=false;\n        $scope.mediaEntryId = configuration.MediaEntryId;\n        $scope.configuration = configuration;\n        $scope.app_version=kUpgradeServiceInfo.app_version;\n        $scope.documentEntryId= '';\n\n        function init()\n        {\n            kProducerActions.isReady().then(function()\n            {\n                $scope.producerState = kProducerActions.getState(true);\n\n                kProducerActions.subscribeStateChange(function()\n                {\n                    $scope.producerState = kProducerActions.getState(true);\n                });\n            });\n\n            setInterval(function(){\n                $scope.serverTime = kalturaAPI.getServerTime();\n                $scope.entryInfo = asyncLiveEntryInfoService.getCurrentEntryInfo();\n            }, 1000);\n\n\n            cuePointsService.on('cuepoint-added',function(cuePoint)\n            {\n                $scope.cuePoints.push(cuePoint);\n            });\n\n            $scope.cuePoints = cuePointsService.getAllCuepoints();\n        }\n        $scope.countWatchers=function() {\n            var WatcherCounter=$injector.get(\"WatcherCounter\");\n            alert(WatcherCounter.count());\n\n        };\n        $scope.setDigestCounter = function () {\n            var WatcherCounter=$injector.get(\"DigestCounter\");\n\n            WatcherCounter.setCounter();\n        };\n        $scope.resetDigestCount = function () {\n           // var WatcherCounter=$injector.get(\"DigestCounter\");\n           // WatcherCounter.resetDigestCount();\n\n        };\n        $scope.openAppPath = function () {\n            if (configuration.app_path.endsWith(\".app\")) {\n                kCef.openShell(configuration.app_path + \"/Contents/\");\n            }\n            kCef.openShell(configuration.app_path);\n        };\n        $scope.openAppDataPath = function () {\n            kCef.openShell(configuration.app_data_path);\n        };\n        $scope.openLogFolder = function () {\n            kCef.openShell(configuration.app_data_path+\"/logs\");\n        };\n        $scope.isLive = function () {\n            kalturaService.isLive($scope.mediaEntryId).then(function (res) {\n                alert(res);\n            });\n        };\n\n        //$scope.deleteSlides=function(){\n        //    $scope.deletingSlides=true;\n        //    cuePointsService.deleteCuePoints($scope.mediaEntryId, ['thumb']).then (function () {\n        //        klog.warn(\"slides deleted!!\");\n        //        $scope.deletingSlides=false;\n        //    });\n        //};\n        //\n        //$scope.deleteQna=function(){\n        //    $scope.deletingSlides=true;\n        //\n        //    $scope._cuePointService.deleteCuePoints($scope.mediaEntryId, ['qna']).then(function () {\n        //        klog.warn(\"qna data deleted!!\");\n        //        $scope.deletingSlides=false;\n        //    });\n        //};\n\n        $scope.deletePlayerViewControl=function(){\n            //$scope.deletingSlides=true;\n            //\n            //$scope._cuePointService.deleteCuePoints($scope.mediaEntryId, ['player-view-mode']).then(function () {\n            //    klog.warn(\"qna data deleted!!\");\n            //    $scope.deletingSlides=false;\n            //});\n        };\n\n        $scope.installPollsMetadataprofile = function(){\n            kPollsService._debugInstallMetadataProfile();\n        };\n\n        $scope.installPollsResponseProfile = function(){\n            kPollsService._debugInstallResponseProfile();\n        };\n\n        $scope.deleteRecordedEntry=function(){\n\n            kalturaService.deleteRecordedEntry($scope.mediaEntryId).then(function(){\n                klog.warn(\"deleted recorded entry\");\n            });\n        };\n\n        $scope.hasUnHandledCuePoints = function()\n        {\n            alert($scope._cuePointService.hasUnHandledCuePoints());\n        };\n\n        $scope.cuePoints = [];\n        $scope.lastCuePointAddedTime=null;\n        $scope.autoAddCuePoints={\n            status: false,\n            intervalDuration:10,\n            interval: null};\n        $scope.isBroadcasting=function() {\n            return  captureService.isBroadcasting();\n        };\n        $scope.autoAddCuePointsChanged=function() {\n            if ($scope.autoAddCuePoints.status) {\n\n                var alignedTime=0;\n                $scope.autoAddCuePoints.interval=$interval(function () {\n\n                    if (captureService.isBroadcasting()) {\n                        var lastAlignedTime = alignedTime;\n                        alignedTime = Math.floor($scope.serverTime / ($scope.autoAddCuePoints.intervalDuration*1000));\n\n                        if (alignedTime !== lastAlignedTime) {\n                            kAssetsTimelineService.debugFlipToNextAsset();\n                        }\n                    } else {\n                        $interval.cancel($scope.autoAddCuePoints.interval);\n                        $scope.autoAddCuePoints.status=false;\n                    }\n                }, 100);\n\n            } else {\n                try {\n                    $interval.cancel($scope.autoAddCuePoints.interval);\n                }\n                catch (e) {\n                }\n                $scope.autoAddCuePoints.interval=null;\n            }\n\n        };\n        $scope.listCuePoints = function () {\n            kalturaAPI.cuePointService.list(configuration.MediaEntryId).then(function (res) {\n                var r = JSON.stringify(res.objects,null,\"\\t\");\n                alert(r);\n                klog.warn(r);\n            });\n        };\n        $scope.viewMediaEntry=function(){\n\n            kalturaService.getLiveEntryInfo(configuration.MediaEntryId).then( function (res) {\n                klog.debug(res);\n                alert(\"\"+JSON.stringify(res,null,\"\\t\"));\n            }, function (res) {\n                alert(JSON.stringify(res));\n            });\n        };\n\n        $scope.getCuePointsStyle = function(cuePoint)\n        {\n            if (cuePoint.tags === 'webcast:internal-state')\n            {\n                return 'producerStateCuePoint';\n            }else if (cuePoint.cuePointType === 'thumbCuePoint.Thumb')\n            {\n                return 'thumbCuePoint';\n            }else {\n                return 'codeCuePoint';\n            }\n        };\n\n        $scope.getCuePointsType = function(cuePoint)\n        {\n            if (cuePoint.tags === 'webcast:internal-state')\n            {\n                return 'producer state';\n            }else if (cuePoint.cuePointType === 'thumbCuePoint.Thumb')\n            {\n                return 'thumb';\n            }else {\n                return 'code';\n            }\n        };\n\n        $scope.deleteAllCuePoints=function() {\n\n\n            kalturaAPI.cuePointService.list({mediaEntryId:configuration.MediaEntryId,\n                types:\"codeCuePoint.Code,thumbCuePoint.Thumb,annotation.Annotation\"}).then(function (res) {\n\n                PromiseMapBatch(res.objects, function deleteCuePoint(item) {\n                    kalturaAPI.cuePointService.delete(item.id);\n                },30);\n\n\n          });\n        }\n\n        $scope.addMockSlides=function() {\n            klog.info(\"add mock presentation document to \");\n            kProducerActions.setStateOrientedAction('select-deck-document',{documentEntryId : \"MOCKSLIDES\" });\n        }\n\n        $scope.onDlbClickCuePoint=function(cuePoint) {\n\n            if (!cuePoint)\n            {\n                return;\n            }\n\n            if (cuePoint.cuePointType=='thumbCuePoint.Thumb') {\n                if (!cuePoint.assetId) {\n                    alert(\"No asset id!\");\n                    return;\n                }\n                var json=\"\";\n                var thumbAssetUrl=\"\";\n                kalturaAPI.startMultirequest();\n                    kalturaAPI.cuePointService.get(cuePoint.id).then(function(res) {\n\n                        json = JSON.stringify(res, undefined, 2);\n                    });\n                    kalturaAPI.thumbAssetService.getUrl(cuePoint.assetId).then(function (res) {\n                        thumbAssetUrl=res;\n                    });\n                kalturaAPI.execMultirequest().then(function() {\n\n                    kdialog.templatedDialog({\n                        template: '<img src=\"' + thumbAssetUrl + '\" width=\"300\" height=\"125\" /></img><br><pre contenteditable=\"true\" style=\"max-height: 250px; overflow: auto; font-size: 9px\">' + json + '</pre>'\n                    }).then(function (a) {\n\n                    });\n                });\n            } else {\n                var json = JSON.stringify(cuePoint, undefined, 2);\n\n                kdialog.templatedDialog({\n                    template: '<pre contenteditable=\"true\" style=\"max-height: 250px; overflow: auto; font-size: 9px\">' + json + '</pre>'\n                }).then(function (a) {\n\n                });\n            }\n        };\n\n        var openEntryPlayerPage=function(entryId,name) {\n            var uiConfId=kserviceInfo.playerUIConf;\n            var url=kserviceInfo.serverAddress+\"/index.php/extwidget/preview/partner_id/\"+kserviceInfo.partnerId+\"/uiconf_id/\"+uiConfId+\n                \"/entry_id/\"+entryId+\"/embed/auto?\";\n\n\n            kCef.openURL(url,name);\n        };\n\n        $scope.openPlayerPage=function(live) {\n\n\n            var entryId=$scope.mediaEntryId;\n\n            if (!live) {\n                kalturaService.getLiveEntryInfo(entryId).then( function (res) {\n                    openEntryPlayerPage(res.recordedEntryId,entryId+\" VOID Entry\");\n                }, function (res) {\n                    alert(JSON.stringify(res));\n                });\n            } else {\n                openEntryPlayerPage(entryId,entryId+\" Live Entry\");\n\n            }\n        };\n\n        $scope.exportPolls=function(){\n            kPollsExportService.exportPollsDataToFile();\n        };\n\n        init();\n    });\n})();","\"use strict\";\n\nkwpApp.directive('ngImgOnLoad', ['$parse', function ($parse) {\n    return {\n        restrict: 'A',\n        link: function (scope, elem, attrs) {\n            var fn = $parse(attrs.ngImgLoad);\n            elem.on('load', function (event) {\n                scope.$apply(function() {\n                    fn(scope, { $event: event });\n                });\n            });\n        }\n    };\n}]);\n","\"use strict\";\n\n\nkwpApp.directive('kImageContainer', ['$parse', function ($parse) {\n    return {\n        restrict: 'A',\n        scope : {\n        },\n        controller : function()\n        {\n            var images = [];\n\n            this.notifyResize = function()\n            {\n                _.each(images,function(image)\n                {\n                   image.onResize();\n                });\n            };\n\n            this.unregister = function(image)\n            {\n                if (image) {\n                    var imageIndex = images.indexOf(image);\n\n                    if (imageIndex !== -1)\n                    {\n                        images.splice(imageIndex,1);\n                    }\n                }\n            };\n\n            this.register = function(image)\n            {\n                if (image && image.onResize) {\n                    images.push(image);\n                }\n            };\n        },\n        link: function (scope, parentElement, attrs,ctrl) {\n            // listen to resize of parent element\n            $(parentElement).resize(ctrl.notifyResize);\n\n            scope.$on('$destroy', function () {\n                $(parentElement).removeResize(ctrl.notifyResize);\n            })\n        }\n    };\n}]);","\"use strict\";\n\n\nkwpApp.directive('kImage', ['$parse', function ($parse) {\n    return {\n        restrict: 'A',\n        scope : {\n            kShow : '='\n        },\n        require: ['^kImageContainer'],\n        link: function (scope, parentElement, attrs, ctrls) {\n            var imageAPI = {\n                onResize :  function()\n                {\n                    if(autoResize) {\n                        if (parentElement.is(':visible')) {\n                            resetLayout();\n                        }\n                    }\n                }\n            };\n            var imageElement = attrs.kImage ? parentElement.find('img[name=\"' + attrs.kImage + '\"]') : null;\n            var errorElement = attrs.error ? parentElement.find('[name=\"' + attrs.error + '\"]') : null;\n            var loaderElement = attrs.loader ? parentElement.find('[name=\"' + attrs.loader + '\"]') : null;\n            var autoResize = attrs.resize ? ( attrs.resize === 'false' ? false : true) : true;\n\n            function onShow(value)\n            {\n                if (value)\n                {\n                    if(autoResize) {\n                        resetLayout();\n                    }\n                    parentElement.show();\n                }else\n                {\n                    parentElement.hide();\n                }\n            }\n\n            function reposition(element)\n            {\n                var $element = $(element);\n                element = $element.get(0);\n\n                var parentHeight = parentElement.height();\n                var parentWidth = parentElement.width();\n\n                var sizes = calculateSizes(element.naturalWidth, element.naturalHeight,parentWidth,parentHeight,true);\n\n                $element.css({\n                    'position': 'absolute',\n                    'top': sizes.targetTop + 'px',\n                    'left': sizes.targetLeft + 'px',\n                     'width': sizes.width + 'px',\n                     'height': sizes.height + 'px'\n                });\n            }\n\n            function calculateSizes(srcwidth, srcheight, targetwidth, targetheight, fLetterBox) {\n\n                var result = { width: 0, height: 0, fScaleToTargetWidth: true };\n\n                if ((srcwidth <= 0) || (srcheight <= 0) || (targetwidth <= 0) || (targetheight <= 0)) {\n                    return result;\n                }\n\n                // scale to the target width\n                var scaleX1 = targetwidth;\n                var scaleY1 = (srcheight * targetwidth) / srcwidth;\n\n                // scale to the target height\n                var scaleX2 = (srcwidth * targetheight) / srcheight;\n                var scaleY2 = targetheight;\n\n                // now figure out which one we should use\n                var fScaleOnWidth = (scaleX2 > targetwidth);\n                if (fScaleOnWidth) {\n                    fScaleOnWidth = fLetterBox;\n                }\n                else {\n                    fScaleOnWidth = !fLetterBox;\n                }\n\n                if (fScaleOnWidth) {\n                    result.width = Math.floor(scaleX1);\n                    result.height = Math.floor(scaleY1);\n                    result.fScaleToTargetWidth = true;\n                }\n                else {\n                    result.width = Math.floor(scaleX2);\n                    result.height = Math.floor(scaleY2);\n                    result.fScaleToTargetWidth = false;\n                }\n                result.targetLeft = Math.floor((targetwidth - result.width) / 2);\n                result.targetTop = Math.floor((targetheight - result.height) / 2);\n\n                return result;\n            }\n\n            function resetLayout()\n            {\n                $(parentElement).css('position','absolute');\n\n                reposition(loaderElement);\n\n                parentElement.find('img').each(function(index,element)\n                {\n                    var $element = $(element);\n\n                    if ($element.data('loaded'))\n                    {\n                        reposition(element);\n                    }\n                });\n            }\n\n            function init() {\n                if (imageElement && imageElement.length > 0) {\n\n                    // manage the show status of the element\n                    var hasShowExpression =  attrs.kShow;\n                    if (hasShowExpression)\n                    {\n                        scope.$watch('kShow',onShow);\n                    }else\n                    {\n                        onShow(true);\n                    }\n\n                    // register to container api\n                    ctrls[0].register(imageAPI);\n\n                    scope.$on('$destroy', function () {\n                        ctrls[0].unregister(imageAPI);\n                    });\n\n                    // hide image and error elements, show loading\n                    imageElement.hide();\n                    errorElement.hide();\n                    loaderElement.show();\n\n                    parentElement.find('img').on('load', function (e) {\n                        $(e.target).data('loaded',true);\n                        if(autoResize) {\n                            reposition(e.target);\n                        }\n                        if (e.target === imageElement[0]) {\n                            loaderElement.fadeOut(400,function()\n                            {\n                                imageElement.fadeIn();\n                            });\n\n                        }\n                    }).on('error', function (e) {\n                        if (e.target === imageElement[0]) {\n                            loaderElement.hide();\n                            errorElement.show();\n                        }\n                    });\n                } else {\n                    parentElement.children().remove();\n                    parentElement.html('<!-- element children were removed by \"k-image\" directive since image selector was invalid -->');\n                }\n            }\n\n            init();\n        }\n    };\n}]);","/**\n * Created by guyjacubovski on 7/23/14.\n */\n\nkwpApp.controller('videoPreviewController',['$scope','captureService','gettextCatalog', function ($scope, captureService, gettextCatalog) {\n\n    $scope.template = \"./partials/videoPreviewView.html\";\n    //Data bounded to the html.\n    $scope.captureControl = {videoPreview : false};\n\n    ////This should be loaded in the future from a file containing HTML element IDs.\n    var htmlVideoElementPreviewSurfaceID = \"videoPreview\"\n\n    //This variable will hold the last requested promise by checking/unchecking.we will wait for it to complete each time before we make a new request.\n    var lastPromise = null;\n\n    //Commands for on air button.\n    var offCommand = CreateCommand(gettextCatalog.getString(\"Off Air\"), \"kicon-onAir\", function () {\n        \n        $scope.onoffcommand = onCommand;\n        lastPromise = startPreviewPromise();\n    });\n\n    var onCommand = CreateCommand(gettextCatalog.getString(\"On Air\"), \"kicon-onAir\", function () {\n        $scope.onoffcommand = offCommand;\n        lastPromise = stopPreviewPromise();\n    });\n    //This command defines the box as marked.\n    onCommand.checked = true;\n\n    /* Turn on/off the check box sign.currently the on air. */\n    function updateBox(isOn) {\n        //Jquery direct call for check/uncheck.This line should be removed once angular will fix behaviour.\n        //This is the implementation for the default checkbox state.\n        //$(\"#previewCheckBox\").prop(\"checked\", isOn);\n        //$scope.captureControl.videoPreview = isOn;\n        //$scope.$apply();\n        //Current implementation uses the on air icon.\n        //klog.info(\"Currently setting on air state=\"+isOn);\n        //$scope.$apply();\n        //$scope.onoffcommand = (isOn) ? onCommand : offCommand;\n\n    }\n\n\n\n    /* returns a promise for video preview starting */\n    function startPreviewPromise() {\n\n        return captureService.startPreviewVideo(htmlVideoElementPreviewSurfaceID).then(function (value) {\n\n            updateBox(true);\n\n        },function (error_obj) {\n\n            updateBox(false);\n            //TODO: Move this error to an error page.\n            //clientErrorReporter.reportError(\"Preview video failed\",error_obj.error_code,error_obj.message,\"Please try to turn off other application which are using video/audio input.\");\n        });\n    }\n\n    /* returns a promise for video preview stopping */\n    function stopPreviewPromise() {\n\n        return captureService.stopPreviewVideo(htmlVideoElementPreviewSurfaceID).then(function (value) {\n\n            updateBox(false);\n\n        }, function (error_obj) {\n\n            updateBox(true);\n\n            clientErrorReporter.reportError(\"Stop Preview video failed\",error_obj.error_code,error_obj.message);\n\n        });\n    }\n\n    //We initiate the boot promise of this controller.We start by trying to preview video.\n    klog.info(\"Starting Video previewing from capture controller.\");\n\n    lastPromise = startPreviewPromise();\n\n    //Temporarily not in use until checkbox decision is complete.\n    $scope.change = function (control) {\n        //control.videoPreview contains the information.if(control.videoPreview==true) then the user requested to turn video on,otherwise off.\n        lastPromise = lastPromise.then(function (val) {\n            (control.videoPreview) ? startPreviewPromise() : stopPreviewPromise();\n        });\n    };\n}]);","kwpApp.controller(\"audioPreviewController\", function ($scope, $q, captureService) {\n\t$scope.template = \"./partials/audioPreviewView.html\";\n\t$scope.showPreview = false;\n\n\tvar deferred = $q.defer();\n\tvar ready = deferred.promise;\n\t//$scope.$watch('preview', function () { alert(\"hh\"); }, true);\n\t$scope.onpreview = function showPreviewChanged() {\n\t\t$scope.preview = !$scope.preview;\n\t\t//alert(\"AA\" + $scope.showPreview);\n\t\ttry {\n\t\t\tif ($scope.preview) {\n\t\t\t\tready.then(function (previewDevice) {\n\t\t\t\t\t/// alert(JSON.stringify(previewDevice));\n\t\t\t\t\tcaptureService.startPreviewDevice(previewDevice, \"audioPreview\");\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tready.then(function (previewDevice) {\n\t\t\t\t\tcaptureService.stopPreviewDevice(previewDevice);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tcatch (a) {\n\t\t\talert(a);\n\t\t}\n\t};\n\n\tvar previewDevice = null;\n\t$(document).ready(function () {\n\t\tcaptureService.enumDevice.then(function (devices) {\n\t\t\tfor (i = 0; i < devices.length; i++) {\n\t\t\t\tvar element = devices[i];\n\n\t\t\t\tif (element.DeviceType == \"Audio\") {\n\n\t\t\t\t\tpreviewDevice = devices[i];\n\t\t\t\t\tdeferred.resolve(previewDevice);\n\t\t\t\t\t$scope.showPreview = true;\n\t\t\t\t\t$scope.onpreview();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t});\n});","/**\n * Created by guyjacubovski on 7/23/14.\n */\nkwpApp.controller('sessionController', function ($scope, $rootScope, captureService,  sessionService, gettextCatalog, shortcutService, asyncLiveEntryInfoService, kdialog, $interval, rtcService) {\n\n    $scope.duration = (configuration.todate.getTime()-configuration.fromdate.getTime());\n\n    var minimalProgress = 1;\n\n    $scope.template = \"./partials/sessionView.html\";\n\n    $scope.captureService = captureService;\n\n    $scope.sessionService = sessionService;\n\n    $scope.elapsedTime = 0;\n\n    $scope.showEntryManagment = configuration.showEntryManagment;\n\n    $scope.remainingTime = $scope.duration;\n\n    $scope.shortcutService = shortcutService;\n\n    $scope.elapsedPercentage = 0;\n\n    $scope.progressValue = 0;\n\n    $scope.max = 100;\n\n    var updatingExplictLive=false;\n\n    var goLiveActive = false;\n\n    $scope.getLiveStatusText = function() {\n        if (captureService.isExplicitLive()) {\n            if (captureService.isBroadcasting()) {\n                return captureService.getViewMode() === 0 ? 'PREVIEW' : 'LIVE';\n            }\n            return 'OFFLINE';\n        }\n        else {\n            return captureService.isBroadcasting() ? 'LIVE' : 'OFFLINE';\n        }\n    };\n\n    $scope.isViewModeAll = function() {\n        if (captureService.isBroadcasting()) {\n            return captureService.isExplicitLive() && (captureService.getViewMode() === 1);\n        }\n        return false;\n    };\n\n    $scope.onGoLiveClick = function() {\n        goLiveActive = true;\n        updatingExplictLive=true;\n        return sessionService.goLive().finally(function() {\n            updatingExplictLive=false;\n        });\n    };\n\n    $scope.onEndLiveClick = function() {\n        kdialog.yesNoDialog({\n            yesMessage: gettextCatalog.getString('End Live'),\n            noMessage: gettextCatalog.getString('Cancel'),\n            title: gettextCatalog.getString('Hold your horses!'),\n            message: gettextCatalog.getString('Are you sure you want to end the live broadcast? this action can not be undone')\n        })\n            .then(function() {\n                goLiveActive = false;\n                updatingExplictLive=true;\n                return sessionService.endLive().finally(function() {\n                    if (rtcService.getIsStreamBroadcasting)\n                    {\n                        if (rtcService.isMicrophoneMuted)\n                        {\n                            rtcService.toggleMicrophoneMute();\n                        }\n                        rtcService.stopRtcStream(true);\n                    }\n                    updatingExplictLive=false;\n                });\n            });\n    };\n\n    $scope.isExplicitLiveUpdateInProgress = function() {\n        return asyncLiveEntryInfoService.isUpdatingLiveEntry() && updatingExplictLive;\n    }\n\n    $interval(function() {\n        var now = new Date().getTime();\n        $scope.elapsedTime = now - configuration.fromdate.getTime();\n        $scope.remainingTime = configuration.todate.getTime() - now;\n        var progressValue = Math.min(100 * $scope.elapsedTime / ($scope.duration), $scope.max);\n\n        if ($scope.remainingTime <= 0) {\n            $scope.remainingTime = 0;\n        }\n\n        if ($scope.elapsedTime <= 0) {\n            $scope.elapsedTime = 0;\n            $scope.remainingTime = $scope.duration;\n        }\n\n        // show indicator if we are in the session time. If we show the indicator it will have a minimal size of 1%\n        // before we start the progress will show no line, and the time will show a negative value (time to start)\n        $scope.progressValue = progressValue <= minimalProgress && progressValue > 0 ? minimalProgress : progressValue;\n    }, 1000);\n\n    $rootScope.$on('rtcStreamUpdated', function(event, status, userDecided) {\n        if (status && goLiveActive)\n        {\n            $scope.onGoLiveClick();\n        }\n        if (!status && !userDecided)\n        {\n            goLiveActive = false;\n        }\n    });\n});\n","/**\n * Created by asafrobinovich on 9/30/14.\n */\n\nkwpApp.controller('miscController', ['$scope', 'gettextCatalog', 'kdialog', 'sessionService','captureService','kCef', function ($scope, gettextCatalog, kdialog, sessionService,captureService,kCef) {\n    $scope.template = \"./partials/miscView.html\";\n\n    var maxCommand = CreateCommand(\"\", \"kicon-fullscreen\", function () {\n        $scope.winSizeCommand = restoreCommand;\n        electron.remote.BrowserWindow.getFocusedWindow().maximize();\n    },gettextCatalog.getString(\"Maximize\"));\n\n    var restoreCommand = CreateCommand(\"\", \"kicon-fullscreen\", function () {\n        $scope.winSizeCommand = maxCommand;\n        electron.remote.BrowserWindow.getFocusedWindow().unmaximize();\n    },gettextCatalog.getString(\"Restore\"));\n\n    $scope.minimizeCommand = CreateCommand(\"\", \"kicon-minimize\", function () {\n        electron.remote.BrowserWindow.getFocusedWindow().minimize();\n    },gettextCatalog.getString(\"Minimize\"));\n\n    $scope.debuggingMode=function() {\n        return configuration.debuggingMode;\n    };\n\n    $scope.closeAppCommand = CreateCommand(\"\", \"kicon-close2\", function () {\n\n        if (captureService.isBroadcasting()) {\n            kdialog.yesNoDialog({\n                yesMessage:gettextCatalog.getString(\"Yes, Close\"),\n                noMessage:gettextCatalog.getString(\"No, Don't Close\"),\n                title: \"Close Application\",\n                message: \"You have chosen to close the \"+whiteLabelingConfiguration.appName+\"</br><b>while still presenting</b>, Are you sure? \"\n            }).then(function () {\n                window.close();\n            }, function () {\n              //  alert(\"NO!\");\n            });\n        } else {\n            window.close();\n        }\n\n\n    },gettextCatalog.getString(\"Close\"));\n\n    $scope.aboutCommand = CreateCommand(\"\", \"kicon-info\", function () {\n\n        kdialog.infoDialog({\n            title:gettextCatalog.getString(\"System Information\"),\n            templateUrl: './partials/about.html'\n\n        });\n    },gettextCatalog.getString(\"About\"));\n\n\n    $scope.debugCommand = CreateCommand(gettextCatalog.getString(\"debug\"), \"kicon-notes\", function () {\n\n        $scope.$parent.debugExpanded = !$scope.$parent.debugExpanded;\n    });\n\n    $scope.winSizeCommand = maxCommand;\n\n    $scope.logoUrl=whiteLabelingConfiguration.logoUrl;\n\n    $scope.showTitleBarButtons = function(){\n        return configuration.showTitleBarButtons;\n    };\n\n\n}]);\n\n\n","\nkwpApp.controller('contentPanelController', function($scope,$rootScope,slidesService,kAssetsTimelineService) {\n\n    var self = this;\n    var showVideo=false;\n\n\n    var unregisterStreamUpdated = $rootScope.$on('rtcStreamUpdated', function(event, status)  {\n        showVideo = status;\n    });\n    $scope.$on('$destroy', unregisterStreamUpdated);\n\n    $rootScope.$on('changeActiveContentPanel', function(event,name)  {\n        self.activeContentWidget = name;\n    });\n\n    function showStageContent()\n    {\n        self.activeContentWidget = 'stage';\n    }\n    function showDetailsContent()\n    {\n        self.activeContentWidget = 'details';\n    }\n    function showMonitoringContent()\n    {\n        self.activeContentWidget = 'monitoring';\n    }\n    function presentationLoaded() {\n\n        if (showVideo || kAssetsTimelineService.currentTimelineAsset || (kAssetsTimelineService.timelineAssets && kAssetsTimelineService.timelineAssets.length > 0))\n        {\n            showStageContent();\n        }else {\n\n            showDetailsContent();\n        }\n    }\n\n    self.showStageContent =showStageContent;\n    self.showDetailsContent = showDetailsContent;\n    self.showMonitoringContent = showMonitoringContent;\n\n    self.showLiveDashboard = configuration.showLiveDashboard;\n    self.showContent = false;\n    self.activeContentWidget = '';\n\n\n    slidesService.load().then(function()\n    {\n        self.showContent = true;\n        presentationLoaded();\n\n        $scope.$on(\"AssetsTimelineChanged\",presentationLoaded);\n    });\n\n\n});\n\n\n","/**\n * Created by guyjacubovski on 7/23/14.\n */\n\nkwpApp.controller('notesController',['$scope','kalturaService','slidesService','kalturaAPI','$sce','kAssetsTimelineService', function($scope, kalturaService,slidesService,kalturaAPI,$sce,kAssetsTimelineService) {\n    $scope.template = \"./partials/notesView.html\";\n    $scope.text=\"\";\n\n    //$scope.text=\"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\"\n    $scope.Top=function() {\n        var myDiv = $('.notesText');\n        myDiv.animate({ scrollTop: 0}, 200, 'swing');\n    };\n\n    $scope.$watch( function() { return kAssetsTimelineService.currentTimelineAsset; }, function() {\n        if (kAssetsTimelineService.currentTimelineAsset &&\n            kAssetsTimelineService.currentTimelineAsset.notes) {\n            $scope.text = $sce.trustAsHtml(kAssetsTimelineService.currentTimelineAsset.notes);\n        }\n        else {\n            $scope.text = \"\";\n        }\n    });\n}]);\n","'use strict';\n\nkwpApp.controller('liveAnalyticsController', ['$scope', 'liveAnalyticsService', function($scope, liveAnalyticsService) {\n\n    $scope.template = \"./partials/liveAnalyticsView.html\";\n\n    $scope._liveAnalyticsService = liveAnalyticsService;\n    $scope.showAnalytics = configuration.showAnalytics;\n\n\n}]);","kwpApp.controller('onlineController', ['$scope', \"onlineStatusService\", \"gettextCatalog\", 'kCef',function ($scope, onlineStatusService, gettextCatalog,kCef) {\n\n  //  $scope.template = \"./partials/onlineStatus.html\";\n    $scope.onlineAPI = onlineStatusService.onlineAPI();\n    $scope.canClose=function() {\n        return kCef.available;\n    }\n    $scope.exitCommand = CreateCommand(gettextCatalog.getString(\"Close application\"), \"\", function () {\n        window.close();\n    });\n}]);\n\n\n","/**\n * Created by david.oz on 11/5/2014.\n */\n/**\n * Created by guyjacubovski on 7/23/14.\n */\n\n\nkwpApp.controller('modelController', function($scope,$rootScope,$document,captureService,sessionService,kAssetsTimelineService, kProducerActions) {\n\n    $scope.captureService = captureService;\n    $scope.sessionService = sessionService;\n\n    $rootScope.$on('slidesSizeSet', function(scope,size) {\n        $scope.slidesAspectRatio = size.width/size.height;\n    });\n\n    var unregisterStreamUpdated = $rootScope.$on('rtcStreamUpdated', function(event, status, userDecided, aspectRatio, peerName)  {\n        calcShouldShowPresentationPanel();\n        $scope.showVideo = status;\n        if (aspectRatio) {\n            $scope.videoApectRatio = aspectRatio;\n        }\n        if (!peerName)\n            peerName = false;\n        $scope.peerName = peerName;\n    });\n\n    $rootScope.$on('PresentationChanged',function (){\n        calcShouldShowPresentationPanel();\n    });\n\n    $scope.$on('$destroy', unregisterStreamUpdated);\n\n    $scope.showVideo=false;\n    $scope.peerName=false;\n    $scope.videoApectRatio=16.0/9.0;\n    $scope.slidesAspectRatio=16.0/9.0;\n    $scope.refreshVideoLayout = captureService.refreshVideoLayout;\n\n    $scope.configuration = configuration;\n    $scope.shouldShowPresntationPanel=undefined;\n    $scope.debugExpanded = false;\n    $scope.qnaEnabled = configuration.QnAEnabled;\n    $scope.qnaModeratorMode = configuration.qnaModeratorMode;\n    $scope.showSlides = configuration.showSlides;\n\t$scope.enabledAnalytics = configuration.enabledAnalytics;\n\t$scope.liveModerator = configuration.liveModerator;\n\t$scope.participantsPanel = configuration.participantsPanel;\n\n    var presentationLoaded = function () {\n        calcShouldShowPresentationPanel();\n    };\n\n    kAssetsTimelineService.isReady().then(function()\n    {\n        presentationLoaded();\n        $scope.$on(\"AssetsTimelineChanged\",presentationLoaded);\n    });\n\n    var calcShouldShowPresentationPanel = function()\n    {\n        var selectDeckDocument = kProducerActions.getState('actions.select-a-thumb','');\n        $scope.shouldShowPresntationPanel=$scope.showSlides && (kAssetsTimelineService.timelineAssets.length>0 || selectDeckDocument !== '');\n    };\n\n   function checkIsSupportedBrowser() {\n       // Firefox 1.0+\n       var isFirefox = typeof InstallTrigger !== 'undefined';\n\n       // Safari 3.0+ \"[object HTMLElementConstructor]\"\n       var isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification));\n\n       // Chrome 1+\n       var isChrome = !!window.chrome && (/Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));\n\n       // Edge (based on chromium) detection\n       var isEdgeChromium = isChrome && (navigator.userAgent.indexOf(\"Edg\") != -1);\n\n       var isElectron = navigator.userAgent.toLowerCase().indexOf(' electron/') > -1;\n\n       return isElectron || isFirefox || isSafari || isChrome || isEdgeChromium;\n   }\n\n    $scope.supportedBrowser = checkIsSupportedBrowser();\n});\n\n\n","/* globals _ */\n/**\n * Created by asafrobinovich on 2/11/15.\n */\n\"use strict\";\n\nkwpApp.controller('fullScreenController', function($scope, localHardwareService, gettextCatalog, kAssetsTimelineService, ASSET_TYPE, kPollContainer) {\n\n    var FULL_SCREEN_HTML = \"FullScreenWindow.html\";\n    var ORIGIN_HTML = \"index.html\";\n\n    $scope.template = \"./partials/fullScreenView.html\";\n\n    $scope.$watch(\n        function()\n        {\n            return kAssetsTimelineService.currentTimelineAsset;\n        },\n        function()\n        {\n            if (localHardwareService.getFullScreenWindow()) {\n                var assetType = kAssetsTimelineService.currentTimelineAsset ?\n                    kAssetsTimelineService.currentTimelineAsset.type : '';\n                updateFullScreenWindow(assetType);\n            }\n    });\n\n    $scope.clicked = function(val) {\n        if (val === 'None'){\n            if (localHardwareService.getFullScreenWindow()) {\n                localHardwareService.closeFullScreenWindow();\n            }\n        }\n        // if currentDisplay is undefined or it's a different display\n        else if (!localHardwareService.getCurrentFullScreenDisplay() || val.id !== localHardwareService.getCurrentFullScreenDisplay().id){\n            if (localHardwareService.getFullScreenWindow()) {\n                localHardwareService.closeFullScreenWindow();\n            }\n            localHardwareService.setCurrentFullScreenDisplay(val.index);\n            var assetType = kAssetsTimelineService.currentTimelineAsset ?\n                kAssetsTimelineService.currentTimelineAsset.type : '';\n            openFullScreenWindow(assetType);\n        }\n    };\n\n    $scope.getMonitorNamesAndIDs = function() {\n        return localHardwareService.getDisplays();\n    };\n\n    $scope.selectedDisplayID = function(){\n        localHardwareService.GetSelectedDisplayID();\n    };\n\n    $scope.icon = function(monitorID){\n        if (monitorID === 'None' && !localHardwareService.getCurrentFullScreenDisplay()){\n            return \"kicon-yes SelectedListOption\";\n        }\n        else if (localHardwareService.getCurrentFullScreenDisplay() && monitorID === localHardwareService.getCurrentFullScreenDisplay().id) {\n            return \"kicon-yes SelectedListOption\";\n        }\n        return \"iconSizeIndent\";\n    };\n\n    $scope.getDropDownListIconColorClass = function() {\n\n        if (localHardwareService.getCurrentFullScreenDisplay()) {\n            return \"CircleIndicator\";\n        }\n        else{\n            return \"\";\n        }\n    };\n\n    $scope.disableSelectionDropDown = function(){\n        return (!localHardwareService.getDisplays() || localHardwareService.getDisplays().length < 2);\n    };\n\n    $scope.onToggle = function() {\n        var $btn = $(fullScreenControllerID);\n        var $menu = $(DisplaySelectionList);\n        var margin = ($btn.outerWidth() - $menu.outerWidth()) / 2 + 'px';\n        $menu.css('margin-left', margin);\n\n        var selectorText = \"#DisplaySelectionList:after\";\n\n        var triangleSizeInPX = 6;\n\n        var posTriangle = (parseInt($menu.innerWidth()) - (2*parseInt(triangleSizeInPX))) / 2 + \"px\";\n\n        for (var i=0; i < document.styleSheets.length; i++) {\n            if (document.styleSheets[i].href && document.styleSheets[i].href.indexOf(\"screenSelection.css\") >= 0){\n                for (var j =0; j < document.styleSheets[i].cssRules.length; j++) {\n                    if (document.styleSheets[i].cssRules[j].selectorText === selectorText) {\n                        document.styleSheets[i].removeRule(j);\n                        break;\n                    }\n                }\n                document.styleSheets[i].addRule(selectorText, \"border-width: 0 \" + triangleSizeInPX + \"px \" + triangleSizeInPX + \"px \" +triangleSizeInPX + \"px\");\n                document.styleSheets[i].addRule(selectorText, \"position: absolute\");\n                document.styleSheets[i].addRule(selectorText, \"bottom: 100%\");\n                document.styleSheets[i].addRule(selectorText, \"margin-left: \" + posTriangle);\n                document.styleSheets[i].addRule(selectorText, \"border-style: solid\");\n                document.styleSheets[i].addRule(selectorText, \"border-color: #222222 transparent\");\n                document.styleSheets[i].addRule(selectorText, \"content: ''\");\n                document.styleSheets[i].addRule(selectorText, \"width: 0\");\n                document.styleSheets[i].addRule(selectorText, \"height: 0\");\n\n                break;\n            }\n        }\n    };\n\n    function updateFullScreenWindow(assetType)\n    {\n        if(assetType === ASSET_TYPE.SLIDE) {\n            updateSlideFullScreenWindow();\n        }else if(assetType === ASSET_TYPE.POLL) {\n            updatePollFullScreenWindow();\n        }else{\n            //default screen - opening slide window with no image\n            updateSlideFullScreenWindow();\n        }\n    }\n\n    function openFullScreenWindow(assetType)\n    {\n        if(assetType === ASSET_TYPE.SLIDE) {\n            openSlideFullScreenUrl();\n        }else if(assetType === ASSET_TYPE.POLL) {\n            openPollFullScreenUrl();\n        }else{\n            //default screen - opening slide window with no image\n            openSlideFullScreenUrl();\n        }\n    }\n\n    function updateSlideFullScreenWindow()\n    {\n        kAssetsTimelineService.getCurrentAssetUrl().then(function(result)\n        {\n            return result.url;\n        },function()\n        {\n            // the is only here for safety since we know that we have current slide key so we should be able to extract url\n            return '';\n        }).then(function(result)\n        {\n            ipcRenderer.send('slideUpdate', {type:'slide', data: result});\n        });\n    }\n\n    function updatePollFullScreenWindow()\n    {\n        var newPollState = JSON.stringify(kPollContainer.getUpdatedPollContainer());\n        ipcRenderer.send('pollUpdate', {type: 'poll', data: newPollState});\n    }\n\n    function openSlideFullScreenUrl()\n    {\n        kAssetsTimelineService.getCurrentAssetUrl().then(\n            function(slideUrl)\n            {\n                var windowUrl = location.protocol +\n                    location.pathname.replace(ORIGIN_HTML, FULL_SCREEN_HTML) +\n                    \"?StartingImage=\" + slideUrl.url;\n\n                return windowUrl;\n            },\n            function(){\n                var windowUrl = location.protocol +\n                    location.pathname.replace(ORIGIN_HTML, FULL_SCREEN_HTML) +\n                    \"?StartingImage=\" + '';\n\n                return windowUrl;\n            }\n        ).then(function (windowUrl) {\n            localHardwareService.openFullScreenWindow(windowUrl);\n        });\n    }\n\n    function openPollFullScreenUrl()\n    {\n        var pollInitialState = encodeURIComponent(JSON.stringify(kPollContainer.getUpdatedPollContainer()));\n        var windowUrl = location.protocol +\n            location.pathname.replace(ORIGIN_HTML, FULL_SCREEN_HTML) +\n            '?initialPollState=' + pollInitialState;\n        localHardwareService.openFullScreenWindow(windowUrl);\n    }\n    \n    // register to size changes to reposition the drop down window\n    var slideNavigatorElem = document.getElementById(\"slideNavigator\");\n    elementWatcher.onresize(slideNavigatorElem, function(){$scope.onToggle();});\n\n});","(function () {\n\n    /**\n     * set a watcher on the rootScope and log to console\n     * each time the digestCycle is running\n     *\n     * @param $rootScope\n     * @param $log\n     * @constructor\n     */\n    function DigestCounter($rootScope) {\n\n        var self = this;\n        var watcher = null;\n\n        self.setCounter = function () {\n            watcher = $rootScope.$watch(function () {\n                klog.debug(\"digest cycles running!\");\n            });\n        };\n\n        self.resetCounter = watcher;\n    }\n\n\n\n    /**\n     * returns the number of watchers currently\n     * registered on the module\n     *\n     * @constructor\n     */\n    function WatcherCounter ($rootElement) {\n\n        var self = this;\n\n        self.watchers = [];\n        self.watchersWithoutDuplicates = [];\n\n        self.count = function (element) {\n            countWatchers($rootElement);\n            removeDuplications();\n            return self.watchersWithoutDuplicates.length;\n        };\n\n        /**\n         * loop over the scopes and populate the watchers array\n         *\n         * @param element\n         */\n        function countWatchers (element) {\n            angular.forEach(['$scope', '$isolateScope'], function (scopeProperty) {\n                if (element.data() && element.data().hasOwnProperty(scopeProperty)) {\n                    angular.forEach(element.data()[scopeProperty].$$watchers, function (watcher) {\n                        self.watchers.push(watcher);\n                    });\n                }\n            });\n\n            angular.forEach(element.children(), function (childElement) {\n                countWatchers(angular.element(childElement));\n            });\n        }\n\n        /**\n         * build an duplications free watcher array\n         */\n        function removeDuplications () {\n            angular.forEach(self.watchers, function(item) {\n                if(self.watchersWithoutDuplicates.indexOf(item) < 0) {\n                    self.watchersWithoutDuplicates.push(item);\n                }\n            });\n        }\n\n    }\n\n    kUI.service('DigestCounter',['$rootScope',DigestCounter]);\n    kUI.service('WatcherCounter',['$rootElement',WatcherCounter]);\n}());\n","(function()\n{\n    \"use strict\";\n\n    var module = angular.module('kaPlayerViewControl',['kProducerActions']);\n\n    module.constant('PLAYER_VIEW_MODE',\n        {\n            SBS_VIDEO_IN_RIGHT : 'sbs-parent-in-right',\n            SBS_VIDEO_IN_LEFT: 'sbs-parent-in-left',\n            PIP_VIDEO_SMALL: 'pip-parent-in-small',\n            PIP_VIDEO_LARGE: 'pip-parent-in-large',\n            VIDEO_ONLY: 'parent-only',\n            NO_PARENT: 'no-parent'\n        });\n\n    module.constant('PLAYER_VIEW_STATE',\n        {\n            LOCKED : 'locked',\n            UNLOCKED: 'unlocked'\n        });\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider) {\n        kProducerActionsProvider.registerAction('change-view-mode','codeCuePoint.Code', {});\n    }\n\n    angular.module('kaPlayerViewControl').config(registerAdapter);\n\n})();","(function () {\n    \"use strict\";\n\n    function Directive() {\n        function Controller($scope, kaPlayerViewControlsService) {\n\n            var self = this;\n\n            function switchView(buttonsViewId) {\n                var viewMode = self.buttonsModes[buttonsViewId];\n                viewMode.mainType = viewMode.mainType === 'presentation' ? 'video' : 'presentation';\n\n                if (self.buttonsModes[buttonsViewId].isActive)\n                {\n                    updateServerOnChange();\n                }\n            }\n\n            function unSelectAllViews()\n            {\n                self.buttonsModes.sbs.isActive = false;\n                self.buttonsModes.pip.isActive = false;\n                self.buttonsModes.single.isActive = false;\n            }\n\n            function selectView(buttonsViewId)\n            {\n                unSelectAllViews();\n\n                self.buttonsModes[buttonsViewId].isActive = true;\n\n                updateServerOnChange();\n\n            }\n\n            function updateServerOnChange()\n            {\n                var activeButtonServerId = getServerModeIdOfActive();\n\n                if (activeButtonServerId)\n                {\n                    kaPlayerViewControlsService.changeViewById(activeButtonServerId);\n                }\n            }\n\n\n            function getServerModeIdOfActive()\n            {\n                var serverModeId;\n\n                var activeButtonId = _.findKey(self.buttonsModes,{isActive : true});\n\n                if (activeButtonId)\n                {\n                    switch(activeButtonId)\n                    {\n                        case 'pip':\n                            serverModeId = self.buttonsModes['pip'].mainType === 'video' ? 'pip-parent-in-large' : 'pip-parent-in-small';\n                            break;\n                        case 'sbs':\n                            serverModeId = self.buttonsModes['sbs'].mainType === 'video' ? 'sbs-parent-in-left' : 'sbs-parent-in-right';\n                            break;\n                        case 'single':\n                            serverModeId = self.buttonsModes['single'].mainType === 'video' ? 'parent-only' : 'no-parent';\n                            break;\n                    }\n                }\n\n                return serverModeId;\n            }\n            function updateModesFromServer(serverViewId)\n            {\n                unSelectAllViews();\n\n                switch (serverViewId)\n                {\n                    case 'sbs-parent-in-right':\n                        self.buttonsModes.sbs.isActive = true;\n                        self.buttonsModes.sbs.mainType = 'presentation';\n                        break;\n                    case 'sbs-parent-in-left':\n                        self.buttonsModes.sbs.isActive = true;\n                        self.buttonsModes.sbs.mainType = 'video';\n                        break;\n                    case 'pip-parent-in-small':\n                        self.buttonsModes.pip.isActive = true;\n                        self.buttonsModes.pip.mainType = 'presentation';\n                        break;\n                    case 'pip-parent-in-large':\n                        self.buttonsModes.pip.isActive = true;\n                        self.buttonsModes.pip.mainType = 'video';\n                        break;\n                    case 'parent-only':\n                        self.buttonsModes.single.isActive = true;\n                        self.buttonsModes.single.mainType = 'video';\n                        break;\n                    case 'no-parent':\n                        self.buttonsModes.single.isActive = true;\n                        self.buttonsModes.single.mainType = 'presentation';\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            function init()\n            {\n                updateModesFromServer(kaPlayerViewControlsService.getCurrentViewId());\n            }\n\n            self.selectView = selectView;\n            self.switchView = switchView;\n            self.buttonsModes = { pip : {isActive :false, mainType : 'video'},'sbs' : {isActive :false, mainType : 'presentation'}, 'single' : {isActive :false, mainType : 'video'}};\n\n            $scope.$on('kaPlayerViewControlsService.onPlayerViewModeIdChanged', function (event, args) {\n                updateModesFromServer(args.playerViewModeId);\n            });\n\n            init();\n        }\n\n        function Link(scope, element, attrs, ctrls) {\n            var ctrl = ctrls[0];\n\n        }\n\n        return {\n            restrict: 'A',\n            scope: {},\n            require: ['kaPlayerViewWidget'],\n            templateUrl: '../common/kaPlayerViewControl/directives/ka-player-view-widget.html',\n            controller: Controller,\n            link: Link,\n            controllerAs: 'vm',\n            bindToController: {}\n        };\n    }\n\n    angular.module('kaPlayerViewControl').directive('kaPlayerViewWidget', Directive);\n\n})();","(function () {\n    \"use strict\";\n\n    function Directive() {\n        function Controller() {\n\n            var self = this;\n\n        }\n\n        function Link(scope, element, attrs, ctrls) {\n\n        }\n\n        return {\n            restrict: 'A',\n            scope: {},\n            templateUrl: '../common/kaPlayerViewControl/directives/ka-player-view-button.html',\n            controller: Controller,\n            link: Link,\n            controllerAs: 'vm',\n            bindToController: {\n                mode : '=',\n                viewId : '@',\n                videoSvgId : '@',\n                presentationSvgId : '@',\n                selectView : '&',\n                switchView : '&'\n            }\n        };\n    }\n\n    angular.module('kaPlayerViewControl').directive('kaPlayerViewButton', Directive);\n\n})();","(function () {\n    \"use strict\";\n\n    function Directive() {\n        function Controller($scope, $rootScope,kProducerActions,kaPlayerViewControlsService) {\n\n            var self = this;\n            var dropdownId = 'player-view-mode';\n\n            function toggleDropdown()\n            {\n                $rootScope.$broadcast('ka-dropdown-toggle-request',{id : dropdownId});\n            }\n\n\n            function syncCurrentViewIcon()\n            {\n                // update the current state svg name (empty string will be provided is no current view found)\n                self.currentStateSVGName = kaPlayerViewControlsService.getCurrentViewSVGName();\n            }\n\n            self.toggleDropdown = toggleDropdown;\n\n            $scope.$on('ka-dropdown-is-open-mode',function(e,args) {\n                // handle only the relevant detached dropdown\n                if (dropdownId === args.id)\n                {\n                    self.isOpen = args.isOpen;\n                }\n            });\n\n            $scope.$on('kaPlayerViewControlsService.onPlayerViewModeIdChanged', function (event, args) {\n                syncCurrentViewIcon();\n            });\n\n            kProducerActions.isReady().then(function()\n            {\n               syncCurrentViewIcon();\n            });\n\n\n        }\n\n        function Link(scope, element, attrs, ctrls) {\n            var ctrl = ctrls[0];\n\n\n\n\n        }\n\n        return {\n            restrict: 'A',\n            scope: {},\n            require: ['kaPlayerViewToggle'],\n            templateUrl: '../common/kaPlayerViewControl/directives/ka-player-view-toggle.html',\n            controller: Controller,\n            link: Link,\n            controllerAs: 'vm',\n            bindToController: {}\n        };\n    }\n\n    angular.module('kaPlayerViewControl').directive('kaPlayerViewToggle', Directive);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function () {\n    \"use strict\";\n\n    function Service(kProducerActions,$rootScope, captureService, PLAYER_VIEW_STATE) {\n        var self = this;\n\n        var currentViewModeId = null;\n        var currentViewModeState = null;\n        var RecordingStateChangedUnregister = null;\n\n        var supportedViews = {\n            'sbs-parent-in-right': { svg : 'player-view-sbs-2'},\n            'sbs-parent-in-left': {svg : 'player-view-sbs'},\n            'pip-parent-in-small': { svg : 'player-view-pip-2'},\n            'pip-parent-in-large': { svg : 'player-view-pip'},\n            'parent-only': {svg : 'player-view-single'},\n            'no-parent': {svg : 'player-view-single-2'}\n        };\n\n        /**\n         * check if producer app is updated with the most relevant player view mode\n         */\n        function onProducerStateChanged() {\n\n            var newViewMode = kProducerActions.getState('actions.change-view-mode');\n\n            if (newViewMode && newViewMode.playerViewModeId)\n            {\n                var state = newViewMode.viewModeLockState ? newViewMode.viewModeLockState : PLAYER_VIEW_STATE.UNLOCKED;\n                changeViewById(newViewMode.playerViewModeId, state);\n            }\n\n        }\n\n\n\n        function getCurrentViewId() {\n            return currentViewModeId;\n        }\n\n        function getCurrentViewState()\n        {\n            return currentViewModeState;\n        }\n\n        /**\n         * changes the player view mode\n         * @param viewId player view mode id\n         * @param viewState indicates if the player view mode is locked or not\n         */\n        function changeViewById(viewId, viewState) {\n            if ( (viewId && viewId !== currentViewModeId && _.has(supportedViews,viewId)) ||\n                    (viewState && viewState !== currentViewModeState) ) {\n                currentViewModeId = viewId;\n                currentViewModeState = viewState ? viewState : PLAYER_VIEW_STATE.UNLOCKED;\n                updateServer();\n                notifyViewModeIdChange();\n            }\n        }\n\n\n        function notifyViewModeIdChange()\n        {\n            $rootScope.$broadcast('kaPlayerViewControlsService.onPlayerViewModeIdChanged',{playerViewModeId:  currentViewModeId});\n        }\n\n        function onRecordingStateChanged() {\n            if (captureService.isBroadcasting()) {\n                klog.info('boradcasting is on, check if need to force default view');\n\n                var playerViewActionContent = kProducerActions.getState('actions.change-view-mode',null);\n                var poscastingType = kProducerActions.getState('podcasting.type',null);\n\n                if (!playerViewActionContent && !poscastingType)\n                {\n                    klog.info('Started broadcasting without slides, make sure control view is changed to video only');\n                    changeViewById(configuration.defaultViewWhenBroadcastingWithoutSlides, PLAYER_VIEW_STATE.LOCKED);\n                }\n\n                if (RecordingStateChangedUnregister)\n                {\n                    klog.info('unregister monitoring changes in recording state');\n                    RecordingStateChangedUnregister();\n                    RecordingStateChangedUnregister = null;\n                }\n            }\n        }\n\n\n\n        function init() {\n            // make sure we fetched all cue points currently exists on the server\n            kProducerActions.isReady().then(function()\n            {\n                if (captureService.isBroadcasting()) {\n                    onRecordingStateChanged();\n                }else {\n                    klog.info('Currently not broadcasting, monitor broadcasting mode.');\n                    RecordingStateChangedUnregister = $rootScope.$on('RecordingStateChanged', onRecordingStateChanged);\n                }\n\n                // listen to changes from server and act accordingly\n                kProducerActions.subscribeStateChange(function() {\n                    \n                    onProducerStateChanged();\n                });\n\n                // run sync from server once to sync producer state (if server doesn't contain any relevant cuepoint)\n                onProducerStateChanged();\n            });\n        }\n\n        /**\n         * Updates the server with a modification of the current player view mode\n         */\n        function updateServer() {\n            // don't update server if no view was selected\n            if (currentViewModeId) {\n                klog.info('update server with state change. \"playerViewModeId\" = \"{0}\" and \"viewModeLockState\" = {1}',\n                    currentViewModeId, currentViewModeState);\n                kProducerActions.setStateOrientedAction('change-view-mode',\n                    {\n                        playerViewModeId: currentViewModeId,\n                        viewModeLockState : currentViewModeState\n                    });\n            }\n        }\n\n\n        /**\n         * Returns the svg name of current view\n         */\n        function getCurrentViewSVGName() {\n            var currentViewId = getCurrentViewId();\n\n            if (currentViewId && supportedViews[currentViewId])\n            {\n                return supportedViews[currentViewId].svg;\n            }else\n            {\n                return '';\n            }\n        }\n\n        self.getCurrentViewSVGName = getCurrentViewSVGName;\n        self.getCurrentViewId = getCurrentViewId;\n        self.getCurrentViewState = getCurrentViewState;\n        self.changeViewById = changeViewById;\n\n        init();\n    }\n\n    angular.module('kaPlayerViewControl').service('kaPlayerViewControlsService', Service);\n\n})();","(function()\n{\n    \"use strict\";\n\n    var module = angular.module('kProducerActions',['kAPI']);\n\n\n    module.config(function()\n    {\n\n\n    });\n\n    module.run(function()\n    {\n\n    });\n})();","/* globals _ */\n/* globals Promise */\n\n\n(function () {\n    \"use strict\";\n\n    function Provider(cuePointsServiceProvider) {\n\n\n        /**************************\n         Config phase members only(!)\n         ***************************/\n\n        var actionsFactoriesByTypes = {};\n        var actionsConfigurationByName = {};\n\n        function Service(cuePointsService, kalturaAPI, $rootScope, $q, $injector, captureService)\n        {\n            var self = this;\n            var actionHandlersByName = {};\n            var actionHandlersByActionId = {};\n            var lastTransmittedActionByTypeMapping = {}; // this hash stores information about the last **transmitted** action (ignoring changes of the action from the producer state)\n            var producerState = null;\n            var instanceActionsContentByIdMapping = {};\n            var stateActionsHistory = {};\n            var stateChangeSubscribers = [];\n            var instanceChangeSubscribers = [];\n            var isReadyPromise = null;\n            var producerInternalStateTag = 'webcast:internal-state';\n            var lastUsedUniqueNumber = 0;\n\n            /**\n             * Generates a number which is unique locally (might be generated also in other producers).\n             * @returns {number}\n             */\n            function generateLocalUniqueNumber() {\n                var date = Date.now();\n\n                // If created at same millisecond as previous\n                if (date <= lastUsedUniqueNumber) {\n                    date = ++lastUsedUniqueNumber;\n                } else {\n                    lastUsedUniqueNumber = date;\n                }\n\n                return date;\n            }\n\n            function actionContentAdapterAPI(currentActionName)\n            {\n                return {\n                    getCurrentActionName : function()\n                    {\n                        return currentActionName;\n                    },\n                    isNewContent: function (actionName, actionContent) {\n                        var lastTransmittedContent =  this.getLastTransmittedContent(actionName);\n                        return (!lastTransmittedContent || !angular.equals(lastTransmittedContent, actionContent));\n                    },\n                    getLastTransmittedContent: function (actionName) {\n                        var result = null;\n\n                        if (actionName) {\n                            var actionHandler = actionHandlersByName[actionName];\n\n                            if (actionHandler) {\n                                var lastActionContext = lastTransmittedActionByTypeMapping[actionHandler.name];\n                                result = lastActionContext ? lastActionContext.content : null;\n                            }\n                        }\n\n                        return result;\n                    },\n                    getLastTransmittedAction: function (actionName) {\n                        if (actionName) {\n                            var actionHandler = actionHandlersByName[actionName];\n\n                            if (actionHandler) {\n                                var lastActionContext = lastTransmittedActionByTypeMapping[actionHandler.name];\n                                return lastActionContext;\n                            }\n                        }\n                    }\n                };\n            }\n\n            function createActionContext(cuepoint) {\n                var result = null;\n\n                if (cuepoint) {\n                    var actionName = _.findKey(actionHandlersByName, function (actionHandler) {\n                        var isOfAction = cuepoint.tags && cuepoint.tags.indexOf(actionHandler.name) >= 0;\n                        return isOfAction && (actionHandler.cuePointType === actionHandler.cuePointType);\n                    });\n\n                    var actionHandler = actionName ? actionHandlersByName[actionName] : null;\n\n                    if (actionHandler) {\n                        var cuepointIdTokens = (cuepoint && cuepoint.tags) ? cuepoint.tags.match(/id:([^, ]*)/) : null;\n                        var actionId = cuepointIdTokens ? cuepointIdTokens[1] : null;\n\n                        result = {\n                            actionHandler: actionHandler,\n                            isProducerAction: false,\n                            createdAt: cuepoint.createdAt * 1000,\n                            id: actionId,\n                            name: actionHandler.name,\n                            content: actionHandler.extractContentFromCuePoint(cuepoint)\n                        };\n                    } else if (cuepoint.tags && cuepoint.tags.indexOf(producerInternalStateTag) !== -1) {\n                        result = {\n                            actionHandler: actionHandler,\n                            isProducerAction: true,\n                            createdAt: cuepoint.createdAt * 1000,\n                            id: cuepoint.id,\n                            name: producerInternalStateTag,\n                            content: JSON.parse(cuepoint.partnerData)\n                        };\n                    }\n                }\n\n                return result;\n            }\n\n\n            function handleOnAirMode(isPreviewMode) {\n\n                if (!captureService.isBroadcasting()) {\n                    return;\n                }\n\n                if (!isPreviewMode) {\n                    klog.info(\"reseting lastTransmittedActionByTypeMapping\")\n                    lastTransmittedActionByTypeMapping={};\n                }\n\n                // TODO [es] make sure we 'fetched' actions in an acceptable time before transmitting actions\n\n                _.each(actionHandlersByName,function(actionHandler)\n                {\n                    if (actionHandler.transmitMode === 'on-air-only') {\n                        klog.debug('kProducerActions.handleOnAirMode(): action \\'{0}\\' transmit mode set to \\'on-air-only\\' check if need to send action content', actionHandler.name);\n                        var actionContentFromState = producerState.actions[actionHandler.name];\n\n                        if (actionContentFromState) {\n                            klog.debug('kProducerActions.handleOnAirMode(): found action content to transmit.');\n\n                            var api = actionContentAdapterAPI(actionHandler.name);\n\n                            var shouldTransmitAction = actionHandler.checkContentRelevancy(producerState, actionContentFromState, api);\n                            if (shouldTransmitAction) {\n                                if (!_.isBoolean(shouldTransmitAction)) {\n                                    klog.warn('kProducerActions.handleOnAirMode(): calling should transmit function of action handler {0} must return boolean indicating if state modified', actionHandler.name);\n                                }else\n                                {\n                                    klog.debug('kProducerActions.handleOnAirMode(): action content passed relevancy check and returned \\'{0}\\'', shouldTransmitAction);\n                                }\n\n                                if (shouldTransmitAction) {\n                                    klog.info('kProducerActions.handleOnAirMode(): transmitting action content for \\'{0}\\'', actionHandler.name);\n                                    setStateOrientedAction(actionHandler.name, actionContentFromState, true);\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n\n            function initializeProducerState(newProducerState)\n            {\n                producerState = _.extend({actions:{}},newProducerState);\n            }\n\n            function updateProducerState(actionName,actionContent) {\n                var actionHandler = actionHandlersByName[actionName];\n\n                if (!actionHandler) {\n                    throw new Error('requested name \"'+ actionName +'\" has no matching adapter, ignoring value');\n                }\n\n                var currentActionContent = producerState.actions[actionName];\n                var hasModifiedSharedContent = false;\n                var hasModifiedActionContent = currentActionContent ? !angular.equals(currentActionContent, actionContent) : true;\n\n                if (hasModifiedActionContent)\n                {\n                    producerState.actions[actionName] = actionContent;\n                }\n\n                if (_.isFunction(actionHandler.updateState))\n                {\n                    hasModifiedSharedContent = actionHandler.updateState(producerState, actionContent);\n\n                    if (!_.isBoolean(hasModifiedSharedContent))\n                    {\n                        klog.warn('kProducerActions.createProducerActionContext(): calling update state of action handler {0} must return boolean indicating if state modified', actionName);\n                    }\n                }\n\n                return (hasModifiedActionContent || hasModifiedSharedContent);\n            }\n\n\n\n\n\n            function fixActionContent(actionHandler,actionContent)\n            {\n                if (_.isObject(actionContent) && _.isEmpty(actionContent))\n                {\n                    if (actionHandler.emptyContentMode === 'fix-automatically')\n                    {\n                        klog.info('kProducerActions.fixActionContent(): requested action \\'{0}\\' content is empty and action handle has automatic fix mode enabled. adding a unique identifier to content\"', actionHandler.name);\n\n                        var dirt = getState('actions.' + actionHandler.name + '.__unique_id',0);\n                        dirt++;\n                        actionContent.__unique_id = dirt;\n                    }\n                }\n            }\n\n            function validateStateActionContent(actionContent)\n            {\n                if (!_.isObject(actionContent))\n                {\n                    klog.warn('kProducerActions.validateStateActionContent(): requested content must be object type');\n                    return false;\n                }else if (_.isEmpty(actionContent))\n                {\n                    klog.warn('kProducerActions.validateStateActionContent(): requested content cannot be empty object');\n                    return false;\n                }\n\n                return true;\n            }\n\n            function validateInstanceActionContent(actionContent)\n            {\n                if (!_.isObject(actionContent))\n                {\n                    klog.warn('kProducerActions.validateInstaceActionContent(): action content must be object type');\n                    return false;\n                }\n\n                return true;\n            }\n\n            function setStateOrientedAction(actionName,actionContent,forceActionTransmit) {\n\n                // make sure required arguments are provided\n                if (!actionName || !_.isString(actionName) || !_.isObject(actionContent)) {\n                    throw new Error('kProducerActions.setStateOrientedAction():missing arguments (did you provide an action name and a context object?)');\n                }\n\n                klog.info('kProducerActions.setStateOrientedAction(): preparing cue point request for action \"{0}\"', actionName);\n\n                var actionHandler = actionHandlersByName[actionName];\n\n                if (actionHandler) {\n\n                    fixActionContent(actionHandler,actionContent);\n\n                    if (!validateStateActionContent(actionContent))\n                    {\n                        klog.warn('kProducerActions.setStateOrientedAction(): requested action \"{0}\" content is invalid, ignoring set request', actionName);\n                        return;\n                    }\n\n                    // update producer state\n                    var producerStateWasUpdated = updateProducerState(actionName, actionContent);\n\n                    if (forceActionTransmit || producerStateWasUpdated) {\n\n\n                        if (actionHandler.transmitMode !== 'on-air-only' || captureService.isBroadcasting()) {\n                            // transmit action content\n\n\n                            cuePointsService.suspendCuePointFetching(function () {\n\n                                var api = actionContentAdapterAPI(actionHandler.name);\n\n\n\n                                return $injector.invoke(actionHandler.transmitState, actionHandler, {content: actionContent, api: api}).then(function (cuePoint) {\n                                    if (cuePoint) {\n                                        klog.info(\"transmitted state action resulted with cuepoint with id '{0}'\", cuePoint.id);\n                                    }\n                                }, function (reason) {\n                                    klog.error(reason);\n                                });\n\n                            }, actionHandler.name);\n                        } else {\n                            // transmit producer state content\n                             cuePointsService.suspendCuePointFetching(function () {\n                                return kalturaAPI.cuePointService.createCodeCuePoint({\n                                    partnerData: producerState,\n                                    mediaEntryId: configuration.MediaEntryId,\n                                    tags: producerInternalStateTag\n                                }).then(function (cuePoint) {\n                                    if (cuePoint) {\n                                        klog.info(\"transmitted producer state resulted with cuepoint with id '{0}'\", cuePoint.id);\n                                    }\n                                }, function (reason) {\n                                    klog.error(reason);\n                                });\n                            });\n                        }\n\n                        notifyProducerStateChanged('changed-by-producer');\n                    }\n                }else\n                {\n                    klog.info('kProducerActions.updateProducerState(): requested name \"{0}\" has no matching adapter, ignoring action', actionName);\n                }\n\n            }\n\n\n            function createInstanceOrientedAction(actionName, actionContent)\n            {\n                // make sure required arguments are provided\n                if (!actionName || !_.isString(actionName) || !_.isObject(actionContent)) {\n                    throw new Error('kProducerActions.createInstanceOrientedAction():missing arguments (did you provide an action name and a context object?)');\n                }\n\n                klog.info('kProducerActions.updateInstanceOrientedAction(): preparing cue point request for action name \"{0}\"', actionName);\n\n                var actionHandler = actionHandlersByName[actionName];\n\n                return setInstanceData(actionHandler, actionContent, null);\n            }\n\n            function updateInstanceOrientedAction(actionContent, actionId)\n            {\n                // make sure required arguments are provided\n                if (!actionId || !_.isObject(actionContent)) {\n                    throw new Error('kProducerActions.updateInstanceOrientedAction():missing arguments (did you provide an action id and a content object?)');\n                }\n\n                klog.info('kProducerActions.updateInstanceOrientedAction(): preparing cue point request for actionId \"{0}\"', actionId);\n\n                var actionHandler = actionHandlersByActionId[actionId];\n\n                return setInstanceData(actionHandler, actionContent, actionId);\n\n            }\n\n            /**\n             * create new or update existing instance oriented data cue point\n             * @param actionHandler\n             * @param actionContent\n             * @param actionId if need to update current cue point\n             * @returns {Promise} cue point object is resolved successfully\n             */\n            function setInstanceData(actionHandler, actionContent, actionId)\n            {\n                var deferred = $q.defer();\n\n                if (actionHandler) {\n\n                    if (!validateInstanceActionContent(actionContent))\n                    {\n                        klog.warn('kProducerActions.setInstanceData(): requested action \"{0}\" content is invalid, ignoring set request', actionHandler.name);\n                        return;\n                    }\n\n                    var uniqueIdPromise = actionId ?  {id : actionId} : kalturaAPI.pollsService.addPollObject().then(function(pollObjectId) {\n                            return {id :  pollObjectId};\n                        }\n                    );\n\n\n\n                    Promise.all([uniqueIdPromise]).then(function(results)\n                    {\n                        var actionId = results[0].id;\n\n                        klog.info(\"kProducerActions.setInstanceData(): sending action with id '{0}' and type '{1}'\", actionHandler.name, actionId);\n\n\n                        cuePointsService.suspendCuePointFetching(function () {\n\n                            return $injector.invoke(actionHandler.transmitInstance, actionHandler, {actionContent: actionContent, actionId: actionId}).then(function (cuePoint) {\n                                if (cuePoint) {\n                                    klog.info(\"transmitted instance action resulted with cuepoint with id '{0}'\", cuePoint.id);\n                                    var actionContext = createActionContext(cuePoint);\n                                    deferred.resolve({id : actionContext.id});\n                                }else {\n                                    deferred.reject({error: 'error while creating instance action cuepoint'});\n                                }\n                            }, function (reason) {\n                                klog.error(reason);\n                                deferred.reject(reason);\n                            });\n\n                        }, actionHandler.name + ( actionId ? '(' + actionId + ')' : ''))\n                            .catch(function(reason)\n                            {\n                                deferred.reject(reason);\n                            });\n\n                    },function(reason)\n                    {\n                        klog.error(reason);\n                        deferred.reject();\n                    });\n\n                } else {\n                    klog.info('kProducerActions.setInstanceData(): request has no matching adapter, ignoring action');\n                    deferred.reject();\n                }\n\n                return deferred.promise;\n            }\n\n\n\n            /**\n             * This method returns the requested instance related data\n             * *** note: the method doesn't return a copy of of the data ***\n             * @param type\n             * @param id\n             * @returns object of requested data\n             */\n            function getInstanceActionsContent(type, id) {\n                if(type) {\n                    var result = {};\n                    if(instanceActionsContentByIdMapping[type]) {\n                        if(id) {\n                            //will return an object {id : data}\n                            var resultContext = instanceActionsContentByIdMapping[type][id];\n                            if (resultContext) {\n                                result[id] = resultContext;\n                            }\n                        } else {\n                            //will return an object {id1 : data1, id2: data2 ... }\n                            result = instanceActionsContentByIdMapping[type];\n                        }\n                    }\n                    return result;\n                }\n                throw new Error('argument \"type\" is missing');\n            }\n\n            function createHandlers() {\n                _.each(actionsConfigurationByName, function (actionConfiguration) {\n                    var factory = actionsFactoriesByTypes[actionConfiguration.actionType];\n\n                    if (factory)\n                    {\n                        klog.debug(\"kProducerActions.createHandlers(): creating handler for '{0}' type '{1}'\",actionConfiguration.actionName,actionConfiguration.actionName);\n\n                        var handler = _.extend(\n                            {\n                                canBeDeleted: true\n                            },\n                                factory.create(actionConfiguration.actionData),\n                            {\n                                name : actionConfiguration.actionName\n                            }\n                        );\n\n                        actionHandlersByName[actionConfiguration.actionName] = handler;\n                    }\n                });\n            }\n\n\n            function handleFetchedCuePoints(cuePoints)\n            {\n                var producerStateModified = false;\n                var changedInstanceDataObjects = {};\n\n                klog.info(\"kProducerActions.handleFetchedCuePoints(): handling {0} new cue points\",cuePoints.length);\n\n                // build action context list\n                var cuePointsLength = cuePoints.length;\n                var actionContextList = [];\n                for(var i=0;i<cuePointsLength;i++)\n                {\n                    var cuePoint = cuePoints[i];\n\n                    if (cuePoint.actionState  === 'added')\n                    {\n                        var actionContext = createActionContext(cuePoint);\n\n                        if (actionContext)\n                        {\n                            actionContextList.push(actionContext);\n                        }\n\n                    }\n                }\n\n                _.chain(actionContextList).orderBy(['createdAt']).each(function(actionContext)\n                {\n                    if (!actionContext.isProducerAction) {\n\n                        var actionHandler = actionContext.actionHandler;\n\n                        //check if need to save to stateHistory object\n                        handleStateActionsHistory(actionContext);\n\n                        if (actionHandler.dataOrientation && actionHandler.dataOrientation === 'instance') {\n                            //deal with instance oriented data\n                            var handleResultStatus = handleInstanceOrientedAction(actionContext, actionHandler);\n                            if (handleResultStatus) {\n                                //add instance data object to changed data structure\n                                var type = actionHandler.name;\n                                if (!changedInstanceDataObjects[type]) {\n                                    changedInstanceDataObjects[type] = {status: {}};\n                                }\n\n                                changedInstanceDataObjects[type][actionContext.id] = actionContext.content;\n                                changedInstanceDataObjects[type].status[actionContext.id] = handleResultStatus;\n                            }\n                        } else {\n                            //deal with state oriented data\n                            if (handleStateOrientedAction(actionContext)) {\n                                producerStateModified = true;\n                            }\n                        }\n                    }else {\n                        if(handleProducerInternalStateAction(actionContext)) {\n                            producerStateModified = true;\n                        }\n                    }\n\n                }).value();\n\n                //state oriented changes\n                if (producerStateModified) {\n                    notifyProducerStateChanged('changed-by-server');\n                }\n                //instance oriented changes\n                if(!_.isEmpty(changedInstanceDataObjects)) {\n                    notifyInstanceOrientedActionsChanged(changedInstanceDataObjects);\n                }\n            }\n\n            function handleInstanceOrientedAction(actionContext, actionHandler)\n            {\n\n                var result = null;\n                var type = actionHandler.name;\n                var objId = actionContext.id;\n\n                var newContent = actionContext.content;\n                \n                if(!instanceActionsContentByIdMapping[type]) {\n                    //there is no instance object data with this type - need to add\n                    instanceActionsContentByIdMapping[type] = {};\n                    result = 'added';\n                } else {\n                    if(!instanceActionsContentByIdMapping[type][objId]) {\n                        //there are some objects of that type but with no the same id\n                        result = 'added';\n                    } else {\n                        //there is an object with the same id, need to check if there was a change is content\n                        var currentData = instanceActionsContentByIdMapping[type][objId];\n                        if (!_.isEqual(currentData, newContent)) {\n                            result = 'updated';\n                        }\n                    }\n                }\n\n                if(result) {\n                    instanceActionsContentByIdMapping[type][objId] = actionContext.content;\n                    actionHandlersByActionId[objId] = actionHandler;\n                }\n\n                return result;\n            }\n\n            function handleStateOrientedAction(actionContext)\n            {\n                var actionHandler = actionContext.actionHandler;\n                var handled = false;\n\n                if (actionHandler) {\n                    var actionContent = actionContext.content;\n\n                    // store the content of the last transmitted action by type\n                    lastTransmittedActionByTypeMapping[actionHandler.name] = actionContext;\n\n                    if (actionContent) {\n                        if (updateProducerState(actionHandler.name, actionContent)) {\n                            handled = true;\n                        }\n                    }\n                    else {\n                        klog.info('kProducerActions.handleFetchedCuePoints(): requested cuepoint with id {0} has no valid action content, ignoring cuepoint', actionContext.id);\n                    }\n                }\n                else {\n                    klog.info('kProducerActions.handleFetchedCuePoints(): requested cuepoint with id {0} has no matching adapter, ignoring cuepoint', actionContext.id);\n                }\n\n                return handled;\n            }\n\n            /**\n             * will add to stateActionsHistory object if action handler indicate to do so. (history flag is on)\n             * this function will also check relevant producer state actions for state changes and add to history\n             * @param actionContext\n             */\n            function handleStateActionsHistory(actionContext)\n            {\n                if(actionContext.isProducerAction) {\n                    var producerState = actionContext.content;\n                    if(producerState && producerState.actions) {\n                        //go over every action and check if history is enabled\n                        _.each(producerState.actions, function (actionData, actionName) {\n                            if(actionName && actionHandlersByName[actionName] &&\n                                actionHandlersByName[actionName].history === true) {\n                                addStateHistory(actionName, actionData);\n                            }\n                        });\n                    }\n                }else {\n                    var actionHandler = actionContext.actionHandler;\n\n                    if(actionHandler && actionHandler.history === true) {\n                        var actionData = actionContext.content;\n                        addStateHistory(actionHandler.name, actionData);\n                    }\n                }\n            }\n            \n            function addStateHistory(actionName, data)\n            {\n                if(!stateActionsHistory[actionName]) {\n                    stateActionsHistory[actionName] = [];\n                }\n                //get last state for req type and compare inorder not to save duplication\n                var last = _.last(stateActionsHistory[actionName]);\n                if(!last || !angular.equals(last, data)){\n                    stateActionsHistory[actionName].push(data);\n                }\n            }\n\n            function handleProducerInternalStateAction(actionContext) {\n\n                var handled = false;\n\n                var producerStateContent = actionContext.content;\n\n                if (producerStateContent) {\n                    if (!angular.equals(producerStateContent, producerState)) {\n                        klog.debug('kProducerActions.handleProducerInternalStateAction(): replacing producer state with new state provided by cuepoint with id {0}', actionContext.id);\n                        initializeProducerState(producerStateContent);\n                        handled = true;\n                    }else {\n                        klog.info('kProducerActions.handleProducerInternalStateAction(): producer state matches cue point {0} producer state. ignoring cue point', actionContext.id);\n                    }\n                }\n                else {\n                    klog.info('kProducerActions.handleProducerInternalStateAction(): requested cuepoint with id {0} has no valid producer state content, ignoring cuepoint', actionContext.id);\n                }\n\n                return handled;\n            }\n\n            function notifyProducerStateChanged(eventType)\n            {\n                _.each(stateChangeSubscribers, function (context) {\n                    try {\n                        if (!context.filterByType || context.filterByType === eventType) {\n                            context.subscriber({eventType :eventType});\n                        }\n                    } catch (e) {\n                        klog.error(e);\n                    }\n                });\n            }\n\n            function notifyInstanceOrientedActionsChanged(changedInstanceDataObjects)\n            {\n                _.each(instanceChangeSubscribers, function (context) {\n                    try {\n                        context.subscriber(changedInstanceDataObjects);\n                    } catch (e) {\n                        klog.error(e);\n                    }\n                });\n            }\n            \n            function isReady()\n            {\n                return isReadyPromise;\n            }\n            \n            function init() {\n                initializeProducerState({});\n\n                createHandlers();\n\n                isReadyPromise = new Promise(function(resolve,reject)\n                {\n                   cuePointsService.isReady().then(resolve,reject);\n                }).then(function()\n                {\n\n                    cuePointsService.on(function(cuePoints)\n                    {\n                        handleFetchedCuePoints(cuePoints);\n                    },'new-cuepoints-fetched');\n\n                    if (configuration.sendOnAirOnlyProducerActions) {\n\n                        $rootScope.$on('RecordingStateChanged', function (e, isLive, isPreviewMode) {\n                            if (isLive) {\n                                klog.info('CutPointsService.$onRecordingStateChanged(): Got \"onAir\" notification, handle actions \"on-air\" strategy');\n                                handleOnAirMode(isPreviewMode);\n                            }\n                        });\n\n                        $rootScope.$on('PreviewModeChanged', function (e, isPreviewMode) {\n                            if (!isPreviewMode) {\n                                klog.info('CutPointsService.PreviewModeChanged(): Got \"onAir\" notification, handle actions \"on-air\" strategy');\n                                handleOnAirMode(isPreviewMode);\n                            }\n                        });\n                    }\n\n\n\n                    handleFetchedCuePoints(cuePointsService.getAllCuepoints());\n\n                    $rootScope.$broadcast('produceractionsloaded');\n                    klog.info('raising produceractionsloaded event');\n                });\n            }\n\n            function subscribeStateChange(subscriber,filterByType)\n            {\n                stateChangeSubscribers.push({subscriber :subscriber , filterByType : filterByType});\n            }\n\n            function unsubscribeStateChange(subscriber)\n            {\n                var item = _.find(stateChangeSubscribers, {subscriber:subscriber});\n                if (item) {\n                    stateChangeSubscribers = _.without(stateChangeSubscribers, item);\n                }\n            }\n\n            /**\n             * subscribe to instance change notifications\n             * @param subscriber\n             */\n            function subscribeInstanceChange(subscriber)\n            {\n                instanceChangeSubscribers.push({subscriber :subscriber});\n            }\n\n            /**\n             * subscribe to instance change notifications\n             * @param subscriber\n             */\n            function unsubscribeInstanceChange(subscriber)\n            {\n                var item = _.find(instanceChangeSubscribers, {subscriber:subscriber});\n                if (item) {\n                    instanceChangeSubscribers = _.without(instanceChangeSubscribers, item);\n                }\n            }\n\n            function getState(path, defaultValue)\n            {\n                // TODO [es] consider cloning that object to prevent modification by user\n                if (_.isBoolean(path) && path)\n                {\n                    return producerState;\n                }\n                return _.get(producerState,path,defaultValue);\n            }\n\n            /**\n             * will return the cue points history of requested type\n             * if action type doesn't support state history an empty array will be returned\n             * @param type action name\n             * @returns {Array} of requested action type history\n             */\n            function getStateActionHistory(type)\n            {\n                return (stateActionsHistory && stateActionsHistory[type]) ? stateActionsHistory[type] : [];\n            }\n\n            function setStateOrientedActionByUser(actionName,actionContent)\n            {\n                setStateOrientedAction(actionName,actionContent,false);\n            }\n\n            function retransmitInstanceOrientedActions()\n            {\n                var deferredPromises = [];\n                //iterating over all instance actions and retransmitting them\n                _.forEach(instanceActionsContentByIdMapping, function (actionsIds, actionType) {\n                    _.forEach(actionsIds, function (actionData, actionId) {\n                        deferredPromises.push(updateInstanceOrientedAction(actionData, actionId));\n                    });\n                });\n\n                return $q.all(deferredPromises);\n            }\n\n            self.getState = getState;\n            self.isReady = isReady;\n            self.subscribeStateChange = subscribeStateChange;\n            self.unsubscribeStateChange = unsubscribeStateChange;\n            self.subscribeInstanceChange = subscribeInstanceChange;\n            self.unsubscribeInstanceChange = unsubscribeInstanceChange;\n            self.setStateOrientedAction = setStateOrientedActionByUser;\n            self.createInstanceOrientedAction = createInstanceOrientedAction;\n            self.updateInstanceOrientedAction = updateInstanceOrientedAction;\n            self.getInstanceActionsContent = getInstanceActionsContent;\n            self.getStateActionHistory = getStateActionHistory;\n            self.retransmitInstanceOrientedActions = retransmitInstanceOrientedActions;\n\n            init();\n        }\n\n        function registerActionHandlerFactory(type, factory)\n        {\n            if (!_.isObject(factory) || !_.isString(type) || !type ) {\n                throw new Error('arguments missing (did you forget to provide a valid ,type or factory object?)');\n            }\n\n            if (actionsFactoriesByTypes[type]) {\n                throw new Error('factory for type ' + type + ' already registered');\n            }\n\n            klog.debug(\"kProducerActions.registerActionHandlerFactory(): register fatory for handler type '{0}'\",type);\n            actionsFactoriesByTypes[type] = factory;\n        }\n\n        function registerAction(name, type, data) {\n            if (!_.isObject(data) || !_.isString(name) || !_.isString(type) || !name || !type) {\n                throw new Error('arguments missing (did you forget to provide a valid name,type or action data?)');\n            }\n\n            if (actionsConfigurationByName[name]) {\n                throw new Error('action with name ' + name + ' already registered');\n            }\n\n            klog.debug(\"kProducerActions.registerAction(): register action '{0}' type '{1}'\",name,type);\n            actionsConfigurationByName[name] = {actionType : type,actionName : name, actionData : data};\n\n            cuePointsServiceProvider.addKwpUsedTags(name);\n        }\n\n        this.registerAction = registerAction;\n        this.registerActionHandlerFactory = registerActionHandlerFactory;\n\n        this.$get = function ($injector) {\n\n            return $injector.instantiate(Service);\n        };\n\n        cuePointsServiceProvider.addKwpUsedTags('webcast:internal-state');\n    }\n\n    angular.module('kProducerActions').provider('kProducerActions', Provider);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n\n\n    function registerActionHandlerFactory(kProducerActionsProvider) {\n\n        function ActionHandlerFactory()\n        {\n            function validateData(actionData)\n            {\n                var errorMessage = '';\n\n                if(actionData)\n                {\n                    if (actionData.transmitMode)\n                    {\n                        if (['always','on-air-only'].indexOf(actionData.transmitMode) === -1)\n                        {\n                            errorMessage += \"property 'transmitMode' value '\" + actionData.transmitMode + \"' is invalid (acceptable values are '{empty}', 'always','on-air-only'\\n\";\n                        }\n\n                        if(actionData.dataOrientation) {\n                            if(actionData.transmitMode !== 'always' && (actionData.dataOrientation === 'instance'))\n                            {\n                                errorMessage += \"Instance data oriented action is valid only for 'transmitMode = always'\";\n                            }\n                        }\n                    }\n                }\n\n\n                if (errorMessage)\n                {\n                    klog.error(errorMessage);\n                    return false;\n                }else\n                {\n                    return true;\n                }\n            }\n            function create(actionData)\n            {\n                if (!validateData(actionData))\n                {\n                    throw new Error(\"action data is invalid. please review logs and modify\");\n                }\n\n                return _.extend({\n                    transmitMode : 'on-air-only',\n                    emptyContentMode : 'fix-automatically',\n                    checkContentRelevancy : function(state,actionContent,api) {\n                        var actionName = api.getCurrentActionName();\n                        return api.isNewContent(actionName, actionContent);\n                    },\n                    extractContentFromCuePoint: function (cuePoint) {\n                        return cuePoint && cuePoint.partnerData ? (_.isString(cuePoint.partnerData) ? JSON.parse(cuePoint.partnerData) : cuePoint.partnerData) : null;\n                    },\n                    transmitState: function (cuePointsService, content, api, kalturaAPI, captureService) {\n                        // add create code cue point request to queue\n                        klog.info('codeCuePointAdapter.transmit(): transmitting add cue point request');\n                        var tags=this.name;\n\n                        var previewMode = captureService.isPreviewMode();\n                        if (previewMode) {\n                            //todo: fix player to support __PREVIEW_CUEPOINT_TAG__ in polls and view modes\n                            //tags+=\", \"+kProducerActionsProvider.__PREVIEW_CUEPOINT_TAG__;\n                        }\n\n                        var apiRequest = {\n                            partnerData: content,\n                            tags: tags,\n                            mediaEntryId: configuration.MediaEntryId\n                        };\n\n                        return kalturaAPI.cuePointService.createCodeCuePoint(apiRequest).then( function (cuePoint) {\n                            //mark as handled so it won't be copied to VOD\n                            if (previewMode) {\n                                klog.info(\"code-cue-point_code.js: updateStatus as handled for  \" + cuePoint.id);\n                                return kalturaAPI.cuePointService.updateStatus(cuePoint.id,3).then( function() {\n                                    return cuePoint;\n                                });\n                            }\n                            return cuePoint;\n                        });\n                    },\n                    transmitInstance: function (cuePointsService, actionContent, actionId, kalturaAPI) {\n                        klog.info(\"codeCuePointAdapter.transmitInstance(): transmitting action with id '\" + actionId + \"'\");\n                        klog.debug(actionContent);\n\n                        var apiRequest = {\n                            actionId: actionId,\n                            actionName: this.name,\n                            actionContent: actionContent,\n                            mediaEntryId: configuration.MediaEntryId\n                        };\n\n                        return kalturaAPI.producerActionsService.createCodeCuepointAction(apiRequest);\n                    }\n                }, actionData,{\n                    cuePointType: 'codeCuePoint.Code'\n                });\n            }\n\n            this.create = create;\n\n        }\n\n        kProducerActionsProvider.registerActionHandlerFactory('codeCuePoint.Code',new ActionHandlerFactory());\n    }\n\n    angular.module('kProducerActions').config(registerActionHandlerFactory);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    function registerActionHandlerFactory(kProducerActionsProvider) {\n\n        function ActionHandlerFactory()\n        {\n            function validateData(actionData)\n            {\n                var errorMessage = '';\n\n                if(actionData)\n                {\n                    if (actionData.transmitMode)\n                    {\n                        if (actionData.transmitMode !== 'always' && actionData.transmitMode !== 'on-air-only')\n                        {\n                            errorMessage += \"property 'transmitMode' value '\" + actionData.transmitMode + \"' is invalid (acceptable value is 'always' | 'on-air-only')'\\n\";\n                        }\n\n                        if(actionData.dataOrientation) {\n                            if(actionData.dataOrientation !== 'instance' && actionData.dataOrientation !== 'state')\n                            {\n                                errorMessage += \"Supported data orientation is 'instance' or 'state'\";\n                            }\n                        }\n                    }\n                }\n\n                if (errorMessage)\n                {\n                    klog.error(errorMessage);\n                    return false;\n                }else\n                {\n                    return true;\n                }\n            }\n\n            function create(actionData)\n            {\n                if (!validateData(actionData))\n                {\n                    throw new Error(\"action data is invalid. please review logs and modify\");\n                }\n\n                return _.extend({\n                    transmitMode : 'always',\n                    dataOrientation: 'instance',\n                    extractContentFromCuePoint: function (cuePoint) {\n                        var content = {};\n                        if(cuePoint) {\n                            content.data = cuePoint.partnerData ?\n                                (_.isString(cuePoint.partnerData) ?\n                                    JSON.parse(cuePoint.partnerData) : cuePoint.partnerData) : null;\n                            content.text = cuePoint.text ?\n                                (_.isString(cuePoint.text) ?\n                                    JSON.parse(cuePoint.text) : cuePoint.text) : null;\n                            content.id = cuePoint.id ? cuePoint.id : null;\n                            content.parentId = cuePoint.parentId ? cuePoint.parentId : null;\n                        }\n\n                        return content;\n                    },\n                    transmitInstance: function (cuePointsService, actionContent, actionId, kalturaAPI) {\n                        klog.info(\"codeCuePointAdapter.transmitInstance(): transmitting action with id '\" + actionId + \"'\");\n                        klog.debug(actionContent);\n\n                        var apiRequest = {\n                            actionId: actionId,\n                            actionName: this.name,\n                            actionContent: actionContent,\n                            mediaEntryId: configuration.MediaEntryId\n                        };\n\n                        return kalturaAPI.producerActionsService.createCodeCuepointAction(apiRequest);\n                    }\n                }, actionData,{\n                    cuePointType: 'annotation.Annotation'\n                });\n            }\n\n            this.create = create;\n\n        }\n\n        kProducerActionsProvider.registerActionHandlerFactory('KalturaAnnotation',new ActionHandlerFactory());\n    }\n\n    angular.module('kProducerActions').config(registerActionHandlerFactory);\n\n})();","/* globals _ */\n/* globals PromisesQueue */\n/* globals Promise */\n\n(function() {\n    'use strict';\n\n    var documentBaseUrlMapping={};\n\n    documentBaseUrlMapping[\"MOCKSLIDES\"]=configuration.mockSlides.substring(0, configuration.mockSlides.lastIndexOf(\"/\")+1);\n\n    function registerActionHandlerFactory(kProducerActionsProvider) {\n\n        function ActionHandlerFactory()\n        {\n            function validateData(actionData)\n            {\n                var errorMessage = '';\n\n                if(actionData)\n                {\n                    if(actionData.dataOrientation && actionData.dataOrientation !== 'state'){\n                        errorMessage += \"property 'dataOrientation' value is invalid (acceptable value is 'state' only)\\n\";\n                    }\n                    if (actionData.transmitMode)\n                    {\n                        if (['always','on-air-only'].indexOf(actionData.transmitMode) === -1)\n                        {\n                            errorMessage += \"property 'transmitMode' value '\" + actionData.transmitMode + \"' is invalid (acceptable values are '{empty}', 'always','on-air-only'\";\n                        }\n                    }\n                }\n\n\n                if (errorMessage)\n                {\n                    klog.error(errorMessage);\n                    return false;\n                }else\n                {\n                    return true;\n                }\n            }\n\n            function create(actionData)\n            {\n                if (!validateData(actionData))\n                {\n                    throw new Error(\"action data is invalid. please review logs and modify\");\n                }\n\n                return _.extend({\n                    transmitMode : 'on-air-only',\n                    emptyContentMode : 'fix-automatically',\n                    dataOrientation: 'state',\n                    checkContentRelevancy : function(state,actionContent,api) {\n                        var lastActionCuePointContent = api.getLastTransmittedContent();\n                        return (!lastActionCuePointContent || !angular.equals(lastActionCuePointContent, actionContent));\n                    },\n                    extractContentFromCuePoint: function (cuePoint) {\n                        return cuePoint && cuePoint.partnerData ? (_.isString(cuePoint.partnerData) ? JSON.parse(cuePoint.partnerData) : cuePoint.partnerData) : null;\n                    },\n                    transmitState: function (content, kalturaAPI, captureService) {\n\n                        var _this=this;\n                        //limit thumb content length (avoiding url max length) - thumb description is for search purpose only\n                        if(content.content) {\n                            content.content = (content.content).substring(0, 600);\n                        }\n\n                        var baseUrl=documentBaseUrlMapping[content.documentEntryId];\n                        var baseUrlPromise;\n\n                        if (!baseUrl) {\n                            baseUrlPromise = kalturaAPI.flavorAssetService.list(content.documentEntryId, \"images\").then( function(result){\n\n                                //we want the base url, so the space here is important (otherwise it will omit the file_name in the url\n                                return kalturaAPI.flavorAssetService.getUrl(result.objects[0].id, \" \",true).then( function(result) {\n\n                                    return documentBaseUrlMapping[content.documentEntryId] = result.trim();\n\n                                });\n                            });\n                        } else {\n                            baseUrlPromise=Promise.resolve();\n                        }\n\n                        var tags=_this.name;\n                        if (captureService.isPreviewMode()) {\n                            tags+=\", \"+kProducerActionsProvider.__PREVIEW_CUEPOINT_TAG__;\n                        }\n\n                        return baseUrlPromise.then( function() {\n                            kalturaAPI.startMultirequest();\n                            kalturaAPI.cuePointService.add(configuration.MediaEntryId, content.title, content.content, content, tags);//1\n                            kalturaAPI.thumbAssetService.add(configuration.MediaEntryId, \"{1:result:id}\");//2\n                            kalturaAPI.thumbAssetService.setContent(\"{2:result:id}\", documentBaseUrlMapping[content.documentEntryId]+content.slideName);//3\n                            if (captureService.isPreviewMode()) {\n                                kalturaAPI.cuePointService.updateStatus(\"{1:result:id}\", 3);//mark as handled\n                            }\n                            return kalturaAPI.execMultirequest().then(function (res) {\n                                return Promise.resolve(res[0]);\n                            }, function () {\n                                return Promise.reject();\n                            });\n                        });\n                    }\n\n                }, actionData,{\n                    cuePointType: 'thumbCuePoint.Thumb'\n                });\n            }\n\n            this.create = create;\n\n        }\n\n        kProducerActionsProvider.registerActionHandlerFactory('codeCuePoint.Thumb',new ActionHandlerFactory());\n\n        kProducerActionsProvider.__PREVIEW_CUEPOINT_TAG__ = \"__PREVIEW_CUEPOINT_TAG__\";\n    }\n\n    angular.module('kProducerActions').config(registerActionHandlerFactory);\n\n})();","(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider, cuePointsServiceProvider) {\n\n        kProducerActionsProvider.registerAction('rtc-settings','codeCuePoint.Code', {transmitMode : 'always', DataOrientation: 'state'});\n        cuePointsServiceProvider.addTagToArchiveExcludeList('rtc-settings');\n\n    }\n\n    angular.module('kRTC').config(registerAdapter);\n\n})();","/**\n * Created by asafrobinovich on 16/03/16.\n */\n\n(function() {\n    'use strict';\n\n    function registerAdapter(kProducerActionsProvider, cuePointsServiceProvider) {\n        kProducerActionsProvider.registerAction('entry-reset-mode', 'codeCuePoint.Code', {transmitMode : 'always'});\n        cuePointsServiceProvider.addTagToArchiveExcludeList('entry-reset-mode');\n        cuePointsServiceProvider.addTagToArchiveExcludeList('webcast:internal-state');\n    }\n\n    angular.module('kEntryManagementModule',[]);\n\n    angular.module('kEntryManagementModule').config(registerAdapter);\n})();\n","/*jshint bitwise: false*/\n\n(function() {\n    'use strict';\n\n    function Service(cuePointsService, kalturaAPI, gettextCatalog, kdialog, kalturaService, captureService, sessionService, kProducerActions, $q, kCef, asyncLiveEntryInfoService) {\n        var self = this;\n        var openedDialog = null;\n        var lastResetEntryData = null;\n        var pushServerNotificationToClearOnArchive=[];\n        var archiveCustomActions = [];\n        var isAutoArchiveEnabled = false;\n\n        function needToForceArchive() {\n            return cuePointsService.hasUnHandledCuePoints() && sessionService.getRecordStatus() !== sessionService.RECORD_STATUS.DISABLED;\n        }\n\n        function resetEntry(){\n            sessionService.ready.then(function() {\n                kdialog.yesNoDialog({\n                    yesMessage: needToForceArchive() ? gettextCatalog.getString(\"Yes, force archive\") : gettextCatalog.getString(\"Yes, Continue\"),\n                    noMessage: gettextCatalog.getString(\"No, Go Back\"),\n                    title: gettextCatalog.getString(\"Archive Entry\"),\n                    message: getAreYouSureMessageText()\n                }).then(function () {\n                    kalturaAPI.login().then(function (ks) {\n                        kProducerActions.setStateOrientedAction('entry-reset-mode', { action: 'start', ksHash: getKSHash(ks) });\n                    });\n                });\n            });\n        }\n\n        function getAreYouSureMessageText(){\n            var message = gettextCatalog.getString(\"Archiving an entry will remove all entry data recorded so far, including slide cue points and Q&A.\");\n            if (sessionService.getRecordedEntryId() !== undefined && sessionService.getRecordedEntryId() !== \"\") {\n                message += \"<br>\" +gettextCatalog.getString(\"The VOD recording will be available under entry ID: \") + sessionService.getRecordedEntryId();\n            }\n            if (needToForceArchive()) {\n                message += \"<br><br><p style='color:red; font-size: 20px'>\" +gettextCatalog.getString(\"Webcast recording is still being processed.<br/>Forcing archive may result in missing slides on the recorded webcast. \") + \"</p>\";\n                message += \"<br><br>The operation is permanent and cannot be undone.<br>Are you sure you want to force archive?\";\n            }\n            else {\n                message += \"<br><br>The operation is permanent and cannot be undone.<br>Are you sure you want to continue?\";\n            }\n            return message;\n        }\n\n        function addPushServerNotificationsToClearOnArchive(templates_name) {\n\n            pushServerNotificationToClearOnArchive = pushServerNotificationToClearOnArchive.concat(templates_name);\n        }\n\n        function addArchiveCustomAction(fn) {\n            archiveCustomActions = archiveCustomActions.concat(fn);\n        }\n\n        function resetEntryInternal(mediaEntryId) {\n            var promises = [];\n            promises.push($q.when(cuePointsService.handleResetEntryDeleteCuePoint(mediaEntryId)));\n            promises.push(kProducerActions.retransmitInstanceOrientedActions());\n            promises.push($q.when(kalturaService.updateVODEntryAfterArchive(sessionService.getRecordedEntryId(),asyncLiveEntryInfoService.getCurrentEntryInfo())));\n            promises.push($q.when(kalturaService.deleteRecordedEntry(mediaEntryId)));\n            promises.push($q.when(kalturaService.clearPushServerNotifications(mediaEntryId,pushServerNotificationToClearOnArchive)));\n            _.each(archiveCustomActions, function(fn) {\n                promises.push(fn());\n            });\n\n            return $q.all(promises);\n        }\n\n        function onEntryResetNotStart(message){\n            if(openedDialog){\n                new Promise(function (success, dismiss) {\n                    kdialog.dismiss(openedDialog.instance, false);\n                    success();\n                }).then(function(){\n                    kdialog.infoDialog({\n                        title:message\n                    }).then(function(){\n                        kCef.reload();\n                    });\n                });\n            }\n        }\n\n        function canEnableResetEnterBtn() {\n            return !captureService.isBroadcasting() && !isAutoArchiveEnabled;\n        }\n\n        function onProducerStateChanged() {\n\n            var resetEntryData = kProducerActions.getState('actions.entry-reset-mode');\n\n            if (resetEntryData && !angular.equals(lastResetEntryData,resetEntryData))\n            {\n                lastResetEntryData = resetEntryData;\n                entryReset();\n            }\n        }\n\n        function entryReset(){\n\n            kalturaAPI.login().then(function (ks) {\n                if (lastResetEntryData.action === 'start'){\n                    //pendingEntryResetCuePointsIds[entryResetCuePoint.id] = 1;\n                    openedDialog = kdialog.attention(gettextCatalog.getString(\"Archive in progress...\"), gettextCatalog.getString(\"This action may take some time,<br>please be patient:)\"), gettextCatalog.getString(\"Abort\"));\n                    openedDialog.promise.then( function () {\n                        kProducerActions.setStateOrientedAction('entry-reset-mode', { action: 'abort', ksHash: getKSHash(ks) });\n\n                    });\n                    if (lastResetEntryData.ksHash === getKSHash(ks)){\n                        resetEntryInternal(configuration.MediaEntryId).then(function () {\n                            kProducerActions.setStateOrientedAction('entry-reset-mode', { action: 'end', ksHash: getKSHash(ks) });\n                        }, function (err) {\n                            kProducerActions.setStateOrientedAction('entry-reset-mode', { action: 'failed', ksHash: getKSHash(ks) });\n                            klog.error('failed to reset entry ' + configuration.MediaEntryId+ \" \" +JSON.stringify(err));\n                        });\n                    }\n                }\n                else if (lastResetEntryData.action === 'abort') {\n                    onEntryResetNotStart(gettextCatalog.getString(\"Archive operation Aborted!\"));\n                }\n                else if (lastResetEntryData.action === 'failed') {\n                    onEntryResetNotStart(gettextCatalog.getString(\"Archive operation Failed!\"));\n                }\n                else if (lastResetEntryData.action === 'end') {\n                    onEntryResetNotStart(gettextCatalog.getString(\"Archived Successfully!\"));\n                } else {\n                    klog.warn('got entry-reset with unknown action code ' + lastResetEntryData.action);\n                }\n            });\n        }\n\n        function init() {\n            // make sure we fetched all cue points currently exists on the server\n            kProducerActions.isReady().then(function() {\n\n                // listen to changes from server and act accordingly\n                kProducerActions.subscribeStateChange(function() {\n\n                    onProducerStateChanged();\n                });\n\n                // run sync from server once to sync producer state (if server doesn't contain any relevant cuepoint)\n                onProducerStateChanged();\n            });\n\n            asyncLiveEntryInfoService.registerOnEntryInfoChange(OnEntryInfoChangeFunc);\n        }\n\n        function OnEntryInfoChangeFunc() {\n            var entry = asyncLiveEntryInfoService.getCurrentEntryInfo();\n            isAutoArchiveEnabled = entry.recordingOptions.shouldAutoArchive;\n        }\n\n        function getArchiveDisabledTooltip() {\n            return isAutoArchiveEnabled ? gettextCatalog.getString(\"Archiving has been automatically enabled\") : gettextCatalog.getString(\"Archive\");\n        }\n\n        self.getArchiveDisabledTooltip = getArchiveDisabledTooltip;\n        self.canEnableResetEnterBtn = canEnableResetEnterBtn;\n        self.resetEntry = resetEntry;\n        self.addPushServerNotificationsToClearOnArchive=addPushServerNotificationsToClearOnArchive;\n        self.addArchiveCustomAction = addArchiveCustomAction;\n        init();\n    }\n\n    angular.module('kEntryManagementModule').service('kEntryManagementService', Service);\n\n})();\n","/* globals Promise */\n\n(function () {\n    \"use strict\";\n\n    function Directive() {\n        function Controller(kEntryManagementService, gettextCatalog) {\n\n            var self = this;\n\n            self.resetEntry = kEntryManagementService.resetEntry;\n            self.canEnableResetEnterBtn = kEntryManagementService.canEnableResetEnterBtn;\n            self.archiveToolTip = kEntryManagementService.getArchiveDisabledTooltip;\n        }\n\n        function Link(scope, element, attrs, ctrls) {\n            var ctrl = ctrls[0];\n        }\n\n        return {\n            restrict: 'A',\n            scope: {},\n            require: ['kEntryManagementWidget'],\n            templateUrl: '../common/kEntryManagement/directives/kEntryManagementWidget.html',\n            controller: Controller,\n            controllerAs: 'vm',\n            bindToController: {},\n            link: Link\n        };\n    }\n\n    angular.module('kEntryManagementModule').directive('kEntryManagementWidget', Directive);\n\n})();\n","/**\n * Created by asafrobinovich on 10/14/14.\n */\n\nvar webcastInfoModule = angular.module('webcastInfoModule', ['gettext', 'kAPI', 'kUI']);\n\nwebcastInfoModule.service('webcastInfo', WebcastInfo);\n\n\nfunction WebcastInfo() {\n\n}","/* global _ */\n/* global Promise */\n\n'use strict';\n\nwebcastInfoModule.controller('webcastInfoController', function (kalturaAPI,$sce, $scope, kCef) {\n    this.template = \"../common/webcastInfo/webcastInfoView.html\";\n\n    var _this=this;\n    _this.streamingInfo=[];\n    _this.presenters = [];\n\n    kalturaAPI.login().then(function() {\n\n        kalturaAPI.startMultirequest();\n            if (configuration.eventsmetadataprofileid) {\n                if (configuration.eventsmetadataprofileid) {\n                    kalturaAPI.metadataService.list(configuration.MediaEntryId, configuration.eventsmetadataprofileid).then(function (res) {\n                        if (res && res.objects && res.objects.length > 0) {\n                            var xml = res.objects[0].xml;\n                            var xmlDoc = $.parseXML(xml);\n                            initPresenters(xmlDoc);\n                        }\n                    });\n                }\n            }\n            kalturaAPI.baseEntryService.get(configuration.MediaEntryId).then(function(res) {\n                _this.title=res.name;\n                    _this.appHostUrl = configuration.appHostUrl;\n                _this.description=$sce.trustAsHtml(res.description);\n                _this.streamingInfo.push({ name: \"Primary Url\", value:  res.primaryBroadcastingUrl});\n                _this.streamingInfo.push({ name: \"Secondary Url\", value:  res.secondaryBroadcastingUrl});\n                _this.streamingInfo.push({ name: \"streamName\", value:  res.streamName.replace(\"_%i\",\"_1\")});\n            });\n        kalturaAPI.execMultirequest()\n    });\n\n    function initPresenters(metadataXml)\n    {\n        var presenters = extractPresenters(metadataXml);\n        var promises = [];\n        if(presenters) {\n            _.forEach(presenters, function (presenter, id) {\n                if (presenter.image) {\n                    promises.push(kalturaAPI.thumbAssetService.getUrl(presenter.image));\n                }\n                else{\n                    promises.push(Promise.resolve(null));\n                }\n            });\n\n            Promise.all(promises).then(function(results){\n                _.forEach(results, function(res, index){\n                    presenters[index].bio = $sce.trustAsHtml(presenters[index].bio);\n                    presenters[index].image_src = res;\n                    _this.presenters.push(presenters[index]);\n                });\n            });\n        }\n    }\n\n    function extractPresenters(metadataXml)\n    {\n        var presenters = [];\n        if(metadataXml && metadataXml.getElementsByTagName('Presenter')) {\n            var presentersXml = metadataXml.getElementsByTagName('Presenter');\n            _.forEach(presentersXml, function (presenter, id) {\n                var name = presenter.getElementsByTagName('PresenterName')[0].innerHTML;\n                var title = presenter.getElementsByTagName('PresenterTitle')[0].innerHTML;\n                var bio = presenter.getElementsByTagName('PresenterBio')[0].innerHTML;\n                var image = presenter.getElementsByTagName('PresenterImage')[0].innerHTML;\n                presenters.push({\n                    'name' : name,\n                    'title' : title,\n                    'bio': bio,\n                    'image' : image,\n                    'image_src': ''\n                });\n            });\n        }\n        return presenters;\n    }\n\n    $scope.openExternalLink = function()  {\n        kCef.sendIPC('open-external-link',  configuration.appHostUrl + '/media/' + configuration.MediaEntryId);\n    };\n\n});","\n\nvar monitoringModule = angular.module('monitoringModule', []);\n\n// monitoringModule.service('monitoring', Monitoring);\n//\n//\n// function Monitoring() {\n//\n// }","'use strict';\nmonitoringModule.controller('monitoringController', function ($scope) {\n    console.log('monitoringController');\n\n});","'use strict';\nmonitoringModule.directive('monitoring', function (kalturaAPI,$timeout,asyncLiveEntryInfoService,kCef) {\n\n\treturn {\n\t\trestrict:'E',\n\t\ttemplateUrl: \"../common/monitoring/directives/monitoring.html\",\n        scope: {\n            visible: '='\n        },\n\t\tlink:function (scope,element,attrs) {\n\n\t\t    scope.applicationReady = false;\n\n            window.webcast = window.webcast || {};\n            window.webcast.vars = window.webcast.vars || {};\n            window.webcast.vars.liveDashboard = {\n                lang: 'en-US',\n                mode: 'webcast',\n                service_url:kserviceInfo.serverAddress,\n                entryId: configuration.MediaEntryId,\n                player: {}\n            };\n\n            scope.$watch(function() {\n                return scope.visible;\n            },function() {\n                if (scope.visible) {\n                    postMessageToDashboard({ type: 'playerAction', content: 'play' }, '*');\n                } else {\n                    postMessageToDashboard({ type: 'playerAction', content: 'pause' }, '*');\n                }\n            });\n\n            kalturaAPI.login()\n                .then(function(result) {\n                    window.webcast.vars.liveDashboard['ks'] = result;\n                    window.webcast.vars.liveDashboard.player['autoPlay'] = false;\n                    scope.iFrameSource = './liveDashboard/v' + window.packageJSONFile.liveDashboardVersion + '/index.html';\n                    scope.applicationReady = true;\n                });\n\n            if (window.addEventListener) {\n                window.addEventListener('message', function(message) {\n                    if (message.data.type) {\n                        switch (message.data.type) {\n                            case 'onUrlOpen':\n                                kCef.openExternal(message.data.content);\n                                break;\n                        }\n                    }\n                }, false);\n            }\n\n            function postMessageToDashboard(message) {\n                var receiver = document.getElementById('liveDashboardIframe');\n                if (receiver && receiver.contentWindow) {\n                    receiver.contentWindow.postMessage(message, '*');\n                }\n            }\n\n            function onLiveEntryChange(res) {\n                postMessageToDashboard({ type: 'onLiveEntryChange', content: res });\n            }\n\n            asyncLiveEntryInfoService.registerOnEntryInfoChange(onLiveEntryChange);\n        }\n\t};\n\n});","angular.module('kwpApp').run(['gettextCatalog', function (gettextCatalog) {\n/* jshint -W100 */\n    gettextCatalog.setStrings('af', {\"Audience\":\"Audience1\",\"Close\":\"Close1\",\"Current\":\"Current1\",\"Debug Panel\":\"Debug Panel1\",\"Gallery\":\"Gallery1\",\"Loading...\":\"Loading...1\",\"Maximize\":\"Maximize1\",\"Next\":\"Next1\",\"Notes\":\"Notes1\",\"Off Air\":\"Off Air1\",\"On Air\":\"On Air1\",\"Presentation\":\"Presentation1\",\"Restore\":\"Restore1\",\"Settings\":\"Settings1\",\"Start Session\":\"Start Session1\",\"Stop Session\":\"Stop Session1\",\"Timeline\":\"Timeline1\",\"minimize\":\"minimize1\"});\n/* jshint +W100 */\n}]);","if (window.module) module = window.module;"]}