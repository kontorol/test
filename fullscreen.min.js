{"version":3,"sources":["slideWindow.js","poll-view.js","pollWindow.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjfile":"fullscreen.min.js","sourcesContent":["(function () {\n    \"use strict\";\n\n    $(function () {\n\n        ipcRenderer.on('slideUpdate', function (event, result) {\n            receiveMessage(result);\n        });\n\n        //setting the slide image\n        var $slideImage = $(\"#myImg\");\n        if(getURIParam(\"StartingImage\")) {\n            showSlide();\n            $slideImage.attr(\"src\", getURIParam(\"StartingImage\"));\n            $slideImage.load(loadImage());\n        }\n\n        function receiveMessage(event)\n        {\n            if(event.type && event.type === 'slide') {\n                if(event.data && event.data !== '') {\n                    showSlide();\n                    $slideImage.attr(\"src\", event.data);\n                } else {\n                    //supporting default video only view where no slides or other assets is shown\n                    hideSlide();\n                }\n            }\n        }\n\n        function getURIParam(name){\n            if(name=(new RegExp('[?&]'+encodeURIComponent(name)+'=([^&]*)')).exec(location.search))\n                return decodeURIComponent(name[1]);\n        }\n\n        function loadImage()\n        {\n            if ($slideImage.width() / $slideImage.height() > 1.5){\n                // set width to 100%\n                $slideImage.width(\"100%\");\n            }\n            else{\n                // set height to 100%\n                $slideImage.height(\"100%\");\n            }\n        }\n\n        function showSlide()\n        {\n            $(\".slide-window-container\").show();\n            $(\".poll-full-window-container\").hide();\n        }\n\n        function hideSlide()\n        {\n            $(\".slide-window-container\").hide();\n            $(\".poll-full-window-container\").hide();\n        }\n\n\n    });\n\n\n})();\n\n","window.webcast = window.webcast || {};\n\nwindow.webcast.PollView = function (element, parent, $webcastPoll)\n{\n    this.parent = parent;\n\n    this.$webcastPoll = $webcastPoll;\n\n    _.extend(this, {\n        getResizableContainerElement : function()\n        {\n            return _this.$webcastPoll ? _this.$webcastPoll.parent() : null;\n        },\n        getLayoutName: function () {\n            var _this = this;\n\n            var $resizableContainer = _this.getResizableContainerElement();\n            var pollViewPortWidth = $resizableContainer ? $resizableContainer.width() : null;\n            var pollViewPortHeight = $resizableContainer? $resizableContainer.height() : null;\n            var result = '';\n            if (pollViewPortHeight < 315 || pollViewPortWidth < 670) {\n                result = 'small';\n            } else {\n                result = 'regular';\n            }\n\n            return result;\n        },\n        syncDOMPollResults: function () {\n            var _this = this;\n\n            function updateAnswerResult(answerIndex, showResults, pollResults, popularAnswers) {\n\n                if (showResults && pollResults ) {\n\n                    var answerContent = !isNaN(pollResults.answers[answerIndex + ''])?  (+pollResults.answers[answerIndex + '']) : 0;\n                    var isPopularAnswer = popularAnswers.split(',').indexOf(answerIndex + '') !== -1;\n                    var totalVoters = !isNaN(pollResults.totalVoters) ? (+pollResults.totalVoters) : 0;\n                    var answerPercentage = totalVoters > 0 ? (Math.round( (answerContent / totalVoters * 100) * 10 ) / 10) : 0;\n\n                    if (isPopularAnswer) {\n                        _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answer').addClass('popular');\n                    }else\n                    {\n                        _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answer').removeClass('popular');\n                    }\n\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + 'Result\"]').css('width',answerPercentage + '%');\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + 'ResultText\"]').text(answerPercentage + '%');\n\n                } else {\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answer').removeClass('popular');\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + 'Result\"]').css('width','0%');\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + 'ResultText\"]').text('');\n                }\n            }\n\n            if (_this.$webcastPoll) {\n                var $totalsContainer = _this.$webcastPoll.find(\"[name='respondsWidget']\");\n\n                if ($totalsContainer) {\n                    var pollResults = _this.parent.pollData.pollResults;\n                    var hasPollContent = _this.parent.pollData.content;\n                    var showTotals = _this.parent.pollData.showTotals;\n                    var showResults = _this.parent.pollData.showResults;\n\n                    if ( hasPollContent && pollResults )\n                    {\n                        var popularAnswers = '';\n                        var popularValue = 0;\n\n                        if (showResults) {\n                            for (var propertyName in pollResults.answers) {\n                                var answerValue = pollResults.answers[propertyName];\n                                if (answerValue) { // make sure that 0 will not be marked as popular value\n                                    if (answerValue > popularValue) {\n                                        popularAnswers = propertyName;\n                                        popularValue = answerValue;\n                                    }\n                                    else if (answerValue === popularValue) {\n                                        popularAnswers = popularAnswers ? (popularAnswers + ',' + propertyName) : propertyName;\n                                    }\n                                }\n                            }\n                        }\n\n                        updateAnswerResult(1,showResults, pollResults, popularAnswers);\n                        updateAnswerResult(2,showResults, pollResults, popularAnswers);\n                        updateAnswerResult(3,showResults, pollResults, popularAnswers);\n                        updateAnswerResult(4,showResults, pollResults, popularAnswers);\n                        updateAnswerResult(5,showResults, pollResults, popularAnswers);\n\n                        if (showTotals && pollResults.totalVoters) {\n                            var label = '';\n\n                            if (pollResults.totalVoters && !isNaN(pollResults.totalVoters))\n                            {\n                                var totalVotersAsNumber = parseInt(pollResults.totalVoters);\n                                if (totalVotersAsNumber && totalVotersAsNumber > 10000) {\n                                    label = (totalVotersAsNumber - (totalVotersAsNumber % 1000)) / 1000 + \"K\";\n                                } else {\n                                    label = pollResults.totalVoters;\n                                }\n                                $totalsContainer.find(\"[name='value']\").text(label);\n                                $totalsContainer.find(\"[name='text']\").text(totalVotersAsNumber === 1 ? 'Response' : 'Responses');\n                            }else {\n                                $totalsContainer.find(\"[name='text']\").text('Responses');\n                                $totalsContainer.find(\"[name='value']\").text('0'); // we are setting a filler value so the UI will not jump once we later update it\n                            }\n                        } else {\n                            $totalsContainer.find(\"[name='text']\").text('Responses');\n                            $totalsContainer.find(\"[name='value']\").text('0'); // we are setting a filler value so the UI will not jump once we later update it\n                        }\n                    }else\n                    {\n                        $totalsContainer.find(\"[name='text']\").text('Responses');\n                        $totalsContainer.find(\"[name='value']\").text('0'); // we are setting a filler value so the UI will not jump once we later update it\n                        updateAnswerResult(1, false);\n                        updateAnswerResult(2, false);\n                        updateAnswerResult(3, false);\n                        updateAnswerResult(4, false);\n                        updateAnswerResult(5, false);\n                    }\n\n                }\n            }\n        },\n        syncDOMViewState: function () {\n            var _this = this;\n            if (_this.$webcastPoll) {\n                if (_this.parent.getViewConfig() === 'producerOnly') {\n                    _this.$webcastPoll.addClass('producer-view');\n                } else {\n                    _this.$webcastPoll.removeClass('producer-view');\n                }\n            }\n        },\n        syncDOMUserVoting: function () {\n            var _this = this;\n            if (_this.$webcastPoll) {\n                var pollContent = _this.parent.pollData.content;\n\n                if (pollContent) {\n\n                    if(_this.parent.getViewConfig() !== 'producerOnly') {\n                        var selectedAnswerSelector = '[name=\"answer' + _this.parent.userVote.answer + '\"]';\n\n                        if (_this.parent.userVote.answer) {\n\n                            _this.$webcastPoll.find('.answer')\n                                .not('.answer>' + selectedAnswerSelector)\n                                .removeClass('selected')\n                                .addClass('not-selected');\n\n                            _this.$webcastPoll.find(selectedAnswerSelector)\n                                .closest('.answer')\n                                .addClass('selected')\n                                .removeClass('not-selected');\n                        } else {\n\n                            _this.$webcastPoll.find('.answer')\n                                .removeClass('selected')\n                                .addClass('not-selected');\n                        }\n                    }\n\n                    if (_this.parent.canUserVote()) {\n                        _this.$webcastPoll.addClass('allow-voting');\n                    } else {\n                        _this.$webcastPoll.removeClass('allow-voting');\n                    }\n                }\n\n            }\n        },\n        syncDOMAnswersVisibility : function()\n        {\n            var _this = this;\n\n            if (_this.parent.pollData.showAnswers)\n            {\n                _this.showPollDOMContent();\n            }else\n            {\n                _this.showPollDOMQuestionOnly();\n            }\n        },\n        syncPollDOM: function () {\n            var _this = this;\n\n            function updateAnswer(answerIndex, pollData) {\n                var answerContent = pollData.answers[answerIndex + ''];\n                if (answerContent) {\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').text(answerContent).closest('.answer').show();\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answers-widget-row').show();\n                } else {\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answers-widget-row').hide();\n                    //supporting large layout\n                    _this.$webcastPoll.find('[name=\"answer' + answerIndex + '\"]').closest('.answer').hide();\n                }\n            }\n\n            if (_this.parent.pollData.pollId) {\n                // ## should check that requested poll is shown\n\n                // Make sure we have a container\n                if (!_this.$webcastPoll) {\n                    _this.$webcastPoll = _this.getWebcastPollElement();\n                }\n\n                if (_this.parent.pollData.errorContent)\n                {\n                    _this.showPollDOMError();\n                }else {\n                    var pollContent = _this.parent.pollData.content;\n\n                    if (pollContent) {\n\n                        var numberOfAnswers = 0;\n                        $.each(pollContent.answers, function(key, element) {\n                            numberOfAnswers++;\n                        });\n\n                        _this.$webcastPoll.addClass('poll-size-' + numberOfAnswers);\n\n                        _this.$webcastPoll.find('[name=\"question\"]').text(pollContent.question);\n                        updateAnswer(1, pollContent);\n                        updateAnswer(2, pollContent);\n                        updateAnswer(3, pollContent);\n                        updateAnswer(4, pollContent);\n                        updateAnswer(5, pollContent);\n\n                        _this.syncDOMAnswersVisibility();\n\n                    } else {\n                        _this.$webcastPoll.find('[name=\"question\"],[name=\"answer1\"],[name=\"answer2\"],[name=\"answer3\"],[name=\"answer4\"],[name=\"answer5\"]').text('');\n                        _this.showPollDOMLoader();\n                    }\n\n                    _this.syncDOMViewState();\n                    _this.syncDOMPollResults();\n                    _this.syncDOMUserVoting();\n                }\n\n\n            } else {\n                // ## should hide poll if any is shown\n            }\n        },\n        showPollDOMLoader: function () {\n            var _this = this;\n            if (_this.$webcastPoll) {\n                _this.$webcastPoll.find('[name=\"pollContent\"]').hide();\n                _this.$webcastPoll.find('[name=\"questionOnlyContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"errorContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"loadingContainer\"]').show();\n            }\n        },\n        showPollDOMError: function () {\n            var _this = this;\n            if (_this.$webcastPoll) {\n                _this.$webcastPoll.find('[name=\"pollContent\"]').hide();\n                _this.$webcastPoll.find('[name=\"questionOnlyContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"loadingContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"errorContainer\"]').fadeIn('slow');\n            }\n        },\n        showPollDOMQuestionOnly: function () {\n            var _this = this;\n\n            if (_this.$webcastPoll) {\n                _this.$webcastPoll.find('[name=\"loadingContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"pollContent\"]').hide();\n                _this.$webcastPoll.find('[name=\"errorContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"questionOnlyContainer\"]').fadeIn('slow');\n            }\n        },\n        showPollDOMContent: function () {\n            var _this = this;\n\n            if (_this.$webcastPoll) {\n                _this.$webcastPoll.find('[name=\"loadingContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"questionOnlyContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"errorContainer\"]').hide();\n                _this.$webcastPoll.find('[name=\"pollContent\"]').fadeIn('slow');\n            }\n        }\n    },{\n        getResizableContainerElement : function()\n        {\n            return $(element).parent();\n        }\n    });\n};\n\n\n\n\n","(function () {\n    \"use strict\";\n\n    $(function () {\n\n        ipcRenderer.on('pollUpdate', function (event, result) {\n            receiveMessage(result);\n        });\n\n        var pollContainer = {\n            configuration : {\n                currentView: 'sharedView'\n            },\n            userVote : {metadataId: null, answer: null, inProgress: false, canUserVote: false, isReady: false},\n            pollData : {\n                pollId: null,\n                errorContent: null,\n                content: null,\n                showResults: false,\n                showTotals: false,\n                pollResults: null,\n                showAnswers : false\n            },\n            getViewConfig : function () {\n                return pollContainer.configuration.currentView;\n            },\n            canUserVote : function () {\n                return pollContainer.userVote.canUserVote;\n            }\n        };\n\n        function receiveMessage(event)\n        {\n            if(event.type && event.type === 'poll') {\n                showPoll();\n                var pollNewState = event.data ? JSON.parse(event.data) : pollContainer;\n                extendPollContainer(pollNewState);\n                updateCurrentPollState();\n            }\n        }\n\n        function getURIParam(name)\n        {\n            if(name=(new RegExp('[?&]'+encodeURIComponent(name)+'=([^&]*)')).exec(location.search))\n                return decodeURIComponent(name[1]);\n        }\n\n        function updateCurrentPollState()\n        {\n            //update poll main asset view\n            pollView.syncPollDOM();\n        }\n\n        var $webcastPoll = $('.webcastPolls');\n        var $containerElement = $('.poll-full-window-container');\n\n        var pollView =  new window.webcast.PollView($containerElement, pollContainer, $webcastPoll);\n\n        //initial poll state\n        if(getURIParam('initialPollState')){\n            showPoll();\n            var initialPollState = getURIParam('initialPollState');\n            initialPollState = JSON.parse(initialPollState);\n            extendPollContainer(initialPollState);\n\n            updateCurrentPollState();\n        }\n\n        function extendPollContainer(updatedPollContainer)\n        {\n            _.extend(pollContainer, updatedPollContainer);\n            //if there is no need to show results, override pollContainer data (pollView need a false boolean value)\n            //for not to display the results\n            _.extend(pollContainer.pollData,\n                {\n                    showResults:\n                        updatedPollContainer.pollData.showResults === \"disabled\" ?\n                            false : updatedPollContainer.pollData.showResults\n                }\n            );\n        }\n\n        function showPoll()\n        {\n            $(\".slide-window-container\").hide();\n            $(\".poll-full-window-container\").show();\n        }\n\n    });\n\n})();"]}