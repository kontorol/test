webpackJsonp([0],{

/***/ "../../../../../src async recursive":
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = "../../../../../src async recursive";

/***/ }),

/***/ "../../../../../src/assets/svg/20/bar-selection.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "bar-selection.61e32b58530da1acaf4e.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/calendar.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "calendar.6a140b295f23c517c0b5.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/corner.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "corner.5b59c851807156527667.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/edit.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "edit.c82b478779ad8cc7afbb.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/exit.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "exit.2d002315d84918233457.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/home-icon.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "home-icon.db1ee2bce76383671f8e.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/info.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "info.8cb6aa3febe7ad478209.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/library.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "library.53c71167564ac8f168f0.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/link.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "link.cba26b6d71c587913155.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/minimize.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "minimize.7ac96ad2caa7a7f6b209.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/resize-app.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "resize-app.9157c24249f79cb14ae4.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/settings.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "settings.0d192cdbbea3b67f3f6f.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/20/trash.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "trash.1e6b2feb964edf42487e.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/22/cancel.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "cancel.4d8704860a82f73ceb3c.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/22/stop.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "stop.85a6d9314dfb0d71ef46.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/22/whiteboard-on.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "whiteboard-on.ee7b6c2c2bfcb852486f.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/22/whiteboard.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "whiteboard.2d8d433676274ea955b3.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/32/arrow.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "arrow.0ab5e11a25aaee66089b.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/32/draw-blue.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "draw-blue.57f7c0454141710cca9e.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/32/draw.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "draw.bda7786b5ae2f230bda2.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/32/magnifier.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "magnifier.ff190d3c05cd5d80b799.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/32/move-tool.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "move-tool.9944a2069d6b3bfc126b.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/32/pencil.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "pencil.7a7c80a4ca1f693ee7ed.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/32/pointer.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "pointer.58d8187596571c5167d7.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/32/text.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "text.f8c9689d55badc1801fe.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/40/warn.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "warn.f269696cb3d4d6a1c0c0.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/64/active-rec-disabled.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "active-rec-disabled.0a43a89570ce662ecfcf.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/64/rec_icon_pause_pc.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "rec_icon_pause_pc.5ee1f3bdae53e58d0934.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/64/rec_icon_pc.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "rec_icon_pc.2887e867141451897d85.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/arrow-down.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "arrow-down.a482972b309030453df7.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/arrow-up.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "arrow-up.e9fcc51d198c4d7c9068.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/back-light.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "back-light.5ca7831657ff7492a334.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/logo-pc-full.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "logo-pc-full.4ce1e550b3502a7efbf4.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/logo.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "logo.ce3cde78b94061494640.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/video-audio-only.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "video-audio-only.2537cd7f6aa6a225c043.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/video-link.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "video-link.e655cb2fa03722aea799.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/video-mute.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "video-mute.6e4e37622036bbeb99f8.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/video-pause.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "video-pause.30f1871367a23247ccea.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/video-play.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "video-play.5e45c521d3031710f210.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/common/video-volume.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "video-volume.3feda8ab52c540623452.svg";

/***/ }),

/***/ "../../../../../src/assets/svg/custom/slider.svg":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "slider.920a4eb0be1f7786f755.svg";

/***/ }),

/***/ "../../../../../src/environments/environment.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `angular-cli.json`.
// The file contents for the current environment will overwrite these during build.
const environment = {
    production: false
};
/* harmony export (immutable) */ __webpack_exports__["a"] = environment;

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/environment.js.map

/***/ }),

/***/ "../../../../../src/personal/active-recording/active-recording.component.html":
/***/ (function(module, exports) {

module.exports = "<div role=\"main\" [attr.aria-label]=\"'RECORD.active_rec_desc' | translate\" *ngIf=\"!routeService.isInTransition\" class=\"active-recording-wrapper\" toggled-click-through-addon>\n\n  <p-blockUI [blocked]=\"blocked_ui\"></p-blockUI>\n\n  <div class=\"active-rec-container default-background-color\">\n    <div class=\"recording-control-buttons-container\">\n      <div class=\"recording-control-button\" [pTooltip]=\" 'RECORD.stop_recording' | translate\" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n        <button class=\"active-recording-stop-icon pc-button action-button scaling-medium focus-once\" (click)=\"onStopRecordButtonClick()\"\n                [attr.aria-label]=\"'RECORD.stop_recording' | translate\"\n                [disabled]=\"isAppProcessing()\"\n                [attr.aria-disabled]=\"isAppProcessing()\"></button>\n        <active-recording-confirm *ngIf=\"activeRecordingConfirmService.openWindow === activeRecordingConfirmService.STOP_WINDOW\" class=\"stop-recording-confirm-dialog\"\n                                  confirm_dialog_key=\"close-recording-key\"\n                                  reject_button_text=\"{{'CONFIRMATIONS.StopRecording_No' | translate}}\"\n                                  accept_button_text=\"{{'CONFIRMATIONS.StopRecording_Yes' | translate}}\">\n        </active-recording-confirm>\n      </div>\n      <div class=\"recording-button\" [pTooltip]=\" (isRecording() ? 'RECORD.pause_recording' : 'RECORD.resume_recording') | translate\" tooltipPosition=\"top\"\n           showDelay=\"500\" tooltip-addon>\n        <button (click)=\"onRecordButtonClick()\" [disabled]=\"shouldDisableRecButton()\" class=\"pc-button scaling-medium\"\n                [ngClass]=\"{\n                  'active-recording-pause-icon' : isRecording() && !shouldDisableRecButton(),\n                  'active-recording-rec-icon' : !isRecording() && !shouldDisableRecButton(),\n                  'active-recording-disabled-rec-icon' : shouldDisableRecButton()\n                   }\"\n                [attr.aria-label]=\"(isRecording() ? 'RECORD.pause_recording' : 'RECORD.resume_recording') | translate\">\n        </button>\n      </div>\n      <div class=\"cancel-button-container recording-control-button\" [pTooltip]=\" 'RECORD.cancel_recording' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n        <button class=\"active-recording-cancel-icon pc-button action-button scaling-medium focus-once\" (click)=\"onCancelRecordButtonClick()\"\n                [attr.aria-label]=\"'RECORD.cancel_recording' | translate\"\n                [disabled]=\"isAppProcessing()\"\n                [attr.aria-disabled]=\"isAppProcessing()\"></button>\n        <active-recording-confirm *ngIf=\"activeRecordingConfirmService.openWindow === activeRecordingConfirmService.CANCEL_WINDOW\" class=\"discard-recording-confirm-dialog\"\n                                  confirm_dialog_key=\"discard-recording-key\"\n                                  reject_button_text=\"{{'CONFIRMATIONS.DiscardRecording_No' | translate}}\"\n                                  accept_button_text=\"{{'CONFIRMATIONS.DiscardRecording_Yes' | translate}}\">\n        </active-recording-confirm>\n      </div>\n    </div>\n    <div class=\"recording-timer\">\n      {{ getRecordingTime() | timer }}\n    </div>\n    <div class=\"audio-level-control-container\">\n      <audio-level class=\"audio-level-component\" [audioClass]=\"getAudioIconClassName()\" [disabled]=\"!isAudioSessionActive() || isAppProcessing()\"\n                   [isSmall]=\"true\"></audio-level>\n    </div>\n    <div class=\"sketch-container\">\n      <div class=\"sketch-inner-container\">\n        <button class=\"pc-button focus-once\" (click)=\"onSketchClick()\"\n                [ngClass]=\"{ 'sketch-icon-active': paletteService.isSketchOn, 'sketch-icon': !paletteService.isSketchOn}\"\n                [attr.aria-label]=\"'RECORD.annotations' | translate\"\n                [disabled]=\"shouldDisableSketchButton()\"\n                [attr.aria-disabled]=\"shouldDisableSketchButton()\"></button>\n        <palette *ngIf=\"paletteService.isSketchOn && !activeRecordingConfirmService.openWindow\" class=\"palette-location\"></palette>\n      </div>\n    </div>\n\n    <button [attr.aria-label]=\"'MENU.minimize_button' | translate\" class=\"minimize-button-icon minimize-button-active-rec pc-button\" (click)=\"minimize()\"></button>\n    <loader-gauge *ngIf=\"isAppProcessing()\" class=\"active-rec-loader\"  [attr.aria-label]=\"'RECORD.rec_loading' | translate\"></loader-gauge>\n  </div>\n  <div *ngIf=\"previewSessionName\" class=\"video-rec-preview-container\">\n    <video-rec-preview [sessionName]=\"previewSessionName\"></video-rec-preview>\n  </div>\n</div>\n\n"

/***/ }),

/***/ "../../../../../src/personal/active-recording/active-recording.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".active-recording-wrapper {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n      flex-direction: column;\n  -ms-flex-pack: end;\n      justify-content: flex-end;\n  position: absolute;\n  bottom: 2px;\n  right: 2px;\n  width: 100%;\n  height: 100%;\n  -webkit-app-region: no-drag; }\n\n.active-rec-container {\n  -webkit-app-region: drag;\n  -ms-flex-negative: 0;\n      flex-shrink: 0;\n  -ms-flex-item-align: end;\n      align-self: flex-end;\n  width: 338px;\n  height: 64px;\n  border-top-left-radius: 2em;\n  border-bottom-left-radius: 2em;\n  border-top-right-radius: 0.3em;\n  border-bottom-right-radius: 0.3em;\n  border: solid 1px rgba(102, 102, 102, 0.5);\n  box-sizing: border-box; }\n\n.action-button {\n  position: absolute;\n  height: 40px;\n  width: 40px;\n  top: calc(50% - 20px);\n  left: calc(50% - 20px); }\n\n.active-recording-stop-icon {\n  cursor: pointer;\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/22/stop.svg")) + ") no-repeat center center;\n  opacity: 0.7; }\n  .active-recording-stop-icon:hover {\n    opacity: 1; }\n  .active-recording-stop-icon[disabled] {\n    opacity: 0.7; }\n\n.active-recording-cancel-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/22/cancel.svg")) + ") no-repeat center center;\n  opacity: 0.7; }\n  .active-recording-cancel-icon:hover {\n    opacity: 1; }\n  .active-recording-cancel-icon[disabled] {\n    opacity: 0.7; }\n\n.sketch-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/32/draw.svg")) + ") no-repeat center center;\n  opacity: 0.7;\n  background-size: 19px;\n  height: 32px;\n  width: 32px;\n  left: calc(50% - 17px);\n  top: calc(50% - 16px);\n  position: absolute; }\n  .sketch-icon:hover {\n    opacity: 1; }\n  .sketch-icon[disabled] {\n    opacity: 0.7; }\n\n.sketch-icon-active {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/32/draw-blue.svg")) + ") no-repeat center center;\n  background-size: 19px;\n  height: 32px;\n  width: 32px;\n  left: calc(50% - 17px);\n  top: calc(50% - 16px);\n  position: absolute; }\n\n.active-recording-rec-icon {\n  cursor: pointer;\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/64/rec_icon_pc.svg")) + ") no-repeat top left;\n  position: relative;\n  height: 66px;\n  width: 60px;\n  top: -1px;\n  left: 1px; }\n\n.active-recording-pause-icon {\n  cursor: pointer;\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/64/rec_icon_pause_pc.svg")) + ") no-repeat top left;\n  position: relative;\n  height: 100%;\n  width: 100%;\n  top: -1px;\n  left: 1px; }\n\n.active-recording-disabled-rec-icon {\n  cursor: pointer;\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/64/active-rec-disabled.svg")) + ") no-repeat top left;\n  position: relative;\n  height: 100%;\n  width: 100%;\n  top: -2px;\n  left: 1px; }\n\n.recording-control-button {\n  width: 25px;\n  height: 64px;\n  position: relative; }\n\n.recording-button {\n  width: 64px;\n  height: 64px;\n  padding-left: 5px; }\n\n.recording-control-buttons-container {\n  display: -ms-flexbox;\n  display: flex;\n  float: left;\n  -ms-flex-direction: row;\n      flex-direction: row;\n  height: 64px;\n  margin-left: 24px; }\n\n.recording-timer {\n  display: -ms-flexbox;\n  display: flex;\n  float: left;\n  margin-left: 9px;\n  margin-top: 14px;\n  font-family: Lato;\n  font-size: 27px;\n  font-weight: 300;\n  color: #ffffff;\n  text-align: right; }\n\n.recording-timer-disabled {\n  opacity: 0.5; }\n\n.minimize-button-active-rec {\n  opacity: 0.49;\n  position: absolute;\n  right: 8px; }\n\n.active-recording-confirm {\n  position: relative; }\n\n.stop-recording-confirm-dialog {\n  left: -118px !important;\n  top: -115px !important;\n  width: 246px;\n  height: 103px;\n  position: absolute; }\n\n.discard-recording-confirm-dialog {\n  left: -110px !important;\n  top: -115px !important;\n  width: 246px;\n  height: 103px;\n  position: absolute; }\n\n.video-rec-preview-container {\n  -ms-flex-negative: 0;\n      flex-shrink: 0;\n  -ms-flex-item-align: end;\n      align-self: flex-end;\n  margin-top: 6px;\n  height: 247px;\n  width: 421px;\n  -webkit-app-region: drag; }\n\n.active-rec-loader {\n  width: 313px;\n  position: absolute;\n  bottom: 0;\n  right: 0; }\n\n.active-rec-loader > .loader {\n  height: 2px;\n  border-bottom-right-radius: 0.3em;\n  border-bottom-left-radius: 0.3em; }\n\n.active-rec-loader > .loader:before {\n  height: 2px;\n  border-bottom-right-radius: 0.3em;\n  border-bottom-left-radius: 0.3em; }\n\n.audio-level-control-container, .sketch-container {\n  float: left;\n  width: 30px;\n  height: 100%;\n  display: -ms-flexbox;\n  display: flex;\n  margin-top: 1px; }\n\n.audio-level-control-container {\n  margin-left: 8px; }\n\n.sketch-inner-container {\n  position: relative;\n  width: 35px;\n  height: 100%; }\n\n.audio-level-component {\n  position: relative;\n  top: 18px;\n  left: 2px; }\n\n.cancel-button-container {\n  margin-left: 3px; }\n\n.palette-location {\n  position: absolute;\n  -webkit-app-region: drag;\n  top: -121px;\n  left: -237px; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/active-recording/active-recording.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__active_recording_service__ = __webpack_require__("../../../../../src/personal/active-recording/active-recording.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_primeng_primeng__ = __webpack_require__("../../../../primeng/primeng.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_primeng_primeng___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_primeng_primeng__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_device_connection_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-connection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_palette_palette_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/palette/palette.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_session_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/session-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_confirm_dialog_active_recording_confirm_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActiveRecordingComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};














let ActiveRecordingComponent = class ActiveRecordingComponent {
    constructor(zone, routeService, activeRecordingService, deviceConnectionService, appState, videoDeviceService, videoDeviceSettingsService, sessionStateService, log, paletteService, activeRecordingConfirmService) {
        this.zone = zone;
        this.routeService = routeService;
        this.activeRecordingService = activeRecordingService;
        this.deviceConnectionService = deviceConnectionService;
        this.appState = appState;
        this.videoDeviceService = videoDeviceService;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.sessionStateService = sessionStateService;
        this.log = log;
        this.paletteService = paletteService;
        this.activeRecordingConfirmService = activeRecordingConfirmService;
        this.previewSessionName = null;
        this.sessionsInitSub = null;
        this.disconnectionSub = null;
        this.registered = false;
        this.hasScreenDevice = false;
    }
    ngOnInit() {
        this.initActiveRecording();
        this.registerSessionsInit();
        this.registerDeviceConnectionChange();
        this.activeRecordingService.registerKeyboardShortcuts();
        this.registerWindowDisabledEvents();
        this.activeRecordingConfirmService.openWindow = null;
    }
    ngOnDestroy() {
        this.disconnectionSub.unsubscribe();
        this.sessionsInitSub.unsubscribe();
        this.activeRecordingService.unRegisterKeyboardShortcuts();
        this.previewSessionName = null;
        this.unRegisterWindowDisabledEvents();
    }
    getRecordingTime() {
        this.zone.run(() => this.activeRecordingService.getRecordingTime());
        return this.activeRecordingService.getRecordingTime();
    }
    /**
     * can be pause / resume recording
     */
    onRecordButtonClick() {
        this.activeRecordingService.onRecordButtonClick();
    }
    onStopRecordButtonClick() {
        this.activeRecordingService.onStopRecordButtonClick();
    }
    onCancelRecordButtonClick() {
        this.activeRecordingService.onCancelRecordButtonClick();
    }
    isRecording() {
        return this.activeRecordingService.isRecording();
    }
    shouldDisableRecButton() {
        return !this.activeRecordingService.isRecordEnabled() || this.isAppProcessing();
    }
    minimize() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendSystemCommand('minimize');
    }
    isAppProcessing() {
        return this.activeRecordingService.isAppProcessing();
    }
    getAudioIconClassName() {
        return 'icon-audio' + (this.isAudioSessionActive() && !this.isAppProcessing() ? ' active-icon-color' : '-disable disabled-icon-color');
    }
    onSketchClick() {
        this.paletteService.onSketchClick();
    }
    checkIfRecordingScreenDevice() {
        let activeVisualSessions = this.appState.getActiveVisualSessions();
        this.hasScreenDevice = false;
        __WEBPACK_IMPORTED_MODULE_5_lodash__["forEach"](activeVisualSessions, (value, sessionId) => {
            if (this.videoDeviceService.getCaptureDeviceTypeBySessionId(sessionId) === 'screen') {
                this.hasScreenDevice = true;
                return false; //breaks foreach loop
            }
        });
    }
    shouldDisableSketchButton() {
        return this.isAppProcessing() || !this.hasScreenDevice || !this.activeRecordingService.isRecordEnabled();
    }
    initActiveRecording() {
        this.log.info('initActiveRecording()');
        this.activeRecordingService.prepareWindowForPreview()
            .then((sessionNameToPreview) => {
            this.previewSessionName = sessionNameToPreview; //can be an empty string - in this case, video preview won't open
            if (sessionNameToPreview) {
                this.videoDeviceService.stopAllVisualPreviewsExceptSessionName(sessionNameToPreview);
            }
            else {
                this.log.info('There is no need to prepare a preview windows.');
                this.videoDeviceService.stopPreviewAll()
                    .catch((err) => {
                    this.log.error('Failed to stop preview for all device during init active recording');
                });
            }
            this.checkIfRecordingScreenDevice();
        });
        //starting recording if needed
        setTimeout(() => {
            this.activeRecordingService.startRecordingOnInit();
        });
    }
    /**
     * support sessions re-init during recording. Need to make sure we are drawing the relevant video session
     * *** f.e: listening to device disconnection only will not work since it takes time for the sessions to re-init ***
     */
    registerSessionsInit() {
        this.sessionsInitSub = this.sessionStateService.sessionsInit$.subscribe(() => {
            this.initActiveRecording();
        });
    }
    registerDeviceConnectionChange() {
        this.disconnectionSub = this.deviceConnectionService.deviceConnectionState$.subscribe(event => {
            if (this.registered && !__WEBPACK_IMPORTED_MODULE_5_lodash__["isEmpty"](event)) {
                if (event['state'] && event['inUse']) {
                    this.previewSessionName = null;
                    this.activeRecordingService.onDisconnectionWindowChange(event);
                }
            }
            else {
                this.registered = true;
            }
        });
    }
    registerWindowDisabledEvents() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-main-window-enabled-state-change', (enabled) => {
            this.blocked_ui = !enabled;
        });
    }
    unRegisterWindowDisabledEvents() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('on-main-window-enabled-state-change');
    }
    isAudioSessionActive() {
        return this.activeRecordingService.isAudioSessionActive();
    }
};
ActiveRecordingComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'active-recording',
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
        template: __webpack_require__("../../../../../src/personal/active-recording/active-recording.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/active-recording/active-recording.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_1__active_recording_service__["a" /* ActiveRecordingService */], __WEBPACK_IMPORTED_MODULE_3_primeng_primeng__["ConfirmationService"]]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__["a" /* RouteService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__active_recording_service__["a" /* ActiveRecordingService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__active_recording_service__["a" /* ActiveRecordingService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_session_state_service__["a" /* SessionStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_session_state_service__["a" /* SessionStateService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_12__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_10__components_palette_palette_service__["a" /* PaletteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__components_palette_palette_service__["a" /* PaletteService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_13__components_confirm_dialog_active_recording_confirm_service__["a" /* ActiveRecordingConfirmService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_13__components_confirm_dialog_active_recording_confirm_service__["a" /* ActiveRecordingConfirmService */]) === "function" && _l || Object])
], ActiveRecordingComponent);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/active-recording.component.js.map

/***/ }),

/***/ "../../../../../src/personal/active-recording/active-recording.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_recording_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_primeng_primeng__ = __webpack_require__("../../../../primeng/primeng.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_primeng_primeng___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_primeng_primeng__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__app_consts__ = __webpack_require__("../../../../../src/personal/app.consts.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_audio_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__components_palette_palette_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/palette/palette.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__components_confirm_dialog_active_recording_confirm_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActiveRecordingService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
















let ActiveRecordingService = class ActiveRecordingService {
    constructor(changeDetectorRef, translate, log, appState, recordingService, confirmationService, videoService, routeService, accessService, audioService, paletteService, appConfig, activeRecordingConfirmService) {
        this.changeDetectorRef = changeDetectorRef;
        this.translate = translate;
        this.log = log;
        this.appState = appState;
        this.recordingService = recordingService;
        this.confirmationService = confirmationService;
        this.videoService = videoService;
        this.routeService = routeService;
        this.accessService = accessService;
        this.audioService = audioService;
        this.paletteService = paletteService;
        this.appConfig = appConfig;
        this.activeRecordingConfirmService = activeRecordingConfirmService;
        /**
         * shortcuts registrations UUIDs
         */
        this.shiftR_UUID = '';
        this.shiftC_UUID = '';
        this.shiftS_UUID = '';
        this.startRecordingLock = false;
    }
    /**
     * being called on component init to determine if to start new rec immediately or if to load in paused state
     */
    startRecordingOnInit() {
        if (this.shouldStartRecordingOnInit() && !this.startRecordingLock) {
            this.startRecordingLock = true;
            this.recordingService.startRecording()
                .then((recStarted) => {
                if (!recStarted)
                    this.routeService.navigate('pre-recording');
                else {
                    this.setAccessibilityAlert('started');
                    this.startRecordingLock = false;
                }
            })
                .catch((err) => {
                this.routeService.navigate('pre-recording');
            });
        }
    }
    /**
     * if component was loaded and application is not during any recording phase (initial phase)
     * so the route was made from pre-recording component and new recording flow should start
     * @returns {boolean}
     */
    shouldStartRecordingOnInit() {
        return this.appState.recordingPhase === 'initial';
    }
    shouldIgnoreButtonAction(action) {
        if (action == 'record' && !this.isRecordEnabled())
            return true;
        return this.isAppProcessing() || this.activeRecordingConfirmService.openWindow != null;
    }
    onRecordButtonClick() {
        if (this.shouldIgnoreButtonAction('record'))
            return;
        if (this.recordingService.isRecording()) {
            this.paletteService.changeMode('cursor');
            return this.recordingService.pauseRecording()
                .then(() => {
                this.setAccessibilityAlert('paused');
            });
        }
        else if (this.recordingService.isPaused()) {
            return this.recordingService.resumeRecording()
                .then(() => {
                this.setAccessibilityAlert('resumed');
            });
        }
        else {
            this.log.warn('onRecordButtonClick: invalid recording phase. Current phase is: ' + this.appState.recordingPhase);
            this.routeService.navigate('pre-recording');
            return Promise.resolve(false);
        }
    }
    onStopRecordButtonClick() {
        if (this.shouldIgnoreButtonAction('stop'))
            return;
        let currentRecState = this.appState.recordingPhase;
        this.activeRecordingConfirmService.openWindow = this.activeRecordingConfirmService.STOP_WINDOW;
        this.changeDetectorRef.detectChanges();
        this.recordingService.pauseRecording()
            .then(() => {
            this.paletteService.changeMode('cursor', { isIgnoreSave: true });
            this.translate.get("CONFIRMATIONS.StopRecording_Message").subscribe((localeText) => {
                this.confirmationService.confirm({
                    message: localeText,
                    key: "close-recording-key",
                    accept: () => {
                        this.recordingService.stopRecording()
                            .then(() => {
                            this.setAccessibilityAlert('saved');
                        });
                    },
                    reject: () => {
                        this.paletteService.reloadCanvasMode();
                        this.onConfirmDialogRejectClick(currentRecState);
                    }
                });
            });
        })
            .catch(() => { }); //do nothing
    }
    onCancelRecordButtonClick() {
        if (this.shouldIgnoreButtonAction('cancel'))
            return;
        let currentRecState = this.appState.recordingPhase;
        this.activeRecordingConfirmService.openWindow = this.activeRecordingConfirmService.CANCEL_WINDOW;
        this.changeDetectorRef.detectChanges();
        this.recordingService.pauseRecording()
            .then(() => {
            this.paletteService.changeMode('cursor', { isIgnoreSave: true });
            this.translate.get("CONFIRMATIONS.DiscardRecording_Message").subscribe((localeText) => {
                this.confirmationService.confirm({
                    message: localeText,
                    key: "discard-recording-key",
                    accept: () => {
                        return this.recordingService.cancelRecording()
                            .catch(() => { }) //if failed to cancel - just go to pre rec page (loose files will be left in rec dir)
                            .then(() => {
                            this.setAccessibilityAlert('canceled');
                            this.routeService.navigate('pre-recording');
                        });
                    },
                    reject: () => {
                        this.paletteService.reloadCanvasMode();
                        this.onConfirmDialogRejectClick(currentRecState);
                    }
                });
            });
        })
            .catch(() => { }); //do nothing
    }
    getRecordingTime() {
        return this.recordingService.getRecordingTime();
    }
    isRecording() {
        return this.recordingService.isRecording();
    }
    registerKeyboardShortcuts() {
        this.shiftR_UUID =
            __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].registerShortcut("CommandOrControl+Shift+R", () => {
                this.log.info('recording button shortcut...');
                this.onRecordButtonClick();
            });
        this.shiftS_UUID =
            __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].registerShortcut("CommandOrControl+Shift+S", () => {
                this.log.info('stop recording button shortcut...');
                __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setFocusOnMainWindow').catch(() => { });
                this.onStopRecordButtonClick();
            });
        this.shiftC_UUID =
            __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].registerShortcut("CommandOrControl+Shift+C", () => {
                this.log.info('cancel recording recording shortcut...');
                __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setFocusOnMainWindow').catch(() => { });
                this.onCancelRecordButtonClick();
            });
    }
    unRegisterKeyboardShortcuts() {
        __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].unRegisterShortcut("CommandOrControl+Shift+R", this.shiftR_UUID);
        __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].unRegisterShortcut("CommandOrControl+Shift+S", this.shiftS_UUID);
        __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].unRegisterShortcut("CommandOrControl+Shift+C", this.shiftC_UUID);
    }
    isAppProcessing() {
        return this.recordingService.isProcessing();
    }
    prepareWindowForPreview() {
        this.log.info('prepareWindowForPreview()');
        return this.appState.sessionsAreReadyPromise
            .then(() => {
            let sessionNameToPreview = this.getSessionNameToPreview();
            this.log.info('getting session name to preview: ' + sessionNameToPreview);
            if (sessionNameToPreview) {
                this.routeService.startTransitioning();
                return __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setWindowSize', { height: __WEBPACK_IMPORTED_MODULE_10__app_consts__["a" /* AppConsts */].ACTIVE_RECORDING_PREVIEW_HEIGHT, width: __WEBPACK_IMPORTED_MODULE_10__app_consts__["a" /* AppConsts */].ACTIVE_RECORDING_WIDTH })
                    .then(() => {
                    return __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowPosition", { text: 'bottom-right' });
                })
                    .then(() => {
                    this.routeService.endTransitioning();
                    return sessionNameToPreview;
                });
            }
            else {
                return Promise.resolve(sessionNameToPreview);
            }
        });
    }
    isRecordEnabled() {
        return this.recordingService.isRecordEnabled();
    }
    onDisconnectionWindowChange(event) {
        this.getRecenterPromise(event) //making sure we are drawing the window on the right screen (after screen disconnection)
            .catch((err) => { return Promise.resolve(); })
            .then(() => {
            __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowPosition", { text: 'bottom-right' }).catch((err) => { });
        });
    }
    getRecenterPromise(event) {
        return (event['deviceId'].toLowerCase().includes('display') || event['deviceId'].toLowerCase().includes('screen')) ?
            __WEBPACK_IMPORTED_MODULE_1_utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowPosition", { text: 'center' }) : Promise.resolve();
    }
    /**
     * video capture should be previewed only if there is no screen capture
     * if both devices capture video - take primary one
     * @returns {string}
     */
    getSessionNameToPreview() {
        this.log.info('ActiveRecording: getSessionNameToPreview()');
        let shouldPreview = true;
        let sessionNameToPreview = '';
        let numOfCams = 0;
        //if any device disconneced there is no need in preview
        if (this.recordingService.isRecordDisconnected()) {
            this.log.info('ActiveRecording: not showing preview window during recording due to device connection state');
            shouldPreview = false;
        }
        else {
            __WEBPACK_IMPORTED_MODULE_8_lodash__["forEach"](this.appState.getActiveVisualSessions(), (value, key) => {
                if (this.videoService.getCaptureDeviceTypeBySessionId(key) === 'screen') {
                    shouldPreview = false;
                    return false; //breaks lodash foreach loop
                }
                else {
                    numOfCams++;
                    sessionNameToPreview = (numOfCams === 1) ?
                        this.videoService.getSessionNameById(key) :
                        this.appConfig.getConfigData('config.captureApp.primarySessionName'); // if 2 cameras take the primary(!)
                }
            });
        }
        return shouldPreview ? sessionNameToPreview : '';
    }
    setAccessibilityAlert(state) {
        this.accessService.setAccessibilityAlert('RECORD.' + state);
    }
    onConfirmDialogRejectClick(prevRecState) {
        this.activeRecordingConfirmService.openWindow = null;
        let shouldResume = (prevRecState === 'recording') && this.isRecordEnabled();
        let recAction = shouldResume ? this.recordingService.resumeRecording() : this.recordingService.pauseRecording();
        let accessibilityAlert = shouldResume ? 'resumed' : 'paused';
        recAction.then(() => {
            this.setAccessibilityAlert(accessibilityAlert);
        });
    }
    isAudioSessionActive() {
        return this.audioService.isAudioEnabled(this.appConfig.getConfigData('config.captureApp.audioOnlyRecording'));
    }
};
ActiveRecordingService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_6_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6_ng2_translate__["b" /* TranslateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_recording_service__["a" /* RecordingService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_recording_service__["a" /* RecordingService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_5_primeng_primeng__["ConfirmationService"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5_primeng_primeng__["ConfirmationService"]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_route_service__["a" /* RouteService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_audio_device_service__["a" /* AudioDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_audio_device_service__["a" /* AudioDeviceService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_14__components_palette_palette_service__["a" /* PaletteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_14__components_palette_palette_service__["a" /* PaletteService */]) === "function" && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_13__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_13__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _m || Object, typeof (_o = typeof __WEBPACK_IMPORTED_MODULE_15__components_confirm_dialog_active_recording_confirm_service__["a" /* ActiveRecordingConfirmService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_15__components_confirm_dialog_active_recording_confirm_service__["a" /* ActiveRecordingConfirmService */]) === "function" && _o || Object])
], ActiveRecordingService);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/active-recording.service.js.map

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.component.html":
/***/ (function(module, exports) {

module.exports = "<p-confirmDialog class=\"active-recording-confirm-dialog\" closable=\"false\" #cd [key]=\"confirm_dialog_key\" dialog-addon role=\"dialog\" aria-modal=\"true\">\n  <p-footer class=\"footer\">\n    <button class=\"no-drag small-oval-button reject\" type=\"button\" (click)=\"cd.reject()\">{{reject_button_text}}</button>\n    <button class=\"no-drag small-oval-button accept\" type=\"button\" (click)=\"cd.accept()\">{{accept_button_text}}</button>\n    <div class=\"arrow-down-border\"></div>\n  </p-footer>\n</p-confirmDialog>\n"

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "p-confirmDialog.active-recording-confirm-dialog .ui-dialog-footer {\n  position: relative;\n  bottom: 5%;\n  padding: 0;\n  height: 53%;\n  width: 100%; }\n\np-confirmDialog.active-recording-confirm-dialog .footer {\n  height: 100%;\n  width: 100%;\n  text-align: center;\n  margin: 0 auto;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: center;\n      justify-content: center;\n  -ms-flex-align: center;\n      align-items: center;\n  resize: both; }\n\np-confirmDialog.active-recording-confirm-dialog .reject {\n  left: -13px;\n  height: 24px;\n  width: 46px;\n  font-weight: 500;\n  position: static !important;\n  margin-right: 4px;\n  white-space: nowrap; }\n\np-confirmDialog.active-recording-confirm-dialog .accept {\n  height: 24px;\n  right: 10px;\n  font-weight: 500;\n  position: static !important;\n  margin-left: 4px;\n  white-space: nowrap; }\n\np-confirmDialog.active-recording-confirm-dialog .ui-dialog-titlebar {\n  display: none; }\n\np-confirmDialog.active-recording-confirm-dialog .ui-dialog-footer .ui-button:hover {\n  background-color: #666666; }\n\np-confirmDialog.active-recording-confirm-dialog .ui-dialog-content {\n  padding: 0px !important;\n  margin: 8px 16px 0 16px;\n  height: 43px;\n  text-align: center; }\n\np-confirmDialog.active-recording-confirm-dialog .ui-confirmdialog-message {\n  position: relative;\n  font-family: Lato;\n  font-size: 14px;\n  line-height: 1.29;\n  letter-spacing: 0.4px;\n  text-align: center;\n  color: #ffffff; }\n\np-confirmDialog.active-recording-confirm-dialog .ui-confirmdialog {\n  position: relative !important;\n  top: 0px !important;\n  left: 0px !important;\n  width: 100% !important;\n  height: 100% !important;\n  background-color: #333333;\n  box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.25);\n  border: solid 2px rgba(255, 255, 255, 0.12);\n  border-radius: 4px;\n  outline: none; }\n\np-confirmDialog.active-recording-confirm-dialog .container {\n  position: relative;\n  width: 100%;\n  height: 100%; }\n\np-confirmDialog.active-recording-confirm-dialog .ui-button-text-only .ui-button-text {\n  padding: 1px 0 3px 0; }\n\np-confirmDialog.active-recording-confirm-dialog .arrow-down-border {\n  border-style: solid;\n  border-color: #4b4b4b transparent transparent transparent !important;\n  border-width: 8px 15px 0 15px !important;\n  left: calc(50% - 9px) !important;\n  bottom: -9px;\n  position: absolute; }\n  p-confirmDialog.active-recording-confirm-dialog .arrow-down-border:after {\n    content: '';\n    display: block;\n    position: absolute;\n    width: 0;\n    height: 0;\n    border-style: solid;\n    border-color: #333333 transparent transparent transparent;\n    border-width: 8px 15px 0 15px;\n    bottom: 2px;\n    left: calc(50% - 15px); }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActiveRecordingConfirmComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let ActiveRecordingConfirmComponent = class ActiveRecordingConfirmComponent {
    constructor(renderer) {
        this.renderer = renderer;
    }
    ngOnInit() {
        this.renderer.addClass(document.body, 'transparent-overlay');
    }
    ngOnDestroy() {
        this.renderer.removeClass(document.body, 'transparent-overlay');
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], ActiveRecordingConfirmComponent.prototype, "confirm_dialog_key", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], ActiveRecordingConfirmComponent.prototype, "reject_button_text", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], ActiveRecordingConfirmComponent.prototype, "accept_button_text", void 0);
ActiveRecordingConfirmComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'active-recording-confirm',
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
        template: __webpack_require__("../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer2"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer2"]) === "function" && _a || Object])
], ActiveRecordingConfirmComponent);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/active-recording-confirm.component.js.map

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActiveRecordingConfirmService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let ActiveRecordingConfirmService = class ActiveRecordingConfirmService {
    constructor() {
        this.openWindow = null;
        this.STOP_WINDOW = "stop_window";
        this.CANCEL_WINDOW = "cancel_window";
    }
};
ActiveRecordingConfirmService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [])
], ActiveRecordingConfirmService);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/active-recording-confirm.service.js.map

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/palette/palette.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"palette-container\" (mouseleave)=\"reDrawSketch()\">\n\n  <!-- Loader -->\n  <div *ngIf=\"paletteService.showingLoader\" class=\"palette-container-loading-overlay\">\n    <loader-gauge [size]=\"'small'\" class=\"processing-loader\"></loader-gauge>\n  </div>\n\n  <!-- Toolbox -->\n  <div class=\"toolbox\">\n    <!-- Tools: Pencil, Arrow, Select, Text, Cursor... -->\n    <div class=\"tool-row-1\">\n      <div class=\"btn-padding\" [pTooltip]=\" 'RECORD.draw' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n        <button class=\"pencil-icon round-button pc-button\" (click)=\"changeTool('draw')\"\n                [ngClass]=\"{'pressed' : getMode() === 'draw'}\" [attr.aria-label]=\"'RECORD.draw' | translate\">\n        </button>\n      </div>\n\n      <div class=\"btn-padding\" [pTooltip]=\" 'RECORD.arrow' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n        <button class=\"arrow-icon round-button pc-button\" (click)=\"changeTool('arrow')\"\n                [ngClass]=\"{'pressed' : getMode() === 'arrow'}\" [attr.aria-label]=\"'RECORD.arrow' | translate\">\n        </button>\n      </div>\n      <div class=\"btn-padding\" [pTooltip]=\" 'RECORD.text' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n        <button class=\"text-icon round-button pc-button\" (click)=\"changeTool('textBox')\"\n                [ngClass]=\"{'pressed' : getMode() === 'textBox'}\" [attr.aria-label]=\"'RECORD.text' | translate\">\n        </button>\n      </div>\n    </div>\n    <div class=\"tool-row-2 justify-content-to-be-removed\">\n      <div class=\"btn-padding\" [pTooltip]=\" 'RECORD.cursor' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n        <button class=\"cursor-pointer-icon round-button pc-button\" (click)=\"changeTool('cursor')\"\n                [disabled]=\"paletteService.isWhiteboardOn\"\n                [ngClass]=\"{'pressed' : getMode() === 'cursor'}\" [attr.aria-label]=\"'RECORD.cursor' | translate\">\n        </button>\n      </div>\n      <div class=\"btn-padding margin-to-be-removed\" [pTooltip]=\" 'RECORD.selection_tool' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n        <button class=\"select-icon round-button pc-button\" (click)=\"changeTool('select')\"\n                [ngClass]=\"{'pressed' : getMode() === 'select'}\" [attr.aria-label]=\"'RECORD.selection_tool' | translate\">\n        </button>\n      </div>\n      <!--<div class=\"btn-padding\" [pTooltip]=\" 'RECORD.magnifier' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n        <button class=\"magnifier-icon round-button pc-button\" (click)=\"changeTool('magnifier')\"-->\n                <!--[ngClass]=\"{'pressed' : getMode() === 'magnifier'}\" [attr.aria-label]=\"'RECORD.magnifier' | translate\">-->\n        <!--</button>\n      </div>-->\n    </div>\n  </div>\n\n  <!-- Divider -->\n  <div class=\"line-separator-white\"></div>\n  <div class=\"line-separator-black\"></div>\n\n  <!-- Color Picker & Slider -->\n  <div class=\"properties-box\">\n    <div class=\"color-and-buttons\">\n      <div class=\"color-picker\">\n        <div class=\"color-row-1\">\n          <button class=\"white-ball small-ball-button pc-button\" (click)=\"changeColor('#ffffff')\"\n                  [ngClass]=\"{'pressed' : getColor() === '#ffffff'}\" [attr.aria-label]=\"'RECORD.colors.white' | translate\">\n          </button>\n          <button class=\"red-ball small-ball-button pc-button\" (click)=\"changeColor('#da1f26')\"\n                  [ngClass]=\"{'pressed' : getColor() === '#da1f26'}\" [attr.aria-label]=\"'RECORD.colors.red' | translate\">\n          </button>\n          <button class=\"blue-ball small-ball-button pc-button\" (click)=\"changeColor('#00abcc')\"\n                  [ngClass]=\"{'pressed' : getColor() === '#00abcc'}\" [attr.aria-label]=\"'RECORD.colors.blue' | translate\">\n          </button>\n        </div>\n\n        <div class=\"color-row-2\">\n          <button class=\"black-ball small-ball-button pc-button\" (click)=\"changeColor('#000000')\"\n                  [ngClass]=\"{'pressed' : getColor() === '#000000'}\" [attr.aria-label]=\"'RECORD.colors.black' | translate\">\n          </button>\n          <button class=\"yellow-ball small-ball-button pc-button\" (click)=\"changeColor('#fcd203')\"\n                  [ngClass]=\"{'pressed' : getColor() === '#fcd203'}\" [attr.aria-label]=\"'RECORD.colors.yellow' | translate\">\n          </button>\n          <button class=\"green-ball small-ball-button pc-button\" (click)=\"changeColor('#009344')\"\n                  [ngClass]=\"{'pressed' : getColor() === '#009344'}\" [attr.aria-label]=\"'RECORD.colors.green' | translate\">\n          </button>\n        </div>\n      </div>\n      <div class=\"extra-canvas-buttons\">\n        <div class=\"btn-padding\" [pTooltip]=\" 'RECORD.trash' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n          <button class=\"trash-icon basic-hover pc-button focus-once\" (click)=\"clearCanvas()\"\n                  [attr.aria-label]=\"'RECORD.trash' | translate\"></button>\n        </div>\n        <div class=\"btn-padding\" [pTooltip]=\" 'RECORD.whiteboard' | translate \" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon>\n          <button class=\"pc-button focus-once\" (click)=\"onWhiteboardClick()\"\n                  [ngClass]=\"{ 'whiteboard-icon-active': paletteService.isWhiteboardOn, 'whiteboard-icon': !paletteService.isWhiteboardOn}\"\n                  [attr.aria-label]=\"'RECORD.whiteboard' | translate\"></button>\n        </div>\n      </div>\n    </div>\n    <div class=\"slider-container\">\n      <div class=\"slider-pic\"></div>\n      <input class=\"slider\" type=\"range\" min=\"0\" max=\"100\" [(ngModel)]=\"paletteService.rangeValue\" (change)=\"onRangeChange()\" orient=\"vertical\">\n    </div>\n  </div>\n\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/palette/palette.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".palette-container {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-flow: row wrap;\n      flex-flow: row wrap;\n  width: 274px;\n  height: 110px;\n  background-color: #24212a;\n  border: 1px solid #24212a;\n  border-radius: 4px;\n  box-sizing: border-box; }\n\n.palette-container-loading-overlay {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  opacity: 0.70;\n  z-index: 99;\n  background: #24212a; }\n\n.processing-loader {\n  width: 33%;\n  position: absolute;\n  bottom: 0;\n  left: 33%; }\n\n:host /deep/ .loader {\n  height: 2px; }\n\n:host /deep/ .loader:before {\n  height: 2px; }\n\n.toolbox {\n  width: 157px; }\n\n.line-separator-white {\n  width: 1px;\n  opacity: 0.07;\n  background-color: #ffffff; }\n\n.line-separator-black {\n  width: 1px;\n  opacity: 0.6;\n  background-color: #000000; }\n\n.properties-box {\n  width: 112px;\n  display: -ms-flexbox;\n  display: flex; }\n\n.color-and-buttons {\n  -ms-flex: 1 0 0px;\n      flex: 1 0 0;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  padding: 13px 0; }\n\n.color-picker {\n  -ms-flex: 1 0 100%;\n      flex: 1 0 100%;\n  max-width: 100%;\n  height: 45px;\n  position: relative;\n  left: 7px;\n  top: 5px; }\n\n.extra-canvas-buttons {\n  display: -ms-flexbox;\n  display: flex;\n  max-width: 100%;\n  -ms-flex-preferred-size: 100%;\n      flex-basis: 100%;\n  height: 24px;\n  position: relative;\n  left: 12px;\n  top: -5px; }\n\n.slider-container {\n  width: 32px;\n  position: relative; }\n\n.tool-row-1, .tool-row-2 {\n  height: 50%;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: justify;\n      justify-content: space-between;\n  box-sizing: border-box; }\n\n.tool-row-1 {\n  padding: 6px 16px 8px 16px; }\n\n.tool-row-2 {\n  padding: 0 16px 8px 16px; }\n\n.round-button {\n  background-color: rgba(255, 255, 255, 0.06);\n  background-repeat: no-repeat;\n  background-position: center;\n  height: 32px;\n  width: 32px;\n  border-radius: 50%;\n  opacity: 0.7;\n  transition: opacity 0.1s cubic-bezier(0.42, 0.29, 0.24, 0.8);\n  cursor: pointer; }\n  .round-button:hover {\n    opacity: 1;\n    border: solid 2px rgba(0, 171, 204, 0.7); }\n  .round-button:disabled {\n    opacity: 0.3;\n    border: none;\n    cursor: pointer; }\n  .round-button.pressed {\n    opacity: 1;\n    border: solid 2px #00abcc;\n    transform: scale(1.05); }\n\n.pencil-icon {\n  background-image: url(" + escape(__webpack_require__("../../../../../src/assets/svg/32/pencil.svg")) + ");\n  background-size: 32px; }\n\n.arrow-icon {\n  background-image: url(" + escape(__webpack_require__("../../../../../src/assets/svg/32/arrow.svg")) + ");\n  background-size: 32px; }\n\n.text-icon {\n  background-image: url(" + escape(__webpack_require__("../../../../../src/assets/svg/32/text.svg")) + ");\n  background-size: 32px; }\n\n.cursor-pointer-icon {\n  background-image: url(" + escape(__webpack_require__("../../../../../src/assets/svg/32/pointer.svg")) + ");\n  background-size: 32px; }\n\n.select-icon {\n  background-image: url(" + escape(__webpack_require__("../../../../../src/assets/svg/32/move-tool.svg")) + ");\n  background-size: 32px; }\n\n.magnifier-icon {\n  background-image: url(" + escape(__webpack_require__("../../../../../src/assets/svg/32/magnifier.svg")) + ");\n  background-size: 32px; }\n\n.remove-when-magnifier-icon-is-on {\n  height: 32px;\n  width: 32px; }\n\n.small-ball-button {\n  height: 14px;\n  width: 14px;\n  border-radius: 50%;\n  margin-right: 5px;\n  margin-bottom: 6px; }\n  .small-ball-button.pressed {\n    transform: scale(1.4);\n    border: solid 2px #ffffff; }\n\n.white-ball {\n  background-color: #ffffff; }\n\n.red-ball {\n  background-color: #da1f26; }\n\n.blue-ball {\n  background-color: #00abcc; }\n\n.black-ball {\n  background-color: #000000; }\n\n.yellow-ball {\n  background-color: #fcd203; }\n\n.green-ball {\n  background-color: #009344; }\n\n.trash-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/trash.svg")) + ") no-repeat center center;\n  background-size: 20px;\n  height: 40px;\n  width: 32px;\n  position: relative;\n  top: -10px;\n  left: 0; }\n\n.slider-pic {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/custom/slider.svg")) + ") no-repeat center center;\n  height: 76px;\n  width: 11px;\n  position: absolute;\n  left: calc(50% - 5px);\n  top: calc(50% - 38px); }\n\n/* The slider itself */\n.slider {\n  -moz-appearance: none;\n       appearance: none;\n  -webkit-appearance: none;\n  background: transparent;\n  -webkit-app-region: no-drag;\n  -webkit-transition: .2s;\n  height: 11px;\n  width: 76px;\n  transform: rotate(270deg);\n  position: absolute;\n  top: 46px;\n  left: -24px;\n  outline: none;\n  cursor: pointer; }\n  .slider:hover {\n    opacity: 1; }\n\n.slider::-webkit-slider-thumb {\n  border-radius: 50%;\n  -webkit-appearance: none;\n  appearance: none;\n  width: 12px;\n  height: 12px;\n  background: #ffffff;\n  cursor: pointer; }\n\n.btn-padding {\n  padding-top: 10px; }\n\n.color-row-1, .color-row-2 {\n  text-align: center;\n  height: 22px; }\n\n.margin-to-be-removed {\n  margin-left: 15px; }\n\n.tool-row-2.justify-content-to-be-removed {\n  -ms-flex-pack: center;\n      justify-content: center; }\n\n.whiteboard-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/22/whiteboard.svg")) + ") no-repeat center center;\n  opacity: 0.7;\n  background-size: 22px;\n  height: 40px;\n  width: 30px;\n  position: relative;\n  top: -10px;\n  left: 0; }\n  .whiteboard-icon:hover {\n    opacity: 1; }\n  .whiteboard-icon[disabled] {\n    opacity: 0.7; }\n\n.whiteboard-icon-active {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/22/whiteboard-on.svg")) + ") no-repeat center center;\n  background-size: 22px;\n  height: 40px;\n  width: 30px;\n  position: relative;\n  top: -10px;\n  left: 0; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/palette/palette.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__palette_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/palette/palette.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PaletteComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let PaletteComponent = class PaletteComponent {
    constructor(paletteService, log) {
        this.paletteService = paletteService;
        this.log = log;
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-textbox:modified', textObj => {
            this.paletteService.addAnnotationCuePoint(textObj);
        });
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-selection:added', selectedObject => {
            if (selectedObject) {
                this.paletteService.setColor(selectedObject.stroke || selectedObject.fill, false);
            }
        });
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-escape', () => {
            this.changeTool('cursor');
        });
    }
    onKeyUp(event) {
        if (event.code === "Escape") {
            this.changeTool('cursor');
        }
    }
    changeTool(mode) {
        this.paletteService.changeMode(mode)
            .catch((err) => {
            return this.log.info('Error: fail at PaletteComponent: changeTool ' + mode + ' ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            // if there is and illegal mode, do nothings
        });
    }
    changeColor(color) {
        this.paletteService.setColor(color)
            .catch((err) => {
            return this.log.info('Error: fail at PaletteComponent: changeColor ' + color + ' ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            // if there is and illegal color, do nothings
        });
    }
    clearCanvas() {
        this.paletteService.clearCanvas();
    }
    getColor() {
        return this.paletteService.getColor();
    }
    getMode() {
        return this.paletteService.getMode();
    }
    onRangeChange() {
        // fire event after 200ms of untouched the range input
        clearTimeout(this.rangeChangeTimeout);
        setTimeout(() => {
            if (this.paletteService.getMode() === 'textBox') {
                this.paletteService.setFontSize()
                    .catch((err) => {
                    //do nothing
                    return this.log.info('Error: fail at PaletteComponent: onRangeChange setFontSize of textBox' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
                });
            }
            else {
                this.paletteService.setWidth()
                    .catch((err) => {
                    //do nothing
                    return this.log.info('Error: fail at PaletteComponent: onRangeChange setWidth of ' + this.getMode() + ' ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
                });
            }
        }, 200);
    }
    onWhiteboardClick() {
        this.paletteService.onWhiteboardClick();
    }
    reDrawSketch() {
        return this.paletteService.reDrawSketchWin();
    }
    ngOnDestroy() {
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('on-textbox:modified');
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('on-selection:added');
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('document:keyup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], PaletteComponent.prototype, "onKeyUp", null);
PaletteComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'palette',
        template: __webpack_require__("../../../../../src/personal/active-recording/components/palette/palette.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/active-recording/components/palette/palette.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__palette_service__["a" /* PaletteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__palette_service__["a" /* PaletteService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object])
], PaletteComponent);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/palette.component.js.map

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/palette/palette.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_recording_recording_details_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-details.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_connection_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-connection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_session_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/session-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shared_services_recording_mouse_click_indication_service__ = __webpack_require__("../../../../../src/shared/services/recording/mouse-click-indication.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PaletteService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












let PaletteService = PaletteService_1 = class PaletteService {
    constructor(log, recordingDetailsService, deviceConnectionService, videoDeviceSettingsService, videoDeviceService, sessionStateService, mouseClickIndicationService, appState) {
        this.log = log;
        this.recordingDetailsService = recordingDetailsService;
        this.deviceConnectionService = deviceConnectionService;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.videoDeviceService = videoDeviceService;
        this.sessionStateService = sessionStateService;
        this.mouseClickIndicationService = mouseClickIndicationService;
        this.appState = appState;
        this.isSketchOn = false;
        this.isSketchWasOpened = false;
        this.isWhiteboardOn = false;
        this.isWhiteboardWasOpened = false;
        this._showingLoader = true;
        this._changeModeDirtyFlag = false;
        this.resetToolsStateToDefault();
        this.registerEvents();
    }
    set showingLoader(isLoading) {
        this._showingLoader = isLoading;
        if (isLoading) {
            setTimeout(() => {
                this.showingLoader = false;
            }, PaletteService_1.MAX_TIME_TO_SHOW_LOADER);
        }
    }
    get showingLoader() {
        return this._showingLoader;
    }
    resetToolsStateToDefault() {
        this.mode = PaletteService_1.DEFAULT_MODE;
        this.color = PaletteService_1.DEFAULT_COLOR;
        this.rangeValue = 50;
    }
    registerEvents() {
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-hide-whiteboard', () => {
            this.isWhiteboardOn = false;
            this.changeMode('cursor');
        });
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('sketch-on-finish-load', (winName) => {
            this.reloadCanvasMode(); // reload state when sketch is ready
            this.showingLoader = false;
            __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setFocusOnMainWindow').catch(() => { });
        });
        this.deviceConnectionService.deviceConnectionState$.subscribe(event => {
            //if app is recording, handle connection changes for in use devices only
            if (this.shouldHandleDisconnectionEvent(event)) {
                //on every disconnection - close sketch pallete
                if (event['state'] === 'disconnected') {
                    this.isSketchOn = false;
                }
                //handle screen connection state change - we need to hide / show the relevant sketch window
                if (this.isScreenConnectionChangeEvent(event)) {
                    this.appState.areSessionsReadyForRecording('on-device-status-change')
                        .catch(() => { }) //we want to listen to on-device-status-change notification all the time
                        .then(() => {
                        if (event['state'] === 'disconnected') {
                            this.handleScreenDisconnectionEvent(event);
                        }
                        else if (event['state'] === 'connected') {
                            this.handleScreenConnectionEvent(event);
                        }
                        // apply last state & refresh
                        this.reloadCanvasMode();
                    });
                }
            }
        });
    }
    shouldHandleDisconnectionEvent(event) {
        return this.appState.isAppRecording() && !__WEBPACK_IMPORTED_MODULE_7_lodash__["isEmpty"](event) && event['inUse'] &&
            (event['state'] === 'disconnected' || event['state'] === 'connected');
    }
    isScreenConnectionChangeEvent(event) {
        return event['deviceId'].toLowerCase().includes('display') || event['deviceId'].toLowerCase().includes('screen');
    }
    handleScreenDisconnectionEvent(event) {
        let deviceData = this.videoDeviceSettingsService.getDeviceData(event['deviceId']);
        if (!__WEBPACK_IMPORTED_MODULE_7_lodash__["isEmpty"](deviceData)) {
            let sessionName = this.videoDeviceSettingsService.getSessionNameByDeviceId(deviceData.device_id);
            this.log.info('PaletteService: display disconnected hiding sketch: sessionName: ' + sessionName);
            this.hideSketch(sessionName);
        }
    }
    handleScreenConnectionEvent(event) {
        let sessionsInitSub = this.sessionStateService.sessionsInit$.subscribe(() => {
            let deviceData = this.videoDeviceSettingsService.getDeviceData(event['deviceId']);
            let sessionName = this.videoDeviceSettingsService.getSessionNameByDeviceId(deviceData.device_id);
            this.log.info('PaletteService: display connected showing back the sketch: sessionName: ' + sessionName);
            this.showAllSketchWins();
            sessionsInitSub.unsubscribe();
        });
    }
    showAllSketchWins() {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('show-all-sketch-wins');
    }
    changeMode(mode, params = {}) {
        if (params && !params.isIgnoreSave) {
            this.mode = mode;
        }
        let changeSizePromise;
        if (this.mode === 'textBox') {
            params.action = 'setFontSize';
            params.data = { fontSize: this.getFontSize() };
            changeSizePromise = this._sendSketchActionRequest(params);
        }
        else if (this.mode === 'draw' || this.mode === 'arrow') {
            params.action = 'setWidth';
            params.data = { width: this.getLineSize() };
            changeSizePromise = this._sendSketchActionRequest(params);
        }
        else {
            changeSizePromise = Promise.resolve();
        }
        this.log.info('PaletteService: changeMode to: ' + mode);
        return changeSizePromise
            .then(() => {
            params.action = mode;
            params.clickThrough = (mode === 'cursor');
            return this._sendSketchActionRequest(params);
        })
            .then(() => {
            this._changeModeDirtyFlag = true;
            if (mode === 'cursor') {
                return this.mouseClickIndicationService.startMouseClickIndication();
            }
            else {
                return this.mouseClickIndicationService.stopMouseClickIndication();
            }
        });
        //when changing back to cursor we need to redraw sketch window inorder for the mouse cursor to change - this will be done after mouse leave of the palette component
        //chrome issue @see:
        //https://bugs.chromium.org/p/chromium/issues/detail?id=26723#c87
        //https://stackoverflow.com/questions/1718415/getting-the-browser-cursor-from-wait-to-auto-without-the-user-moving-the-mou
    }
    reDrawSketchWin() {
        if (this.isSketchOn && this._changeModeDirtyFlag) {
            setTimeout(() => { return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('redraw-sketch-win'); }, 200);
        }
        this._changeModeDirtyFlag = false;
    }
    _sendSketchActionRequest(params) {
        params.isWhiteboardOn = this.isWhiteboardOn;
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('sketch-action', params);
    }
    setColor(color, triggerEvent = true) {
        this.color = color;
        if (triggerEvent) {
            this.log.info('PaletteService: setColor to: ' + color);
            return this._sendSketchActionRequest({ action: 'setColor', data: { color: color } })
                .then(() => {
                return this.reloadCanvasMode();
            });
        }
    }
    setWidth() {
        let lineSize = this.getLineSize();
        this.log.info('PaletteService: setWidth to: ' + lineSize);
        return this._sendSketchActionRequest({ action: 'setWidth', data: { width: lineSize } })
            .then(() => {
            return this.reloadCanvasMode();
        });
    }
    getLineSize() {
        return PaletteService_1.MIN_LINE_SIZE + Math.floor((PaletteService_1.MAX_LINE_SIZE - PaletteService_1.MIN_LINE_SIZE) * (this.rangeValue / 100));
    }
    setFontSize() {
        let fontSize = this.getFontSize();
        this.log.info('PaletteService: setFontSize to: ' + fontSize);
        return this._sendSketchActionRequest({ action: 'setFontSize', data: { fontSize: fontSize } })
            .then(() => {
            return this.reloadCanvasMode();
        });
    }
    getFontSize() {
        return PaletteService_1.MIN_FONT_SIZE + Math.floor((PaletteService_1.MAX_FONT_SIZE - PaletteService_1.MIN_FONT_SIZE) * (this.rangeValue / 100));
    }
    clearCanvas() {
        this.log.info('PaletteService: clearCanvas');
        let canvasNames = [];
        // send clear command to screen canvas OR whiteboard - not all.
        if (this.isWhiteboardOn) {
            canvasNames.push('whiteboard');
        }
        else {
            let activeVisualSessions = this.appState.getActiveVisualSessions();
            __WEBPACK_IMPORTED_MODULE_7_lodash__["forEach"](activeVisualSessions, (value, sessionId) => {
                if (this.videoDeviceService.getCaptureDeviceTypeBySessionId(sessionId) === 'screen') {
                    canvasNames.push(this.videoDeviceService.getSessionNameById(sessionId));
                }
            });
        }
        return this._sendSketchActionRequest({ action: 'deleteAll', canvasNames: canvasNames })
            .then(() => {
            return this.reloadCanvasMode();
        });
    }
    getColor() {
        return this.color;
    }
    getMode() {
        return this.mode;
    }
    toggleSketchCanvas(state, screens) {
        if (state) {
            const params = {
                screens: screens,
                toolProperties: {
                    mode: this.mode,
                    color: this.color,
                    width: this.getLineSize()
                }
            };
            this.log.info('PaletteService: toggleSketchTool open-sketch-window' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(params));
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('open-sketch-window', params);
        }
        else {
            this.log.info('PaletteService: toggleSketchTool close-all-sketch-window');
            this.isSketchOn = false;
            this.isSketchWasOpened = false;
            this.isWhiteboardOn = false;
            this.isWhiteboardWasOpened = false;
            this.resetToolsStateToDefault();
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('close-all-sketch-window');
        }
    }
    hideSketch(name) {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('hide-sketch', name);
    }
    addAnnotationCuePoint(textObj) {
        this.recordingDetailsService.addAnnotationCuePoint(textObj);
    }
    reloadCanvasMode(params = {}) {
        return this.changeMode(this.mode, params);
    }
    onSketchClick() {
        this.isSketchOn = !this.isSketchOn;
        if (this.isSketchOn) {
            // At the first time: Open new browser window + canvas...
            if (!this.isSketchWasOpened) {
                this.isSketchWasOpened = true;
                this.showingLoader = true;
                let activeVisualSessions = this.appState.getActiveVisualSessions();
                let realScreensForSketching = [];
                __WEBPACK_IMPORTED_MODULE_7_lodash__["forEach"](activeVisualSessions, (value, sessionId) => {
                    if (this.videoDeviceService.getCaptureDeviceTypeBySessionId(sessionId) === 'screen') {
                        let deviceData = this.videoDeviceSettingsService.getDeviceDataBySessionId(sessionId);
                        realScreensForSketching.push({ sessionName: this.videoDeviceSettingsService.getSessionNameById(sessionId), bounds: deviceData['bounds'] });
                    }
                });
                if (!__WEBPACK_IMPORTED_MODULE_7_lodash__["isEmpty"](realScreensForSketching)) {
                    this.toggleSketchCanvas(true, realScreensForSketching);
                }
            }
            else {
                // if canvas has already been open - just "reload" the last save state.
                this.reloadCanvasMode();
            }
        }
        else {
            // if off: just change to cursor and don't save this state.
            this.changeMode('cursor', { isIgnoreSave: true });
        }
    }
    onWhiteboardClick() {
        this.isWhiteboardOn = !this.isWhiteboardOn;
        if (this.isWhiteboardOn) {
            // At the first time: Open new browser window + canvas...
            if (!this.isWhiteboardWasOpened) {
                this.showingLoader = true;
                this.isWhiteboardWasOpened = true;
                // disable full screen canvas - to cursor
                this.changeMode('cursor', { isIgnoreSave: true, forceClickThrough: true });
                // create and open the whiteboard on the same screen as the palette
                __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getWindowsBounds')
                    .then(multiBounds => {
                    this.toggleSketchCanvas(true, [{ sessionName: 'whiteboard', bounds: multiBounds['electronBounds'] }]);
                })
                    .catch((err) => {
                    // if failed do nothing
                    this.log.error('Error: onWhiteboardClick Failed to open whiteboard: ' + JSON.stringify(err));
                });
            }
            else {
                // if whiteboard has already been opened before - show it and "reload" the last saved state.
                // and disable full screen canvas - to cursor
                this.changeMode('draw', { forceClickThrough: true });
                this.showAllSketchWins();
            }
        }
        else {
            // hide the whiteboard window
            this.hideSketch('whiteboard')
                .then(() => {
                // enable by reloading the full screen canvas
                //this.paletteService.reloadCanvasMode();
                this.changeMode('cursor');
            });
        }
    }
};
PaletteService.MAX_TIME_TO_SHOW_LOADER = 6000;
PaletteService.DEFAULT_MODE = 'cursor';
PaletteService.DEFAULT_COLOR = '#fcd203';
PaletteService.MIN_FONT_SIZE = 12;
PaletteService.MAX_FONT_SIZE = 72;
PaletteService.MIN_LINE_SIZE = 1;
PaletteService.MAX_LINE_SIZE = 20;
PaletteService = PaletteService_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_recording_recording_details_service__["a" /* RecordingDetailsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_recording_recording_details_service__["a" /* RecordingDetailsService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_11__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_session_state_service__["a" /* SessionStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_session_state_service__["a" /* SessionStateService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_10__shared_services_recording_mouse_click_indication_service__["a" /* MouseClickIndicationService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__shared_services_recording_mouse_click_indication_service__["a" /* MouseClickIndicationService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _h || Object])
], PaletteService);

var PaletteService_1, _a, _b, _c, _d, _e, _f, _g, _h;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/palette.service.js.map

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/video-preview/video-preview.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"default-background-color video-preview-container\">\n  <div class=\"video-rec-preview\">\n\n  </div>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/video-preview/video-preview.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".video-preview-container {\n  position: relative;\n  width: 421px;\n  height: 247px;\n  border-radius: 4px;\n  background-color: #24212a;\n  box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.25); }\n\n.video-rec-preview {\n  position: absolute;\n  left: calc(50% - 198.5px);\n  top: calc(50% - 111.5px);\n  width: 397px;\n  height: 223px; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/video-preview/video-preview.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__video_preview_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/video-preview/video-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_session_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/session-state.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VideoPreviewComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let VideoPreviewComponent = class VideoPreviewComponent {
    constructor(elementRef, appState, videoPreviewService, sessionStateService) {
        this.elementRef = elementRef;
        this.appState = appState;
        this.videoPreviewService = videoPreviewService;
        this.sessionStateService = sessionStateService;
        this.resizeTimeout = null;
        this.onTheMove = false;
        this.sessionsInitSub = null;
        this.registered = false;
        this.onWinMoveSub = false;
    }
    ngAfterViewInit() {
        this.registerToWindowMove();
        this.updatePreviewPosition();
        this.registerOnWindowVisibilityChange();
        this.registerSessionsInit();
    }
    ngOnDestroy() {
        if (this.onWinMoveSub) {
            this.onWinMoveSub = false;
            __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('on-window-move');
            this.videoPreviewService.stopDevicePreview(this.sessionName);
        }
        if (this.sessionsInitSub)
            this.sessionsInitSub.unsubscribe();
    }
    registerToWindowMove() {
        if (!this.onWinMoveSub) {
            this.onWinMoveSub = true;
            __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-window-move', () => {
                this.updatePreviewPosition();
            });
        }
    }
    updatePreviewPosition() {
        clearTimeout(this.resizeTimeout);
        if (!this.onTheMove) {
            this.videoPreviewService.startDevicePreview(this.sessionName, { left: 0, top: 0, width: 0, height: 0 });
            this.onTheMove = true;
        }
        this.resizeTimeout = setTimeout(() => {
            this.videoPreviewService.startDevicePreview(this.sessionName, this.getPreviewElementPosition());
            this.onTheMove = false;
        }, 400);
    }
    getPreviewElementPosition() {
        let previewElement = this.elementRef.nativeElement.querySelector('.video-rec-preview');
        if (previewElement) {
            return this.videoPreviewService.getValidatedDimensions(previewElement);
        }
        else {
            return null;
        }
    }
    registerOnWindowVisibilityChange() {
        this.appState.applicationWindowState$.skip(1).subscribe((state) => {
            if (this.registered) {
                if (state === this.appState.WINDOW_STATE.HIDDEN) {
                    if (this.onWinMoveSub) {
                        this.onWinMoveSub = false;
                        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('on-window-move');
                    }
                }
                else if (state === this.appState.WINDOW_STATE.VISIBLE) {
                    this.registerToWindowMove();
                    this.updatePreviewPosition();
                }
            }
            else {
                this.registered = true;
            }
        });
    }
    /**
     * support sessions re-init during recording. Need to make sure we are drawing the relevant video session
     * *** f.e: listening to device disconnection only will not work since it takes time for the sessions to re-init ***
     */
    registerSessionsInit() {
        this.sessionsInitSub = this.sessionStateService.sessionsInit$.subscribe(() => {
            this.appState.sessionsAreReadyPromise
                .then(() => {
                this.updatePreviewPosition(); //need to wait for sessions re-init in order to draw the video
            });
        });
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], VideoPreviewComponent.prototype, "sessionName", void 0);
VideoPreviewComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'video-rec-preview',
        template: __webpack_require__("../../../../../src/personal/active-recording/components/video-preview/video-preview.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/active-recording/components/video-preview/video-preview.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_2__video_preview_service__["a" /* VideoPreviewService */]]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__video_preview_service__["a" /* VideoPreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__video_preview_service__["a" /* VideoPreviewService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_session_state_service__["a" /* SessionStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_session_state_service__["a" /* SessionStateService */]) === "function" && _d || Object])
], VideoPreviewComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/video-preview.component.js.map

/***/ }),

/***/ "../../../../../src/personal/active-recording/components/video-preview/video-preview.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_base_preview_service__ = __webpack_require__("../../../../../src/personal/shared/services/base-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VideoPreviewService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let VideoPreviewService = class VideoPreviewService extends __WEBPACK_IMPORTED_MODULE_1__shared_services_base_preview_service__["a" /* BasePreviewService */] {
    constructor(videoDeviceService) {
        super(videoDeviceService);
        this.videoDeviceService = videoDeviceService;
    }
};
VideoPreviewService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _a || Object])
], VideoPreviewService);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/video-preview.service.js.map

/***/ }),

/***/ "../../../../../src/personal/app.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"main-app\">\n  <!-- routing here -->\n  <accessibility-info></accessibility-info>\n  <router-outlet></router-outlet>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/app.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "* {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none; }\n\n.main-app {\n  width: 100%;\n  height: 100vh;\n  -webkit-app-region: drag; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/app.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_service__ = __webpack_require__("../../../../../src/personal/app.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_upload_status_notifications_service__ = __webpack_require__("../../../../../src/personal/shared/services/upload-status-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_system_health_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-health.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_scale_adaptation_service__ = __webpack_require__("../../../../../src/personal/shared/services/scale-adaptation.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_update_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-update.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_system_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-data.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












let AppComponent = class AppComponent {
    constructor(log, appService, appUpdateService, appConfig, uploadNotifications, systemData, sysHealthService, routeService, accessibilityService, scaleAdaptationService) {
        this.log = log;
        this.appService = appService;
        this.appUpdateService = appUpdateService;
        this.appConfig = appConfig;
        this.uploadNotifications = uploadNotifications;
        this.systemData = systemData;
        this.sysHealthService = sysHealthService;
        this.routeService = routeService;
        this.accessibilityService = accessibilityService;
        this.scaleAdaptationService = scaleAdaptationService;
        this.log.info("in AppComponent::constructor");
        this.appService.initLocale()
            .then(() => {
            this.loadApplication();
            this.sysHealthService.start();
            this.appUpdateService.checkIfWasUpdated();
        });
        this.preventDroppingFilesIntoApp();
        //init sessions and redirects to the relevant application page.
        //start app updates intervals only if enabled
        if (this.appConfig.getConfigData('config.shared.updates.enabled')) {
            this.appUpdateService.startUpdateInterval();
        }
    }
    loadApplication() {
        this.appService.initCaptureSessions()
            .catch((err) => {
            this.log.error('Failed to init capture sessions before app load. ' + __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(err));
        }) //do nothing
            .then(() => {
            return this.appService.initRecordingState();
        })
            .then((route) => {
            return Promise.all([route, this.appService.loadApp()]); //need to wait for window to be ready after splash screen
        })
            .then(([route]) => {
            this.routeService.navigate(route);
        });
    }
    /**
     * The Main reason why doing it in a method way is to add outline focus square
     * on tab focus ONLY and not on click focus
     * @param KeyboardEvent
     */
    onKeyUp(event) {
        return this.accessibilityService.markNavigation(event);
    }
    onDocumentClick(event) {
        this.appUpdateService.restartUpdateInterval();
        //imitating space key press for staying on the same element
        return this.accessibilityService.markNavigation({ code: 'Enter', target: event.target });
    }
    preventDroppingFilesIntoApp() {
        document.addEventListener('dragover', (event) => {
            event.preventDefault();
            if (event.dataTransfer && event.dataTransfer.dropEffect)
                event.dataTransfer.dropEffect = "none";
        });
        document.addEventListener('drop', (event) => {
            event.preventDefault();
            if (event.dataTransfer && event.dataTransfer.dropEffect)
                event.dataTransfer.dropEffect = "none";
        });
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('document:keyup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AppComponent.prototype, "onKeyUp", null);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('document:click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AppComponent.prototype, "onDocumentClick", null);
AppComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-root',
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
        template: __webpack_require__("../../../../../src/personal/app.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/app.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_2__app_service__["a" /* AppService */]]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__app_service__["a" /* AppService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__app_service__["a" /* AppService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_update_service__["a" /* AppUpdateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_update_service__["a" /* AppUpdateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_upload_status_notifications_service__["a" /* UploadStatusNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_upload_status_notifications_service__["a" /* UploadStatusNotificationsService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_system_data_service__["a" /* SystemDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_system_data_service__["a" /* SystemDataService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_system_health_service__["a" /* SystemHealthService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_system_health_service__["a" /* SystemHealthService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__["a" /* RouteService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_scale_adaptation_service__["a" /* ScaleAdaptationService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_scale_adaptation_service__["a" /* ScaleAdaptationService */]) === "function" && _k || Object])
], AppComponent);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app.component.js.map

/***/ }),

/***/ "../../../../../src/personal/app.consts.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class AppConsts {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AppConsts;

AppConsts.MINIMUM_APP_HEIGHT = 220;
AppConsts.MINIMUM_APP_WIDTH = 440;
AppConsts.DEFAULT_WIN_HEIGHT = 150;
AppConsts.VIDEO_PREVIEW_HEIGHT = 400;
AppConsts.AUDIO_PREVIEW_HEIGHT = 400;
AppConsts.ACTIVE_RECORDING_HEIGHT = AppConsts.MINIMUM_APP_HEIGHT;
AppConsts.ACTIVE_RECORDING_PREVIEW_HEIGHT = 450;
AppConsts.ACTIVE_RECORDING_WIDTH = AppConsts.MINIMUM_APP_WIDTH;
AppConsts.MANAGEMENT_WIN_WIDTH = 1024;
AppConsts.MANAGEMENT_WIN_HEIGHT = 768;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app.consts.js.map

/***/ }),

/***/ "../../../../../src/personal/app.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__("../../../forms/@angular/forms.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__ = __webpack_require__("../../../platform-browser/@angular/platform-browser.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__app_routing__ = __webpack_require__("../../../../../src/personal/app.routing.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_infra_module__ = __webpack_require__("../../../../../src/shared/services/infra/infra.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_shared_directives_shared_directives_module__ = __webpack_require__("../../../../../src/shared/directives/shared-directives.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_pipes_shared_pipes_module__ = __webpack_require__("../../../../../src/shared/pipes/shared-pipes.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_capture_device_capture_device_module__ = __webpack_require__("../../../../../src/shared/services/capture-device/capture-device.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_recording_recording_module__ = __webpack_require__("../../../../../src/shared/services/recording/recording.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shared_components_managment_confirm_dialog_menagement_confirm_dialog_module__ = __webpack_require__("../../../../../src/shared/components/managment-confirm-dialog/menagement-confirm-dialog.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_components_log_collector_log_collector_module__ = __webpack_require__("../../../../../src/shared/components/log-collector/log-collector.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__app_component__ = __webpack_require__("../../../../../src/personal/app.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__pre_recording_pre_recording_component__ = __webpack_require__("../../../../../src/personal/pre-recording/pre-recording.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__active_recording_active_recording_component__ = __webpack_require__("../../../../../src/personal/active-recording/active-recording.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__pre_recording_components_capture_capture_component__ = __webpack_require__("../../../../../src/personal/pre-recording/components/capture/capture.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__active_recording_components_confirm_dialog_active_recording_confirm_component__ = __webpack_require__("../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__pre_recording_components_audio_gauge_audio_gauge_component__ = __webpack_require__("../../../../../src/personal/pre-recording/components/audio-gauge/audio-gauge.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__pre_recording_components_preview_preview_component__ = __webpack_require__("../../../../../src/personal/pre-recording/components/preview/preview.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__active_recording_components_video_preview_video_preview_component__ = __webpack_require__("../../../../../src/personal/active-recording/components/video-preview/video-preview.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__shared_services_recording_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__shared_services_recording_actions_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording-actions.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__shared_services_recording_session_actions__ = __webpack_require__("../../../../../src/personal/shared/services/recording-session-actions.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_personal_shared_services_recording_timer_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording-timer.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__management_route_guards_entry_form_guard_sevice__ = __webpack_require__("../../../../../src/personal/management/route-guards/entry-form-guard.sevice.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__shared_services_infra_app_update_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-update.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__shared_services_scale_adaptation_service__ = __webpack_require__("../../../../../src/personal/shared/services/scale-adaptation.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__area_selection_area_selection_service__ = __webpack_require__("../../../../../src/personal/area-selection/area-selection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__active_recording_components_palette_palette_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/palette/palette.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__active_recording_components_confirm_dialog_active_recording_confirm_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/confirm-dialog/active-recording-confirm.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30_primeng_primeng__ = __webpack_require__("../../../../primeng/primeng.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30_primeng_primeng___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_30_primeng_primeng__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__angular_platform_browser_animations__ = __webpack_require__("../../../platform-browser/@angular/platform-browser/animations.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__shared_components_loader_component__ = __webpack_require__("../../../../../src/personal/shared/components/loader.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__shared_services_upload_status_notifications_service__ = __webpack_require__("../../../../../src/personal/shared/services/upload-status-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34_primeng_components_tooltip_tooltip__ = __webpack_require__("../../../../primeng/components/tooltip/tooltip.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34_primeng_components_tooltip_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_34_primeng_components_tooltip_tooltip__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__shared_components_app_container_app_container_component__ = __webpack_require__("../../../../../src/shared/components/app-container/app-container.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__management_components_management_window_management_window_component__ = __webpack_require__("../../../../../src/personal/management/components/management-window/management-window.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__management_components_library_library_component__ = __webpack_require__("../../../../../src/personal/management/components/library/library.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__management_components_info_info_component__ = __webpack_require__("../../../../../src/personal/management/components/info/info.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__pipe_change_extension_pipe__ = __webpack_require__("../../../../../src/personal/pipe/change-extension.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__pipe_safe_pipe__ = __webpack_require__("../../../../../src/personal/pipe/safe.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42_primeng_components_progressbar_progressbar__ = __webpack_require__("../../../../primeng/components/progressbar/progressbar.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42_primeng_components_progressbar_progressbar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_42_primeng_components_progressbar_progressbar__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__management_components_entry_entry_component__ = __webpack_require__("../../../../../src/personal/management/components/entry/entry.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__management_services_entry_service__ = __webpack_require__("../../../../../src/personal/management/services/entry.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45_primeng_components_chips_chips__ = __webpack_require__("../../../../primeng/components/chips/chips.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45_primeng_components_chips_chips___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_45_primeng_components_chips_chips__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__shared_pipes_truncate_pipe__ = __webpack_require__("../../../../../src/shared/pipes/truncate.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__area_selection_area_selection_component__ = __webpack_require__("../../../../../src/personal/area-selection/area-selection.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48_primeng_components_radiobutton_radiobutton__ = __webpack_require__("../../../../primeng/components/radiobutton/radiobutton.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48_primeng_components_radiobutton_radiobutton___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_48_primeng_components_radiobutton_radiobutton__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__pre_recording_components_recording_button_recording_button_component__ = __webpack_require__("../../../../../src/personal/pre-recording/components/recording-button/recording-button.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__shared_components_accessibility_info_accessibility_info_component__ = __webpack_require__("../../../../../src/shared/components/accessibility-info/accessibility-info.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__management_components_settings_settings_component__ = __webpack_require__("../../../../../src/personal/management/components/settings/settings.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__area_selection_area_selection_resolver_service__ = __webpack_require__("../../../../../src/personal/area-selection/area-selection-resolver.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__pre_recording_components_audio_level_audio_level_component__ = __webpack_require__("../../../../../src/personal/pre-recording/components/audio-level/audio-level.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__management_route_guards_settings_component_guard__ = __webpack_require__("../../../../../src/personal/management/route-guards/settings-component-guard.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__active_recording_components_palette_palette_component__ = __webpack_require__("../../../../../src/personal/active-recording/components/palette/palette.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__shared_components_entries_preview_entries_preview_component__ = __webpack_require__("../../../../../src/shared/components/entries-preview/entries-preview.component.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




//app routing

//shared modules







//main application components

//components







//services










//UI components



























let AppModule = class AppModule {
};
AppModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_7__shared_pipes_shared_pipes_module__["a" /* SharedPipes */],
            __WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__["BrowserModule"],
            __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormsModule"],
            __WEBPACK_IMPORTED_MODULE_3_ng2_translate__["a" /* TranslateModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_4__app_routing__["a" /* routing */],
            __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_infra_module__["a" /* InfraModule */],
            __WEBPACK_IMPORTED_MODULE_8__shared_services_capture_device_capture_device_module__["a" /* CaptureDeviceModule */],
            __WEBPACK_IMPORTED_MODULE_9__shared_services_recording_recording_module__["a" /* RecordingModule */],
            __WEBPACK_IMPORTED_MODULE_6_shared_directives_shared_directives_module__["a" /* SharedDirectives */],
            __WEBPACK_IMPORTED_MODULE_31__angular_platform_browser_animations__["a" /* BrowserAnimationsModule */],
            __WEBPACK_IMPORTED_MODULE_30_primeng_primeng__["DropdownModule"],
            __WEBPACK_IMPORTED_MODULE_30_primeng_primeng__["ConfirmDialogModule"],
            __WEBPACK_IMPORTED_MODULE_34_primeng_components_tooltip_tooltip__["TooltipModule"],
            __WEBPACK_IMPORTED_MODULE_42_primeng_components_progressbar_progressbar__["ProgressBarModule"],
            __WEBPACK_IMPORTED_MODULE_45_primeng_components_chips_chips__["ChipsModule"],
            __WEBPACK_IMPORTED_MODULE_48_primeng_components_radiobutton_radiobutton__["RadioButtonModule"],
            __WEBPACK_IMPORTED_MODULE_30_primeng_primeng__["AutoCompleteModule"],
            __WEBPACK_IMPORTED_MODULE_11__shared_components_log_collector_log_collector_module__["a" /* LogCollectorModule */],
            __WEBPACK_IMPORTED_MODULE_10__shared_components_managment_confirm_dialog_menagement_confirm_dialog_module__["a" /* ManagementConfirmDialogModule */],
            __WEBPACK_IMPORTED_MODULE_30_primeng_primeng__["BlockUIModule"]
        ],
        declarations: [
            __WEBPACK_IMPORTED_MODULE_12__app_component__["a" /* AppComponent */],
            __WEBPACK_IMPORTED_MODULE_13__pre_recording_pre_recording_component__["a" /* PreRecordingComponent */],
            __WEBPACK_IMPORTED_MODULE_14__active_recording_active_recording_component__["a" /* ActiveRecordingComponent */],
            __WEBPACK_IMPORTED_MODULE_15__pre_recording_components_capture_capture_component__["a" /* CaptureComponent */],
            __WEBPACK_IMPORTED_MODULE_16__active_recording_components_confirm_dialog_active_recording_confirm_component__["a" /* ActiveRecordingConfirmComponent */],
            __WEBPACK_IMPORTED_MODULE_18__pre_recording_components_preview_preview_component__["a" /* PreviewComponent */],
            __WEBPACK_IMPORTED_MODULE_17__pre_recording_components_audio_gauge_audio_gauge_component__["a" /* AudioGaugeComponent */],
            __WEBPACK_IMPORTED_MODULE_53__pre_recording_components_audio_level_audio_level_component__["a" /* AudioLevelComponent */],
            __WEBPACK_IMPORTED_MODULE_49__pre_recording_components_recording_button_recording_button_component__["a" /* RecordingButtonComponent */],
            __WEBPACK_IMPORTED_MODULE_32__shared_components_loader_component__["a" /* LoaderComponent */],
            __WEBPACK_IMPORTED_MODULE_36__management_components_management_window_management_window_component__["a" /* ManagementWindowComponent */],
            __WEBPACK_IMPORTED_MODULE_35__shared_components_app_container_app_container_component__["a" /* AppContainerComponent */],
            __WEBPACK_IMPORTED_MODULE_50__shared_components_accessibility_info_accessibility_info_component__["a" /* AccessibilityInfoComponent */],
            __WEBPACK_IMPORTED_MODULE_38__management_components_library_library_component__["a" /* LibraryComponent */],
            __WEBPACK_IMPORTED_MODULE_51__management_components_settings_settings_component__["a" /* SettingsComponent */],
            __WEBPACK_IMPORTED_MODULE_39__management_components_info_info_component__["a" /* InfoComponent */],
            __WEBPACK_IMPORTED_MODULE_19__active_recording_components_video_preview_video_preview_component__["a" /* VideoPreviewComponent */],
            __WEBPACK_IMPORTED_MODULE_43__management_components_entry_entry_component__["a" /* EntryComponent */],
            __WEBPACK_IMPORTED_MODULE_47__area_selection_area_selection_component__["a" /* AreaSelectionComponent */],
            __WEBPACK_IMPORTED_MODULE_55__active_recording_components_palette_palette_component__["a" /* PaletteComponent */],
            __WEBPACK_IMPORTED_MODULE_40__pipe_change_extension_pipe__["a" /* ChangeExtensionPipe */],
            __WEBPACK_IMPORTED_MODULE_41__pipe_safe_pipe__["a" /* SafePipe */],
            __WEBPACK_IMPORTED_MODULE_56__shared_components_entries_preview_entries_preview_component__["a" /* EntriesPreviewComponent */]
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_46__shared_pipes_truncate_pipe__["a" /* TruncatePipe */],
            __WEBPACK_IMPORTED_MODULE_25__shared_services_infra_app_update_service__["a" /* AppUpdateService */],
            __WEBPACK_IMPORTED_MODULE_20__shared_services_recording_service__["a" /* RecordingService */],
            __WEBPACK_IMPORTED_MODULE_21__shared_services_recording_actions_service__["a" /* RecordingActionsService */],
            __WEBPACK_IMPORTED_MODULE_22__shared_services_recording_session_actions__["a" /* RecordingSessionActions */],
            __WEBPACK_IMPORTED_MODULE_23_personal_shared_services_recording_timer_service__["a" /* RecordingTimerService */],
            __WEBPACK_IMPORTED_MODULE_30_primeng_primeng__["ConfirmationService"],
            __WEBPACK_IMPORTED_MODULE_23_personal_shared_services_recording_timer_service__["a" /* RecordingTimerService */],
            __WEBPACK_IMPORTED_MODULE_33__shared_services_upload_status_notifications_service__["a" /* UploadStatusNotificationsService */],
            __WEBPACK_IMPORTED_MODULE_37__shared_services_route_service__["a" /* RouteService */],
            __WEBPACK_IMPORTED_MODULE_44__management_services_entry_service__["a" /* EntryService */],
            __WEBPACK_IMPORTED_MODULE_24__management_route_guards_entry_form_guard_sevice__["a" /* EntryFormsGuard */],
            __WEBPACK_IMPORTED_MODULE_54__management_route_guards_settings_component_guard__["a" /* SettingsComponentGuard */],
            __WEBPACK_IMPORTED_MODULE_26__shared_services_scale_adaptation_service__["a" /* ScaleAdaptationService */],
            __WEBPACK_IMPORTED_MODULE_27__area_selection_area_selection_service__["a" /* AreaSelectionService */],
            __WEBPACK_IMPORTED_MODULE_52__area_selection_area_selection_resolver_service__["a" /* AreaSelectionResolver */],
            __WEBPACK_IMPORTED_MODULE_28__active_recording_components_palette_palette_service__["a" /* PaletteService */],
            __WEBPACK_IMPORTED_MODULE_29__active_recording_components_confirm_dialog_active_recording_confirm_service__["a" /* ActiveRecordingConfirmService */],
        ],
        bootstrap: [__WEBPACK_IMPORTED_MODULE_12__app_component__["a" /* AppComponent */]]
    })
], AppModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app.module.js.map

/***/ }),

/***/ "../../../../../src/personal/app.routing.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_router__ = __webpack_require__("../../../router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pre_recording_pre_recording_component__ = __webpack_require__("../../../../../src/personal/pre-recording/pre-recording.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__active_recording_active_recording_component__ = __webpack_require__("../../../../../src/personal/active-recording/active-recording.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__management_components_management_window_management_window_component__ = __webpack_require__("../../../../../src/personal/management/components/management-window/management-window.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__management_components_library_library_component__ = __webpack_require__("../../../../../src/personal/management/components/library/library.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__management_components_info_info_component__ = __webpack_require__("../../../../../src/personal/management/components/info/info.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__management_components_entry_entry_component__ = __webpack_require__("../../../../../src/personal/management/components/entry/entry.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__management_route_guards_entry_form_guard_sevice__ = __webpack_require__("../../../../../src/personal/management/route-guards/entry-form-guard.sevice.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__area_selection_area_selection_component__ = __webpack_require__("../../../../../src/personal/area-selection/area-selection.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__management_components_settings_settings_component__ = __webpack_require__("../../../../../src/personal/management/components/settings/settings.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__area_selection_area_selection_resolver_service__ = __webpack_require__("../../../../../src/personal/area-selection/area-selection-resolver.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__management_route_guards_settings_component_guard__ = __webpack_require__("../../../../../src/personal/management/route-guards/settings-component-guard.ts");












const appRoutes = [
    { path: '', redirectTo: 'pre-recording', pathMatch: 'full' },
    { path: 'pre-recording', component: __WEBPACK_IMPORTED_MODULE_1__pre_recording_pre_recording_component__["a" /* PreRecordingComponent */], pathMatch: 'full' },
    { path: 'area-selection', component: __WEBPACK_IMPORTED_MODULE_8__area_selection_area_selection_component__["a" /* AreaSelectionComponent */], pathMatch: 'full', resolve: { resolverData: __WEBPACK_IMPORTED_MODULE_10__area_selection_area_selection_resolver_service__["a" /* AreaSelectionResolver */] } },
    { path: 'active-recording', component: __WEBPACK_IMPORTED_MODULE_2__active_recording_active_recording_component__["a" /* ActiveRecordingComponent */], pathMatch: 'full' },
    { path: 'management', component: __WEBPACK_IMPORTED_MODULE_3__management_components_management_window_management_window_component__["a" /* ManagementWindowComponent */], children: [
            { path: '', redirectTo: 'library', pathMatch: 'full' },
            { path: 'library', component: __WEBPACK_IMPORTED_MODULE_4__management_components_library_library_component__["a" /* LibraryComponent */] },
            { path: 'entry', component: __WEBPACK_IMPORTED_MODULE_6__management_components_entry_entry_component__["a" /* EntryComponent */], canDeactivate: [__WEBPACK_IMPORTED_MODULE_7__management_route_guards_entry_form_guard_sevice__["a" /* EntryFormsGuard */]] },
            { path: 'info', component: __WEBPACK_IMPORTED_MODULE_5__management_components_info_info_component__["a" /* InfoComponent */] },
            { path: 'settings', component: __WEBPACK_IMPORTED_MODULE_9__management_components_settings_settings_component__["a" /* SettingsComponent */], canDeactivate: [__WEBPACK_IMPORTED_MODULE_11__management_route_guards_settings_component_guard__["a" /* SettingsComponentGuard */]] },
        ] }
];
const routing = __WEBPACK_IMPORTED_MODULE_0__angular_router__["RouterModule"].forRoot(appRoutes);
/* harmony export (immutable) */ __webpack_exports__["a"] = routing;

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app.routing.js.map

/***/ }),

/***/ "../../../../../src/personal/app.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_recording_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_device_resources_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-resources.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_services_capture_device_audio_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__shared_services_infra_session_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/session-state.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};













let AppService = class AppService {
    constructor(log, appState, routeService, translate, videoService, audioService, recordingService, deviceResoruces, sessionStateService) {
        this.log = log;
        this.appState = appState;
        this.routeService = routeService;
        this.translate = translate;
        this.videoService = videoService;
        this.audioService = audioService;
        this.recordingService = recordingService;
        this.deviceResoruces = deviceResoruces;
        this.sessionStateService = sessionStateService;
        this.registerToInitSessionsEvent();
        this.registerWindowVisibilityChanges();
    }
    initLocale() {
        // this language will be used as a fallback when a translation isn't found in the current language
        this.translate.setDefaultLang('en');
        //get os locale and load translation
        return __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getOsLocale')
            .then((locale) => {
            this.translate.use(this.manipulateLocaleCode(locale));
        })
            .catch((err) => {
            this.log.error(__WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.translate.use('en');
        });
    }
    registerToInitSessionsEvent() {
        this.appState.notifyDeviceComponentInit$.subscribe(() => {
            this.log.info('Application sessions are being re-init after recording ended');
            this.initCaptureSessions()
                .then(() => {
                this.sessionStateService.sessionsInit.next();
            })
                .catch((err) => {
                this.log.error('Failed to init capture sessions after deviceComponenetInit notification. ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            }); //do nothing
        });
    }
    registerWindowVisibilityChanges() {
        this.log.info('appService: registerWindowVisibilityChanges');
        __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-window-status-change', (visibility) => {
            this.appState.setApplicationWindowState(visibility['state']);
        });
    }
    initCaptureSessions() {
        let captureSessionsToInitPromises = [];
        return this.appState.getVisualSessionsNamesAndDefaultTypesForInit()
            .then(sessions => {
            __WEBPACK_IMPORTED_MODULE_3_lodash__["forEach"](sessions, (defaultType, sessionName) => {
                captureSessionsToInitPromises.push(this.initVideoCaptureDevice(sessionName, defaultType));
            });
            //adding audio session
            captureSessionsToInitPromises.push(this.initAudioCaptureDevice());
            //init all
            return Promise.all(captureSessionsToInitPromises);
        });
    }
    loadApp() {
        this.log.info('Loading kaltura capture app.');
        return this.appState.sessionsAreReadyPromise
            .then(() => {
            this.log.info('personal-app-load done loading');
            return __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("capture-app-load");
        });
    }
    /**
     * returns the relevant route based on recording service initialization
     * @returns {Promise<string>}
     */
    initRecordingState() {
        return this.recordingService.initRecordingService()
            .then(() => {
            return this.appState.isAppRecording() ? 'active-recording' : 'pre-recording';
        })
            .catch((err) => {
            this.log.error('Failed to initial recording service. Using pre-recording route as default');
            return 'pre-recording';
        });
    }
    initVideoCaptureDevice(sessionName, defaultCaptureType) {
        return this.videoService.initDevice(sessionName, defaultCaptureType)
            .then(() => {
            return this.videoService.startDevice(sessionName, { left: 0, top: 0, width: 0, height: 0 }); //we don't want to preview the video
        })
            .then(() => {
            return this.handleDeviceResources();
        })
            .catch((err) => {
            this.log.error(sessionName + ' init Error ' + ' - ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.videoService.handleDeviceInitError(sessionName, err, { left: 0, top: 0, width: 0, height: 0 }); //we don't want to preview the video
        });
    }
    initAudioCaptureDevice() {
        return this.audioService.initAudioDevice();
    }
    /**
     * according to product - all en-XXXX should be mapped to en locale
     * @param locale
     * @returns {any}
     */
    manipulateLocaleCode(locale) {
        if (!locale) {
            return 'en';
        }
        return locale.substr(0, 2);
    }
    handleDeviceResources() {
        //getting the current route path without any params
        let routePath = this.routeService.getCurrentRoute().split(';')[0];
        this.log.info('handleDeviceResources: ' + routePath);
        switch (routePath) {
            case '/pre-recording':
            case '/active-recording':
                return this.deviceResoruces.getCaptureResources();
            default:
                return this.deviceResoruces.freeCaptureResources(true);
        }
    }
};
AppService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_10__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__shared_services_route_service__["a" /* RouteService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7_ng2_translate__["b" /* TranslateService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_11__shared_services_capture_device_audio_device_service__["a" /* AudioDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__shared_services_capture_device_audio_device_service__["a" /* AudioDeviceService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_recording_service__["a" /* RecordingService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_recording_service__["a" /* RecordingService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_device_resources_service__["a" /* DeviceResourcesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_device_resources_service__["a" /* DeviceResourcesService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_12__shared_services_infra_session_state_service__["a" /* SessionStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__shared_services_infra_session_state_service__["a" /* SessionStateService */]) === "function" && _j || Object])
], AppService);

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app.service.js.map

/***/ }),

/***/ "../../../../../src/personal/area-selection/area-selection-resolver.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__area_selection_service__ = __webpack_require__("../../../../../src/personal/area-selection/area-selection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AreaSelectionResolver; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let AreaSelectionResolver = class AreaSelectionResolver {
    constructor(areaSelectionService, appConfig) {
        this.areaSelectionService = areaSelectionService;
        this.appConfig = appConfig;
        this.WIDTH_FALLBACK = 800;
        this.HEIGHT_FALLBACK = 600;
    }
    resolve(route, state) {
        let scaleFactor;
        let winBounds;
        return Promise.all([
            // we have to put the win on the correct device before doing Anything - for electron to behave properly in the
            // means of setSize and setPosition
            __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('centerWindowOnDevice', { screenBounds: this.areaSelectionService.screenFullBounds }),
            __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('is-windows')
        ])
            .then(([screen, isWindows]) => {
            scaleFactor = isWindows ? screen['scaleFactor'] : 1;
            if (__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.areaSelectionService.engineBounds) || __WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.areaSelectionService.electronBounds)) {
                let presets = this.appConfig.getConfigData('config.captureApp.captureZoneSelectionPresets');
                if (presets && presets.length > 0) {
                    winBounds = {
                        width: Math.floor(presets[0].width / scaleFactor),
                        height: Math.floor(presets[0].height / scaleFactor)
                    };
                }
                else {
                    winBounds = {
                        width: Math.floor(this.WIDTH_FALLBACK / scaleFactor),
                        height: Math.floor(this.HEIGHT_FALLBACK / scaleFactor)
                    };
                }
                winBounds.x = null;
                winBounds.y = null;
            }
            else {
                winBounds = this.areaSelectionService.electronBounds;
            }
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowSize", winBounds);
        })
            .then(() => {
            // real center if need only after we located the win in the correct screen and change it size.
            if (winBounds.x === null || winBounds.y === null) {
                return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('centerWindowOnDevice', { screenBounds: this.areaSelectionService.screenFullBounds });
            }
            else {
                return Promise.resolve({});
            }
        })
            .then(() => {
            return { screenScaleFactor: scaleFactor };
        });
    }
};
AreaSelectionResolver = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__area_selection_service__["a" /* AreaSelectionService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__area_selection_service__["a" /* AreaSelectionService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object])
], AreaSelectionResolver);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/area-selection-resolver.service.js.map

/***/ }),

/***/ "../../../../../src/personal/area-selection/area-selection.component.html":
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"!routeService.isInTransition\" class=\"area-border\" [ngClass]=\"{'area-border-bk-color-win7': isWin7AndDwmDisabled}\"\n     role=\"region\" [attr.aria-label]=\"'AREA_SELECTION.area_selection_description' | translate\">\n  <div class=\"draggable-area drag-region\">\n    <div class=\"controls-container\">\n\n      <div class=\"first-row\">\n        <p-dropdown dropdown-addon [options]=\"resolutions\" [(ngModel)]=\"selectedResolution\" (onCustomChange)=\"onResolutionChange()\"\n                  [attr.aria-label]=\"'AREA_SELECTION.capture_area_selection_dropdown' | translate\"></p-dropdown>\n      </div>\n      <div class=\"second-row\">\n        <button class=\"cancel-button no-drag small-oval-button\"  [attr.aria-label]=\"'AREA_SELECTION.cancel_selection' | translate\" (click)=\"onCancelClick()\" [disabled]=\"this.isFinished\">{{'COMMON.cancel' | translate}}</button>\n        <button class=\"confirm-button no-drag small-oval-button\" [attr.aria-label]=\"'AREA_SELECTION.confirm_selection' | translate\" (click)=\"onConfirmClick()\" [disabled]=\"this.isFinished\">{{'COMMON.confirm' | translate}}</button>\n      </div>\n\n    </div>\n  </div>\n\n  <div class=\"arrows\">\n    <div class=\"icon-resize top-left\"></div>\n    <div class=\"icon-resize top-center\"></div>\n    <div class=\"icon-resize top-right\"></div>\n    <div class=\"icon-resize right-center\"></div>\n    <div class=\"icon-resize left-center\"></div>\n    <div class=\"icon-resize bottom-left\"></div>\n    <div class=\"icon-resize bottom-center\"></div>\n    <div class=\"icon-resize bottom-right\"></div>\n  </div>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/area-selection/area-selection.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".area-border {\n  box-sizing: border-box;\n  border: 2px dashed white;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.08);\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-app-region: no-drag; }\n\n.area-border-bk-color-win7 {\n  background-color: rgba(0, 0, 0, 0); }\n\n.draggable-area {\n  margin: 10px;\n  width: calc(100% - 20px);\n  height: calc(100% - 20px);\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: center;\n      justify-content: center;\n  -ms-flex-align: center;\n      align-items: center; }\n\n.controls-container {\n  background-color: rgba(0, 0, 0, 0.8);\n  padding: 16px 20px;\n  border-radius: 4px; }\n\n.second-row {\n  margin-top: 16px;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: distribute;\n      justify-content: space-around;\n  -ms-flex-align: center;\n      align-items: center; }\n\n.icon-resize {\n  width: 20px;\n  height: 20px;\n  position: absolute; }\n\n.confirm-button, .cancel-button {\n  height: 34px;\n  font-size: 14px;\n  font-family: 'Lato'; }\n\n.top-left {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/corner.svg")) + ") no-repeat center center;\n  left: 3px;\n  top: 3px; }\n\n.top-center {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/bar-selection.svg")) + ") no-repeat center center;\n  left: calc(50% - 9px);\n  top: -2px; }\n\n.top-right {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/corner.svg")) + ") no-repeat center center;\n  right: 3px;\n  top: 3px;\n  transform: rotate(90deg); }\n\n.left-center {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/bar-selection.svg")) + ") no-repeat center center;\n  top: calc(50% - 9px);\n  left: -2px;\n  transform: rotate(90deg); }\n\n.right-center {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/bar-selection.svg")) + ") no-repeat center center;\n  top: calc(50% - 9px);\n  right: -2px;\n  transform: rotate(90deg); }\n\n.bottom-left {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/corner.svg")) + ") no-repeat center center;\n  left: 3px;\n  bottom: 3px;\n  transform: rotate(-90deg); }\n\n.bottom-center {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/bar-selection.svg")) + ") no-repeat center center;\n  left: calc(50% - 9px);\n  bottom: -2px; }\n\n.bottom-right {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/corner.svg")) + ") no-repeat center center;\n  right: 3px;\n  bottom: 3px;\n  transform: rotate(180deg); }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/area-selection/area-selection.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__area_selection_service__ = __webpack_require__("../../../../../src/personal/area-selection/area-selection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__("../../../router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AreaSelectionComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let AreaSelectionComponent = AreaSelectionComponent_1 = class AreaSelectionComponent {
    constructor(routeService, //being used by view only
        accessibilityService, translate, areaSelectionService, activatedRoute) {
        this.routeService = routeService;
        this.accessibilityService = accessibilityService;
        this.translate = translate;
        this.areaSelectionService = areaSelectionService;
        this.activatedRoute = activatedRoute;
        this.resolutions = [];
        this.isFinished = false;
        this.screenScaleFactor = this.activatedRoute.snapshot.data['resolverData']['screenScaleFactor'] || 1;
    }
    onKeyUp(event) {
        this.moveOrResizeByKeys(event);
    }
    onResize(event) {
        this.updateSelectedDropdownResolution({ width: event.srcElement.outerWidth, height: event.srcElement.outerHeight });
        this.reloadResolutionsDropdown();
    }
    ngOnInit() {
        this.translate.get('AREA_SELECTION.custom')
            .subscribe(customLabel => {
            this.customLabel = customLabel;
            this.setInitialResolutions();
            this.setInitialSelectedResolution();
            this.areaSelectionService.setInitialAreaWinPosition();
            // lock at on screen
            this.areaSelectionService.setStayOnOneScreen(true);
        });
        // check if win7 for css transparent issue
        this.areaSelectionService.isWin7AndDwmDisabled()
            .then((isWin7AndDwmDisabled) => {
            this.isWin7AndDwmDisabled = isWin7AndDwmDisabled;
        });
    }
    setInitialResolutions() {
        __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](this.areaSelectionService.getInitialAvailableResolutions(), (resolution) => {
            this.pushToResolutionsDropdown(resolution);
        });
    }
    setInitialSelectedResolution() {
        let selectedRes = this.areaSelectionService.getInitialSelectedResolution();
        this.selectedResolution = __WEBPACK_IMPORTED_MODULE_1_lodash__["find"](this.resolutions, (resolution) => {
            return selectedRes && resolution.value && resolution.value.width === selectedRes.width &&
                resolution.value.height === selectedRes.height;
        });
    }
    //on window resize
    updateSelectedDropdownResolution(size) {
        if (size && size.width && size.height) {
            this.resolutions[0] = { label: `${this.customLabel} (${Math.floor(size.width * this.screenScaleFactor)}x${Math.floor(size.height * this.screenScaleFactor)})`, value: { width: size.width, height: size.height, custom: true } };
            this.selectedResolution = this.resolutions[0].value;
        }
    }
    pushToResolutionsDropdown(resolution) {
        let isCustomString = this.areaSelectionService.getPresetResolutionIndex(resolution) > -1 ? '' : this.customLabel + ' (';
        this.resolutions.push({ label: isCustomString + Math.floor(resolution['width'] * this.screenScaleFactor) + 'x' + Math.floor(resolution['height'] * this.screenScaleFactor) + (isCustomString ? ')' : ''),
            value: { width: resolution['width'], height: resolution['height'], custom: true } });
    }
    reloadResolutionsDropdown() {
        clearTimeout(this.resizeTimeout);
        this.resizeTimeout = setTimeout(() => {
            this.resolutions = [];
            this.pushToResolutionsDropdown(this.selectedResolution);
            __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](this.areaSelectionService.getPresetResolutions(this.selectedResolution), (res) => {
                this.pushToResolutionsDropdown(res);
            });
        }, 200);
    }
    moveOrResizeByKeys(event) {
        if (event.code === "Escape") {
            this.areaSelectionService.goToPreRecording(true);
        }
        else if ((event.altKey || event.ctrlKey || event.metaKey) && (__WEBPACK_IMPORTED_MODULE_1_lodash__["keys"](AreaSelectionComponent_1.directionsStepMap)).indexOf(event.code) !== -1) {
            let action = event.altKey ? 'move' : 'size';
            let stepMultiplier = event.shiftKey ? 1 : 10;
            let directionStep = AreaSelectionComponent_1.directionsStepMap[event.code];
            let directionLocalization = AreaSelectionComponent_1.directionsLocalizationMap[event.code];
            if (action === 'move') {
                this.areaSelectionService.moveWindowByStep(directionStep.widthOffset * stepMultiplier, directionStep.heightOffset * stepMultiplier);
            }
            else if (action === 'size') {
                this.areaSelectionService.changeWindowSizeByStep(directionStep.widthOffset * stepMultiplier, directionStep.heightOffset * stepMultiplier);
            }
            this.accessibilityService.setAccessibilityAlert('AREA_SELECTION.' + action + '.' + directionLocalization);
        }
    }
    onCancelClick() {
        this.isFinished = true;
        this.areaSelectionService.goToPreRecording(true);
    }
    onResolutionChange() {
        let size = this.selectedResolution.value ? this.selectedResolution.value : this.selectedResolution;
        this.areaSelectionService.setWindowSize(size);
    }
    onConfirmClick() {
        this.isFinished = true;
        this.areaSelectionService.onAreaSelectionConfirm();
    }
    ngOnDestroy() {
        this.areaSelectionService.setStayOnOneScreen(false);
    }
};
AreaSelectionComponent.directionsStepMap = {
    'ArrowUp': { 'widthOffset': 0, 'heightOffset': -1 },
    'ArrowDown': { 'widthOffset': 0, 'heightOffset': 1 },
    'ArrowLeft': { 'widthOffset': -1, 'heightOffset': 0 },
    'ArrowRight': { 'widthOffset': 1, 'heightOffset': 0 },
};
AreaSelectionComponent.directionsLocalizationMap = {
    'ArrowUp': 'up',
    'ArrowDown': 'down',
    'ArrowLeft': 'left',
    'ArrowRight': 'right',
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('document:keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AreaSelectionComponent.prototype, "onKeyUp", null);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('window:resize', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AreaSelectionComponent.prototype, "onResize", null);
AreaSelectionComponent = AreaSelectionComponent_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'area-selection',
        template: __webpack_require__("../../../../../src/personal/area-selection/area-selection.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/area-selection/area-selection.component.scss")],
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_route_service__["a" /* RouteService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3_ng2_translate__["b" /* TranslateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__area_selection_service__["a" /* AreaSelectionService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__area_selection_service__["a" /* AreaSelectionService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"]) === "function" && _e || Object])
], AreaSelectionComponent);

var AreaSelectionComponent_1, _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/area-selection.component.js.map

/***/ }),

/***/ "../../../../../src/personal/area-selection/area-selection.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AreaSelectionService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let AreaSelectionService = class AreaSelectionService {
    constructor(log, config, routeService, videoDeviceService) {
        this.log = log;
        this.config = config;
        this.routeService = routeService;
        this.videoDeviceService = videoDeviceService;
    }
    getInitialAvailableResolutions() {
        return __WEBPACK_IMPORTED_MODULE_4_lodash__["concat"](this.getInitialSelectedResolution(), this.getPresetResolutions(this.getInitialSelectedResolution()));
    }
    /**
     *
     * @returns {{width: any, height: any}}
     */
    getInitialSelectedResolution() {
        return this.electronBounds && this.electronBounds['width'] && this.electronBounds['height'] ?
            { width: this.electronBounds['width'], height: this.electronBounds['height'] } :
            this.getPresetResolutions()[0];
    }
    /**
     * will return the preset resolution index if exists, -1 if not
     * @param resolution {width:... , height:...}
     */
    getPresetResolutionIndex(resolution) {
        return __WEBPACK_IMPORTED_MODULE_4_lodash__["findLastIndex"](this.getPresetResolutions(), presetRes => {
            return presetRes && resolution && resolution['width'] === presetRes['width'] && resolution['height'] === presetRes['height'];
        });
    }
    setInitialAreaWinPosition() {
        return (this.electronBounds && __WEBPACK_IMPORTED_MODULE_4_lodash__["isFinite"](this.electronBounds['x']) && __WEBPACK_IMPORTED_MODULE_4_lodash__["isFinite"](this.electronBounds['y'])) ?
            __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setWindowPosition', __WEBPACK_IMPORTED_MODULE_4_lodash__["merge"](this.electronBounds, { text: 'custom' })) : Promise.resolve();
    }
    setStayOnOneScreen(doStay) {
        let bounds = doStay ? this.screenFullBounds : null;
        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('stayOnOneScreen', { screenFullBounds: bounds });
    }
    goToPreRecording(showRectAgain) {
        if (showRectAgain && !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.electronBounds)) {
            __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('show-selection-square', { bounds: this.electronBounds, sessionName: this.sessionName });
        }
        this.routeService.navigate('pre-recording', { previewToShow: this.sessionName });
    }
    // check if win7 is running with dwm disabled - for css transparent issue
    isWin7AndDwmDisabled() {
        return __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('is-win7-and-is-dwm-disabled').catch(err => { return false; });
    }
    moveWindowByStep(widthOffset, heightOffset) {
        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('moveWindowByStep', widthOffset, heightOffset);
    }
    changeWindowSizeByStep(widthOffset, heightOffset) {
        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('changeWindowSizeByStep', widthOffset, heightOffset);
    }
    /**
     * if resolution to remove is not empty, remove it from returned value
     * @param resolutionToRemove
     * @returns {any}
     */
    getPresetResolutions(resolutionToRemove = null) {
        return __WEBPACK_IMPORTED_MODULE_4_lodash__["filter"](this.config.getConfigData('config.captureApp.captureZoneSelectionPresets'), (preset) => {
            return __WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](resolutionToRemove) || preset['width'] !== resolutionToRemove['width'] || preset['height'] !== resolutionToRemove['height'];
        });
    }
    onAreaSelectionConfirm() {
        return __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getWindowsBounds')
            .then(engineAndElectronBounds => {
            return this.videoDeviceService.setVideoCaptureRegion(this.sessionName, engineAndElectronBounds['engineBounds'], engineAndElectronBounds['electronBounds']);
        })
            .catch((err) => {
            // if failed do nothing
            this.log.error('AreaSelection: Failed to set Video Capture Region');
        })
            .then(() => {
            this.goToPreRecording(false);
        });
    }
    setWindowSize(size) {
        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setWindowSize', size);
    }
};
AreaSelectionService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_route_service__["a" /* RouteService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _d || Object])
], AreaSelectionService);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/area-selection.service.js.map

/***/ }),

/***/ "../../../../../src/personal/main.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polyfills_ts__ = __webpack_require__("../../../../../src/polyfills.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser_dynamic__ = __webpack_require__("../../../platform-browser-dynamic/@angular/platform-browser-dynamic.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__environments_environment__ = __webpack_require__("../../../../../src/environments/environment.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__app_module__ = __webpack_require__("../../../../../src/personal/app.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");







if (__WEBPACK_IMPORTED_MODULE_3__environments_environment__["a" /* environment */].production) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_core__["enableProdMode"])();
}
__WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('is-win7')
    .then((isWin7) => {
    if (isWin7) {
        __webpack_require__("../../../../style-loader/index.js!../../../../../src/assets/styles/css_limitations.css");
    }
    __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_config_service__["a" /* AppConfigService */].loadConfigData()
        .then(() => {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser_dynamic__["a" /* platformBrowserDynamic */])().bootstrapModule(__WEBPACK_IMPORTED_MODULE_5__app_module__["a" /* AppModule */]);
    })
        .catch((err) => {
        console.log('bootstrapModule error', err);
    });
});
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/main.js.map

/***/ }),

/***/ "../../../../../src/personal/management/components/entry/entry.component.html":
/***/ (function(module, exports) {

module.exports = "<div role=\"region\" [attr.aria-label]=\"'MANAGEMENT.entry_desc' | translate\" class=\"grid page-container\">\n  <div class=\"page-inner-container col-12 no-margins grid-column\">\n\n    <!-- Header + Icon -->\n    <div class=\"header col-12 no-margins\">\n      <div class=\"grid no-margins col-12\">\n        <div class=\"col-4 no-margins\">\n          <div class=\"page-icon-container\">\n            <div class=\"page-icon edit-entry-icon\"></div>\n          </div>\n          <div class=\"page-title\">\n            {{ 'MENU.entry' | translate }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Body -->\n    <div class=\"page-body grid col-12\">\n\n      <!-- first column-->\n      <div class=\"first-fix-col\">\n        <entries-preview [entryObject]=\"entryService.entry\"></entries-preview>\n      </div>\n\n      <!-- second column-->\n      <div class=\"second-col\">\n\n        <form #form=\"ngForm\">\n          <div class=\"title-section\">\n            <label tabindex=\"0\" for=\"entry-title\" [attr.aria-label]=\"'RECORD_DETAILS.title_desc' | translate\" class=\"detail-field-title\">{{'RECORD_DETAILS.title' | translate}}</label>\n            <input id=\"entry-title\" type=\"text\" required name=\"summary\" #summary=\"ngModel\" #firstInput\n                   maxlength=\"255\"\n                   [(ngModel)]=\"tempEntryInfo.summary\"\n                   [attr.aria-label]=\"'RECORD_DETAILS.title_desc' | translate\"\n                   class=\"details-input-field\" [readonly]=\"entryService.entry.uploadStatus !== 'manual'\">\n            <div class=\"non-valid-field\" [hidden]=\"summary.valid || summary.pristine\">{{'MANAGEMENT.Title_field_required_msg' | translate}}</div>\n            <div class=\"details-input-field-underline\"></div>\n          </div>\n\n          <div class=\"description\">\n            <label tabindex=\"0\" for=\"entry-description\" [attr.aria-label]=\"'RECORD_DETAILS.description_desc' | translate\" class=\"detail-field-title\">{{'RECORD_DETAILS.description' | translate}}</label>\n            <textarea id=\"entry-description\" auto-resize [(ngModel)]=\"tempEntryInfo.description\" [maxRows]=\"3\" name=\"description\" #description=\"ngModel\"\n                      [attr.aria-label]=\"'RECORD_DETAILS.description_desc' | translate\" class=\"textarea\"\n                      [rowHeight]=\"20\" rows=\"1\" type=\"text\" class=\"details-input-field\" [readonly]=\"entryService.entry.uploadStatus !== 'manual'\"></textarea>\n            <div class=\"details-input-field-underline\"></div>\n          </div>\n\n          <div class=\"tags\">\n            <div tabindex=\"0\" [attr.aria-label]=\"'RECORD_DETAILS.tags_desc' | translate\" class=\"detail-field-title\">{{'RECORD_DETAILS.tags' | translate}}</div>\n            <div class=\"tags-auto-complete\">\n              <p-autoComplete tags-autocomplete inputStyleClass =\"details-input-field\" [(ngModel)]=\"tempEntryInfo.tags\" [suggestions]=\"getTagsList()\"\n                              (completeMethod)=\"filterTagsList($event)\" [size]=\"40\"\n                              [attr.aria-label]=\"'RECORD_DETAILS.tags_desc' | translate\"\n                              [minLength]=\"3\" [multiple]=\"true\" [disabled]=\"entryService.entry.uploadStatus !== 'manual'\" name=\"tags\" #my_tags=\"ngModel\">\n                <template let-selectedTag pTemplate=\"item\">\n                  {{selectedTag}}\n                </template>\n              </p-autoComplete>\n            </div>\n            <div class=\"details-input-field-underline\"></div>\n          </div>\n\n          <div class=\"entry-page-footer grid-spaceBetween no-margins\">\n              <button type=\"button\" class=\"col-2 entry-delete-button no-drag small-non-oval-button focus-once\" (click)=\"onDeleteClick()\" [disabled]=\"entryService.entry.uploadStatus !== 'manual' && entryService.entry.uploadStatus !== 'uploaded'\">{{'MANAGEMENT.Delete' | translate}}</button>\n              <button type=\"button\" class=\"col-6 entry-save-upload-button no-drag small-oval-button\" fit-text (click)=\"onSaveAndUploadClick()\" [disabled]=\"!this.isFormValid() || entryService.entry.uploadStatus !== 'manual'\">{{'MANAGEMENT.SaveAndUpload' | translate}}</button>\n              <button type=\"submit\" class=\"col-2 entry-save-button no-drag small-oval-button\" (click)=\"onSaveClick()\" [disabled]=\"!this.isFormValid() || entryService.entry.uploadStatus !== 'manual'\">{{'MANAGEMENT.Save' | translate}}</button>\n          </div>\n        </form>\n\n      </div>\n\n      <management-confirm-dialog class=\"delete-confirm-dialog\"\n                                 confirm_dialog_key=\"delete-entry-key\"\n                                 reject_button_text=\"{{'COMMON.no' | translate}}\"\n                                 accept_button_text=\"{{'MANAGEMENT.Confirm_Delete' | translate}}\">\n      </management-confirm-dialog>\n\n      <management-confirm-dialog class=\"leave-page-confirm-dialog\"\n                                 confirm_dialog_key=\"leave-entry-page\"\n                                 reject_button_text=\"{{'COMMON.no' | translate}}\"\n                                 accept_button_text=\"{{'MANAGEMENT.Confirm_Leave' | translate}}\">\n      </management-confirm-dialog>\n\n      <management-confirm-dialog class=\"confirm-dialog\"\n                                 confirm_dialog_key=\"disclaimer-entry-key\"\n                                 reject_button_text=\"{{'COMMON.no' | translate}}\"\n                                 accept_button_text=\"{{'COMMON.yes' | translate}}\">\n      </management-confirm-dialog>\n    </div>\n\n    <div class=\"buttons-control\">\n      <button class=\"goBack large-non-oval-button\" [attr.aria-label]=\"'MANAGEMENT.go_to_library' | translate\"\n              (click)=\"goToLibrary()\">{{'MANAGEMENT.go_to_library' | translate}}</button>\n    </div>\n\n  </div>\n</div>\n\n"

/***/ }),

/***/ "../../../../../src/personal/management/components/entry/entry.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/* --- Recording Page Structure ---*/\n.edit-entry-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/edit.svg")) + ") no-repeat top left; }\n\n.first-fix-col {\n  width: 360px;\n  border-right: solid 1px rgba(102, 102, 102, 0.2); }\n\n.img-container {\n  width: 320px;\n  height: 180px;\n  border: solid 1px #666666;\n  box-sizing: border-box; }\n\n.thumbnail {\n  width: 320px;\n  background: black;\n  width: 100%;\n  height: 100%;\n  object-fit: contain; }\n\n.date {\n  max-width: 100px;\n  font-size: 12px;\n  font-weight: 300;\n  color: #dadada;\n  opacity: 0.7;\n  font-family: 'Lato'; }\n\n.duration {\n  max-width: 90px;\n  font-size: 12px;\n  font-weight: 300;\n  color: #dadada;\n  opacity: 0.7;\n  margin-left: 20px;\n  font-family: 'Lato'; }\n\n.time-info {\n  margin: 16px 0 0 0; }\n\n.link-container {\n  margin: 16px 0 0 0; }\n\n.link-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/link.svg")) + ") no-repeat center center;\n  width: 20px;\n  height: 20px;\n  opacity: 0.6;\n  display: inline-block; }\n\n.entry-link {\n  opacity: 0.7;\n  font-size: 14px;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  color: #00abcc;\n  text-overflow: ellipsis;\n  border: none;\n  background: transparent;\n  font-family: Lato;\n  outline: none;\n  text-align: left;\n  word-break: break-all;\n  cursor: pointer;\n  padding: 0;\n  margin: 0 42px 0 14px; }\n  .entry-link:hover {\n    opacity: 1; }\n\n.second-col {\n  padding: 0 0 0 40px;\n  position: relative; }\n\n.details-input-field-underline {\n  margin-bottom: 40px; }\n\ntextarea {\n  margin-bottom: 2px !important; }\n\n.actions-top {\n  -ms-flex-item-align: center;\n      -ms-grid-row-align: center;\n      align-self: center;\n  margin-right: 18px; }\n\n.entry-delete-button {\n  font-size: 14px;\n  height: 34px;\n  text-align: left;\n  padding: 0;\n  font-family: 'Lato'; }\n\n.entry-save-upload-button {\n  height: 34px;\n  font-size: 14px;\n  font-family: 'Lato';\n  padding: 0px;\n  word-break: keep-all; }\n\n.entry-save-button {\n  height: 34px;\n  font-size: 14px;\n  font-family: 'Lato';\n  padding: 0px; }\n\n.entry-page-footer {\n  position: absolute;\n  bottom: 17px;\n  height: 34px;\n  width: calc(100% - 40px); }\n\n.fallbackImg, .svg-icon {\n  padding: 70px;\n  background: linear-gradient(to bottom, transparent, rgba(0, 0, 0, 0.38) 67%, #000000);\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box; }\n\n.svg-icon {\n  padding: 65px; }\n\n.goBack {\n  padding: 0 3px; }\n\n.tags-auto-complete {\n  width: 325px;\n  max-height: 250px;\n  font-family: Lato;\n  font-size: 16px;\n  font-weight: 300;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.25;\n  color: #f1f1f1;\n  margin-bottom: 2px; }\n\n.buttons-control {\n  position: absolute;\n  top: 22px;\n  right: 18px; }\n\n:host /deep/ .ui-autocomplete-multiple-container {\n  max-height: 180px;\n  overflow: auto !important; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/management/components/entry/entry.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_entry_service__ = __webpack_require__("../../../../../src/personal/management/services/entry.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_router__ = __webpack_require__("../../../router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_forms__ = __webpack_require__("../../../forms/@angular/forms.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice__ = __webpack_require__("../../../../primeng/components/common/confirmationservice.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EntryComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









let EntryComponent = class EntryComponent {
    constructor(router, log, entryService, translate, accessibilityService, confirmationService) {
        this.router = router;
        this.log = log;
        this.entryService = entryService;
        this.translate = translate;
        this.accessibilityService = accessibilityService;
        this.confirmationService = confirmationService;
        this.isEntryDeleted = false;
        this.tempEntryInfo = {
            summary: this.entryService.entry.summary,
            description: this.entryService.entry.description,
            tags: (this.entryService.entry.tags && this.entryService.entry.tags !== '') ? this.entryService.entry.tags.split(',') : []
        };
    }
    ngOnInit() {
        this.entryService.registerToChanges();
        this.accessibilityService.setAccessibilityAlert('MANAGEMENT.entry_desc');
        this.setFocusOnFirstInput();
    }
    onDeleteClick() {
        this.entryService.deleteRecordingEntry('delete-entry-key', this.entryService.entry, () => {
            this.isEntryDeleted = true;
            this.goToLibrary();
        });
    }
    saveEntry() {
        let clonedEntry = this.prepareJsonEntryToSave();
        return this.entryService.saveEntryDetails(clonedEntry)
            .catch(() => { }); //do nothing
    }
    uploadAndNavigate() {
        return this.entryService.uploadEntry('disclaimer-entry-key', this.entryService.entry['jsonFilePath'])
            .then(() => { this.goToLibrary(); })
            .catch(() => { }); //do nothing
    }
    onSaveClick() {
        if (this.isFormValid() && this.isFormReallyChanged()) {
            this.saveEntry()
                .then(() => {
                this.goToLibrary();
            });
        }
        else {
            this.goToLibrary();
        }
    }
    onSaveAndUploadClick() {
        if (this.isFormValid()) {
            if (this.isFormReallyChanged()) {
                // Save and Upload
                this.saveEntry()
                    .then(() => {
                    return this.uploadAndNavigate();
                });
            }
            else {
                // Just Upload
                return this.uploadAndNavigate();
            }
        }
    }
    prepareJsonEntryToSave() {
        let clonedEntry = __WEBPACK_IMPORTED_MODULE_7_lodash__["cloneDeep"](this.entryService.entry);
        let clonedTempEntry = __WEBPACK_IMPORTED_MODULE_7_lodash__["cloneDeep"](this.tempEntryInfo);
        clonedTempEntry.tags = clonedTempEntry.tags.join();
        __WEBPACK_IMPORTED_MODULE_7_lodash__["assign"](clonedEntry, clonedTempEntry);
        return clonedEntry;
    }
    getEntryLinkUrl(entryId) {
        return this.entryService.getEntryLinkUrl(entryId);
    }
    onLinkClick(entryId) {
        return this.entryService.openEntryAtWebsite(entryId);
    }
    goToLibrary() {
        this.router.navigate(['/management/library']);
    }
    askBeforeLeave() {
        return new Promise((resolve, reject) => {
            if (this.entryService.entry.uploadStatus === 'manual' && this.isFormReallyChanged() && !this.isEntryDeleted) {
                this.translate.get('MANAGEMENT.leave_without_changes')
                    .subscribe((leaveWithoutChangesText) => {
                    this.confirmationService.confirm({
                        message: leaveWithoutChangesText,
                        key: "leave-entry-page",
                        accept: () => {
                            resolve(true);
                        },
                        reject: () => {
                            resolve(false);
                        }
                    });
                });
            }
            else {
                resolve(true);
            }
        });
    }
    isFormReallyChanged() {
        let userTags = (this.form.value.tags && this.form.value.tags.length > 0) ? this.form.value.tags.join() : '';
        let userDescription = this.form.value.description ? this.form.value.description : '';
        let entryDescription = this.entryService.entry.description ? this.entryService.entry.description : '';
        return this.form.value.summary !== this.entryService.entry.summary ||
            userDescription !== entryDescription ||
            userTags !== this.entryService.entry.tags;
    }
    ngOnDestroy() {
        this.entryService.unregisterToChanges();
    }
    filterTagsList(event) {
        this.entryService.filterTagsList(event.query);
    }
    getTagsList() {
        return this.entryService.suggestedTags;
    }
    isFormValid() {
        return this.form.valid && (this.form.value.summary && this.form.value.summary.trim() !== ''); //we can't allow white spaces only
    }
    /* Accessibility */
    setFocusOnFirstInput() {
        this.firstInput.nativeElement.focus();
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('form'),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_5__angular_forms__["NgForm"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__angular_forms__["NgForm"]) === "function" && _a || Object)
], EntryComponent.prototype, "form", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('firstInput'),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _b || Object)
], EntryComponent.prototype, "firstInput", void 0);
EntryComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'entry',
        template: __webpack_require__("../../../../../src/personal/management/components/entry/entry.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/management/styles/inner-page.scss"), __webpack_require__("../../../../../src/personal/management/components/entry/entry.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__angular_router__["Router"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__angular_router__["Router"]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_2__services_entry_service__["a" /* EntryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__services_entry_service__["a" /* EntryService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_4_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4_ng2_translate__["b" /* TranslateService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice__["ConfirmationService"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice__["ConfirmationService"]) === "function" && _h || Object])
], EntryComponent);

var _a, _b, _c, _d, _e, _f, _g, _h;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/entry.component.js.map

/***/ }),

/***/ "../../../../../src/personal/management/components/info/info.component.html":
/***/ (function(module, exports) {

module.exports = "<div  role=\"region\" [attr.aria-label]=\"'MANAGEMENT.info_desc' | translate\" class=\"grid page-container\">\n  <div class=\"page-inner-container col-12 no-margins grid-column\">\n\n    <management-confirm-dialog class=\"confirm-dialog sign-out-confirmation\"\n                               confirm_dialog_key=\"sign-out-recording-key\"\n                               accept_button_size=\"large\"\n                               reject_button_text=\"{{'COMMON.no' | translate}}\"\n                               accept_button_text=\"{{'MANAGEMENT.Confirm_SignOut' | translate}}\">\n    </management-confirm-dialog>\n\n    <!-- Header + Icon -->\n    <div class=\"header col-12 no-margins\">\n      <div class=\"grid-spaceBetween no-margins col-12\">\n        <div class=\"col-4 no-margins\">\n          <div class=\"page-icon-container\">\n            <div class=\"page-icon info-icon\"></div>\n          </div>\n          <div class=\"page-title\">\n            {{ 'MENU.info_pc' | translate }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Body -->\n    <div class=\"page-body col-12\">\n\n      <div tabindex=\"0\" [attr.aria-label]=\"'APP_INFO.product_title_pc' | translate: {value: app_version}\" class=\"Kaltura-Personal-Cap\">\n        {{ 'APP_INFO.product_title_pc' | translate: {value: app_version} }}\n      </div>\n      <div class=\"SepLine\"></div>\n\n      <div class=\"pc-info-container\">\n        <div class=\"pc-info-row\">\n          <span [attr.aria-label]=\"'APP_INFO.pc_connected_user' | translate \" class=\"pc-info-text info-connected-user-text\">  {{ 'APP_INFO.pc_connected_user' | translate }}\n            <span tabindex=\"0\" [attr.aria-label]=\"('APP_INFO.pc_connected_user' | translate) + ' ' + app_user\" class=\"pc-info-value info-connected-user\">{{ app_user }} </span>\n            <button class=\"small-oval-button sign-out-button\" [attr.aria-label]=\"'APP_INFO.sign_out' | translate\"\n                    (click)=\"onSignOut()\">{{ 'APP_INFO.sign_out' |  translate }}\n            </button>\n          </span>\n        </div>\n        <div class=\"pc-info-row\">\n          <span class=\"pc-info-text info-website-text\">  {{ 'APP_INFO.pc_website' | translate }}\n            <button class=\"pc-info-value info-website-url pc-button\" (click)=\"onLinkClick()\"\n                    [attr.aria-label]=\"('APP_INFO.pc_website' | translate) + ' ' + site_url\"> {{ site_url }} </button>\n          </span>\n        </div>\n      </div>\n\n    </div>\n\n  </div>\n</div>\n\n"

/***/ }),

/***/ "../../../../../src/personal/management/components/info/info.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/* --- Info structure ---*/\n.info-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/info.svg")) + ") no-repeat top left; }\n\n.Kaltura-Personal-Cap {\n  width: 100%;\n  height: 20px;\n  font-family: Lato;\n  font-size: 16px;\n  font-weight: 400;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.25;\n  letter-spacing: 0.5px;\n  text-align: left;\n  color: #ffffff; }\n\n.SepLine {\n  width: 399px;\n  height: 1px;\n  margin-top: 16px;\n  border-radius: 1px;\n  background-color: rgba(255, 255, 255, 0.2); }\n\n.pc-info-container {\n  width: 100%;\n  margin-top: 27px; }\n\n.pc-info-row {\n  margin-bottom: 29px; }\n\n.pc-info-text {\n  font-size: 12px;\n  font-weight: 400;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  color: #999999;\n  height: 15px;\n  font-family: Lato; }\n\n.pc-info-value {\n  margin-left: 16px; }\n\n.info-connected-user-text {\n  width: 90px; }\n\n.info-connected-user {\n  width: 193px;\n  height: 20px;\n  opacity: 0.7;\n  font-family: Lato;\n  font-size: 16px;\n  font-weight: 300;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.25;\n  letter-spacing: normal;\n  text-align: left;\n  color: #ffffff; }\n\n.info-website-text {\n  width: 56px; }\n\n.info-website-url {\n  cursor: pointer;\n  width: 329px;\n  height: 20px;\n  opacity: 0.7;\n  font-family: Lato;\n  font-size: 14px;\n  font-weight: 400;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.43;\n  letter-spacing: normal;\n  text-align: left;\n  color: #ffffff; }\n  .info-website-url:hover {\n    opacity: 1; }\n\n.sign-out-button {\n  margin-left: 16px; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/management/components/info/info.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_primeng_components_common_confirmationservice__ = __webpack_require__("../../../../primeng/components/common/confirmationservice.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_primeng_components_common_confirmationservice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_primeng_components_common_confirmationservice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InfoComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









let InfoComponent = class InfoComponent {
    constructor(confirmationService, accessibilityService, appConfig, translate, logger, renderer) {
        this.confirmationService = confirmationService;
        this.accessibilityService = accessibilityService;
        this.appConfig = appConfig;
        this.translate = translate;
        this.logger = logger;
        this.renderer = renderer;
        this.app_version = '';
        this.app_user = '';
        this.site_url = '';
    }
    ngOnInit() {
        let config = this.appConfig.getConfigData("config.shared");
        this.app_version = config.app_version;
        if (config.externalSettings && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](config.externalSettings)) {
            this.app_user = config.externalSettings.userId;
            this.setSiteUrl(config.externalSettings);
            this.accessibilityService.setAccessibilityAlert('MANAGEMENT.info_desc');
        }
    }
    onLinkClick() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('open-external-link', this.site_url);
    }
    onSignOut() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('is-uploading')
            .then((isUploading) => {
            let deleteMessage = isUploading ? 'MANAGEMENT.SignOut_msg_with_uploads' : 'MANAGEMENT.SignOut_msg_no_uploads';
            this.translate.get(deleteMessage)
                .subscribe((translatedMessage) => {
                this.showSignOutConfirmation(translatedMessage);
            });
        });
    }
    //@see https://kaltura.atlassian.net/wiki/spaces/PROD/pages/656736926/Entry+URL+Setting
    setSiteUrl(externalSettings) {
        //for backward compatibility
        if (externalSettings.hasOwnProperty('entryURL_v2')) {
            this.site_url = !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](externalSettings.entryURL_v2) ? externalSettings.entryURL_v2 : externalSettings.appHost;
        }
        else {
            let hostingAppType = externalSettings.hostingAppType ? externalSettings.hostingAppType : '';
            this.site_url = hostingAppType.toLowerCase() === 'kaf' ?
                __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].urlBuilder(externalSettings.appHost, externalSettings.entryURL) :
                externalSettings.appHost;
        }
    }
    showSignOutConfirmation(confirmMsg) {
        this.confirmationService.confirm({
            message: confirmMsg,
            key: "sign-out-recording-key",
            accept: () => {
                this.signOut();
            },
            reject: () => {
                // do nothing.
            }
        });
    }
    signOut() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('removeExternalSettings')
            .then(() => {
            this.renderer.addClass(document.body, 'sign-out-app-fade');
            setTimeout(() => { this.teminateApp(); }, 2000);
        })
            .catch((err) => {
            this.logger.error('Failed to sign out.' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    teminateApp() {
        return __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('signOutApp')
            .catch((err) => {
            this.logger.error('Failed to sign out.' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
};
InfoComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'info',
        template: __webpack_require__("../../../../../src/personal/management/components/info/info.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/management/styles/inner-page.scss"), __webpack_require__("../../../../../src/personal/management/components/info/info.component.scss")],
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_7_primeng_components_common_confirmationservice__["ConfirmationService"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7_primeng_components_common_confirmationservice__["ConfirmationService"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6_ng2_translate__["b" /* TranslateService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer2"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer2"]) === "function" && _f || Object])
], InfoComponent);

var _a, _b, _c, _d, _e, _f;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/info.component.js.map

/***/ }),

/***/ "../../../../../src/personal/management/components/library/library.component.html":
/***/ (function(module, exports) {

module.exports = "<div role=\"region\" [attr.aria-label]=\"'MANAGEMENT.library_desc' | translate\" class=\"grid page-container\">\n  <div class=\"page-inner-container col-12 no-margins grid-column\">\n\n    <!-- Header + Icon -->\n    <div class=\"header col-12 no-margins\">\n      <div class=\"grid-spaceBetween no-margins col-12\">\n        <div class=\"col-4 no-margins\">\n          <div class=\"page-icon-container\">\n            <div class=\"page-icon calendar-icon\"></div>\n          </div>\n          <div class=\"page-title\">\n            {{ 'MENU.library' | translate }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"delete-all-uploaded\">\n      <button *ngIf=\"getRecordingList().length > 0\" class=\"large-non-oval-button delete-button focus-once delete-all-uploaded-button\" (click)=\"openDeleteAllUploadedDialog()\"\n              [attr.aria-label]=\"'MANAGEMENT.Delete_all_uploaded' | translate\">\n        <a class=\"delete-all-button-icon\"></a>\n        {{'MANAGEMENT.Delete_all_uploaded' | translate}}\n      </button>\n    </div>\n\n    <!-- Body -->\n    <div class=\"page-body grid col-12\">\n      <management-confirm-dialog class=\"confirm-dialog\"\n                                confirm_dialog_key=\"delete-recording-key\"\n                                reject_button_text=\"{{'COMMON.no' | translate}}\"\n                                accept_button_text=\"{{'MANAGEMENT.Confirm_Delete' | translate}}\">\n      </management-confirm-dialog>\n\n      <management-confirm-dialog class=\"confirm-dialog\"\n                                 confirm_dialog_key=\"delete-all-uploaded-recordings-key\"\n                                 reject_button_text=\"{{'COMMON.no' | translate}}\"\n                                 accept_button_text=\"{{'MANAGEMENT.Confirm_Delete' | translate}}\">\n      </management-confirm-dialog>\n\n      <management-confirm-dialog class=\"confirm-dialog\"\n                                 confirm_dialog_key=\"delete-all-uploaded-recordings-no-uploaded-key\"\n                                 accept_button_text=\"{{'COMMON.OK' | translate}}\">\n      </management-confirm-dialog>\n\n      <management-confirm-dialog class=\"confirm-dialog\"\n                                 confirm_dialog_key=\"disclaimer-recording-key\"\n                                 reject_button_text=\"{{'COMMON.no' | translate}}\"\n                                 accept_button_text=\"{{'COMMON.yes' | translate}}\">\n      </management-confirm-dialog>\n\n      <!--List-->\n      <div class=\"page-body-inner col-12 grid\">\n        <div class=\"col-12 library-list-inner no-margins\">\n\n          <!--Items Here-->\n          <div *ngFor=\"let recordItem of getRecordingList(); trackBy: trackItemByFunc;\" class=\"record-item grid\">\n\n            <button class=\"button-container\" (click)=\"goToEntry(recordItem)\" [attr.aria-label]=\"'MANAGEMENT.ThumbnailAlternateText' | translate:{ VideoName: recordItem.summary}\">\n              <img [src]=\"recordItem.isAudioOnly ? './assets/svg/20/mic-grey.svg' : (recordItem.primaryMediaFile | changeExtension:'.jpg' | safe)\" class=\"thumbnail\"\n                   onload=\"this.getAttribute('haderror') != 'true' ? this.classList.remove('fallbackImg') : null; this.setAttribute('haderror', false);\"\n                   onerror=\"this.onerror=null;this.setAttribute('haderror', true); this.classList.add('fallbackImg');this.src='./assets/svg/20/photo.svg';\"\n                   alt=\"{{ 'MANAGEMENT.ThumbnailAlternateText' | translate:{ VideoName: recordItem.summary} }}\"\n                   [ngClass]=\"{'svg-icon': recordItem.isAudioOnly }\" [attr.aria-label]=\"'MANAGEMENT.ThumbnailAlternateText' | translate:{ VideoName: recordItem.summary}\">\n            </button>\n\n            <div class=\"info grid col no-margins\">\n              <div class=\"details\">\n                <button class=\"title\" [attr.aria-label]=\"recordItem.summary\" (click)=\"goToEntry(recordItem)\">{{ recordItem.summary }}</button>\n                <div tabindex=\"0\" [attr.aria-label]=\"recordItem.description\" class=\"description\">{{ recordItem.description }}</div>\n                <div class=\"last-line grid no-margins\">\n                  <span class=\"date\">{{ recordItem.recordingStartTime | time:'L' }}</span>\n                  <span class=\"duration\">{{ recordItem.durationSec * 1000 | duration }}</span>\n                  <button class=\"entry-link col\" *ngIf=\"recordItem.uploadStatus == 'uploaded'\"\n                          type=\"button\" pButton [attr.aria-label]=\"'MANAGEMENT.LinkTo' | translate:{ VideoName: recordItem.summary}\"\n                          [label]=\"getEntryLinkUrl(recordItem.primaryEntryId)\" (click)=\"onLinkClick(recordItem.primaryEntryId)\"></button>\n                </div>\n              </div>\n              <div class=\"actions col\">\n                <button class=\"small-oval-button upload-button\" *ngIf=\"recordItem.uploadStatus === 'manual' && !recordItem.uploadClicked\" type=\"button\" pButton\n                        (click)=\"onStartUploadClick(recordItem); recordItem.uploadClicked = true\"\n                        label=\"{{'MANAGEMENT.Upload' | translate}}\" [attr.aria-label]=\"'MANAGEMENT.Upload' | translate\"></button>\n                <div class=\"pending\" *ngIf=\"recordItem.uploadStatus === 'auto' || recordItem.uploadClicked\">{{'MANAGEMENT.Pending' | translate}}</div>\n                <div class=\"canceling\" *ngIf=\"(recordItem.uploadStatus === 'uploading' && recordItem.cancelClicked) || recordItem.uploadStatus === 'canceled'\">\n                  {{'MANAGEMENT.Canceling' | translate}}\n                </div>\n                <button class=\"small-oval-button upload-button\" *ngIf=\"recordItem.uploadStatus === 'uploaded' && !recordItem.uploadClicked\" type=\"button\" pButton\n                        (click)=\"onReUploadClick(recordItem.jsonFilePath); recordItem.uploadClicked = true\"\n                        label=\"{{'MANAGEMENT.ReUpload' | translate}}\" [attr.aria-label]=\"'MANAGEMENT.ReUpload' | translate\"></button>\n                <div class=\"progressbar-container\" *ngIf=\"recordItem.uploadStatus === 'uploading' && !recordItem.cancelClicked\">\n                  <p-progressBar class=\"progressbar-component\" [value]=\"getUploadProgress(recordItem)\"></p-progressBar>\n                  <button class=\"pc-button cancel-button\" tooltip-addon [attr.aria-label]=\"'MANAGEMENT.CancelUpload' | translate\"\n                          [pTooltip]=\" 'MANAGEMENT.CancelUpload' | translate \" tooltipPosition=\"top\" showDelay=\"500\"\n                          (click)=\"onCancelUploadClick(recordItem); recordItem.cancelClicked = true;\"></button>\n                </div>\n                <div class=\"delete-location\" *ngIf=\"((recordItem.uploadStatus === 'manual' && !recordItem.uploadClicked) || recordItem.uploadStatus === 'uploaded')\">\n                  <button class=\"small-non-oval-button delete-button focus-once\" (click)=\"openDeleteDialog(recordItem)\" [attr.aria-label]=\"'MANAGEMENT.Delete' | translate\">{{'MANAGEMENT.Delete' | translate}}</button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n\n\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/management/components/library/library.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/* --- Library structure ---*/\n.calendar-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/library.svg")) + ") no-repeat top left; }\n\n.page-body-inner {\n  overflow-y: auto; }\n\n.record-item {\n  width: 780px;\n  height: 136px;\n  border-bottom: 1px solid #5d5656;\n  padding: 17px 0 17px 0;\n  margin: 0 0 0 5px; }\n  .record-item:first-child {\n    border-top: 1px solid #5d5656; }\n\n.thumbnail {\n  width: 178px;\n  background: black;\n  width: 100%;\n  height: 100%;\n  object-fit: contain; }\n\n.button-container {\n  width: 178px;\n  height: 100px;\n  border: solid 1px #666666;\n  margin-right: 17px;\n  box-sizing: border-box;\n  cursor: pointer;\n  padding: 0; }\n  .button-container:hover {\n    border: 2px solid #ffffff; }\n\n.details {\n  height: 102px;\n  width: 400px;\n  position: relative; }\n\n.title {\n  width: 100%;\n  height: 18px;\n  font-size: 14px;\n  font-weight: 400;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 1.29;\n  color: #eaeaea;\n  text-decoration: underline;\n  cursor: pointer;\n  background: transparent;\n  border: none;\n  font-family: 'Lato';\n  margin: 0;\n  padding: 0;\n  text-align: left;\n  outline: none;\n  display: block; }\n  .title:hover {\n    color: #ffffff; }\n\n.description {\n  width: 100%;\n  height: 54px;\n  font-weight: 300;\n  font-size: 12px;\n  line-height: 1.5;\n  color: #dadada;\n  margin-top: 4px;\n  overflow: hidden;\n  font-family: 'Lato';\n  word-wrap: break-word;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 3; }\n\n.last-line {\n  width: 100%;\n  position: absolute;\n  bottom: 1px; }\n\n.date {\n  max-width: 100px;\n  font-size: 12px;\n  font-weight: 300;\n  color: #dadada;\n  opacity: 0.7;\n  font-family: 'Lato'; }\n\n.duration {\n  max-width: 90px;\n  font-size: 12px;\n  font-weight: 300;\n  color: #dadada;\n  opacity: 0.7;\n  margin-left: 20px;\n  font-family: 'Lato'; }\n\n.actions {\n  width: 150px;\n  height: 102px;\n  text-align: center;\n  position: relative;\n  padding: 0 0 0 37px; }\n\n.entry-link {\n  opacity: 0.7;\n  font-size: 12px;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  color: #ffffff;\n  text-overflow: ellipsis;\n  overflow-x: hidden;\n  padding: 0 0 0 10px;\n  text-decoration: underline;\n  border: none;\n  background: transparent;\n  font-family: Lato;\n  outline: none;\n  white-space: nowrap;\n  margin-left: 11px; }\n  .entry-link:hover {\n    opacity: 1; }\n\n:host /deep/ .entry-link .ui-button-text {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding-top: 0 !important;\n  text-decoration: underline; }\n\n.delete-location {\n  position: absolute;\n  left: 0;\n  top: 79px;\n  width: 100%;\n  text-align: center; }\n\n.delete-all-uploaded {\n  position: absolute;\n  right: 55px;\n  text-align: right;\n  opacity: 0.7; }\n\n.delete-all-uploaded:hover {\n  opacity: 1; }\n\n.delete-all-uploaded-button {\n  font-weight: 600;\n  opacity: 1;\n  line-height: 24px;\n  color: #ffffff; }\n\n.delete-button {\n  margin-left: 37px; }\n\n.fallbackImg, .svg-icon {\n  padding: 40px;\n  background: linear-gradient(to bottom, transparent, rgba(0, 0, 0, 0.38) 67%, #000000);\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box; }\n\n.svg-icon {\n  padding: 35px; }\n\n.cancel-button {\n  cursor: pointer;\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/exit.svg")) + ") no-repeat center center;\n  opacity: 0.49;\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  top: -8px;\n  left: 111px; }\n\n.progressbar-container {\n  position: relative;\n  top: 10px; }\n\n.pending, .canceling {\n  opacity: 0.7;\n  font-family: Lato;\n  font-size: 12px;\n  font-weight: 400;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  color: #cccccc;\n  margin-top: 4px; }\n\n.page-body {\n  padding-left: 63px; }\n\n.delete-all-button-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/trash.svg")) + ") no-repeat center center;\n  width: 20px;\n  height: 20px;\n  float: left;\n  margin-right: 5px; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/management/components/library/library.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__library_service__ = __webpack_require__("../../../../../src/personal/management/components/library/library.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__("../../../router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__services_entry_service__ = __webpack_require__("../../../../../src/personal/management/services/entry.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LibraryComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








let LibraryComponent = class LibraryComponent {
    constructor(log, appConfig, libraryService, accessibilityService, router, entryService) {
        this.log = log;
        this.appConfig = appConfig;
        this.libraryService = libraryService;
        this.accessibilityService = accessibilityService;
        this.router = router;
        this.entryService = entryService;
        this.MINIMAL_UPLOAD_PERCENTAGE = 10;
    }
    ngOnInit() {
        this.libraryService.init();
        this.accessibilityService.setAccessibilityAlert('MANAGEMENT.library_desc');
    }
    ngOnDestroy() {
        this.libraryService.clearRecordingList();
    }
    getEntryLinkUrl(entryId) {
        return this.entryService.getEntryLinkUrl(entryId);
    }
    onLinkClick(entryId) {
        return this.entryService.openEntryAtWebsite(entryId);
    }
    onStartUploadClick(recordItem) {
        this.entryService.uploadEntry('disclaimer-recording-key', recordItem.jsonFilePath)
            .catch(err => {
            recordItem.uploadClicked = false;
        });
    }
    onReUploadClick(jsonFilePath) {
        this.entryService.updateUploadStatus(jsonFilePath, 'reUpload');
    }
    onCancelUploadClick(recordItem) {
        //cancel recording only if not fully uploaded
        if (this.getUploadProgress(recordItem) !== '100') {
            this.entryService.updateUploadStatus(recordItem.jsonFilePath, 'canceled');
        }
    }
    // The function is used for *ngFor loop for tracking new changes
    trackItemByFunc(index, recordItem) {
        return recordItem ? recordItem.recordingStartTime : undefined;
    }
    getRecordingList() {
        return this.libraryService.getRecordingList();
    }
    openDeleteDialog(recordItem) {
        this.entryService.deleteRecordingEntry("delete-recording-key", recordItem);
    }
    openDeleteAllUploadedDialog() {
        this.entryService.deleteAllUploadedEntries(this.libraryService.getRecordingList(), () => {
            this.libraryService.fetchRecordingList();
        });
    }
    goToEntry(recordItem) {
        this.entryService.entry = recordItem;
        this.router.navigate(['/management/entry']);
    }
    /**
     *
     * @param recordItem
     * @returns {any} min of 10 percent progress
     */
    getUploadProgress(recordItem) {
        let totalProgress = { part: 0, total: 0 };
        if (recordItem['progress']) {
            let numOfMedia = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](recordItem['progress']).length > 1 ? __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](recordItem['progress']).length : 1; //make sure it is not 0
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](recordItem['progress'], function (mediaProgress, mediaName) {
                if (recordItem['progress'][mediaName]) {
                    totalProgress.part += recordItem['progress'][mediaName]['chunksUploaded'] ?
                        recordItem['progress'][mediaName]['chunksUploaded'] / numOfMedia : 0;
                    totalProgress.total += recordItem['progress'][mediaName]['totalNumOfChunks'] ?
                        recordItem['progress'][mediaName]['totalNumOfChunks'] / numOfMedia : 0;
                }
            });
        }
        // check if this is a finite primitive number and if divider is not 0
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isFinite"](totalProgress.part) && __WEBPACK_IMPORTED_MODULE_2_lodash__["isFinite"](totalProgress.total) && totalProgress.total !== 0) {
            let percentage = Math.floor(totalProgress.part / totalProgress.total * 100);
            return percentage > this.MINIMAL_UPLOAD_PERCENTAGE ? percentage.toString() : this.MINIMAL_UPLOAD_PERCENTAGE.toString();
        }
        else {
            return this.MINIMAL_UPLOAD_PERCENTAGE.toString();
        }
    }
};
LibraryComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'library',
        template: __webpack_require__("../../../../../src/personal/management/components/library/library.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/management/styles/inner-page.scss"), __webpack_require__("../../../../../src/personal/management/components/library/library.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_4__library_service__["a" /* LibraryService */]]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__library_service__["a" /* LibraryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__library_service__["a" /* LibraryService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_6__services_entry_service__["a" /* EntryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__services_entry_service__["a" /* EntryService */]) === "function" && _f || Object])
], LibraryComponent);

var _a, _b, _c, _d, _e, _f;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/library.component.js.map

/***/ }),

/***/ "../../../../../src/personal/management/components/library/library.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LibraryService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let LibraryService = class LibraryService {
    constructor(log) {
        this.log = log;
        this.recordingList = [];
    }
    init() {
        this.fetchRecordingList()
            .then(() => {
            this.registerToChangesInList();
        })
            .catch((err) => {
            //do nothing
        });
    }
    getRecordingList() {
        return this.recordingList;
    }
    clearRecordingList() {
        this.recordingList = [];
    }
    ngOnDestroy() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('file-upload-notification');
    }
    fetchRecordingList() {
        return __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('get-recording-list')
            .then(jsonFiles => {
            //filter out deleted uploadStatus and sort by recordingStartTime
            this.recordingList = __WEBPACK_IMPORTED_MODULE_4_lodash__["sortBy"](__WEBPACK_IMPORTED_MODULE_4_lodash__["filter"](jsonFiles, (json) => { return json['uploadStatus'] !== 'deleted'; }), //filter deleted uploads and jsons from exclude list
            (file) => { return -file.recordingStartTime; }); // sort desc
        })
            .catch((err) => {
            this.log.error('Failed to Get Recording List ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    registerToChangesInList() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('file-upload-notification', (event) => {
            let json = event.file;
            switch (event.eventName) {
                case 'added':
                    this.log.info('upload notification - received file added');
                    this.recordingList.unshift(json);
                    break;
                case 'changed':
                    this.log.info('upload notification - received file changed');
                    this.handleChangedFile(json);
                    break;
                case 'removed':
                    this.log.info('upload notification - received file removed');
                    let indexOfFile = this.getIndexOfFile(json);
                    if (indexOfFile > -1) {
                        this.recordingList.splice(indexOfFile, 1);
                    }
                    break;
            }
        });
    }
    getIndexOfFile(json) {
        return __WEBPACK_IMPORTED_MODULE_4_lodash__["findIndex"](this.recordingList, recording => {
            return recording['recordingStartTime'] === json['recordingStartTime'];
        });
    }
    handleChangedFile(json) {
        let indexOfFile = this.getIndexOfFile(json);
        //update only if index exists and the current update is more recent
        if (indexOfFile > -1 && this.recordingList[indexOfFile]['updateTimestamp'] < json['updateTimestamp']) {
            if (json['uploadStatus'] === 'deleted') {
                this.recordingList.splice(indexOfFile, 1); //remove local json object
            }
            else {
                if (json['uploadStatus'] === 'uploaded') {
                    setTimeout(() => {
                        this.updateJsonObject(indexOfFile, json);
                    }, 3000);
                }
                else {
                    this.updateJsonObject(indexOfFile, json);
                }
            }
        }
    }
    updateJsonObject(indexOfFile, json) {
        this.recordingList[indexOfFile] = {}; // trick for angular change detection
        this.recordingList[indexOfFile] = json; //update local json object
    }
};
LibraryService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object])
], LibraryService);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/library.service.js.map

/***/ }),

/***/ "../../../../../src/personal/management/components/management-window/management-window.component.html":
/***/ (function(module, exports) {

module.exports = "<app-container role=\"main\" *ngIf=\"!routeService.isInTransition\" class=\"management-container\"\n               [containerProperties]=\"containerProperties\" [attr.aria-label]=\"'MANAGEMENT.management_desc' | translate\">\n\n</app-container>\n\n\n"

/***/ }),

/***/ "../../../../../src/personal/management/components/management-window/management-window.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".management-container .main-container {\n  opacity: 1 !important; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/management/components/management-window/management-window.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ManagementWindowComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let ManagementWindowComponent = class ManagementWindowComponent {
    constructor(routeService) {
        this.routeService = routeService;
        this.containerProperties = this.getContainerProperties();
    }
    goToPreRecording() {
        this.routeService.navigate('pre-recording');
    }
    getContainerProperties() {
        let properties = {
            header: {
                logoIcon: 'logo-pc-full',
                buttons: ['minimize_to_tray', 'minimize', 'debug'],
                extendedButtons: [{
                        title: 'MANAGEMENT.new_recording',
                        ariaLabel: 'MANAGEMENT.new_recording_desc',
                        class: "rounded-red-btn",
                        onClick: () => { this.goToPreRecording(); }
                    }]
            },
            navbar: {
                links: [
                    {
                        linkClass: 'library',
                        label: 'MENU.library',
                        routerLink: '/management/library'
                    },
                    {
                        linkClass: 'settings-nav',
                        label: 'SETTINGS.panel_title',
                        routerLink: '/management/settings',
                        shouldDisableWhenNotStable: true
                    },
                    {
                        linkClass: 'info-nav',
                        label: 'APP_INFO.title',
                        routerLink: '/management/info',
                        shouldDisableWhenNotStable: true
                    }
                ]
            }
        };
        return properties;
    }
};
ManagementWindowComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'management-window',
        template: __webpack_require__("../../../../../src/personal/management/components/management-window/management-window.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/management/components/management-window/management-window.component.scss")],
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_route_service__["a" /* RouteService */]) === "function" && _a || Object])
], ManagementWindowComponent);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/management-window.component.js.map

/***/ }),

/***/ "../../../../../src/personal/management/components/settings/settings.component.html":
/***/ (function(module, exports) {

module.exports = "<div role=\"region\" [attr.aria-label]=\"'MANAGEMENT.settings_desc' | translate\" class=\"grid page-container\">\n  <div *ngIf=\"settingsObject\" class=\"page-inner-container col-12 no-margins grid-column\">\n\n    <!-- Header + Icon -->\n    <div class=\"header col-12 no-margins\">\n      <div class=\"grid no-margins col-12\">\n        <div class=\"col-4 no-margins\">\n          <div class=\"page-icon-container\">\n            <div class=\"page-icon settings-icon\"></div>\n          </div>\n          <div class=\"page-title\">\n            {{ 'MENU.Settings' | translate }}\n          </div>\n        </div>\n\n        <div class=\"settings-page-header grid-spaceBetween no-margins\">\n          <button [attr.aria-label]=\"'COMMON.cancel' | translate\"  [disabled]=\"this.isDisabled || isUploadingLogs()\" class=\"settings-cancel-button no-drag small-non-oval-button focus-once\" (click)=\"onCancelClick()\">{{'COMMON.cancel' | translate}}</button>\n          <button [attr.aria-label]=\"'SETTINGS.save_settings' | translate\" class=\"settings-save-button no-drag small-oval-button\"\n                  (click)=\"onSaveClick()\" [disabled]=\"readOnly || this.isDisabled || isUploadingLogs()\"><span class=\"settings-save-button-tooltip\" [pTooltip]=\"getSaveButtonTooltip() | translate \" tooltipPosition=\"top\" showDelay=\"500\"></span>{{'MANAGEMENT.Save' | translate}}</button>\n        </div>\n\n      </div>\n    </div>\n\n    <!-- Body -->\n    <div class=\"page-body col-12\">\n      <!-- upper section -->\n      <div class=\"grid col-12 upper-settings-section\">\n        <!-- video resolution -->\n        <div [attr.aria-label]=\"'SETTINGS.camera_recording_quality' | translate:{ quality: '' }\" class=\"col-4 no-margins settings-desc\">\n          {{ 'SETTINGS.camera_recording_quality' | translate: {quality: ''} }}\n        </div>\n        <div [attr.aria-label]=\"'SETTINGS.camera_recording_selection' | translate\" role=\"radiogroup\" class=\"col-8 no-margins settings-values\">\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.camera_recording_quality' | translate: {quality: '480p'}\" class=\"grid-spaceBetween radio-button-res\" name=\"videoRes\" value=\"480\" [label]=\"'480p'\" [(ngModel)]=\"settingsObject.captureApp.limits.video.defaultHeight\"></p-radioButton>\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.camera_recording_quality' | translate: {quality: '720p'}\" class=\"grid-spaceBetween radio-button-res\" name=\"videoRes\" value=\"720\" [label]=\"'720p'\" [(ngModel)]=\"settingsObject.captureApp.limits.video.defaultHeight\"></p-radioButton>\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.camera_recording_quality' | translate: {quality: '1080p'}\" class=\"grid-spaceBetween radio-button-res\" name=\"videoRes\" value=\"1080\" [label]=\"'1080p'\" [(ngModel)]=\"settingsObject.captureApp.limits.video.defaultHeight\"></p-radioButton>\n        </div>\n\n        <!-- screen resolution -->\n        <div [attr.aria-label]=\"'SETTINGS.screen_recording_quality' | translate: {quality: ''}\" class=\"col-4 no-margins settings-desc\">\n          {{'SETTINGS.screen_recording_quality' | translate: {quality: ''} }}\n        </div>\n        <div [attr.aria-label]=\"'SETTINGS.screen_recording_selection' | translate\" role=\"radiogroup\" class=\"col-8 no-margins settings-values\">\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.screen_recording_quality' | translate: {quality: '480p'}\" class=\"grid-spaceBetween radio-button-res\" name=\"screenRes\" value=\"480\" [label]=\"'480p'\" [(ngModel)]=\"settingsObject.captureApp.limits.screen.defaultHeight\"></p-radioButton>\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.screen_recording_quality' | translate: {quality: '720p'}\" class=\"grid-spaceBetween radio-button-res\" name=\"screenRes\" value=\"720\" [label]=\"'720p'\" [(ngModel)]=\"settingsObject.captureApp.limits.screen.defaultHeight\"></p-radioButton>\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.screen_recording_quality' | translate: {quality: '1080p'}\" class=\"grid-spaceBetween radio-button-res\" name=\"screenRes\" value=\"1080\" [label]=\"'1080p'\" [(ngModel)]=\"settingsObject.captureApp.limits.screen.defaultHeight\"></p-radioButton>\n        </div>\n\n        <!-- system audio -->\n        <div *ngIf=\"shouldDisplaySettings(settingsObject.captureEngine.captureSystemAudio)\" [attr.aria-label]=\"'SETTINGS.enable_system_audio' | translate: {status: ''}\" class=\"col-4 no-margins settings-desc\">\n          {{'SETTINGS.enable_system_audio' | translate: {status: ''} }}\n        </div>\n        <div *ngIf=\"shouldDisplaySettings(settingsObject.captureEngine.captureSystemAudio)\" [attr.aria-label]=\"'SETTINGS.system_audio_selections' | translate\" role=\"radiogroup\" class=\"col-8 no-margins settings-values\">\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.enable_system_audio' | translate: {status: 'enabled'}\" class=\"grid-spaceBetween radio-button-res\" name=\"sysAudio\" [value]=\"true\" [label]=\"'COMMON.yes' | translate\" [(ngModel)]=\"settingsObject.captureEngine.captureSystemAudio\"></p-radioButton>\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.enable_system_audio' | translate: {status: 'disabled'}\" class=\"grid-spaceBetween radio-button-res\" name=\"sysAudio\" [value]=\"false\"  [label]=\"'COMMON.no' | translate\" [(ngModel)]=\"settingsObject.captureEngine.captureSystemAudio\"></p-radioButton>\n        </div>\n      </div>\n\n      <div class=\"sepLine\"></div>\n\n      <!-- default recording pre-fix -->\n      <div [attr.aria-label]=\"'SETTINGS.rec_prefix_name' | translate\" class=\"detail-field-title\">{{'SETTINGS.rec_prefix_name' | translate}}</div>\n      <input [disabled]=\"readOnly\" [attr.aria-label]=\"'SETTINGS.rec_prefix_name_desc' | translate\" type=\"text\" name=\"defaultRecName\" maxlength=\"200\"\n             [(ngModel)]=\"settingsObject.captureApp.defaultRecordingName\" class=\"details-input-field\">\n      <div class=\"details-input-field-underline\"></div>\n\n        <!-- mouse click indication -->\n      <div class=\"grid col-12 lower-settings-section\">\n        <div [attr.aria-label]=\"'SETTINGS.enable_click_indication' | translate\" class=\"col-4 no-margins settings-desc\">\n          {{ 'SETTINGS.enable_click_indication' | translate: {status: ''} }}\n        </div>\n        <div [attr.aria-label]=\"'SETTINGS.mouse_click_selections' | translate\" role=\"radiogroup\" class=\"col-8 no-margins settings-values\">\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.enable_click_indication' | translate: {status: 'enabled'}\" class=\"grid-spaceBetween radio-button-res\" name=\"mouseClick\" [value]=\"true\" [label]=\"'COMMON.yes' | translate\" [(ngModel)]=\"settingsObject.captureApp.recording.mouseClickIndication\"></p-radioButton>\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.enable_click_indication' | translate: {status: 'disabled'}\" class=\"grid-spaceBetween radio-button-res\" name=\"mouseClick\" [value]=\"false\"  [label]=\"'COMMON.no' | translate\" [(ngModel)]=\"settingsObject.captureApp.recording.mouseClickIndication\"></p-radioButton>\n        </div>\n      </div>\n\n        <!-- auto minimize indication -->\n      <div class=\"grid col-12 lower-settings-section\">\n        <div [attr.aria-label]=\"'SETTINGS.auto_minimize_settings' | translate\" class=\"col-4 no-margins settings-desc\">\n          {{ 'SETTINGS.auto_minimize_settings' | translate: {status: ''} }}\n        </div>\n        <div [attr.aria-label]=\"'SETTINGS.auto_minimize_settings' | translate\" role=\"radiogroup\" class=\"col-8 no-margins settings-values\">\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.enable_minimize_on_start' | translate: {status: 'enabled'}\" class=\"grid-spaceBetween radio-button-res\" name=\"minimizeOnRec\" [value]=\"true\" [label]=\"'COMMON.yes' | translate\" [(ngModel)]=\"settingsObject.captureApp.recording.minimizeWhenRecordingStarts\"></p-radioButton>\n          <p-radioButton [disabled]=\"readOnly\" role=\"radio\" [attr.aria-label]=\"'SETTINGS.disable_minimize_on_start' | translate: {status: 'disabled'}\" class=\"grid-spaceBetween radio-button-res\" name=\"minimizeOnRec\" [value]=\"false\"  [label]=\"'COMMON.no' | translate\" [(ngModel)]=\"settingsObject.captureApp.recording.minimizeWhenRecordingStarts\"></p-radioButton>\n        </div>\n      </div>\n\n      <div *ngIf=\"!userPrivacyEnabled\" class=\"sepLine\"></div>\n\n      <!-- Log collector -->\n      <log-collector *ngIf=\"!userPrivacyEnabled\" class=\"grid col-12\"></log-collector>\n\n    </div>\n  </div>\n\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/management/components/settings/settings.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".settings-cancel-button {\n  font-size: 14px;\n  height: 34px;\n  text-align: left;\n  padding: 0;\n  font-family: 'Lato'; }\n\n.settings-save-button {\n  position: relative;\n  height: 34px;\n  font-size: 14px;\n  margin-left: 30px;\n  font-family: 'Lato'; }\n\n.settings-save-button-tooltip {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0; }\n\n.settings-page-header {\n  position: absolute;\n  right: 18px;\n  top: 14px; }\n\n.settings-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/settings.svg")) + ") no-repeat top left; }\n\n.upper-settings-section {\n  height: 183px; }\n\n.lower-settings-section {\n  height: 60px; }\n\n.settings-desc {\n  opacity: 0.7;\n  font-family: lato;\n  font-size: 16px;\n  font-weight: 300;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.25;\n  letter-spacing: normal;\n  text-align: left;\n  color: #ffffff; }\n\n.radio-button-res {\n  width: 80px;\n  float: left;\n  margin-right: 5px;\n  margin-left: 2px;\n  font-family: lato;\n  font-size: 14px;\n  font-weight: 400;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  color: #cccccc; }\n\n.sepLine {\n  height: 1px;\n  width: 90%;\n  border-radius: 1px;\n  background-color: rgba(255, 255, 255, 0.2);\n  margin-bottom: 30px; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/management/components/settings/settings.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__settings_service__ = __webpack_require__("../../../../../src/personal/management/components/settings/settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice__ = __webpack_require__("../../../../primeng/components/common/confirmationservice.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SettingsComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





let SettingsComponent = class SettingsComponent {
    constructor(settingsService, accessibilityService, translate, confirmationService) {
        this.settingsService = settingsService;
        this.accessibilityService = accessibilityService;
        this.translate = translate;
        this.confirmationService = confirmationService;
        this.settingsObject = null;
        this.readOnly = true;
        this.userPrivacyEnabled = true;
        this.isDisabled = false;
        this.settingsService.getUserPrivacyStatus()
            .then((userPrivacyStatus) => {
            this.userPrivacyEnabled = (userPrivacyStatus === 1);
        });
    }
    ngOnInit() {
        this.settingsObject = this.settingsService.getLocalSettingsObj();
        this.settingsService.allowSettingsChanges()
            .then(allow => { this.readOnly = !allow; });
        this.accessibilityService.setAccessibilityAlert('MANAGEMENT.settings_desc');
    }
    onCancelClick() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isDisabled)
                return;
            this.isDisabled = true;
            try {
                yield this.settingsService.cancel();
            }
            catch (err) { }
            this.isDisabled = false;
        });
    }
    onSaveClick() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isDisabled)
                return;
            this.isDisabled = true;
            try {
                yield this.settingsService.saveSettings(this.settingsService.alignRecordingResolutionProperties(this.settingsObject));
            }
            catch (err) { }
            this.isDisabled = false;
        });
    }
    getSaveButtonTooltip() {
        return this.readOnly ? 'SETTINGS.no_permissions_to_save' : 'SETTINGS.save_settings';
    }
    shouldDisplaySettings(settingsProperty) {
        return typeof settingsProperty !== 'undefined';
    }
    isUploadingLogs() {
        return this.settingsService.isUploadingLogs();
    }
    askBeforeLeave() {
        return this.settingsService.askBeforeLeave();
    }
    ngOnDestroy() {
        this.settingsObject = null;
    }
};
SettingsComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'settings',
        template: __webpack_require__("../../../../../src/personal/management/components/settings/settings.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/management/styles/inner-page.scss"), __webpack_require__("../../../../../src/personal/management/components/settings/settings.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_1__settings_service__["a" /* SettingsService */]]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__settings_service__["a" /* SettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__settings_service__["a" /* SettingsService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3_ng2_translate__["b" /* TranslateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice__["ConfirmationService"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice__["ConfirmationService"]) === "function" && _d || Object])
], SettingsComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/settings.component.js.map

/***/ }),

/***/ "../../../../../src/personal/management/components/settings/settings.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_capture_device_audio_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shared_components_log_collector_log_collector_service__ = __webpack_require__("../../../../../src/shared/components/log-collector/log-collector.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SettingsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












let SettingsService = class SettingsService {
    constructor(log, appState, routeService, appConfig, appNotifications, logCollectorService, audioSettingsService, videoSettingsService) {
        this.log = log;
        this.appState = appState;
        this.routeService = routeService;
        this.appConfig = appConfig;
        this.appNotifications = appNotifications;
        this.logCollectorService = logCollectorService;
        this.audioSettingsService = audioSettingsService;
        this.videoSettingsService = videoSettingsService;
    }
    allowSettingsChanges() {
        return __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('canAccessLocalSettings');
    }
    getUserPrivacyStatus() {
        return __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getPartnerUserPrivacyStatus');
    }
    saveSettings(configObj) {
        return this.setLocalSettingsObj(configObj)
            .then(() => {
            let reloadSessionPromises = [];
            __WEBPACK_IMPORTED_MODULE_9_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_9_lodash__["concat"](this.appState.getSessionsNames(true), this.appState.getSessionsNames(false)), sessionName => {
                //only video device sessions
                if (sessionName !== 'audio')
                    reloadSessionPromises.push(this.videoSettingsService.reloadDeviceDefaultConfiguration(sessionName));
            });
            return Promise.all(reloadSessionPromises);
        })
            .then(() => {
            //need to do so only after video devices finished reloading
            // (audio will call stop / start preview and it needs to happen only after new device configuration will be set)
            return this.audioSettingsService.reloadAudioDeviceDefaultConfiguration();
        })
            .then(() => {
            this.log.info('Successfully updated local settings and refreshed devices configuration: ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(this.getLocalSettingsObj()));
            this.appNotifications.sendNotification('SETTINGS.settings_save_successful', 'info');
        })
            .catch((err) => {
            this.log.error( true ? __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err) : '');
            this.appNotifications.sendNotification('MANAGEMENT.Save_Failed', 'error');
        })
            .then(() => {
            return this.goToPreRecording();
        });
    }
    cancel() {
        return this.goToPreRecording();
    }
    getLocalSettingsObj() {
        return __WEBPACK_IMPORTED_MODULE_9_lodash__["cloneDeep"](this.appConfig.getConfigData('config'));
    }
    alignRecordingResolutionProperties(configObj) {
        return this.alignRecordingResolutionProperty(this.alignRecordingResolutionProperty(configObj, 'video'), 'screen');
    }
    isUploadingLogs() {
        return this.logCollectorService.isUploadingLogs();
    }
    askBeforeLeave() {
        return this.logCollectorService.askBeforeLeave();
    }
    /**
     * @param configObj
     * @param type video / screen
     */
    alignRecordingResolutionProperty(configObj, type) {
        configObj['captureApp']['limits'][type]['defaultHeight'] = parseInt(configObj['captureApp']['limits'][type]['defaultHeight']);
        if (parseInt(configObj['captureApp']['limits'][type]['maxHeight']) < parseInt(configObj['captureApp']['limits'][type]['defaultHeight']))
            configObj['captureApp']['limits'][type]['maxHeight'] = configObj['captureApp']['limits'][type]['defaultHeight'];
        return configObj;
    }
    setLocalSettingsObj(configObj) {
        return this.appConfig.setConfigData('config', configObj, true, true);
    }
    goToPreRecording() {
        return this.routeService.navigate('pre-recording');
    }
};
SettingsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_route_service__["a" /* RouteService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_10__shared_components_log_collector_log_collector_service__["a" /* LogCollectorService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__shared_components_log_collector_log_collector_service__["a" /* LogCollectorService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_capture_device_audio_device_settings_service__["a" /* AudioDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_capture_device_audio_device_settings_service__["a" /* AudioDeviceSettingsService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _h || Object])
], SettingsService);

var _a, _b, _c, _d, _e, _f, _g, _h;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/settings.service.js.map

/***/ }),

/***/ "../../../../../src/personal/management/route-guards/entry-form-guard.sevice.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EntryFormsGuard; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let EntryFormsGuard = class EntryFormsGuard {
    canDeactivate(entryComponent) {
        if (entryComponent) {
            return entryComponent.askBeforeLeave();
        }
        else {
            return Promise.resolve(true);
        }
    }
};
EntryFormsGuard = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])()
], EntryFormsGuard);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/entry-form-guard.sevice.js.map

/***/ }),

/***/ "../../../../../src/personal/management/route-guards/settings-component-guard.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SettingsComponentGuard; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let SettingsComponentGuard = class SettingsComponentGuard {
    canDeactivate(settingsComponent) {
        if (settingsComponent) {
            return settingsComponent.askBeforeLeave();
        }
        else {
            return Promise.resolve(true);
        }
    }
};
SettingsComponentGuard = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])()
], SettingsComponentGuard);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/settings-component-guard.js.map

/***/ }),

/***/ "../../../../../src/personal/management/services/entry.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_primeng_components_common_confirmationservice__ = __webpack_require__("../../../../primeng/components/common/confirmationservice.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_primeng_components_common_confirmationservice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_primeng_components_common_confirmationservice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_pipes_truncate_pipe__ = __webpack_require__("../../../../../src/shared/pipes/truncate.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_kaltura_api_service__ = __webpack_require__("../../../../../src/shared/services/infra/kaltura-api.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EntryService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











let EntryService = class EntryService {
    constructor(log, truncate, kaltura, translate, appConfig, confirmationService, appNotifications) {
        this.log = log;
        this.truncate = truncate;
        this.kaltura = kaltura;
        this.translate = translate;
        this.appConfig = appConfig;
        this.confirmationService = confirmationService;
        this.appNotifications = appNotifications;
        this.suggestedTags = [];
    }
    deleteRecordingEntry(conformationKey, recordingEntry, callback = null) {
        let deleteMessage = recordingEntry.uploadStatus === 'manual' ? 'MANAGEMENT.Delete_Not_Uploaded_Recording_Message' : 'MANAGEMENT.Delete_Uploaded_Recording_Message';
        this.translate.get(deleteMessage, { RecordingName: this.truncate.transform(__WEBPACK_IMPORTED_MODULE_8_lodash__["escape"](recordingEntry.summary), 38) })
            .subscribe((deleteMessage) => {
            this.confirmationService.confirm({
                message: deleteMessage,
                key: conformationKey,
                accept: () => {
                    __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('delete-recording', recordingEntry.jsonFilePath)
                        .then(() => {
                        if (callback) {
                            callback();
                        }
                    })
                        .catch((err) => {
                        this.log.error('Failed to Delete files of the recording, json: ' + recordingEntry.jsonFilePath + ' ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
                    });
                },
                reject: () => {
                    // do nothing.
                }
            });
        });
    }
    deleteAllUploadedEntries(recordingList, callback = null) {
        if (this.checkForUploadedStatus(recordingList)) {
            this.displayDeleteAllUploadedDialog(recordingList, callback);
        }
        else {
            this.displayNoUploadedEntriesDialog();
        }
    }
    displayDeleteAllUploadedDialog(recordingList, callback) {
        this.translate.get('MANAGEMENT.Delete_All_Uploaded_Recording_Message')
            .subscribe((deleteMessage) => {
            this.confirmationService.confirm({
                message: deleteMessage,
                key: "delete-all-uploaded-recordings-key",
                accept: () => {
                    return this.deleteUploadedRecordingsFromList(recordingList, callback);
                },
                reject: () => {
                    // do nothing.
                }
            });
        });
    }
    displayNoUploadedEntriesDialog() {
        this.translate.get('MANAGEMENT.Delete_All_Uploaded_Recording_Message_No_Uploaded')
            .subscribe((deleteMessage) => {
            this.confirmationService.confirm({
                message: deleteMessage,
                key: "delete-all-uploaded-recordings-no-uploaded-key",
                accept: () => {
                    // do nothing
                },
                reject: () => {
                    // do nothing.
                }
            });
        });
    }
    deleteUploadedRecordingsFromList(recordingList, callback) {
        let clonedRecList = __WEBPACK_IMPORTED_MODULE_8_lodash__["cloneDeep"](recordingList);
        let deletePromises = [];
        __WEBPACK_IMPORTED_MODULE_8_lodash__["forEach"](clonedRecList, recording => {
            if (recording.uploadStatus === 'uploaded') {
                deletePromises.push(__WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('delete-recording', recording.jsonFilePath));
            }
        });
        return Promise.all(deletePromises)
            .then(() => {
            this.log.info('Removed all uploaded media files from local storage');
            if (callback) {
                callback();
            }
        })
            .catch((err) => {
            this.log.error('Failed to Delete media files from local storage ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    checkForUploadedStatus(recordingList) {
        let exists = false;
        __WEBPACK_IMPORTED_MODULE_8_lodash__["forEach"](recordingList, recording => {
            if (recording.uploadStatus === 'uploaded') {
                exists = true;
                return false; //beaks lodash forEach loop
            }
        });
        return exists;
    }
    /**
     * @see https://kaltura.atlassian.net/wiki/spaces/PROD/pages/656736926/Entry+URL+Setting
     * @param entryId
     * @returns {string|string}
     */
    getEntryLinkUrl(entryId) {
        let externalSettings = this.appConfig.getConfigData('config.shared.externalSettings');
        //for backward compatibility
        if (externalSettings.hasOwnProperty('entryURL_v2')) {
            return __WEBPACK_IMPORTED_MODULE_8_lodash__["isEmpty"](externalSettings.entryURL_v2) ?
                __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].urlBuilder(externalSettings.appHost, '/media/', entryId) : externalSettings.entryURL_v2;
        }
        else {
            return __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].urlBuilder(externalSettings.appHost, externalSettings.entryURL, entryId);
        }
    }
    openEntryAtWebsite(entryId) {
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('open-external-link', this.getEntryLinkUrl(entryId));
    }
    saveEntryDetails(newEntryDetails) {
        let jsonFilePath = newEntryDetails['jsonFilePath'];
        //clean app content from object
        delete newEntryDetails['jsonFilePath'];
        delete newEntryDetails['updateTimestamp'];
        return this.updateUserTagsInPersistency(newEntryDetails.tags)
            .catch(() => {
            this.log.error('failed to update user tags in persistent data');
        })
            .then(() => {
            return __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('updateRecJson', jsonFilePath, newEntryDetails, false);
        })
            .then(path => {
            // if succeeded update the value of the entry
            __WEBPACK_IMPORTED_MODULE_8_lodash__["assign"](this.entry, newEntryDetails);
            this.appNotifications.sendNotification('MANAGEMENT.Saved', 'info');
        })
            .catch((err) => {
            this.appNotifications.sendNotification('MANAGEMENT.Save_Failed', 'error');
            return Promise.reject(err);
        });
    }
    updateUploadStatus(jsonFilePath, newState) {
        return __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('uploadStatus', { target: jsonFilePath, state: newState });
    }
    uploadEntry(conformationKey, jsonFilePath) {
        return this.getDisclaimer().then(disclaimer => {
            if (!disclaimer || Object.keys(disclaimer).length === 0)
                return this.updateUploadStatus(jsonFilePath, 'auto');
            return new Promise((resolve, reject) => {
                this.confirmationService.confirm({
                    message: disclaimer.text,
                    key: conformationKey,
                    accept: () => {
                        return __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('updateRecJson', jsonFilePath, { AppHostPostUploadApi: [disclaimer.entryAddedNotificationTemplateUrl] }, true)
                            .then(() => { return this.updateUploadStatus(jsonFilePath, 'auto'); })
                            .then(() => { resolve(); });
                    },
                    reject: () => {
                        return reject("Disclaimer not approved");
                    }
                });
            });
        });
    }
    getDisclaimer() {
        return __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getUserDisclaimer');
    }
    registerToChanges() {
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('file-upload-notification', (event) => {
            let json = event.file;
            if (json.primaryMediaFile === this.entry.primaryMediaFile) {
                switch (event.eventName) {
                    case 'changed':
                        this.entry = json;
                        break;
                }
            }
        });
    }
    unregisterToChanges() {
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('file-upload-notification');
    }
    filterTagsList(queryString) {
        // abort previous request
        if (this.tagsListSubscription$) {
            this.tagsListSubscription$.unsubscribe();
            this.tagsListSubscription$ = null;
            this.suggestedTags = null;
        }
        this.log.info('filtering tags: ' + queryString);
        this.tagsListSubscription$ = this.kaltura.getSuggestedTags(queryString).subscribe(res => {
            this.tagsListSubscription$ = null;
            this.suggestedTags = res;
        }, err => {
            this.tagsListSubscription$ = null;
            this.suggestedTags = [];
        });
    }
    updateUserTagsInPersistency(tagsString) {
        return this.kaltura.setSuggestedTags(tagsString.split(','));
    }
};
EntryService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_7__shared_pipes_truncate_pipe__["a" /* TruncatePipe */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_pipes_truncate_pipe__["a" /* TruncatePipe */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_kaltura_api_service__["a" /* KalturaApiService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_kaltura_api_service__["a" /* KalturaApiService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6_ng2_translate__["b" /* TranslateService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_5_primeng_components_common_confirmationservice__["ConfirmationService"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5_primeng_components_common_confirmationservice__["ConfirmationService"]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _g || Object])
], EntryService);

var _a, _b, _c, _d, _e, _f, _g;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/entry.service.js.map

/***/ }),

/***/ "../../../../../src/personal/management/styles/inner-page.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/* General structure */\n.page-container {\n  font-family: Lato;\n  color: white;\n  width: 100%;\n  height: 100%;\n  padding: 2.5%;\n  margin: 0; }\n\n.page-inner-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(153, 153, 153, 0.1);\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05);\n  overflow-y: hidden;\n  padding: 0; }\n\n.page-icon-container {\n  position: relative;\n  height: 66px;\n  width: 66px;\n  background-color: #00abcc;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n  margin: 0 16px 0 0;\n  float: left; }\n\n.page-icon {\n  position: absolute;\n  top: calc(50% - 10px);\n  left: calc(50% - 10px);\n  display: inline-block;\n  height: 20px;\n  width: 20px; }\n\n.page-title {\n  line-height: 66px;\n  opacity: 0.5;\n  font-family: Lato;\n  font-size: 14px;\n  font-weight: 400;\n  font-style: normal;\n  font-stretch: normal;\n  color: #ffffff; }\n\n.page-body {\n  height: calc(100% - 66px);\n  padding: 34px 18px 25px 66px;\n  width: 909px;\n  font-family: Lato; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/pipe/change-extension.pipe.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ChangeExtensionPipe; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


let ChangeExtensionPipe = class ChangeExtensionPipe {
    transform(fileName, extension) {
        let index = fileName ? fileName.lastIndexOf('.') : -1;
        return (index != -1) ? __WEBPACK_IMPORTED_MODULE_1__utils_utils__["a" /* utils */].urlBuilder('file:///', fileName.substr(0, index) + extension) : 'No_Thumbnail';
    }
};
ChangeExtensionPipe = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'changeExtension'
    })
], ChangeExtensionPipe);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/change-extension.pipe.js.map

/***/ }),

/***/ "../../../../../src/personal/pipe/safe.pipe.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__("../../../platform-browser/@angular/platform-browser.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SafePipe; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let SafePipe = class SafePipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(url) {
        return this.sanitizer.bypassSecurityTrustResourceUrl(url);
    }
};
SafePipe = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({ name: 'safe' }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["DomSanitizer"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["DomSanitizer"]) === "function" && _a || Object])
], SafePipe);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/safe.pipe.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/audio-gauge/audio-gauge.component.html":
/***/ (function(module, exports) {

module.exports = "<div>\n  <div class=\"audio-device-volume-bar\">\n    <div class=\"audio-bar-level-last\" [ngClass]=\"{'audio-bar-level-colored' : getAudioGauge() > 93.5 }\"></div>\n    <div class=\"audio-bar-level\"      [ngClass]=\"{'audio-bar-level-colored' : getAudioGauge() > 76.5 }\"></div>\n    <div class=\"audio-bar-level\"      [ngClass]=\"{'audio-bar-level-colored' : getAudioGauge() > 56 }\"></div>\n    <div class=\"audio-bar-level\"      [ngClass]=\"{'audio-bar-level-colored' : getAudioGauge() > 36 }\"></div>\n    <div class=\"audio-bar-level\"      [ngClass]=\"{'audio-bar-level-colored' : getAudioGauge() > 16 }\"></div>\n    <div class=\"audio-bar-level\"      [ngClass]=\"{'audio-bar-level-colored' : getAudioGauge() > 0 }\"></div>\n  </div>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/audio-gauge/audio-gauge.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".audio-device-volume-bar {\n  height: 10px;\n  width: 44px; }\n\n.audio-bar-level {\n  width: 4px;\n  height: 10px;\n  border-radius: 100px;\n  background-color: #999999;\n  float: right;\n  margin-right: 4px; }\n\n.audio-bar-level-last {\n  width: 4px;\n  height: 10px;\n  border-radius: 100px;\n  background-color: #999999;\n  float: right; }\n\n.audio-bar-level-colored {\n  background-color: #00abcc;\n  opacity: 0.7; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/audio-gauge/audio-gauge.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AudioGaugeComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let AudioGaugeComponent = class AudioGaugeComponent {
    constructor(zone, devicePreviewService) {
        this.zone = zone;
        this.devicePreviewService = devicePreviewService;
        this.audioLevel0 = 0;
        this.audioLevel1 = 0;
        this.devicePreviewService.audioLeverSubject$.subscribe(audioLevel => {
            this.zone.run(() => this.audioLevel0 = audioLevel['Channel0']);
            this.zone.run(() => this.audioLevel1 = audioLevel['Channel1']);
        });
    }
    getAudioGauge() {
        return (this.audioLevel0 + this.audioLevel1) > 0 ? (this.audioLevel0 + this.audioLevel1) / 2 : 0;
    }
};
AudioGaugeComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'audio-gauge',
        template: __webpack_require__("../../../../../src/personal/pre-recording/components/audio-gauge/audio-gauge.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/pre-recording/components/audio-gauge/audio-gauge.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */]) === "function" && _b || Object])
], AudioGaugeComponent);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/audio-gauge.component.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/audio-level/audio-level.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"audio-level-container\" [ngClass]=\"{'hover-scaling-effect': hoverEffect, 'tiny-size': isSmall}\">\n  <!-- icon -->\n  <div class=\"audio-level-icon-prop\" [ngClass]=\"audioClass\"></div>\n\n  <!-- volume bar -->\n  <div *ngIf=\"!disabled\" class=\"audio-volume-bar-container\">\n    <div class=\"audio-device-volume-bar\">\n      <div class=\"cane\" >\n        <div class=\"inner\" [style.height.%]=\"getAudioLevel()\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/audio-level/audio-level.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".audio-level-container {\n  position: relative; }\n\n.hover-scaling-effect:hover * {\n  opacity: 1;\n  transition: 0.5s;\n  transform: scale(1.05); }\n  .hover-scaling-effect:hover * .audio-device-volume-bar {\n    transform: rotateZ(180deg) scale(1.05); }\n\n.audio-level-icon-prop {\n  font-size: 40px;\n  background: transparent; }\n\n.audio-volume-bar-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 0.7;\n  width: 40px;\n  height: 40px; }\n\n.audio-device-volume-bar {\n  transform: rotateZ(180deg);\n  position: absolute;\n  top: 6px;\n  left: 18px; }\n\n.cane {\n  width: 4px;\n  height: 16px;\n  background-color: transparent; }\n  .cane .inner {\n    background-color: #00abcc;\n    border-radius: 100px; }\n\n/* Tiny Audio Level*/\n.tiny-size {\n  /* remove the hover effect in a tiny component state */ }\n  .tiny-size .audio-level-icon-prop {\n    font-size: 25px; }\n  .tiny-size .cane {\n    width: 3px;\n    height: 11px; }\n  .tiny-size .audio-device-volume-bar {\n    top: 3px;\n    left: 11px; }\n  .tiny-size .disabled-icon-color:hover {\n    opacity: 0.7;\n    color: #cccccc; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/audio-level/audio-level.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AudioLevelComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let AudioLevelComponent = AudioLevelComponent_1 = class AudioLevelComponent {
    constructor(zone, devicePreviewService) {
        this.zone = zone;
        this.devicePreviewService = devicePreviewService;
        this.hoverEffect = false;
        this.isSmall = false;
        this.audioLevel0 = 0;
        this.audioLevel1 = 0;
        this.devicePreviewService.audioLeverSubject$.subscribe(audioLevel => {
            this.zone.run(() => {
                this.audioLevel0 = audioLevel['Channel0'];
                this.audioLevel1 = audioLevel['Channel1'];
            });
        });
    }
    getAudioLevel() {
        let value = Math.floor((this.audioLevel0 + this.audioLevel1) > 0 ? (this.audioLevel0 + this.audioLevel1) / 2 : 0);
        return (value + AudioLevelComponent_1.OFFSET_ADDITION) <= 100 ? (value + AudioLevelComponent_1.OFFSET_ADDITION) : 100;
    }
};
// in case of background noises/ low voice, we are still want to see some level of change in the bar (cane)
AudioLevelComponent.OFFSET_ADDITION = 10;
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], AudioLevelComponent.prototype, "audioClass", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Boolean)
], AudioLevelComponent.prototype, "disabled", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Boolean)
], AudioLevelComponent.prototype, "hoverEffect", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Boolean)
], AudioLevelComponent.prototype, "isSmall", void 0);
AudioLevelComponent = AudioLevelComponent_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'audio-level',
        template: __webpack_require__("../../../../../src/personal/pre-recording/components/audio-level/audio-level.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/pre-recording/components/audio-level/audio-level.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */]) === "function" && _b || Object])
], AudioLevelComponent);

var AudioLevelComponent_1, _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/audio-level.component.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/capture/capture.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"capture-device-inner\" [ngClass]=\"sessionName\">\n  <div class=\"center-flex\">\n    <div class=\"capture-row\" tooltipPosition=\"top\" showDelay=\"500\" [pTooltip]=\"(getDeviceTextKey()) | translate\" tooltip-addon>\n      <button *ngIf=\"defaultCaptureType != 'audio'\" class=\"pc-button device-icon-size scaling-light\" [ngClass]=\"getDeviceIconClass()\"\n              (click)=\"onDeviceActivateClick()\" [disabled]=\"disableButtons()\" [attr.aria-disabled]=\"disableButtons()\"\n              [attr.aria-label]=\"'COMMON.capture_device_status' | translate:{status: getDeviceStatusString(), capture_device: getPresentationName()}\">\n      </button>\n      <button *ngIf=\"defaultCaptureType === 'audio'\" class=\"pc-button\" (click)=\"onDeviceActivateClick()\" [disabled]=\"disableButtons()\"\n              [attr.aria-disabled]=\"disableButtons()\"\n              [attr.aria-label]=\"'COMMON.capture_device_status' | translate:{status: getDeviceStatusString(), capture_device: getPresentationName()}\">\n        <audio-level [audioClass]=\"getDeviceIconClass()\" [disabled]=\"!isSessionActive()\" [hoverEffect]=\"true\"></audio-level>\n      </button>\n    </div>\n    <div class=\"capture-row\">\n      <button class=\"togglePreview pc-button\"  [attr.aria-disabled]=\"disableButtons()\"\n              (click)=\"onTogglePreviewClick()\" [disabled]=\"disableButtons()\" [attr.aria-disabled]=\"disableButtons()\"\n              tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon [tooltipDisabled]=\"isPreviewOpen()\"\n              [pTooltip]=\"( isAudio() ? 'CAPTURE_DEVICE.select_source' : 'CAPTURE_DEVICE.open_preview') | translate\"\n              [attr.aria-label]=getDeviceToggleButtonAriaText()>\n        <span class=\"deviceType btn-hover-effect\" [ngClass]=\"{'selected' : isPreviewOpen()}\">{{ getPresentationName() | translate }}</span>\n        <span class=\"arrow-icon btn-hover-effect\" [ngClass]=\"getArrowIconClass()\"></span>\n      </button>\n    </div>\n  </div>\n</div>\n\n<device-preview aria-hidden *ngIf=\"isPreviewOpen()\" [deviceState]=\"isSessionActive()\" [sessionName]=\"sessionName\" class=\"device-preview-location\"\n                [defaultCaptureType]=\"defaultCaptureType\" (deviceChanged)=\"onDeviceChanged($event)\">\n</device-preview>\n"

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/capture/capture.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".capture-device-inner {\n  width: 100px;\n  height: 100px;\n  box-sizing: border-box;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-pack: center;\n      justify-content: center;\n  display: -ms-flexbox;\n  display: flex;\n  background-color: transparent; }\n\n.center-flex {\n  box-sizing: border-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-flow: row wrap;\n      flex-flow: row wrap;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-pack: center;\n      justify-content: center;\n  padding-top: 9px; }\n\n.capture-row {\n  -ms-flex-preferred-size: 100%;\n      flex-basis: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-pack: center;\n      justify-content: center;\n  display: -ms-flexbox;\n  display: flex; }\n\n.device-icon-size {\n  font-size: 40px; }\n\n.deviceType {\n  font-family: Lato;\n  font-size: 14px;\n  color: #ffffff;\n  opacity: 0.7;\n  font-weight: 300;\n  margin-left: 20px;\n  margin-top: 8px;\n  height: 31px;\n  word-break: keep-all; }\n  .deviceType.selected {\n    opacity: 1; }\n  .deviceType:hover {\n    opacity: 1; }\n\n.togglePreview {\n  display: -ms-flexbox;\n  display: flex;\n  height: 31px; }\n  .togglePreview:hover .btn-hover-effect {\n    opacity: 1; }\n\n.device-preview-location {\n  position: absolute; }\n\n/* Arrow */\n.arrow-icon {\n  width: 30px;\n  height: 30px;\n  opacity: 0.7;\n  color: #cccccc;\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-size: 20px; }\n\n.arrow-icon:hover {\n  opacity: 1; }\n\n.arrow-icon[disabled]:hover {\n  opacity: 0.7;\n  cursor: default; }\n\n.arrow-icon-up {\n  background-image: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/arrow-up.svg")) + ");\n  background-position: bottom;\n  margin-top: 1px; }\n\n.arrow-icon-down {\n  background-image: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/arrow-down.svg")) + ");\n  margin-top: 2px; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/capture/capture.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__capture_service__ = __webpack_require__("../../../../../src/personal/pre-recording/components/capture/capture.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CaptureComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let CaptureComponent = class CaptureComponent {
    constructor(captureService, appConfig, translate, appState, accessService) {
        this.captureService = captureService;
        this.appConfig = appConfig;
        this.translate = translate;
        this.appState = appState;
        this.accessService = accessService;
        //aria strings
        this.devicePreviewToggleButton = '';
    }
    ngOnInit() {
        this.captureService.initService(this.sessionName, this.defaultCaptureType);
        //need to wait for sessions to be ready in order to get their real state
        this.captureService.waitForSession()
            .then(() => {
            this.captureService.panelsListener();
            if (this.openPreviewOnInit) {
                //assuming preview is closed on app component init
                this.onTogglePreviewClick(false);
            }
            else {
                this.loadDeviceToggleButtonAriaText(); //for initial aria string value
            }
            setTimeout(() => {
                this.setAccessibilityAlert(); //send accessibility alert notifying the device current state
            }, 2000);
        });
        this.captureService.previewStateChange$.subscribe(() => {
            this.loadDeviceToggleButtonAriaText();
        });
    }
    getDeviceType() {
        const deviceType = this.captureService.getSelectedDeviceType();
        return deviceType ? deviceType : this.defaultCaptureType;
    }
    getPresentationName() {
        return this.getDeviceType() === 'video' ? 'COMMON.camera' : 'COMMON.' + this.getDeviceType();
    }
    getDeviceIconClass() {
        return this.captureService.getDeviceIconClass();
    }
    getArrowIconClass() {
        return this.captureService.isPreviewOpen() ? 'arrow-icon-up' : 'arrow-icon-down';
    }
    disableButtons() {
        return this.captureService.shouldDisableSessionButtons();
    }
    onDeviceActivateClick() {
        this.captureService.toggleDeviceActivation()
            .then(() => {
            this.setAccessibilityAlert();
        }); //send accessibility alert notifying the device current state
    }
    onTogglePreviewClick(shouldAlert = true) {
        this.captureService.togglePreviewPanel()
            .then(() => {
            this.loadDeviceToggleButtonAriaText(shouldAlert);
        });
    }
    isPreviewOpen() {
        return this.captureService.isPreviewOpen();
    }
    isSessionActive() {
        return this.captureService.isSessionActive();
    }
    setAccessibilityAlert() {
        this.accessService.setAccessibilityAlert('CAPTURE_DEVICE.' + this.getDeviceStatusString() + '_device_info', 'short', { 'device_type': this.getDeviceType() });
    }
    getDeviceStatusString() {
        return this.isSessionActive() ? 'enabled' : 'disabled';
    }
    isAudio() {
        return this.captureService.isAudio();
    }
    isAnyActiveRecordableSessionExits() {
        return !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.appState.getActiveRecordableSessionsIds()) || this.appConfig.getConfigData('config.captureApp.audioOnlyRecording');
    }
    //preview child component fires an event on each device change so we will be able to auto activate the device if needed
    onDeviceChanged(deviceId) {
        if (!this.isSessionActive() || !deviceId) {
            this.onDeviceActivateClick();
        }
    }
    getDeviceTextKey() {
        if (this.isSessionActive()) {
            if (this.isAudio()) {
                return 'CAPTURE_DEVICE.turn_off_audio';
            }
            else {
                return 'CAPTURE_DEVICE.turn_off_screen_or_webcam';
            }
        }
        return this.isAudio() ? (this.isAnyActiveRecordableSessionExits() ? 'CAPTURE_DEVICE.no_available_audio' : 'CAPTURE_DEVICE.audio_disable_information') : 'CAPTURE_DEVICE.no_available_video';
    }
    //aria string methods
    loadDeviceToggleButtonAriaText(shouldAlert = false) {
        let tempString = '';
        let tmpDeviceType = '';
        this.translate.get(this.getPresentationName())
            .subscribe((deviceType) => {
            tmpDeviceType = deviceType;
            this.translate.get('CAPTURE_DEVICE.device_preview_toggle_button', { 'device_type': deviceType })
                .subscribe((toggleButtonText) => {
                tempString += toggleButtonText;
                let devicePreviewString = this.isPreviewOpen() ? 'CAPTURE_DEVICE.device_preview_open' : 'CAPTURE_DEVICE.device_preview_closed';
                this.translate.get(devicePreviewString, { 'device_type': tmpDeviceType })
                    .subscribe((previewState) => {
                    this.devicePreviewToggleButton = tempString + ' ' + previewState;
                    if (shouldAlert)
                        this.accessService.setAccessibilityAlert(this.devicePreviewToggleButton);
                });
            });
        });
    }
    getDeviceToggleButtonAriaText() {
        return this.devicePreviewToggleButton;
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], CaptureComponent.prototype, "defaultCaptureType", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], CaptureComponent.prototype, "sessionName", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Boolean)
], CaptureComponent.prototype, "openPreviewOnInit", void 0);
CaptureComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'capture-device',
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
        template: __webpack_require__("../../../../../src/personal/pre-recording/components/capture/capture.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/pre-recording/components/capture/capture.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_1__capture_service__["a" /* CaptureService */]]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__capture_service__["a" /* CaptureService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__capture_service__["a" /* CaptureService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2_ng2_translate__["b" /* TranslateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _e || Object])
], CaptureComponent);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/capture.component.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/capture/capture.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_audio_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_panels_service__ = __webpack_require__("../../../../../src/shared/services/infra/panels.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__app_consts__ = __webpack_require__("../../../../../src/personal/app.consts.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_rxjs__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CaptureService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











let CaptureService = class CaptureService {
    constructor(log, appState, appConfig, videoService, audioService, panelsService) {
        this.log = log;
        this.appState = appState;
        this.appConfig = appConfig;
        this.videoService = videoService;
        this.audioService = audioService;
        this.panelsService = panelsService;
        this.previewStateChange = new __WEBPACK_IMPORTED_MODULE_10_rxjs__["Subject"]();
        this.previewStateChange$ = this.previewStateChange.asObservable();
        this._isPreviewOpen = false;
        this.appState.sessionStatusChange$.subscribe(() => {
            setTimeout(() => {
                this.deviceIconClass = this.updateDeviceIconClass();
            });
        });
    }
    initService(sessionName, defaultCaptureType) {
        this.sessionName = sessionName;
        this.defaultCaptureType = defaultCaptureType;
        this.deviceIconClass = this.updateDeviceIconClass();
    }
    getDeviceIconClass() {
        return this.deviceIconClass;
    }
    updateWindowSize() {
        let newHeight = this.defaultCaptureType === 'audio' ? __WEBPACK_IMPORTED_MODULE_8__app_consts__["a" /* AppConsts */].AUDIO_PREVIEW_HEIGHT : __WEBPACK_IMPORTED_MODULE_8__app_consts__["a" /* AppConsts */].VIDEO_PREVIEW_HEIGHT;
        let size = this._isPreviewOpen ? null : { height: newHeight + __WEBPACK_IMPORTED_MODULE_8__app_consts__["a" /* AppConsts */].DEFAULT_WIN_HEIGHT };
        return __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowSize", size);
    }
    isSessionActive() {
        return this.isAudio() ?
            this.audioService.isAudioEnabled(this.appConfig.getConfigData('config.captureApp.audioOnlyRecording')) : this.videoService.isDevicePreviewing(this.sessionName);
    }
    toggleDeviceActivation() {
        if (this.isSessionActive()) {
            return this.deactivateDevice()
                .then(() => {
                return this.handlePostDeviceActivationToggle(false);
            });
        }
        else {
            return this.activateDevice()
                .then(() => {
                return this.handlePostDeviceActivationToggle(true);
            });
        }
    }
    shouldDisableSessionButtons() {
        return !this.appState.isAppStable() ||
            (this.isAudio() ? this.audioService.shouldDisableAudioButton(true) :
                this.videoService.shouldDisableDeviceConfiguration(this.sessionName, true));
    }
    getSelectedDeviceType() {
        return this.videoService.getCaptureDeviceTypeBySessionName(this.sessionName);
    }
    isPreviewOpen() {
        return this._isPreviewOpen;
    }
    togglePreviewPanel() {
        if (this._isPreviewOpen) {
            return this.closePreviewPanel();
        }
        else {
            return this.openPreviewPanel();
        }
    }
    openPreviewPanel() {
        return this.updateWindowSize()
            .then(() => {
            this.updatePreviewState();
        })
            .catch((err) => {
            this.log.error('Failed to toggle device preview - open. ' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    closePreviewPanel() {
        this.updatePreviewState();
        return this.updateWindowSize()
            .catch((err) => {
            this.log.error('Failed to toggle device preview - close. ' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    updatePreviewState() {
        this._isPreviewOpen = !this._isPreviewOpen;
        this.panelsService.updateCurrentPanel({ type: this.sessionName, active: this._isPreviewOpen }, true);
        this.previewStateChange.next();
    }
    panelsListener() {
        this.panelsService.currentPanel$.subscribe(panel => {
            //if other panel was opened, close this one
            if (panel['type'] !== this.sessionName && panel['active']) {
                this._isPreviewOpen = false;
                this.previewStateChange.next();
            }
        });
    }
    updateDeviceIconClass() {
        let deviceType = this.sessionName === 'audio' ? 'audio' :
            (this.getSelectedDeviceType() ? this.getSelectedDeviceType() : this.defaultCaptureType);
        return 'icon-' +
            (deviceType ? deviceType : this.defaultCaptureType) +
            (this.isSessionActive() ? ' active-icon-color' : '-disable disabled-icon-color');
    }
    waitForSession() {
        return this.appState.areSessionsReadyForRecording('CaptureService');
    }
    activateDevice() {
        return this.isAudio() ?
            this.audioService.enableAudioDevice() : this.videoService.startDevicePreviewAndActivateSession(this.sessionName, { left: 0, top: 0, width: 0, height: 0 }); //we don't want to preview the video
    }
    deactivateDevice() {
        return this.isAudio() ?
            this.audioService.disableAudioDevice() :
            this.videoService.resetToFullScreenCapture(this.sessionName, false)
                .then(() => {
                return this.videoService.stopDevicePreviewAndDeactivateSession(this.sessionName);
            });
    }
    isAudio() {
        return this.sessionName === 'audio';
    }
    handlePostDeviceActivationToggle(active) {
        //close device preview panel once it was deactivated or
        //open device preview panel once it was activated (unless it is audio)
        if (active && !this._isPreviewOpen && !this.isAudio() || !active && this._isPreviewOpen) {
            return this.togglePreviewPanel();
        }
        return Promise.resolve();
    }
};
CaptureService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_audio_device_service__["a" /* AudioDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_audio_device_service__["a" /* AudioDeviceService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_panels_service__["a" /* PanelsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_panels_service__["a" /* PanelsService */]) === "function" && _f || Object])
], CaptureService);

var _a, _b, _c, _d, _e, _f;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/capture.service.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/preview/preview.component.html":
/***/ (function(module, exports) {

module.exports = "<div [ngClass]=\"{'audio-device-preview-wrapper' : isAudio(), 'video-device-preview-wrapper' : !isAudio()}\">\n  <div class=\"location-arrow\"></div>\n  <div class=\"default-background-color preview-inner-container\">\n    <div *ngIf=\"!isAudio()\" class=\"device-preview\">\n      <div class=\"disabled-preview-icon-container\" [ngClass]=\"getDeviceIconClass()\"></div>\n    </div>\n    <p-dropdown inputId=\"captureDevicesDropDown\" dropdown-addon [styleClass]=\"settings-field-dropdown\" [options]=\"devices\" [(ngModel)]=\"selectedDevice\"\n                (onCustomChange)=\"onDeviceChange()\" [disabled]=\"isProcessing()\" [attr.aria-label]=\"'CAPTURE_DEVICE.devices_selection' | translate\"></p-dropdown>\n    <div role=\"radiogroup\" *ngIf=\"isItScreenDeviceType()\" class=\"radio-button-container grid-spaceBetween\" [attr.aria-label]=\"'CAPTURE_DEVICE.select_area_desc' | translate: {area: getSelectedCaptureZoneType() | translate}\">\n      <p-radioButton role=\"radio\" class=\"radio-button\" name=\"captureZone\" value=\"FULL_SCREEN\" [attr.aria-label]=\"'CAPTURE_DEVICE.full_screen' | translate\" [label]=\"'CAPTURE_DEVICE.full_screen' | translate\"\n                     [(ngModel)]=\"devicePreviewService.captureZoneType\" (ngModelChange)=\"onCaptureZoneRadioButtonChange()\" [disabled]=\"isProcessing() || !isDeviceEnabled()\">\n      </p-radioButton>\n      <p-radioButton role=\"radio\" class=\"radio-button\" name=\"captureZone\" value=\"SELECT_AREA\" [attr.aria-label]=\"'CAPTURE_DEVICE.select_area' | translate\" [label]=\"'CAPTURE_DEVICE.select_area' | translate\"\n                     [(ngModel)]=\"devicePreviewService.captureZoneType\" (ngModelChange)=\"onCaptureZoneRadioButtonChange()\" [disabled]=\"isProcessing() || !isDeviceEnabled()\">\n      </p-radioButton>\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/preview/preview.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".video-device-preview-wrapper {\n  width: 251px;\n  background: transparent; }\n\n.audio-device-preview-wrapper {\n  height: 82px;\n  width: 251px;\n  background: transparent; }\n\n.location-arrow {\n  margin-left: 40px;\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-bottom: 10px solid #24212a; }\n\n.device-preview {\n  height: 124px;\n  width: 224px;\n  margin-bottom: 11px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.12);\n  border: solid 1px rgba(255, 255, 255, 0.5);\n  box-sizing: border-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: center;\n      justify-content: center;\n  -ms-flex-align: center;\n      align-items: center; }\n\n.disabled-preview-icon-container {\n  width: 40px;\n  height: 40px;\n  font-size: 40px; }\n\n.preview-inner-container {\n  padding: 15px 14px 10px 14px;\n  border-radius: 3px; }\n\n.radio-button-container {\n  padding: 10px 0 3px 0;\n  margin: 0 2px 0 0; }\n\n.radio-button {\n  max-width: 50%; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/preview/preview.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__preview_service__ = __webpack_require__("../../../../../src/personal/pre-recording/components/preview/preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_connection_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-connection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__area_selection_area_selection_service__ = __webpack_require__("../../../../../src/personal/area-selection/area-selection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_session_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/session-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PreviewComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};













let PreviewComponent = class PreviewComponent {
    constructor(elementRef, previewService, appState, deviceConnectionService, routeService, persistencyService, log, videoDeviceSettingsService, sessionStateService, areaSelectionService, devicePreviewService) {
        this.elementRef = elementRef;
        this.previewService = previewService;
        this.appState = appState;
        this.deviceConnectionService = deviceConnectionService;
        this.routeService = routeService;
        this.persistencyService = persistencyService;
        this.log = log;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.sessionStateService = sessionStateService;
        this.areaSelectionService = areaSelectionService;
        this.devicePreviewService = devicePreviewService;
        this.deviceChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.devices = [];
        this.uuid = null;
        this.resizeTimeout = null;
        this.onTheMove = false;
        this.isViewReady = false;
        this.disconnectionSub = null;
        this.sessionsInitSub = null;
        this.registered = false;
        this.onWinMoveSub = false;
    }
    //listening to device state change in order to render its' preview when the preview panel is already open
    set deviceState(deviceState) {
        //since this set can be called before the view is ready, we need to check it (sessionName and other properties will be undefined)
        if (this.isViewReady && deviceState && !this.isAudio()) {
            this.updatePreviewPosition();
        }
    }
    ngOnInit() {
        this.previewService.initService(this.sessionName, this.defaultCaptureType);
        this.loadDeviceList();
        this.registerOnWindowVisibilityChange();
        this.registerEvents();
        let regions = this.videoDeviceSettingsService.getSessionRegion(this.sessionName);
        this.devicePreviewService.captureZoneType = (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](regions) || __WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](regions['engineBounds']) || __WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](regions['electronBounds'])) ? 'FULL_SCREEN' : 'SELECT_AREA';
    }
    isAudio() {
        return this.sessionName === 'audio';
    }
    isItScreenDeviceType() {
        return this.isAudio() ? false : this.previewService.getSelectedDeviceType() === 'screen';
    }
    onCaptureZoneRadioButtonChange(type) {
        this.previewService.sendAccessibilityRadioButtonSelectionAlert(this.devicePreviewService.captureZoneType);
        if (this.devicePreviewService.captureZoneType === 'SELECT_AREA') {
            const sessionId = this.previewService.getSessionId();
            let screenFullBounds = this.previewService.getDeviceBounds(sessionId);
            let engineAndElectronBounds = this.videoDeviceSettingsService.getSessionRegion(this.sessionName);
            this.areaSelectionService.engineBounds = engineAndElectronBounds && engineAndElectronBounds['engineBounds'] ? engineAndElectronBounds['engineBounds'] : {};
            this.areaSelectionService.electronBounds = engineAndElectronBounds && engineAndElectronBounds['electronBounds'] ? engineAndElectronBounds['electronBounds'] : {};
            this.areaSelectionService.screenFullBounds = screenFullBounds;
            this.areaSelectionService.sessionName = this.sessionName;
            __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('hide-selection-square', this.sessionName)
                .then(() => {
                this.routeService.navigate('area-selection');
            });
        }
        else if (this.devicePreviewService.captureZoneType === 'FULL_SCREEN' && this.previewService.isDevicePreviewing(this.sessionName)) {
            this.previewService.resetToFullScreenCapture(this.sessionName);
        }
    }
    ngAfterViewInit() {
        this.isViewReady = true;
        setTimeout(() => {
            if (!this.isAudio()) {
                this.registerToWindowMove();
            }
            this.toggleDevicePreview(true);
        });
    }
    onDeviceChange() {
        let device = __WEBPACK_IMPORTED_MODULE_2_lodash__["find"](this.devices, (d) => d.value === this.selectedDevice);
        this.previewService.onDeviceChange(device)
            .then(() => {
            this.deviceChanged.emit(device.value);
            this.devicePreviewService.captureZoneType = 'FULL_SCREEN';
        })
            .catch(() => { }); //do nothing
    }
    isProcessing() {
        return !this.previewService.isAppStable();
    }
    getDeviceIconClass() {
        let deviceType = this.sessionName === 'audio' ? 'audio' :
            (this.previewService.getSelectedDeviceType() ? this.previewService.getSelectedDeviceType() : this.defaultCaptureType);
        return 'icon-' + deviceType + '-disable disabled-preview-icon-color';
    }
    getSelectedCaptureZoneType() {
        return this.devicePreviewService.captureZoneType === 'FULL_SCREEN' ? 'CAPTURE_DEVICE.full_screen' : 'CAPTURE_DEVICE.select_area';
    }
    toggleDevicePreview(startPreview) {
        if (!this.isAudio() && this.isDeviceEnabled()) {
            //wait for next ui cycle
            setTimeout(() => {
                startPreview ?
                    this.previewService.startDevicePreview(this.sessionName, this.getPreviewElementPosition()) :
                    this.previewService.stopDevicePreview(this.sessionName);
            });
        }
    }
    isDeviceEnabled() {
        return this.previewService.isDevicePreviewing(this.sessionName);
    }
    loadDeviceList() {
        return this.previewService.loadDeviceList()
            .then((captureDevices) => {
            this.selectedDevice = this.previewService.getSelectedDevice();
            this.setDeviceList(captureDevices);
        });
    }
    setDeviceList(devices) {
        this.devices.length = 0;
        for (let i in devices) {
            this.devices.push({ label: devices[i].friendly_name, value: devices[i].device_id });
        }
    }
    registerToWindowMove() {
        if (!this.onWinMoveSub) {
            this.onWinMoveSub = true;
            this.uuid = __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-window-move', () => {
                this.updatePreviewPosition();
            });
        }
    }
    updatePreviewPosition() {
        clearTimeout(this.resizeTimeout);
        if (!this.onTheMove) {
            this.previewService.startDevicePreview(this.sessionName, { left: 0, top: 0, width: 0, height: 0 });
            this.onTheMove = true;
        }
        this.resizeTimeout = setTimeout(() => {
            var elmPos = this.getPreviewElementPosition();
            this.previewService.startDevicePreview(this.sessionName, elmPos);
            this.onTheMove = false;
        }, 400);
    }
    getPreviewElementPosition() {
        let previewElement = this.elementRef.nativeElement.querySelector('.device-preview');
        if (previewElement) {
            return this.previewService.getValidatedDimensions(previewElement);
        }
        else {
            return null;
        }
    }
    registerOnWindowVisibilityChange() {
        this.appState.applicationWindowState$.subscribe((state) => {
            if (!this.isAudio()) {
                if (state === this.appState.WINDOW_STATE.HIDDEN) {
                    if (this.onWinMoveSub) {
                        this.onWinMoveSub = false;
                        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('on-window-move', this.uuid);
                    }
                    this.toggleDevicePreview(false);
                }
                else if (state === this.appState.WINDOW_STATE.VISIBLE) {
                    this.registerToWindowMove();
                    this.updatePreviewPosition();
                }
            }
        });
    }
    registerEvents() {
        this.disconnectionSub = this.deviceConnectionService.deviceConnectionState$.subscribe(event => {
            if (this.registered && !__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](event)) {
                this.handleDeviceDisconnection();
            }
            else {
                this.registered = true;
            }
        });
        this.sessionsInitSub = this.sessionStateService.sessionsInit$.subscribe(() => {
            this.appState.sessionsAreReadyPromise
                .then(() => {
                this.updatePreviewPosition();
            });
        });
    }
    handleDeviceDisconnection() {
        this.loadDeviceList()
            .then(() => {
            if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](this.devices)) {
                this.deviceChanged.emit(null); //calling host component to destroy preview
            }
            else {
                let device = __WEBPACK_IMPORTED_MODULE_2_lodash__["find"](this.devices, (d) => d.value === this.selectedDevice);
                if (!device) {
                    this.selectedDevice = this.devices[0].value; //get first device in the list
                    this.onDeviceChange();
                }
                else {
                    this.updatePreviewPosition();
                }
            }
        });
    }
    ngOnDestroy() {
        if (this.onWinMoveSub) {
            this.onWinMoveSub = false;
            __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('on-window-move', this.uuid);
        }
        this.toggleDevicePreview(false);
        if (this.disconnectionSub)
            this.disconnectionSub.unsubscribe();
        if (this.sessionsInitSub)
            this.sessionsInitSub.unsubscribe();
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PreviewComponent.prototype, "deviceState", null);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], PreviewComponent.prototype, "sessionName", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], PreviewComponent.prototype, "defaultCaptureType", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], PreviewComponent.prototype, "deviceChanged", void 0);
PreviewComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'device-preview',
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
        template: __webpack_require__("../../../../../src/personal/pre-recording/components/preview/preview.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/pre-recording/components/preview/preview.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_1__preview_service__["a" /* PreviewService */]]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__preview_service__["a" /* PreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__preview_service__["a" /* PreviewService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_route_service__["a" /* RouteService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_session_state_service__["a" /* SessionStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_session_state_service__["a" /* SessionStateService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_10__area_selection_area_selection_service__["a" /* AreaSelectionService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__area_selection_area_selection_service__["a" /* AreaSelectionService */]) === "function" && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */]) === "function" && _m || Object])
], PreviewComponent);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/preview.component.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/preview/preview.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_audio_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_base_preview_service__ = __webpack_require__("../../../../../src/personal/shared/services/base-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PreviewService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









let PreviewService = class PreviewService extends __WEBPACK_IMPORTED_MODULE_7__shared_services_base_preview_service__["a" /* BasePreviewService */] {
    constructor(log, appState, accessibilityService, videoDeviceService, videoDeviceSettingsService, audioDeviceSettingsService, devicePreviewService) {
        super(videoDeviceService);
        this.log = log;
        this.appState = appState;
        this.accessibilityService = accessibilityService;
        this.videoDeviceService = videoDeviceService;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.audioDeviceSettingsService = audioDeviceSettingsService;
        this.devicePreviewService = devicePreviewService;
    }
    initService(sessionName, defaultDeviceType) {
        this.sessionName = sessionName;
        this.defaultDeviceType = defaultDeviceType;
    }
    loadDeviceList() {
        this.log.info('loading ' + this.sessionName + ' device list');
        return this.sessionName === 'audio' ? this.loadAudioDeviceList() : this.loadVideoDeviceList();
    }
    getSelectedDevice() {
        this.log.info('get selected ' + this.sessionName + ' device');
        return this.sessionName === 'audio' ? this.getAudioSelectedDevice() : this.getVideoSelectedDevice();
    }
    onDeviceChange(selectedDevice) {
        return this.setSelectedDevice(selectedDevice)
            .then(() => {
            if (this.sessionName === 'audio') {
                return this.devicePreviewService.refreshRecordableSessionsPreview();
            }
            else {
                return this.devicePreviewService.refreshDevice(this.videoDeviceSettingsService.getSessionId(this.sessionName), this.sessionName, this.videoDeviceService.getCaptureDeviceTypeBySessionName(this.sessionName))
                    .then(() => {
                    return this.videoDeviceSettingsService.identifyDevice(selectedDevice.value, this.sessionName);
                });
            }
        });
    }
    setSelectedDevice(selectedDevice) {
        return this.sessionName === 'audio' ?
            this.audioDeviceSettingsService.onAudioDeviceChange(selectedDevice) :
            this.videoDeviceSettingsService.clearDeviceSelections(this.sessionName, true)
                .then(() => {
                return this.videoDeviceSettingsService.setSelectedDevice(this.sessionName, this.videoDeviceSettingsService.getSessionId(this.sessionName), selectedDevice.value);
            })
                .then(() => {
                return this.videoDeviceSettingsService.setInitialDeviceEncoder(this.sessionName);
            })
                .then(() => {
                return this.videoDeviceSettingsService.setInitialInputType(this.sessionName, this.videoDeviceSettingsService.getSessionData(this.sessionName).selectedDevice);
            })
                .then(() => {
                return this.videoDeviceSettingsService.setInitialDeviceEncoderConfig(this.sessionName);
            })
                .then(() => {
                return this.videoDeviceSettingsService.saveDeviceSelections(this.sessionName);
            });
    }
    loadVideoDeviceList() {
        return this.videoDeviceSettingsService.registerForDeviceListLoading(this.sessionName, this.defaultDeviceType);
    }
    loadAudioDeviceList() {
        return this.audioDeviceSettingsService.loadAudioDeviceList();
    }
    getVideoSelectedDevice() {
        return this.videoDeviceSettingsService.getSessionData(this.sessionName).selectedDevice;
    }
    getAudioSelectedDevice() {
        return this.audioDeviceSettingsService.selectedAudioDevice;
    }
    getSelectedDeviceType() {
        return this.videoDeviceService.getCaptureDeviceTypeBySessionName(this.sessionName);
    }
    isAppStable() {
        return this.appState.isAppStable();
    }
    getDeviceBounds(sessionId) {
        let deviceData = this.videoDeviceSettingsService.getDeviceDataBySessionId(sessionId);
        return deviceData['bounds'];
    }
    getSessionId() {
        if (this.sessionName === 'audio') {
            return this.audioDeviceSettingsService.getSessionId(this.sessionName);
        }
        else {
            return this.videoDeviceSettingsService.getSessionId(this.sessionName);
        }
    }
    resetToFullScreenCapture(sessionName) {
        return this.videoDeviceService.resetToFullScreenCapture(sessionName, false);
    }
    sendAccessibilityRadioButtonSelectionAlert(captureZoneType) {
        let translatedCaptureZone = captureZoneType === 'SELECT_AREA' ? 'select_area' : 'full_screen';
        this.accessibilityService.setAccessibilityAlert('CAPTURE_DEVICE.select_area');
    }
};
PreviewService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_audio_device_settings_service__["a" /* AudioDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_capture_device_audio_device_settings_service__["a" /* AudioDeviceSettingsService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */]) === "function" && _g || Object])
], PreviewService);

var _a, _b, _c, _d, _e, _f, _g;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/preview.service.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/recording-button/recording-button.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"rec-button-inner-container\" tooltipPosition=\"top\" showDelay=\"500\" tooltip-addon role=\"tooltip\"\n   [pTooltip]=\"(isAnyActiveRecordableSessionExits() ? 'RECORD.start' : 'CAPTURE_DEVICE.recording_disable_information') | translate\">\n  <button [attr.aria-label]=\"(isAnyActiveRecordableSessionExits() ? 'RECORD.start' : 'CAPTURE_DEVICE.recording_disable_information') | translate\"\n          class=\"pc-button rec-button rec-button-icon scaling-light\" [attr.aria-disabled]=\"disableRecButton()\" [disabled]=\"disableRecButton()\" (click)=\"startRecording()\"></button>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/pre-recording/components/recording-button/recording-button.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingButtonComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let RecordingButtonComponent = class RecordingButtonComponent {
    constructor(appState, routeService, accessService) {
        this.appState = appState;
        this.routeService = routeService;
        this.accessService = accessService;
        this.sessionExists = true;
    }
    ngOnInit() {
        this.shiftR_UUID = __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].registerShortcut("CommandOrControl+Shift+R", () => {
            this.startRecording();
        });
    }
    isAnyActiveRecordableSessionExits() {
        let sessionExists = !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.appState.getActiveRecordableSessionsIds());
        if (sessionExists !== this.sessionExists) {
            this.sessionExists = sessionExists;
            this.setAccessibilityAlert();
        }
        return !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.appState.getActiveRecordableSessionsIds());
    }
    setAccessibilityAlert() {
        let exists = this.sessionExists ? 'enabled' : 'disable';
        this.accessService.setAccessibilityAlert('CAPTURE_DEVICE.recording_' + exists + '_information', 'long');
    }
    canRecord() {
        return this.appState.isAppStable() && __WEBPACK_IMPORTED_MODULE_4_lodash__["keys"](this.appState.getActiveRecordableSessionsIds()).length > 0;
    }
    disableRecButton() {
        return !this.canRecord();
    }
    startRecording() {
        if (this.canRecord())
            this.routeService.navigate('active-recording');
    }
    ngOnDestroy() {
        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].unRegisterShortcut("CommandOrControl+Shift+R", this.shiftR_UUID);
    }
};
RecordingButtonComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'pre-recording-button',
        template: __webpack_require__("../../../../../src/personal/pre-recording/components/recording-button/recording-button.component.html")
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_route_service__["a" /* RouteService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _c || Object])
], RecordingButtonComponent);

var _a, _b, _c;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording-button.component.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/pre-recording.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"aria-descriptive-text\" role=alert aria-live=\"polite\" [attr.aria-label]=\"'RECORD.pre_rec_desc' | translate\" *ngIf=\"!shouldHideComponent\">{{'RECORD.pre_rec_desc' | translate}}</div>\n<div role=\"main\" *ngIf=\"!routeService.isInTransition && !shouldHideComponent\" class=\"pre-rec-container default-background-color\">\n  <div aria-hidden class=\"capture-rec-button-container\" (click)=\"hideComponent()\">\n    <pre-recording-button></pre-recording-button>\n  </div>\n  <span aria-hidden class=\"line dark-line\"></span>\n  <span aria-hidden class=\"line light-line\"></span>\n\n  <!-- displaying capture devices -->\n  <div role=\"region\" [attr.aria-label]=\"'RECORD.capture_devices_region' | translate\" class=\"capture-devices-container\">\n\n    <capture-device *ngIf=\"shouldRenderCaptureDevices()\" aria-hidden class=\"capture-device\" id=\"session0\" [sessionName]=\"'session0'\"\n                    [defaultCaptureType]=\"getSessionDefaultTypeByName('session0')\" [openPreviewOnInit]=\"shouldPreviewOnInit('session0')\">\n    </capture-device>\n    <capture-device *ngIf=\"shouldRenderCaptureDevices()\" aria-hidden class=\"capture-device\" id=\"session1\" [sessionName]=\"'session1'\"\n                    [defaultCaptureType]=\"getSessionDefaultTypeByName('session1')\" [openPreviewOnInit]=\"shouldPreviewOnInit('session1')\">\n    </capture-device>\n    <capture-device *ngIf=\"shouldRenderCaptureDevices()\" aria-hidden class=\"capture-device\" id=\"audio\" [sessionName]=\"'audio'\"\n                    [defaultCaptureType]=\"getSessionDefaultTypeByName('audio')\" [openPreviewOnInit]=\"shouldPreviewOnInit('audio')\">\n    </capture-device>\n\n  </div>\n\n  <span aria-hidden class=\"line dark-line\"></span>\n  <span aria-hidden class=\"line light-line\"></span>\n  <div aria-hidden class=\"app-logo-wrapper\">\n    <div class=\"app-logo\" aria-hidden></div>\n    <button class=\"button-link manage-link\" (click)=\"goToManagement()\" [disabled]=\"appNotStable()\"\n            [attr.aria-label]=\"'CAPTURE_DEVICE.Manage' | translate\">{{ 'CAPTURE_DEVICE.Manage' | translate }}</button>\n  </div>\n  <div aria-hidden class=\"non-draggable-stripe\"></div>\n  <loader-gauge *ngIf=\"appNotStable()\" class=\"devices-loader\" [attr.aria-label]=\"'RECORD.loading_sources' | translate\"></loader-gauge>\n  <div role=\"region\" [attr.aria-label]=\"'MENU.menu_region' | translate\" class=\"controls-container\">\n    <button [attr.aria-label]=\"'MENU.minimize_button' | translate\" class=\"minimize-button-icon minimize-button-pre-rec pc-button\" (click)=\"minimizeWindow()\"></button>\n    <button [attr.aria-label]=\"'MENU.minimize_to_tray_button' | translate\" class=\"exit-button-icon exit-button-pre-rec pc-button\" (click)=\"minimizeToTray()\"></button>\n  </div>\n</div>\n"

/***/ }),

/***/ "../../../../../src/personal/pre-recording/pre-recording.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".pre-rec-container {\n  position: relative;\n  width: 529px;\n  height: 100px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n  border-top-left-radius: 3em;\n  border-bottom-left-radius: 3em;\n  -webkit-app-region: drag; }\n\n.minimize-button-pre-rec {\n  opacity: 0.34;\n  position: absolute;\n  right: 43px;\n  top: 7.5px;\n  z-index: 1; }\n\n.exit-button-pre-rec {\n  opacity: 0.49;\n  position: absolute;\n  right: 11px;\n  top: 8px;\n  z-index: 1; }\n\n.capture-rec-button-container {\n  width: 100px;\n  height: 100px;\n  float: left; }\n\n.app-logo-wrapper {\n  position: relative;\n  height: 100px;\n  width: 103px;\n  float: left; }\n\n.line {\n  display: inline-block;\n  float: left;\n  height: 68px;\n  margin-top: 16px; }\n\n.light-line {\n  width: 1px;\n  opacity: 0.15;\n  background-color: #ffffff; }\n\n.dark-line {\n  width: 2px;\n  opacity: 0.6;\n  background-color: #000000; }\n\n.capture-devices-container {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  float: left;\n  -ms-flex-direction: row;\n      flex-direction: row;\n  height: 100px;\n  width: 300px;\n  margin-right: 17px; }\n\n.devices-loader {\n  position: absolute;\n  width: 300px;\n  bottom: 0;\n  left: 103.5px; }\n\n.non-draggable-stripe {\n  -webkit-app-region: no-drag;\n  width: 310px;\n  height: 10px;\n  position: absolute;\n  left: 100px;\n  bottom: 0; }\n\n.button-link {\n  opacity: 0.7;\n  font-family: Lato;\n  font-size: 12px;\n  font-weight: 400;\n  color: #ffffff;\n  -webkit-app-region: no-drag;\n  cursor: pointer;\n  border: none;\n  padding: 0;\n  margin: 0;\n  background: transparent;\n  text-decoration: underline;\n  outline: none; }\n  .button-link:hover {\n    opacity: 1; }\n\n.manage-link {\n  position: absolute;\n  top: 68px;\n  left: 26px;\n  padding: 0 4px;\n  line-height: 1.5; }\n\n.button-link[disabled] {\n  opacity: 0.4;\n  cursor: default; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/pre-recording/pre-recording.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pre_recording_service__ = __webpack_require__("../../../../../src/personal/pre-recording/pre-recording.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_router__ = __webpack_require__("../../../router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PreRecordingComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









let PreRecordingComponent = class PreRecordingComponent {
    constructor(preRecService, log, appState, routeService, route, config) {
        this.preRecService = preRecService;
        this.log = log;
        this.appState = appState;
        this.routeService = routeService;
        this.route = route;
        this.config = config;
        this.shiftM_UUID = '';
        this.previewToShow = null;
        this.shouldHideComponent = false;
        this.sessionsElements = {};
    }
    ngOnInit() {
        this.appState.getVisualSessionsNamesAndDefaultTypesForInit()
            .then(sessions => {
            sessions['audio'] = 'audio';
            this.sessionsElements = sessions;
        });
        this.routParmasSubscription = this.route.params
            .subscribe(params => {
            this.previewToShow = params['previewToShow'];
        });
        this.registerRecordKeyboardShortcuts();
    }
    registerRecordKeyboardShortcuts() {
        this.shiftM_UUID =
            __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerShortcut("CommandOrControl+Shift+M", () => {
                this.goToManagement();
            });
    }
    appNotStable() {
        return this.preRecService.isAppNotStable();
    }
    shouldRenderCaptureDevices() {
        return !__WEBPACK_IMPORTED_MODULE_7_lodash__["isEmpty"](this.sessionsElements);
    }
    minimizeWindow() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendSystemCommand('minimize');
    }
    minimizeToTray() {
        this.preRecService.closeApp();
    }
    shouldPreviewOnInit(sessionName) {
        let primarySessionName = this.config.getConfigData('config.captureApp.primarySessionName');
        //if session device is disabled or 'audio' session, there is nothing to preview
        if (!this.preRecService.isDevicePreviewing(sessionName) || sessionName === 'audio') {
            return false;
        }
        //if primary and enabled - preview
        if (sessionName === primarySessionName)
            return true;
        else if (!this.preRecService.isDevicePreviewing(primarySessionName))
            return true;
        //if anything else - do not preview session
        return false;
    }
    goToManagement() {
        this.routeService.navigate('management');
    }
    unregisterRecordKeyboardShortcuts() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].unRegisterShortcut("CommandOrControl+Shift+M", this.shiftM_UUID);
    }
    getSessionDefaultTypeByName(sessionName) {
        return this.sessionsElements[sessionName] ? this.sessionsElements[sessionName] : this.appState.DEFAULT_CAPTURE_TYPE;
    }
    //to avoid delay in hiding component automatically by routing
    hideComponent() {
        this.shouldHideComponent = true;
    }
    ngOnDestroy() {
        this.unregisterRecordKeyboardShortcuts();
        this.routParmasSubscription.unsubscribe();
    }
};
PreRecordingComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'pre-recording',
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
        template: __webpack_require__("../../../../../src/personal/pre-recording/pre-recording.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/pre-recording/pre-recording.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_3__pre_recording_service__["a" /* PreRecordingService */]]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__pre_recording_service__["a" /* PreRecordingService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__pre_recording_service__["a" /* PreRecordingService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_route_service__["a" /* RouteService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_6__angular_router__["ActivatedRoute"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__angular_router__["ActivatedRoute"]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _f || Object])
], PreRecordingComponent);

var _a, _b, _c, _d, _e, _f;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/pre-recording.component.js.map

/***/ }),

/***/ "../../../../../src/personal/pre-recording/pre-recording.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PreRecordingService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let PreRecordingService = class PreRecordingService {
    constructor(appState, videoDeviceService) {
        this.appState = appState;
        this.videoDeviceService = videoDeviceService;
    }
    isAppNotStable() {
        return !this.appState.isAppStable();
    }
    //just minimizing application to try (and not to dock)
    closeApp() {
        return __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendSystemCommand('closeApp');
    }
    isDevicePreviewing(sessionName) {
        return this.videoDeviceService.isDevicePreviewing(sessionName);
    }
};
PreRecordingService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _b || Object])
], PreRecordingService);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/pre-recording.service.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/components/loader.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"loader\" [ngClass]=\"size ? size + '-animation' : 'large-animation' \"></div>\n"

/***/ }),

/***/ "../../../../../src/personal/shared/components/loader.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/* Main Loader properties */\n.loader {\n  bottom: 0;\n  height: 6px;\n  width: 100%;\n  position: absolute;\n  overflow: hidden;\n  background-color: #333333; }\n  .loader:before {\n    display: block;\n    content: \"\";\n    height: 6px;\n    background: -webkit-linear-gradient(left, rgba(0, 171, 204, 0) 0%, #00abcc 20%, #00abcc 80%, rgba(0, 171, 204, 0) 100%); }\n\n/* --- large loader --- */\n.large-animation:before {\n  position: absolute;\n  left: -400px;\n  width: 200px;\n  animation: loading-large 2s linear infinite; }\n\n@keyframes loading-large {\n  from {\n    left: -200px; }\n  to {\n    left: +300px; } }\n\n/* --- small loader --- */\n.small-animation:before {\n  position: absolute;\n  left: -200px;\n  width: 200px;\n  animation: loading-small 1.5s linear infinite; }\n\n@keyframes loading-small {\n  from {\n    left: -200px; }\n  to {\n    left: +105px; } }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/personal/shared/components/loader.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoaderComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let LoaderComponent = class LoaderComponent {
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], LoaderComponent.prototype, "size", void 0);
LoaderComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'loader-gauge',
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
        template: __webpack_require__("../../../../../src/personal/shared/components/loader.component.html"),
        styles: [__webpack_require__("../../../../../src/personal/shared/components/loader.component.scss")],
    })
], LoaderComponent);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/loader.component.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/services/base-preview.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class BasePreviewService {
    constructor(videoDeviceService) {
        this.videoDeviceService = videoDeviceService;
    }
    isDevicePreviewing(sessionName) {
        return this.videoDeviceService.isDevicePreviewing(sessionName);
    }
    startDevicePreview(sessionName, position) {
        if (position) {
            this.videoDeviceService.updateDevicePreviewLocation(sessionName, position);
        }
    }
    stopDevicePreview(sessionName) {
        this.videoDeviceService.updateDevicePreviewLocation(sessionName, { left: 0, top: 0, width: 0, height: 0 });
    }
    getValidatedDimensions(previewElement) {
        let rect = previewElement.getBoundingClientRect();
        return {
            left: (rect.left + 1) * window.devicePixelRatio > 1 ? (rect.left + 1) * window.devicePixelRatio : 0,
            top: (rect.top + 1) * window.devicePixelRatio > 1 ? (rect.top + 1) * window.devicePixelRatio : 0,
            width: (previewElement.offsetWidth - 2) * window.devicePixelRatio > 1 ? (previewElement.offsetWidth - 2) * window.devicePixelRatio : 0,
            height: (previewElement.offsetHeight - 2) * window.devicePixelRatio > 1 ? (previewElement.offsetHeight - 2) * window.devicePixelRatio : 0
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BasePreviewService;

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/base-preview.service.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/services/recording-actions.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__recording_timer_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording-timer.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_recording_recording_details_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-details.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_system_health_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-health.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__shared_services_capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__shared_services_recording_slides_service__ = __webpack_require__("../../../../../src/shared/services/recording/slides.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_device_connection_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-connection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__shared_services_recording_mouse_click_indication_service__ = __webpack_require__("../../../../../src/shared/services/recording/mouse-click-indication.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__shared_services_capture_device_audio_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__shared_services_recording_recording_utils_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-utils.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingActionsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



















let RecordingActionsService = class RecordingActionsService {
    constructor(log, appState, slideService, appConfig, translate, recordingTimer, systemHealthService, persistencyService, recordingDetailsService, videoDeviceService, deviceConnectionService, audioDeviceSettingsService, videoDeviceSettingsService, mouseClickIndicationService, recordingUtilsService) {
        this.log = log;
        this.appState = appState;
        this.slideService = slideService;
        this.appConfig = appConfig;
        this.translate = translate;
        this.recordingTimer = recordingTimer;
        this.systemHealthService = systemHealthService;
        this.persistencyService = persistencyService;
        this.recordingDetailsService = recordingDetailsService;
        this.videoDeviceService = videoDeviceService;
        this.deviceConnectionService = deviceConnectionService;
        this.audioDeviceSettingsService = audioDeviceSettingsService;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.mouseClickIndicationService = mouseClickIndicationService;
        this.recordingUtilsService = recordingUtilsService;
        /**
         * indicates if an action is still in progress
         * @type {boolean}
         */
        this._actionInProgress = false;
        this.registerSystemHealthNotification();
    }
    set actionInProgress(inProgress) {
        this._actionInProgress = inProgress;
    }
    get actionInProgress() {
        return this._actionInProgress;
    }
    startInRecoveryMode(recData) {
        this.actionInProgress = false;
        this.recordingTimer.setPrevRecordingTime(recData['recordingTime']);
        return this.callRecordingNextAction('pause', true);
    }
    updateRecState(state) {
        return this.recordingUtilsService.updateRecState(state);
    }
    finalizeRecordingFileOffCycle(files) {
        return this.recordingUtilsService.finalizeRecordingFileOffCycle(files);
    }
    /**
     * recording state machine
     */
    callRecordingNextAction(nextAction, recover = false) {
        this.log.info('callRecordingNextAction: ' + nextAction);
        if (!this.recordingUtilsService.isProcessing() && !this.actionInProgress) {
            this.actionInProgress = true;
            switch (this.appState.recordingPhase) {
                case 'initial':
                    if (nextAction === 'pause') {
                        //application started in recovery mode
                        if (recover) {
                            this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
                            this.appState.recordingPhase = 'paused';
                        }
                        this.actionInProgress = false;
                        return Promise.resolve();
                    }
                    else {
                        //in regular flow the only action from 'initial' state is - start
                        this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
                        return this.startRecording();
                    }
                case 'recording':
                    if (nextAction === 'pause') {
                        this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
                        return this.pauseRecording();
                    }
                    else if (nextAction === 'stop') {
                        this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
                        this.actionInProgress = false; //immediately calls pause action that will set actionInProgress to true
                        return this.stopRecording();
                    }
                    else if (nextAction === 'cancel') {
                        return this.cancelRecording();
                    }
                    break;
                case 'paused':
                    if (nextAction === 'resume') {
                        this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
                        return this.resumeRecording();
                    }
                    else if (nextAction === 'stop') {
                        this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
                        this.actionInProgress = false; //immediately calls pause action that will set actionInProgress to true
                        return this.stopRecording();
                    }
                    else if (nextAction === 'cancel') {
                        return this.cancelRecording();
                    }
                    else if (nextAction === 'pause') {
                        this.actionInProgress = false;
                        return Promise.resolve();
                    }
                    break;
                case 'readyToStop':
                    if (nextAction === 'stop') {
                        return this.closeStoppedRecording();
                    }
                    else {
                        this.log.info('Recording is in readyToStop phase, waiting for stop action. next action was: ' + nextAction);
                        return Promise.resolve();
                    }
                case 'stopping':
                    this.log.info('Recording currently in the middle of a stopping progress. Can\'t execute next action: ' + nextAction);
                    return Promise.resolve();
            }
            this.actionInProgress = false;
            return Promise.reject({ code: 'STATE_TRANSITION_INVALID',
                msg: 'Transition from: ' + this.appState.recordingPhase + ' to: ' + nextAction });
        }
        else {
            return Promise.reject({ code: 'ACTION_IN_PROGRESS', msg: 'Action still in progress: ' + this.appState.recordingPhase });
        }
    }
    startRecording() {
        this.log.info('startRecording()');
        let prevDeviceConnectionState = this.deviceConnectionService.getConnectionState();
        return this.appState.areSessionsReadyForRecording('startRecording()')
            .then(() => {
            return this.canStartOrResumeRecording();
        })
            .then(() => {
            return this.saveCaptureRegionToPersistancy();
        })
            .then(() => {
            this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
            return this.showCountdownBeforeStart();
        })
            .then((startRec) => {
            //checking if there was a difference between device status before starting recording process and at current phase - before starting the actual recording
            //if there was a difference and the new state indicates that in use device was disconnected
            let newDeviceConnectionState = this.deviceConnectionService.getConnectionState();
            let deviceDisconnected = !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](newDeviceConnectionState) &&
                !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEqual"](newDeviceConnectionState, prevDeviceConnectionState) &&
                (newDeviceConnectionState['state'] === 'disconnected' && newDeviceConnectionState['inUse']);
            if (startRec && !deviceDisconnected) {
                return this.startRecordingProcess();
            }
            else {
                this.log.info('User canceled recoding during countdown');
                this.actionInProgress = false;
                this.updateRecState(this.appState.REC_STATE.STABLE);
                return null;
            }
        });
    }
    //being called if the user didn't cancel recording countdown
    startRecordingProcess() {
        return this.doRecordingAction('buildRecord')
            .then(() => {
            return this.doRecordingAction('startRecord');
        })
            .then((files) => {
            this.appState.recordingPhase = 'recording';
            this.recordingTimer.startRecordingTimer();
            this.log.info('recording media files created: ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(files));
            this.recordingUtilsService.updateRecordingFiles(files);
            this.recordingDetailsService.setDefaultRecDetails();
            this.actionInProgress = false;
            return files;
        });
    }
    pauseRecording() {
        return this.doRecordingAction('pauseRecord')
            .then((res) => {
            this.appState.recordingPhase = 'paused';
            this.log.info('Paused recording. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(res));
            this.actionInProgress = false;
            return res;
        })
            .catch((err) => {
            this.log.error('Failed to pause recording. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.actionInProgress = false;
            return Promise.reject(err);
        });
    }
    stopRecording() {
        let prevRecordingPhase = this.appState.recordingPhase;
        return this.callRecordingNextAction('pause')
            .then((res) => {
            this.appState.recordingPhase = 'readyToStop';
            return this.callRecordingNextAction('stop');
        })
            .catch((err) => {
            this.appState.recordingPhase = prevRecordingPhase;
            this.log.error(__WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    //closing files of a succeeded stopped recording.
    closeStoppedRecording() {
        this.appState.recordingPhase = 'stopping';
        return this.doRecordingAction('stopRecord');
    }
    resumeRecording() {
        this.log.info('resumeRecording()');
        return this.appState.areSessionsReadyForRecording('resumeRecording()')
            .then(() => {
            return this.canStartOrResumeRecording();
        })
            .then(() => {
            this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
            return this.doRecordingAction('startRecord');
        })
            .then((res) => {
            this.appState.recordingPhase = 'recording';
            this.recordingTimer.startRecordingTimer();
            this.log.info('Resume recording. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(res));
            this.actionInProgress = false;
            return res;
        });
    }
    cancelRecording() {
        this.updateRecState(this.appState.REC_STATE.IN_PROCESS);
        this.actionInProgress = true;
        return this.appState.areSessionsReadyForRecording('cancelRecording()')
            .then(() => {
            return this.closeCanceledRecording();
        });
    }
    closeCanceledRecording() {
        this.log.info('closeCanceledRecording');
        return this.doRecordingAction('cancelRecord')
            .then((filesToDelete) => {
            return this.recordingUtilsService.getRecordingFilesForDeletion(filesToDelete);
        })
            .catch((err) => {
            this.log.error('Failed to close recording. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * check if it is possible to start or resume recording
     * promise will be rejected if sys health failed and recording can't start / resume
     */
    canStartOrResumeRecording() {
        return this.systemHealthService.checkSystemHealth(false) //promise will never be rejected
            .then((sysHealth) => {
            if (__WEBPACK_IMPORTED_MODULE_6_lodash__["isObject"](sysHealth) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](sysHealth) &&
                sysHealth['status'] === this.systemHealthService.HEALTH_STATUS.ERROR) {
                return Promise.reject(sysHealth);
            }
            else {
                return Promise.resolve(true);
            }
        });
    }
    /**
     * Executes recording actions
     * @param action
     * @return {Promise<TResult>}
     */
    doRecordingAction(action) {
        let relatedSessions;
        return this.appState.areSessionsReadyForRecording(action)
            .then(() => {
            relatedSessions = this.appState.getActiveRecordableSessionsIds();
            let argsPromisesArr = [];
            __WEBPACK_IMPORTED_MODULE_6_lodash__["each"](relatedSessions, (sessionId) => {
                argsPromisesArr.push(this.getSessionActionArgs(action, sessionId));
            });
            return Promise.all(argsPromisesArr);
        })
            .then((recordingActionArgs) => {
            let preparationPromise = Promise.resolve([]);
            switch (action) {
                case 'startRecord':
                    preparationPromise = Promise.all([
                        this.slideService.shouldCaptureSlides(),
                        this.mouseClickIndicationService.startMouseClickIndication()
                    ]);
                    break;
                case 'cancelRecord':
                    relatedSessions = relatedSessions.concat(this.appState.getInActiveRecordableSessionsIds());
                case 'stopRecord':
                    this.recordingTimer.stopRecordingTimer();
                    preparationPromise = this.mouseClickIndicationService.stopMouseClickIndication();
                    break;
                case 'pauseRecord':
                    this.recordingTimer.pauseRecordingTimer();
                    preparationPromise = this.mouseClickIndicationService.stopMouseClickIndication();
                    break;
            }
            return preparationPromise.then(() => {
                return recordingActionArgs;
            });
        })
            .then(recordingActionArgs => {
            this.appState.onCallStarted(action, JSON.stringify(relatedSessions));
            return __WEBPACK_IMPORTED_MODULE_5_utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(action + 'Some', relatedSessions, ...recordingActionArgs);
        })
            .then((res) => {
            this.runPostRecordingActions(action);
            this.appState.onCallEnded(action + ' - SUCCESS', JSON.stringify(relatedSessions));
            return res;
        })
            .catch((err) => {
            this.appState.onCallEnded(action + ' - FAILURE', JSON.stringify(relatedSessions));
            this.mouseClickIndicationService.stopMouseClickIndication();
            return Promise.reject(err);
        });
    }
    runPostRecordingActions(action) {
        switch (action) {
            case 'startRecord':
                if (this.appConfig.getConfigData('config.captureApp.recording.minimizeWhenRecordingStarts'))
                    __WEBPACK_IMPORTED_MODULE_5_utils_ipcWrapper__["a" /* ipcWrapper */].sendSystemCommand('minimize');
                break;
        }
    }
    showCountdownBeforeStart() {
        return this.translate.get('COMMON.cancel')
            .toPromise()
            .then(cancelText => {
            return __WEBPACK_IMPORTED_MODULE_5_utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('start-countdown', { color: '#00abcc', cancelText: cancelText, time: this.appConfig.getConfigData('config.captureApp.recording.countdownTime'),
                bounds: { x: window.screenX, y: window.screenY, width: window.screen.width, height: window.screen.height } })
                .then(() => { return true; })
                .catch(() => { return false; });
        });
    }
    getSessionActionArgs(action, sessionId) {
        return this.recordingUtilsService.getSessionActionArgs(action, sessionId);
    }
    registerSystemHealthNotification() {
        this.systemHealthService.systemNotHealthy$.subscribe(isSysNotHealthy => {
            if (isSysNotHealthy) {
                this.log.info('Recording Actions: Not enough diskspace was detected during recording, pausing recording.');
                this.callRecordingNextAction('pause')
                    .catch(() => {
                    this.log.error('systemNotHealthy subscription: Failed to pause ');
                });
            }
        });
    }
    saveCaptureRegionToPersistancy() {
        let captureRegionPromises = [];
        __WEBPACK_IMPORTED_MODULE_6_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_6_lodash__["concat"](this.appState.getSessionsNames(true), this.appState.getSessionsNames(false)), sessionName => {
            if (sessionName !== 'audio') {
                let deviceRegion = this.videoDeviceSettingsService.getSessionRegion(sessionName);
                captureRegionPromises.push(this.persistencyService.set(sessionName + '.captureRegion', (__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](deviceRegion) || __WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](deviceRegion['engineBounds']) || __WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](deviceRegion['electronBounds'])) ? {} : deviceRegion));
            }
        });
        return Promise.all(captureRegionPromises);
    }
};
RecordingActionsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_14__shared_services_recording_slides_service__["a" /* SlideService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_14__shared_services_recording_slides_service__["a" /* SlideService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_11_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11_ng2_translate__["b" /* TranslateService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_4__recording_timer_service__["a" /* RecordingTimerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__recording_timer_service__["a" /* RecordingTimerService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_system_health_service__["a" /* SystemHealthService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_system_health_service__["a" /* SystemHealthService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_recording_recording_details_service__["a" /* RecordingDetailsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_recording_recording_details_service__["a" /* RecordingDetailsService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__shared_services_capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */]) === "function" && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_17__shared_services_capture_device_audio_device_settings_service__["a" /* AudioDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_17__shared_services_capture_device_audio_device_settings_service__["a" /* AudioDeviceSettingsService */]) === "function" && _m || Object, typeof (_o = typeof __WEBPACK_IMPORTED_MODULE_13__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_13__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _o || Object, typeof (_p = typeof __WEBPACK_IMPORTED_MODULE_16__shared_services_recording_mouse_click_indication_service__["a" /* MouseClickIndicationService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_16__shared_services_recording_mouse_click_indication_service__["a" /* MouseClickIndicationService */]) === "function" && _p || Object, typeof (_q = typeof __WEBPACK_IMPORTED_MODULE_18__shared_services_recording_recording_utils_service__["a" /* RecordingUtilsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_18__shared_services_recording_recording_utils_service__["a" /* RecordingUtilsService */]) === "function" && _q || Object])
], RecordingActionsService);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording-actions.service.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/services/recording-session-actions.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_recording_recording_recovery_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-recovery.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_capture_device_device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_recording_recording_details_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-details.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__recording_actions_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording-actions.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__recording_timer_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording-timer.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__management_services_entry_service__ = __webpack_require__("../../../../../src/personal/management/services/entry.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__shared_services_capture_device_audio_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__active_recording_components_palette_palette_service__ = __webpack_require__("../../../../../src/personal/active-recording/components/palette/palette.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingSessionActions; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


















let RecordingSessionActions = class RecordingSessionActions {
    constructor(log, appState, recordingTimer, recordingActions, recoveryService, devicePreviewService, persistencyService, notificationService, recordingDetailsService, routeService, audioDeviceService, entryService, videoDeviceSettingsService, paletteService) {
        this.log = log;
        this.appState = appState;
        this.recordingTimer = recordingTimer;
        this.recordingActions = recordingActions;
        this.recoveryService = recoveryService;
        this.devicePreviewService = devicePreviewService;
        this.persistencyService = persistencyService;
        this.notificationService = notificationService;
        this.recordingDetailsService = recordingDetailsService;
        this.routeService = routeService;
        this.audioDeviceService = audioDeviceService;
        this.entryService = entryService;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.paletteService = paletteService;
        this.SHUTDOWN_RETRIES = 2;
        /**
         * indicates if recording request is loading (engine can delay response util video samples starts arriving)
         * @type {boolean}
         */
        this._recordingIsLoading = false;
    }
    set recordingIsLoading(isLoading) {
        this._recordingIsLoading = isLoading;
    }
    get recordingIsLoading() {
        return this._recordingIsLoading;
    }
    initRecordingSession() {
        return this.recoveryService.shouldRecoverRecordingSession()
            .then((recData) => {
            if (__WEBPACK_IMPORTED_MODULE_11_lodash__["isEmpty"](recData)) {
                //app is not in recovery mode - start normally
                this.updateRecState(this.appState.REC_STATE.STABLE);
                this.log.info('Kaltura Capture was not loaded in the middle of existing recording session');
            }
            else {
                this.log.info('Kaltura Capture was loaded in the middle of existing recording session, trying to recover');
                //setting recording state to 'in_process' and starting app in recovery mode
                this.recordingActions.updateRecState(this.appState.REC_STATE.IN_PROCESS);
                return this.tryToRecoverRecordingSession(recData);
            }
        })
            .catch((err) => {
            return this.failedSessionsRecoveryFlow(err);
        });
    }
    shutDownAndReInitSessions(retry = 0) {
        this.log.info('shutDownAndReInitSessions()');
        return this.appState.areSessionsReadyForRecording('shutDownAndReInitSessions()')
            .catch(() => {
            //shut down sessions any way...
        })
            .then(() => {
            return this.devicePreviewService.unregisterFromAudioNotification();
        })
            .then(() => {
            this.recoveryService.resetRecoverySessions();
            return this.appState.shutDownSessions()
                .then(() => {
                return this.videoDeviceSettingsService.clearSessions();
            })
                .then(() => {
                this.appState.sendInitNotification();
            })
                .catch((err) => {
                retry++;
                this.log.error('failed to shut down active sessions. retry - ' + retry + ' ERROR: ' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(err));
                if (retry > this.SHUTDOWN_RETRIES)
                    return Promise.reject(err);
                else
                    return __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].delayPromise(1000).then(() => this.shutDownAndReInitSessions(retry));
            });
        });
    }
    resetRecordingSessions(successfulFinishedRecording) {
        this.log.info('resetRecordingSessions()');
        this.recordingIsLoading = false;
        this.appState.recordingPhase = 'initial';
        this.updateRecState(this.appState.REC_STATE.STABLE);
        this.recordingActions.actionInProgress = false;
        return this.recordingDetailsService.resetRecordingDetails()
            .catch((err) => {
            this.log.error('Failed to reset recording details.' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(err));
        })
            .then(() => {
            return Promise.all([
                this.videoDeviceSettingsService.resetPersistencyOfScreenCapture(),
                __WEBPACK_IMPORTED_MODULE_16__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('hide-selection-square', 'ALL'),
                this.paletteService.toggleSketchCanvas(false),
                __WEBPACK_IMPORTED_MODULE_16__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('delete-canvas-persistency')
            ]);
        })
            .catch((err) => {
            this.log.error('Failed to reset capture region or canvas persistancy.' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(err));
        })
            .then(() => {
            this.recordingTimer.stopRecordingTimer();
            this.shutDownAndReInitSessions()
                .then(() => {
                let navigateTo = successfulFinishedRecording ? '/management/entry' : 'pre-recording';
                return this.routeService.navigate(navigateTo);
            });
        });
    }
    closeFailedRecoveredSession() {
        this.log.info('closeFailedRecoveredSession');
        return this.tryToRecoverAndCloseRecordingSessions()
            .then(() => {
            this.notificationService.sendNotification("NOTIFICATIONS.error_restore", 'warn');
            return Promise.resolve(false);
        })
            .catch((err) => {
            this.log.error('Failed to close previous recording session. ' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    failedSessionsRecoveryFlow(err) {
        this.log.error('Failed to load recording sessions in recovery mode. ' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(err));
        this.notificationService.sendNotification('NOTIFICATIONS.error_loadPrevRec', 'error');
        return this.resetRecordingSessions(false);
    }
    handleRecordingSessionRecovery(canRecover, recData) {
        if (canRecover) {
            this.log.info('application can start in recovery mode.');
            return this.startInRecoveryMode(recData);
        }
        else {
            this.log.info('handling failed recovery flow.');
            return this.handleSessionsErroredRecoveryFlow(recData);
        }
    }
    tryToRecoverRecordingSession(recData) {
        this.log.info('tryToRecoverRecordingSession');
        this.recordingActions.actionInProgress = true;
        //todo add timeout and start app....
        //wait for relevant sessions to be ready
        return this.recoveryService.getRecoverySessionsReadyPromise()
            .then((ready) => {
            if (ready) {
                this.log.info('recovery sessions are ready for recover recording.');
                return this.recoveryService.canRecoverRecordingSession()
                    .then((canRecover) => {
                    return this.handleRecordingSessionRecovery(canRecover, recData);
                })
                    .catch((err) => {
                    this.log.error('Failed to recover recording: ' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(err));
                    return this.failedSessionsRecoveryFlow(err);
                });
            }
            else {
                this.log.info('application recovery service returned with a non-ready state, closing current recording.');
                return this.closeFailedRecoveredSession();
            }
        });
    }
    /**
     * handling error in devices recovery flow, different outcome for disconnected device or a failed initiation
     */
    handleSessionsErroredRecoveryFlow(recData) {
        this.log.info('handleSessionsErroredRecoveryFlow');
        if (this.isRecordDisconnected()) {
            this.log.debug('recovery flow failed due to a disconnected device.');
            this.notificationService.sendNotification("NOTIFICATIONS.warn_appLoadedAfterDisconnection", 'warn');
            return this.startInRecoveryMode(recData);
        }
        else {
            this.log.info('recovery flow failed due to a recovery failure.');
            return this.closeFailedRecoveredSession();
        }
    }
    isRecordEnabled() {
        return __WEBPACK_IMPORTED_MODULE_11_lodash__["keys"](this.appState.getActiveRecordableSessionsIds()).length > 0 && !this.isRecordDisconnected();
    }
    isRecordDisconnected() {
        return this.recoveryService.getRecoveryFailureReason() === this.recoveryService.getRecoveryDisconnectionState();
    }
    /**
     * Finalizing current recording.
     * pausing record id needed, closing files (using recoveryMP4 if needed), saving recording details to json
     * and notifying the user.
     */
    finalizeCurrentRecording() {
        this.log.info('finalizeCurrentRecording');
        this.log.info('Finalizing current recording.');
        return this.recordingDetailsService.saveRecordingDetailsJson()
            .then(([path, recJson]) => {
            this.log.info('RecordingManagerService: Json file for current capture recording was saved in: ' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(path));
            this.notificationService.sendNotification('NOTIFICATIONS.info_successfulRecording', 'info');
            this.entryService.entry = recJson;
            this.entryService.entry['jsonFilePath'] = path;
            return this.resetRecordingSessions(true);
        })
            .catch((err) => {
            return this.tryToRecoverAndCloseRecordingSessions()
                .then(() => {
                this.notificationService.sendNotification('NOTIFICATIONS.info_successfulRecording', 'info');
            })
                .catch(() => {
                this.log.error('RecordingManagerService: Failed to finalize current recording: ' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(err));
                return Promise.reject(err);
            });
        });
    }
    startInRecoveryMode(recData) {
        return this.recordingActions.startInRecoveryMode(recData)
            .catch((err) => {
            return this.shutDownAndReInitSessions()
                .catch(() => { })
                .then(() => {
                return Promise.reject(err);
            });
        });
    }
    /**
     * try to close recording using recover mp4 process,
     * being used if a regular recording finalization process failed of if app recovery process failed.
     */
    tryToRecoverAndCloseRecordingSessions() {
        this.log.info('tryToRecoverAndCloseRecordingSessions()');
        //close recording using off cycle api call
        return this.appState.areSessionsReadyForRecording('tryToRecoverAndCloseRecordingSessions()')
            .catch(() => {
            //we want to close failed recovery event if not all sessions were created successully
        })
            .then(() => {
            return this.appState.shutDownSessions(this.appState.SESSION_LOAD_WAIT_STATE.NEXT_TIME); //need to remove handles from recorded files in order to close them
        })
            .then(() => {
            return this.persistencyService.get('recording');
        })
            .then((recData) => {
            if (!__WEBPACK_IMPORTED_MODULE_11_lodash__["isEmpty"](recData) && !__WEBPACK_IMPORTED_MODULE_11_lodash__["isEmpty"](recData['details']) && !__WEBPACK_IMPORTED_MODULE_11_lodash__["isEmpty"](recData['details']['files'])) {
                return this.recordingActions.finalizeRecordingFileOffCycle(recData['details']['files']);
            }
            else {
                return Promise.reject('Failed to finalize recording using recoverMP4 since there are no files in recording details');
            }
        })
            .then(() => {
            return this.recordingDetailsService.saveRecordingDetailsJson();
        })
            .then(([path, recJson]) => {
            this.log.info('Recording Json file for previous recording was saved.');
            this.entryService.entry = recJson;
            this.entryService.entry['jsonFilePath'] = path;
            return this.resetRecordingSessions(true);
        })
            .catch((err) => {
            this.log.error('Failed to recover and close recording session. ' + __WEBPACK_IMPORTED_MODULE_10__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.notificationService.sendNotification('NOTIFICATIONS.error_saveRecording', 'error');
            return this.resetRecordingSessions(false);
        });
    }
    updateRecState(state) {
        this.log.info('update recording state to: ' + state);
        this.appState.updateAppState('rec-state', state);
    }
};
RecordingSessionActions = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_9__recording_timer_service__["a" /* RecordingTimerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__recording_timer_service__["a" /* RecordingTimerService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_8__recording_actions_service__["a" /* RecordingActionsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__recording_actions_service__["a" /* RecordingActionsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_recording_recording_recovery_service__["a" /* RecordingRecoveryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_recording_recording_recovery_service__["a" /* RecordingRecoveryService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_recording_recording_details_service__["a" /* RecordingDetailsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_recording_recording_details_service__["a" /* RecordingDetailsService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_12__route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__route_service__["a" /* RouteService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_14__shared_services_capture_device_audio_device_service__["a" /* AudioDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_14__shared_services_capture_device_audio_device_service__["a" /* AudioDeviceService */]) === "function" && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_13__management_services_entry_service__["a" /* EntryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_13__management_services_entry_service__["a" /* EntryService */]) === "function" && _m || Object, typeof (_o = typeof __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _o || Object, typeof (_p = typeof __WEBPACK_IMPORTED_MODULE_17__active_recording_components_palette_palette_service__["a" /* PaletteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_17__active_recording_components_palette_palette_service__["a" /* PaletteService */]) === "function" && _p || Object])
], RecordingSessionActions);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording-session-actions.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/services/recording-timer.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__ = __webpack_require__("../../../../rxjs/Observable.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingTimerService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let RecordingTimerService = class RecordingTimerService {
    constructor(persistencyService) {
        this.persistencyService = persistencyService;
        this.recordingTimerSub = null;
        this.recordingTimer = null;
        this.recordingTotalDuration = 0;
        this.recordingCurrentSessionDuration = 0;
        this.recordingTimer = __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"].timer(100, 1000);
    }
    getRecordingTime() {
        let recTime = this.recordingTotalDuration + this.recordingCurrentSessionDuration;
        return recTime;
    }
    resetRecordingTimers() {
        this.recordingTotalDuration = 0;
        this.recordingCurrentSessionDuration = 0;
    }
    startRecordingTimer() {
        let start = new Date().getTime();
        this.recordingTimerSub = this.recordingTimer.subscribe(t => {
            let now = new Date().getTime();
            this.recordingCurrentSessionDuration = (now - start) / 1000;
            this.updateRecordingTimePersistentData();
        });
    }
    pauseRecordingTimer() {
        if (this.recordingTimerSub) {
            this.recordingTimerSub.unsubscribe();
            this.recordingTimerSub = null;
        }
        this.recordingTotalDuration += this.recordingCurrentSessionDuration;
        this.recordingCurrentSessionDuration = 0;
    }
    stopRecordingTimer() {
        if (this.recordingTimerSub) {
            this.recordingTimerSub.unsubscribe();
            this.recordingTimerSub = null;
        }
        this.recordingCurrentSessionDuration = 0;
        this.recordingTotalDuration = 0;
        this.persistencyService.set('recording.recordingTime', 0);
    }
    //in case the app is being loaded in recovery mode (after crash in the middle of a recording session)
    setPrevRecordingTime(time) {
        this.recordingTotalDuration += time;
    }
    updateRecordingTimePersistentData() {
        this.persistencyService.set('recording.recordingTime', this.recordingTotalDuration + this.recordingCurrentSessionDuration);
    }
};
RecordingTimerService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _a || Object])
], RecordingTimerService);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording-timer.service.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/services/recording.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_recording_recording_details_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-details.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_capture_device_device_connection_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-connection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__recording_timer_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording-timer.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__recording_actions_service__ = __webpack_require__("../../../../../src/personal/shared/services/recording-actions.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__recording_session_actions__ = __webpack_require__("../../../../../src/personal/shared/services/recording-session-actions.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_system_health_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-health.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_device_resources_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-resources.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__shared_services_recording_slides_service__ = __webpack_require__("../../../../../src/shared/services/recording/slides.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__shared_services_capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__shared_services_infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__shared_services_recording_mouse_click_indication_service__ = __webpack_require__("../../../../../src/shared/services/recording/mouse-click-indication.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__shared_services_recording_recording_utils_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-utils.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






















let RecordingService = class RecordingService {
    constructor(log, appState, translate, routeService, recordingTimer, systemHealthService, notificationService, recordingDetailsService, deviceManagerService, recordingActionsService, recordingSessionActions, appConfig, mouseClickIndicationService, slideService, videoDeviceSettingsService, persistencyService, deviceResourcesService, //need to use this service for initialization
        recordingUtilsService) {
        this.log = log;
        this.appState = appState;
        this.translate = translate;
        this.routeService = routeService;
        this.recordingTimer = recordingTimer;
        this.systemHealthService = systemHealthService;
        this.notificationService = notificationService;
        this.recordingDetailsService = recordingDetailsService;
        this.deviceManagerService = deviceManagerService;
        this.recordingActionsService = recordingActionsService;
        this.recordingSessionActions = recordingSessionActions;
        this.appConfig = appConfig;
        this.mouseClickIndicationService = mouseClickIndicationService;
        this.slideService = slideService;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.persistencyService = persistencyService;
        this.deviceResourcesService = deviceResourcesService;
        this.recordingUtilsService = recordingUtilsService;
        this.ICON_NAMES = {
            RECORDING: 'recording',
            DEFAULT: 'default'
        };
        /**
         * device connection state notification subscription
         */
        this.deviceConnectionStateNotification = null;
        this.reordingConfigObj = null;
        this.reordingConfigObj = appConfig.getConfigData('config.captureApp.recording') || {};
    }
    initRecordingService(reload = false) {
        this.log.info('initRecordingService(' + reload + ')');
        //settings initial state to - loading (if app is not in recovery mode the state will be changed to - stable, else - will change to in_process)
        this.recordingActionsService.updateRecState(this.appState.REC_STATE.LOADING);
        let routeOut = false;
        return this.appState.areSessionsReadyForRecording('initRecordingService')
            .then(() => {
            return this.recordingDetailsService.isReady;
        })
            .then(() => {
            return this.recordingSessionActions.initRecordingSession();
        })
            .catch((err) => {
            this.log.error('Failed to load previous recording details. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.notificationService.sendNotification('NOTIFICATIONS.error_loadPrevRecDetails', 'warn');
            this.recordingActionsService.actionInProgress = false;
            this.recordingActionsService.updateRecState(this.appState.REC_STATE.STABLE);
            routeOut = true;
        })
            .then(() => {
            if (!reload) {
                this.addDeviceConnectionStateListeners();
            }
            //if recovery process failed we need to return to pre recording page
            if (routeOut)
                this.routeService.navigate('pre-recording');
        });
    }
    getRecordingTime() {
        return this.recordingTimer.getRecordingTime();
    }
    isRecordDisconnected() {
        return this.recordingSessionActions.isRecordDisconnected();
    }
    isRecordEnabled() {
        return this.recordingSessionActions.isRecordEnabled();
    }
    isRecording() {
        return this.appState.recordingPhase === 'recording';
    }
    isPaused() {
        return this.appState.recordingPhase === 'paused';
    }
    isProcessing() {
        return this.recordingActionsService.actionInProgress || this.recordingSessionActions.recordingIsLoading;
    }
    //return if recording was successfully started
    startRecording() {
        this.recordingSessionActions.recordingIsLoading = true;
        return this.recordingActionsService.callRecordingNextAction('start')
            .then((recFiles) => {
            this.recordingSessionActions.recordingIsLoading = false;
            if (recFiles) {
                this.setOverlayIcon(this.ICON_NAMES.RECORDING);
                return Promise.resolve(true);
            }
            else {
                return this.recordingSessionActions.shutDownAndReInitSessions()
                    .catch((err) => { this.log.error('recordingService: Failed re-init sessions during cancel recording. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err)); })
                    .then(() => {
                    return Promise.resolve(false);
                });
            }
        })
            .catch((err) => {
            //not changing overlay icon since current status wasn't changed
            this.handleRecordingActionRejection(err, 'NOTIFICATIONS.error_startRecording', 'error');
            return this.handleStartRecordingFailure(err);
        });
    }
    pauseRecording() {
        return this.recordingActionsService.callRecordingNextAction('pause')
            .then(() => {
            this.setOverlayIcon(this.ICON_NAMES.DEFAULT);
        })
            .catch((err) => {
            //not changing overlay icon since current status wasn't changed
            return this.handleShutDownAndReInit(err);
        });
    }
    stopRecording() {
        return this.finalizeCurrentRecording()
            .then(() => {
            this.setOverlayIcon(this.ICON_NAMES.DEFAULT);
        })
            .catch((err) => {
            //not changing overlay icon since current status wasn't changed
            this.handleRecordingActionRejection(err, 'NOTIFICATIONS.error_stopRecording', 'error');
            return this.handleShutDownAndReInit(err);
        });
    }
    resumeRecording() {
        this.recordingSessionActions.recordingIsLoading = true;
        return this.recordingActionsService.callRecordingNextAction('resume')
            .then(() => {
            this.setOverlayIcon(this.ICON_NAMES.RECORDING);
            this.recordingSessionActions.recordingIsLoading = false;
        })
            .catch((err) => {
            //not changing overlay icon since current status wasn't changed
            this.handleRecordingActionRejection(err, 'NOTIFICATIONS.error_pauseRecording', 'error');
            return this.handleResumeRecordingFailure(err);
        });
    }
    cancelRecording() {
        let filesToDelete = null;
        return this.recordingActionsService.callRecordingNextAction('cancel')
            .then((files) => {
            filesToDelete = files;
            this.setOverlayIcon(this.ICON_NAMES.DEFAULT);
            return this.recordingSessionActions.resetRecordingSessions(false);
        })
            .then(() => {
            this.recordingUtilsService.removeRecordedFiles(filesToDelete); //don't wait for files to be deleted and don't fail the process
            this.recordingActionsService.actionInProgress = false;
        })
            .catch((err) => {
            this.log.error('Failed to cancel recording. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.setOverlayIcon(this.ICON_NAMES.DEFAULT);
            this.recordingActionsService.actionInProgress = false;
            return this.recordingSessionActions.resetRecordingSessions(false)
                .catch(() => { })
                .then(() => {
                return Promise.reject(err);
            });
        });
    }
    handleRecordingActionRejection(err, notification, severity) {
        if (__WEBPACK_IMPORTED_MODULE_6_lodash__["isObject"](err) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](err.code) &&
            (err.code === 'ACTION_IN_PROGRESS' || err.code === 'STATE_TRANSITION_INVALID')) {
            this.log.warn('Recording action is in progress or Requested transition is invalid: ' + err.msg);
        }
        else if (__WEBPACK_IMPORTED_MODULE_6_lodash__["isObject"](err) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](err[0]) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](err[0].code) && !this.inEngineErrorsBlackList(err[0].code)) {
            this.notificationService.sendNotification('NOTIFICATIONS.' + err[0].code, severity);
        }
        else {
            this.notificationService.sendNotification(notification, severity);
        }
    }
    finalizeCurrentRecording() {
        this.log.info('finalizeCurrentRecording');
        if (this.appState.recordingPhase !== 'initial') {
            return this.pauseRecording() //will return a resolved promise if rec already paused
                .then(() => {
                return this.getFinishedRecordingClosePromise();
            })
                .then(() => {
                return this.recordingSessionActions.finalizeCurrentRecording();
            });
        }
        else {
            this.log.warn('A request for closing a recording was ignored since application is not recording.');
            return Promise.resolve('INITIAL_STATE');
        }
    }
    //returns the relevant close record promise - 'stopRecord' or 'recoverMp4' when disconnected
    getFinishedRecordingClosePromise() {
        if (!this.isRecordDisconnected()) {
            this.log.info('stopping finished recording - stopRecord');
            this.appState.recordingPhase = 'readyToStop';
            return this.recordingActionsService.callRecordingNextAction('stop');
        }
        else {
            if (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](this.recordingDetailsService.getRecordingDetails()['files'])) {
                this.log.info('stopping finished recording - finalizeRecordingFileOffCycle');
                return this.appState.shutDownSessions(this.appState.SESSION_LOAD_WAIT_STATE.NEXT_TIME)
                    .then(() => {
                    this.mouseClickIndicationService.stopMouseClickIndication();
                    return this.recordingActionsService.finalizeRecordingFileOffCycle(this.recordingDetailsService.getRecordingDetails()['files']);
                });
            }
            else {
                this.log.error('Filed to stop finished recording in disconnection state. recording details files property is empty');
                return Promise.reject('Filed to stop finished recording in disconnection state.');
            }
        }
    }
    inEngineErrorsBlackList(errCode) {
        if (errCode === 'EngineError_UnspecifiedError') {
            return true;
        }
        return false;
    }
    handleShutDownAndReInit(err) {
        //reloading sessions and recording state
        return this.recordingSessionActions.shutDownAndReInitSessions()
            .catch(() => { })
            .then(() => {
            this.setOverlayIcon(this.ICON_NAMES.DEFAULT);
            return Promise.reject(err);
        });
    }
    handleStartRecordingFailure(err) {
        if (__WEBPACK_IMPORTED_MODULE_6_lodash__["isObject"](err) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](err) && err['type'] === this.systemHealthService.SYS_HEALTH_ERROR && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](err['message'])) {
            this.log.error('Failed to start recording due to system health. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.recordingSessionActions.updateRecState(this.appState.REC_STATE.STABLE);
            return this.handleSysHealthRecordingFailure(err);
        }
        else {
            this.log.error('Error while starting new recording.' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            return this.recordingSessionActions.resetRecordingSessions(false)
                .catch(() => { })
                .then(() => {
                return Promise.reject(err);
            });
        }
    }
    handleResumeRecordingFailure(err) {
        this.recordingActionsService.actionInProgress = false;
        if (__WEBPACK_IMPORTED_MODULE_6_lodash__["isObject"](err) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](err) && err['type'] === this.systemHealthService.SYS_HEALTH_ERROR && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](err['message'])) {
            this.log.error('Failed to resume recording due to system health. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            return this.handleSysHealthRecordingFailure(err);
        }
        else {
            this.log.error('Error while resuming recording. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
            //reloading sessions and recording state
            this.recordingSessionActions.recordingIsLoading = false;
            return this.handleShutDownAndReInit(err);
        }
    }
    handleSysHealthRecordingFailure(err) {
        this.notificationService.sendNotification(err.message, 'error');
        this.recordingSessionActions.recordingIsLoading = false;
        this.recordingActionsService.actionInProgress = false;
        return false; //not rejecting the call to avoid misleading error messages
    }
    setOverlayIcon(currentIcon) {
        this.translate.get("NOTIFICATIONS.pc_" + currentIcon).subscribe((localeText) => {
            __WEBPACK_IMPORTED_MODULE_12__utils_ipcWrapper__["a" /* ipcWrapper */].sendSystemCommand('changeTaskBarIcon', currentIcon, localeText);
        });
    }
    /**
     * connection / disconnection handling
     */
    addDeviceConnectionStateListeners() {
        this.deviceConnectionStateNotification =
            this.deviceManagerService.deviceConnectionState$.subscribe(event => {
                this.log.info('RecordingService: on device connection state change: ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(event));
                if (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](event) && event['inUse']) {
                    this.log.info('RecordingService: handling inUse device connection state change');
                    this.appState.areSessionsReadyForRecording('on-device-status-change')
                        .catch(() => {
                        //we want to listen to on-device-status-change notification all the time
                    })
                        .then(() => {
                        //make sure to init actionInProgress flag
                        this.recordingActionsService.actionInProgress = false;
                        this.log.info('RecordingService: handling on-device-status-change notification for in-use device. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(event));
                        //display power change
                        if ((event['state'] !== 'disconnected' && event['state'] !== 'connected') && this.isScreenDisconnectionEvent(event)) {
                            this.handleDisplayPowerChange(event);
                        }
                        else {
                            this.handleDeviceConnectionStateChange(event);
                        }
                    });
                }
                else if (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](event) && !event['inUse']) {
                    this.log.info('RecordingService: handling not inUse device connection state change');
                    this.handleNotUsedDeviceConnectionChange(event);
                }
            });
    }
    handleDeviceConnectionStateChange(event) {
        this.log.info('recordingService: deviceConnectionState - change: ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(event));
        //if app is not in recording state
        if (!this.appState.isAppRecording()) {
            this.log.info('recordingService: deviceConnectionState - app is not recording at the moment, shutting down and re-init sessions');
            this.recordingSessionActions.shutDownAndReInitSessions().catch((err) => { this.log.error('recordingService: Failed re-init sessions during disconnection flow. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err)); });
        }
        else {
            this.log.info('recordingService: deviceConnectionState - app is in recording at the moment, pause, shut down and re-init sessions');
            this.deviceConnectionChangeDuringRecording().catch((err) => { this.log.error('recordingService: Failed re-init sessions during disconnection flow. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err)); });
        }
    }
    handleNotUsedDeviceConnectionChange(event) {
        //if we are not recording and a not in use device was dis / reconnected refresh app to load the prev. / new device
        if (!this.appState.isAppRecording()) {
            this.recordingSessionActions.shutDownAndReInitSessions().catch((err) => { this.log.error('Failed re-init sessions during disconnection flow. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err)); });
        }
        else {
            //no more handling related to disconnected device
            this.appState.setConnectionStateChangeLock('recordingService: handleNotUsedDeviceConnectionChange', false);
        }
    }
    deviceConnectionChangeDuringRecording() {
        //pause and clear all selection area squares if exists
        return Promise.all([this.pauseRecording(), __WEBPACK_IMPORTED_MODULE_12__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('hide-selection-square', 'ALL')])
            .catch((err) => {
            this.log.error('Failed to pause recording after device disconnection: ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
        })
            .then(() => {
            return this.reInitAfterConnectionChange();
        });
    }
    handleDisplayPowerChange(event) {
        this.log.info('display power change event.' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(event));
        if (event['event'] === 'sleep') {
            return this.displayPowerChange_sleepMode(event);
        }
        else {
            //no more handling related to disconnected device
            this.appState.setConnectionStateChangeLock('recordingService: handleDisplayPowerChange', false);
            return this.pauseRecording();
        }
    }
    displayPowerChange_sleepMode(event) {
        //returning from sleep mode
        if (!event['state'] || event['state'] === 'false') {
            this.log.info('displayPowerChange_sleepMode send relaunch');
            return __WEBPACK_IMPORTED_MODULE_12__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('relaunch');
        }
        else {
            //no more handling related to disconnected device
            this.appState.setConnectionStateChangeLock('recordingService: handleDisplayPowerChange', false);
            this.recordingTimer.pauseRecordingTimer();
            return this.appState.shutDownSessions(this.appState.SESSION_LOAD_WAIT_STATE.NEVER);
        }
    }
    reInitAfterConnectionChange() {
        this.log.info('reInitAfterConnectionChange');
        return this.recordingSessionActions.shutDownAndReInitSessions()
            .then(() => {
            this.log.info('successfully sent sessions re-init');
            this.recordingTimer.resetRecordingTimers();
            this.initRecordingService(true);
        });
    }
    isScreenDisconnectionEvent(event) {
        return (event['deviceId'].toLowerCase().includes('display') ||
            event['deviceId'].toLowerCase().includes('screen'));
    }
};
RecordingService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_13_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_13_ng2_translate__["b" /* TranslateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_14__route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_14__route_service__["a" /* RouteService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_8__recording_timer_service__["a" /* RecordingTimerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__recording_timer_service__["a" /* RecordingTimerService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_system_health_service__["a" /* SystemHealthService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__shared_services_infra_system_health_service__["a" /* SystemHealthService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_recording_recording_details_service__["a" /* RecordingDetailsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_recording_recording_details_service__["a" /* RecordingDetailsService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_capture_device_device_connection_service__["a" /* DeviceConnectionService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_9__recording_actions_service__["a" /* RecordingActionsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__recording_actions_service__["a" /* RecordingActionsService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_10__recording_session_actions__["a" /* RecordingSessionActions */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__recording_session_actions__["a" /* RecordingSessionActions */]) === "function" && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_16__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_16__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _m || Object, typeof (_o = typeof __WEBPACK_IMPORTED_MODULE_20__shared_services_recording_mouse_click_indication_service__["a" /* MouseClickIndicationService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_20__shared_services_recording_mouse_click_indication_service__["a" /* MouseClickIndicationService */]) === "function" && _o || Object, typeof (_p = typeof __WEBPACK_IMPORTED_MODULE_17__shared_services_recording_slides_service__["a" /* SlideService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_17__shared_services_recording_slides_service__["a" /* SlideService */]) === "function" && _p || Object, typeof (_q = typeof __WEBPACK_IMPORTED_MODULE_18__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_18__shared_services_capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _q || Object, typeof (_r = typeof __WEBPACK_IMPORTED_MODULE_19__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_19__shared_services_infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _r || Object, typeof (_s = typeof __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_device_resources_service__["a" /* DeviceResourcesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_15__shared_services_capture_device_device_resources_service__["a" /* DeviceResourcesService */]) === "function" && _s || Object, typeof (_t = typeof __WEBPACK_IMPORTED_MODULE_21__shared_services_recording_recording_utils_service__["a" /* RecordingUtilsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_21__shared_services_recording_recording_utils_service__["a" /* RecordingUtilsService */]) === "function" && _t || Object])
], RecordingService);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording.service.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/services/route.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__("../../../router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_consts__ = __webpack_require__("../../../../../src/personal/app.consts.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_capture_device_device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_resources_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-resources.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RouteService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










let RouteService = class RouteService {
    constructor(router, zone, appState, resourcesService, devicePreviewService, log, appConfig) {
        this.router = router;
        this.zone = zone;
        this.appState = appState;
        this.resourcesService = resourcesService;
        this.devicePreviewService = devicePreviewService;
        this.log = log;
        this.appConfig = appConfig;
        this.isInTransition = false;
    }
    navigateToSomeManagementScreens(absolutePath = 'management', params) {
        this.log.info('navigateToSomeManagementScreens');
        const size = { width: __WEBPACK_IMPORTED_MODULE_3__app_consts__["a" /* AppConsts */].MANAGEMENT_WIN_WIDTH, height: __WEBPACK_IMPORTED_MODULE_3__app_consts__["a" /* AppConsts */].MANAGEMENT_WIN_HEIGHT };
        params.changeTheAppPosition = params.changeTheAppPosition === undefined ? true : params.changeTheAppPosition;
        return new Promise((resolve) => {
            let originalWindowBounds = {};
            this.areSessionsReady()
                .then(() => {
                this.resourcesService.freeCaptureResources(true)
                    .catch(() => { }) //do nothing
                    .then(() => {
                    // needed to wait for next cycle that angular will hide the current screen that we are navigating from.
                    setTimeout(() => {
                        this.devicePreviewService.hideAll()
                            .then(() => {
                            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("getWindowsBounds");
                        })
                            .then((winBounds) => {
                            originalWindowBounds = winBounds;
                            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowSize", size);
                        })
                            .then(() => {
                            return Promise.all([
                                params.changeTheAppPosition ? __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowPosition", { text: 'center', bounds: originalWindowBounds }) : Promise.resolve(true),
                                this.router.navigate([absolutePath])
                            ]);
                        })
                            .then(() => {
                            resolve();
                        });
                    }, 1);
                });
            });
        });
    }
    navigateToAreaSelection() {
        return new Promise((resolve) => {
            // needed to wait for next cycle that angular will hide the current screen that we are navigating from.
            setTimeout(() => {
                this.devicePreviewService.hideAll()
                    .then(() => {
                    return this.router.navigate(['/area-selection']);
                })
                    .then(() => {
                    resolve();
                });
            }, 1);
        });
    }
    navigateToPreRecording(params) {
        this.log.info('navigateToPreRecording');
        let originalWindowBounds = {};
        return this.router.navigate(['/pre-recording', params])
            .then((routeSucceeded) => {
            if (routeSucceeded !== false) {
                this.isInTransition = true;
                return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("getWindowsBounds")
                    .then((winBounds) => {
                    originalWindowBounds = winBounds;
                    return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowSize", { height: __WEBPACK_IMPORTED_MODULE_3__app_consts__["a" /* AppConsts */].VIDEO_PREVIEW_HEIGHT + __WEBPACK_IMPORTED_MODULE_3__app_consts__["a" /* AppConsts */].DEFAULT_WIN_HEIGHT });
                });
            }
            else {
                return Promise.reject('Route had been cancelled');
            }
        })
            .then(() => {
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowPosition", { text: 'center', bounds: originalWindowBounds });
        })
            .then(() => {
            setTimeout(() => {
                return this.areSessionsReady()
                    .then(() => {
                    return this.resourcesService.getCaptureResources();
                })
                    .catch(() => { }); //do nothing
            });
        });
    }
    navigateToActiveRecording() {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowSize", { height: __WEBPACK_IMPORTED_MODULE_3__app_consts__["a" /* AppConsts */].ACTIVE_RECORDING_HEIGHT, width: __WEBPACK_IMPORTED_MODULE_3__app_consts__["a" /* AppConsts */].ACTIVE_RECORDING_WIDTH })
            .then(() => {
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setWindowPosition", { text: 'bottom-right' });
        })
            .then(() => {
            return this.router.navigate(['/active-recording']);
        });
    }
    setOnTop(isOnTop) {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setOnTop", isOnTop);
    }
    setResizable(isResizable) {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setResizable", isResizable);
    }
    navigate(fullRoute, params = {}) {
        let onNavEndPromise;
        let isOnTop = false;
        let isResizable = false;
        // match all inside route of management (like: management\entry)
        const halfPathMatch = fullRoute.includes('management') ? 'management' : fullRoute;
        switch (halfPathMatch) {
            case 'management':
                this.isInTransition = true;
                onNavEndPromise = this.navigateToSomeManagementScreens(fullRoute, params);
                break;
            case 'active-recording':
            case '/active-recording':
                this.isInTransition = true;
                onNavEndPromise = this.navigateToActiveRecording();
                isOnTop = true;
                break;
            case 'area-selection':
                this.zone.run(() => this.isInTransition = true);
                onNavEndPromise = this.navigateToAreaSelection();
                isResizable = true;
                isOnTop = true;
                break;
            case 'pre-recording':
            case '/pre-recording':
            case '':
            default:
                onNavEndPromise = this.navigateToPreRecording(params);
        }
        return Promise.all([onNavEndPromise, this.setOnTop(isOnTop), this.setResizable(isResizable)])
            .catch(err => {
        })
            .then(() => {
            this.zone.run(() => this.isInTransition = false);
        });
    }
    getCurrentRoute() {
        return this.router.url;
    }
    areSessionsReady() {
        return __WEBPACK_IMPORTED_MODULE_8_lodash__["keys"](this.appState.getActiveSessions()).length > 0 ? this.appState.sessionsAreReadyPromise : Promise.resolve();
    }
    refreshPage() {
        let currentUrl = this.router.url;
        if (currentUrl.includes('management')) {
            return this.navigate(currentUrl, { changeTheAppPosition: false });
        }
        else {
            this.rePaint();
        }
        setTimeout(() => {
            __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('repaintBrowserWin');
        }, 1000);
    }
    rePaint() {
        this.zone.run(() => this.isInTransition = true);
        setTimeout(() => {
            this.zone.run(() => this.isInTransition = false);
        }, 500);
    }
    /**
     * when set to true, the app is not visible.
     */
    startTransitioning() {
        this.isInTransition = true;
    }
    endTransitioning() {
        this.isInTransition = false;
    }
};
RouteService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__angular_router__["Router"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__angular_router__["Router"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_resources_service__["a" /* DeviceResourcesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_capture_device_device_resources_service__["a" /* DeviceResourcesService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_capture_device_device_preview_service__["a" /* DevicePreviewService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _g || Object])
], RouteService);

var _a, _b, _c, _d, _e, _f, _g;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/route.service.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/services/scale-adaptation.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__personal_shared_services_route_service__ = __webpack_require__("../../../../../src/personal/shared/services/route.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ScaleAdaptationService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let ScaleAdaptationService = class ScaleAdaptationService {
    constructor(routeService, logger) {
        this.routeService = routeService;
        this.logger = logger;
        this.resizeTimeout = null;
        this.onTheMove = false;
        this.fromScreen = null;
        // If scale is changed, reload component.
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-display-metrics-changed', (scale) => {
            this.routeService.refreshPage();
        });
        this.registerToWindowMove();
    }
    /**
     * When win enter to another screen -> Refresh the current component to handle different scale and size...
     */
    registerToWindowMove() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-window-move', () => {
            clearTimeout(this.resizeTimeout);
            if (!this.onTheMove) {
                this.onTheMove = true;
                __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getCurrentScreen')
                    .then(currentScreen => {
                    this.fromScreen = currentScreen;
                });
            }
            else {
                this.resizeTimeout = setTimeout(() => {
                    this.onTheMove = false;
                    __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getCurrentScreen')
                        .then(currentScreen => {
                        if (currentScreen && this.fromScreen && currentScreen['id'] !== this.fromScreen.id) {
                            this.logger.info('ScaleAdaptationService: registerToWindowMove: App was moved to different Screen - Refreshing component');
                            this.routeService.refreshPage();
                        }
                    })
                        .catch(err => {
                        this.logger.error('ScaleAdaptationService: registerToWindowMove: Failed refreshPage' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
                    })
                        .then(() => {
                        this.routeService.endTransitioning();
                    });
                }, 400);
            }
        });
    }
};
ScaleAdaptationService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__personal_shared_services_route_service__["a" /* RouteService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__personal_shared_services_route_service__["a" /* RouteService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object])
], ScaleAdaptationService);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/scale-adaptation.service.js.map

/***/ }),

/***/ "../../../../../src/personal/shared/services/upload-status-notifications.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UploadStatusNotificationsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let UploadStatusNotificationsService = class UploadStatusNotificationsService {
    constructor(log, appState, appNotification) {
        this.log = log;
        this.appState = appState;
        this.appNotification = appNotification;
        this.notificationsQueue = [];
        this.init();
    }
    init() {
        this.registerUploadStatusEvents();
        this.registerRecordingPhaseChanges();
    }
    registerUploadStatusEvents() {
        //if app is not recording - display upload notification
        //else queue this notification and display when possible
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('upload-status-notification', (notification) => {
            if (this.appState.recordingPhase === 'recording') {
                this.notificationsQueue.push(notification);
            }
            else {
                this.appNotification.sendNotification(notification.message, notification.severity, notification.url);
            }
        });
    }
    registerRecordingPhaseChanges() {
        this.appState.recordingPhaseUpdate$.subscribe((recPhase) => {
            if (recPhase !== 'recording') {
                this.displayQueuedNotifications();
            }
        });
    }
    displayQueuedNotifications() {
        while (this.notificationsQueue.length && this.appState.recordingPhase !== 'recording') {
            let notification = this.notificationsQueue.shift();
            this.appNotification.sendNotification(notification.message, notification.severity, notification.url);
        }
    }
};
UploadStatusNotificationsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__shared_services_infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _c || Object])
], UploadStatusNotificationsService);

var _a, _b, _c;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/upload-status-notifications.service.js.map

/***/ }),

/***/ "../../../../../src/polyfills.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_core_js_es6_symbol__ = __webpack_require__("../../../../core-js/es6/symbol.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_core_js_es6_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_core_js_es6_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_core_js_es6_object__ = __webpack_require__("../../../../core-js/es6/object.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_core_js_es6_object___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_core_js_es6_object__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_core_js_es6_function__ = __webpack_require__("../../../../core-js/es6/function.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_core_js_es6_function___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core_js_es6_function__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_core_js_es6_parse_int__ = __webpack_require__("../../../../core-js/es6/parse-int.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_core_js_es6_parse_int___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_core_js_es6_parse_int__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_core_js_es6_parse_float__ = __webpack_require__("../../../../core-js/es6/parse-float.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_core_js_es6_parse_float___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_core_js_es6_parse_float__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_core_js_es6_number__ = __webpack_require__("../../../../core-js/es6/number.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_core_js_es6_number___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_core_js_es6_number__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_core_js_es6_math__ = __webpack_require__("../../../../core-js/es6/math.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_core_js_es6_math___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_core_js_es6_math__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_core_js_es6_string__ = __webpack_require__("../../../../core-js/es6/string.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_core_js_es6_string___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_core_js_es6_string__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_core_js_es6_date__ = __webpack_require__("../../../../core-js/es6/date.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_core_js_es6_date___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_core_js_es6_date__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_core_js_es6_array__ = __webpack_require__("../../../../core-js/es6/array.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_core_js_es6_array___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_core_js_es6_array__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_core_js_es6_regexp__ = __webpack_require__("../../../../core-js/es6/regexp.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_core_js_es6_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_core_js_es6_regexp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_core_js_es6_map__ = __webpack_require__("../../../../core-js/es6/map.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_core_js_es6_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_core_js_es6_map__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_core_js_es6_set__ = __webpack_require__("../../../../core-js/es6/set.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_core_js_es6_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_core_js_es6_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_core_js_es6_reflect__ = __webpack_require__("../../../../core-js/es6/reflect.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_core_js_es6_reflect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_core_js_es6_reflect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_core_js_es7_reflect__ = __webpack_require__("../../../../core-js/es7/reflect.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_core_js_es7_reflect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_core_js_es7_reflect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_zone_js_dist_zone__ = __webpack_require__("../../../../zone.js/dist/zone.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_zone_js_dist_zone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_zone_js_dist_zone__);
// This file includes polyfills needed by Angular 2 and is loaded before
// the app. You can add your own extra polyfills to this file.
















//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/polyfills.js.map

/***/ }),

/***/ "../../../../../src/shared/components/accessibility-info/accessibility-info.component.html":
/***/ (function(module, exports) {

module.exports = "<div [attr.aria-live]=\"assertive\" aria-atomic=\"true\" id=\"accessibility-alerts-parent\" class=\"acceptability-description\">\n<!-- dynamic element will be created on each accessibility alert message -->\n</div>\n"

/***/ }),

/***/ "../../../../../src/shared/components/accessibility-info/accessibility-info.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".acceptability-description {\n  height: 0;\n  width: 0;\n  margin: 0; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/shared/components/accessibility-info/accessibility-info.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccessibilityInfoComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let AccessibilityInfoComponent = class AccessibilityInfoComponent {
    constructor(accessService, appState, element, renderer) {
        this.accessService = accessService;
        this.appState = appState;
        this.element = element;
        this.renderer = renderer;
        this.alertsSub = null;
        this.alerts = [];
        this.inProgress = false;
    }
    ngOnInit() {
        this.subscribeToAccessAlerts();
        this.appState.notifyDeviceComponentInit$.subscribe(() => {
            this.unSubscribeToAccessAlerts();
            this.subscribeToAccessAlerts();
        });
    }
    subscribeToAccessAlerts() {
        this.appState.sessionsAreReadyPromise
            .then(() => {
            this.alertsSub =
                this.accessService.accessibilityAlert$.subscribe((alert) => {
                    this.alerts.push(alert);
                    this.createAccessElement();
                });
        });
    }
    unSubscribeToAccessAlerts() {
        if (this.alertsSub)
            this.alertsSub.unsubscribe();
        this.alerts = [];
    }
    createAccessElement() {
        if (!this.inProgress && this.alerts.length > 0) {
            this.inProgress = true;
            let alert = this.alerts.shift();
            if (this.element.nativeElement.querySelector('#accessibilityInfoId')) {
                this.element.nativeElement.querySelector('#accessibility-alerts-parent')
                    .removeChild(this.element.nativeElement.querySelector('#accessibilityInfoId'));
            }
            setTimeout(() => {
                let child = this.renderer.createElement('p');
                this.renderer.setAttribute(child, 'id', 'accessibilityInfoId');
                this.renderer.setAttribute(child, 'class', 'acceptability-description');
                this.renderer.setAttribute(child, 'role', 'alert');
                this.renderer.setAttribute(child, 'aria-live', 'assertive');
                this.renderer.setAttribute(child, 'aria-atomic', 'true');
                this.renderer.setAttribute(child, 'aria-label', alert.alert);
                this.renderer.appendChild(this.element.nativeElement.querySelector('#accessibility-alerts-parent'), child);
                this.releaseAlert(alert.duration);
            });
        }
    }
    releaseAlert(duration) {
        let timeout = duration === 'short' ? 3000 : 5000;
        setTimeout(() => {
            this.inProgress = false;
            this.createAccessElement();
        }, timeout);
    }
    ngOnDestroy() {
        this.unSubscribeToAccessAlerts();
    }
};
AccessibilityInfoComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'accessibility-info',
        template: __webpack_require__("../../../../../src/shared/components/accessibility-info/accessibility-info.component.html"),
        styles: [__webpack_require__("../../../../../src/shared/components/accessibility-info/accessibility-info.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer2"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer2"]) === "function" && _d || Object])
], AccessibilityInfoComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/accessibility-info.component.js.map

/***/ }),

/***/ "../../../../../src/shared/components/app-container/app-container.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\">\n\n  <div class=\"app-main-grid\">\n\n    <div class=\"col-12 header-col\">\n\n      <div class=\"app-header\">\n\n        <div class=\"kaltura-logo\">\n          <div [ngClass]=\"containerProperties.header.logoIcon\"></div>\n        </div>\n\n        <!-- extendedButtons -->\n        <button *ngFor=\"let button of containerProperties.header.extendedButtons\"\n          (click)=\"button.onClick()\" [ngClass]=\"[button.class]\"\n                [attr.aria-label]=\"getExtendedButtonsAriaLabel(button) | translate\">{{ button.title | translate }}</button>\n\n        <!-- app-sizing-buttons -->\n        <div class=\"app-sizing-buttons\">\n          <button\n            *ngIf=\"containerProperties.header.buttons.includes('minimize_to_tray')\"\n            [attr.aria-label]=\"'MENU.minimize_to_tray_button' | translate\"\n            class=\"taskbar-button minimize-to-tray-button\"\n            (click)=\"onMinimizeToTrayClick()\"></button>\n\n          <button\n            *ngIf=\"containerProperties.header.buttons.includes('maximize')\"\n            [attr.aria-label]=\"'MENU.maximize_button' | translate\"\n            class=\"taskbar-button maximize-restore-button\"\n            (click)=\"onMaximizeRestore()\"></button>\n\n          <button\n            *ngIf=\"containerProperties.header.buttons.includes('minimize')\"\n            [attr.aria-label]=\"'MENU.minimize_button' | translate\"\n            class=\"taskbar-button minimize-button\"\n            (click)=\"onMinimizeClick()\"></button>\n\n          <button\n            *ngIf=\"containerProperties.header.buttons.includes('debug')\"\n            [attr.aria-label]=\"'MENU.debug_button' | translate\"\n            class=\"taskbar-button\"\n            aria-hidden=\"true\"\n            [hidden]=\"!debugState\">D</button>\n        </div>\n\n      </div>\n\n    </div>\n\n    <div class=\"nav-bar-col\">\n\n      <div class=\"app-nav-bar\">\n        <ul class=\"app-menu\">\n\n          <li *ngFor=\"let link of containerProperties.navbar.links\" [ngClass]=\"link.linkContainer\"\n              [hidden]=\"!shouldRender(link.shouldRender)\">\n            <div class=\"nav-container-position\">\n              <a [ngClass]=\"['nav-tab-item', link.linkClass]\"\n                 role=\"button\"\n                 tabindex=\"0\"\n                 [attr.aria-label]=\"getLinksAriaLabel(link) | translate\"\n                 (click)=\"navigateToLink(link.routerLink, link.shouldDisableWhenNotStable)\"\n                 routerLinkActive=\"active\"\n                 oncontextmenu=\"return false;\"\n                 [class.disabled]=\"(link.shouldDisableWhenNotStable === true && isMenuDisabled()) ? true : null\"></a>\n              <span class=\"location-dot\" *ngIf=\"router.url === link.routerLink\"></span>\n            </div>\n          </li>\n\n        </ul>\n      </div>\n\n    </div>\n\n    <div class=\"app-inner-container-col\">\n      <div class=\"app-inner-container\">\n        <div [ngClass]=\"{ 'back-light': containerProperties.showBackLight }\"></div>\n        <!-- routing here -->\n        <router-outlet></router-outlet>\n      </div>\n    </div>\n\n  </div>\n\n</div>\n"

/***/ }),

/***/ "../../../../../src/shared/components/app-container/app-container.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".main-container {\n  position: relative;\n  height: 100vh;\n  background-color: #24212a;\n  opacity: 0.98; }\n\n.app-main-grid {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-flow: row wrap;\n      flex-flow: row wrap;\n  box-sizing: border-box;\n  height: 100%;\n  -webkit-app-region: no-drag;\n  padding: 1px; }\n\n.header-col {\n  padding: 0; }\n\n.app-header {\n  -webkit-app-region: drag;\n  background-color: rgba(153, 153, 153, 0.03);\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05);\n  height: 80px; }\n\n.kaltura-logo {\n  padding-left: 2.1%;\n  padding-top: 24px; }\n\n.logo-icon {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/logo.svg")) + ") no-repeat top left;\n  width: 188px;\n  height: 28px;\n  object-fit: contain; }\n\n.logo-pc-full {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/logo-pc-full.svg")) + ") no-repeat top left;\n  width: 188px;\n  height: 28px;\n  object-fit: contain; }\n\n.app-sizing-buttons {\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 9999999999; }\n\n.taskbar-button {\n  -webkit-app-region: no-drag;\n  display: block;\n  border: none;\n  height: 20px;\n  width: 20px;\n  background-size: 20px 20px;\n  opacity: 0.5;\n  margin-right: 8px;\n  margin-top: 8px;\n  float: right; }\n\n.taskbar-button:hover, .taskbar-button:active {\n  outline: none;\n  opacity: 1; }\n\n.taskbar-button:focus {\n  outline: none;\n  opacity: 1; }\n\n.minimize-button {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/minimize.svg")) + ") no-repeat top left; }\n\n.maximize-restore-button {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/resize-app.svg")) + ") no-repeat top left; }\n\n.minimize-to-tray-button {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/exit.svg")) + ") no-repeat top left; }\n\n/* --- Nav Bar ---*/\n.app-nav-bar {\n  width: 64px;\n  position: absolute;\n  height: calc(100% - 82px); }\n\n.nav-bar-col {\n  width: 64px;\n  min-width: 64px;\n  max-width: 64px !important;\n  height: calc(100% - 80px);\n  margin: 0;\n  padding: 0;\n  box-shadow: 1px 2px 0 0 rgba(255, 255, 255, 0.06); }\n\n.home-nav {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/home-icon.svg")) + ") no-repeat top left; }\n\n.library {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/library.svg")) + ") no-repeat top left; }\n\n.info-nav {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/info.svg")) + ") no-repeat top left; }\n\n.calendar-nav {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/calendar.svg")) + ") no-repeat top left; }\n\n.settings-nav {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/20/settings.svg")) + ") no-repeat top left; }\n\n.nav-tab-item {\n  display: block;\n  text-decoration: none;\n  height: 20px;\n  width: 20px;\n  text-indent: -9999px;\n  background-size: 20px 20px;\n  opacity: 0.7;\n  margin: auto;\n  cursor: pointer; }\n\n.nav-tab-item:hover {\n  opacity: 1; }\n\n.nav-tab-item.disabled {\n  pointer-events: none;\n  cursor: default; }\n\n.nav-tab-item:focus {\n  opacity: 1;\n  outline: none; }\n\n.location-dot {\n  height: 4px;\n  width: 4px;\n  display: block;\n  color: white;\n  border-radius: 50%;\n  background-color: white;\n  opacity: 0.5;\n  margin: 4px auto 0 auto; }\n\n/*--- Inner Conatiner - for App Route ---*/\n.app-inner-container-col {\n  width: calc(100% - 66px);\n  height: calc(100% - 80px);\n  padding: 0 0 0 1px; }\n\n.app-menu {\n  padding: 46px 0 0;\n  margin-top: 0; }\n\n.app-menu > li {\n  list-style: none;\n  height: 56px; }\n  .app-menu > li.nav-tab-item-bottom {\n    position: absolute;\n    bottom: 6px;\n    height: 40px;\n    width: 64px; }\n\n.back-light {\n  width: calc(100% - 100px);\n  height: calc(138%);\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/back-light.svg")) + ") no-repeat top left;\n  z-index: -5000;\n  margin: 0;\n  position: absolute;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%, -50%); }\n\n.app-inner-container {\n  height: 100%;\n  position: relative;\n  background-color: #24212a;\n  opacity: 0.98; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/shared/components/app-container/app-container.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_router__ = __webpack_require__("../../../router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__services_infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__services_infra_panels_service__ = __webpack_require__("../../../../../src/shared/services/infra/panels.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppContainerComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








let AppContainerComponent = class AppContainerComponent {
    constructor(translate, log, appState, panelsService, router) {
        this.log = log;
        this.appState = appState;
        this.panelsService = panelsService;
        this.router = router;
        this.debugState = false;
        this.debug_mode_UUID = '';
    }
    ngOnInit() {
        this.debug_mode_UUID = __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('debug_mode', (data) => {
            this.debugState = data;
        });
    }
    ngOnDestroy() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('debug_mode', this.debug_mode_UUID);
    }
    onMinimizeToTrayClick() {
        return __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendSystemCommand('closeApp'); // go to tray
    }
    onMinimizeClick() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendSystemCommand('minimize');
    }
    onMaximizeRestore() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendSystemCommand('maximize-restore');
    }
    isMenuDisabled() {
        return !this.appState.isAppStable();
    }
    shouldRender(value = true) {
        return (typeof value === 'boolean') ? value : value();
    }
    getLinksAriaLabel(link) {
        return link.ariaLabel ? link.ariaLabel : link.label;
    }
    getExtendedButtonsAriaLabel(button) {
        return button.ariaLabel ? button.ariaLabel : button.title;
    }
    navigateToLink(link, disableIfUnstable) {
        if (disableIfUnstable && this.isMenuDisabled()) {
            return;
        }
        this.router.navigateByUrl(link)
            .catch((err) => {
            this.log.error('Failed to navigate to: ' + link + '. ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], AppContainerComponent.prototype, "containerProperties", void 0);
AppContainerComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-container',
        template: __webpack_require__("../../../../../src/shared/components/app-container/app-container.component.html"),
        styles: [__webpack_require__("../../../../../src/shared/components/app-container/app-container.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_ng2_translate__["b" /* TranslateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__services_infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__services_infra_app_state_service__["a" /* AppStateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6__services_infra_panels_service__["a" /* PanelsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__services_infra_panels_service__["a" /* PanelsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__angular_router__["Router"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__angular_router__["Router"]) === "function" && _e || Object])
], AppContainerComponent);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-container.component.js.map

/***/ }),

/***/ "../../../../../src/shared/components/entries-preview/entries-preview.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"sbs-container grid no-margins col-12\">\n  <div *ngIf=\"entryObject.primaryMediaFile\" class=\"sbs-video-up-wrapper no-margins\">\n    <video class=\"sbs-video-up\" oncanplay=\"\" src='file://{{entryObject.primaryMediaFile}}#t=0.5' #videoStreamUp></video>\n    <div *ngIf=\"entryObject && entryObject.isAudioOnly\" class=\"audio-only-img-bg\">\n      <span class=\"audio-only-img\" [attr.aria-label]=\"'MANAGEMENT.ThumbnailAlternateText' | translate:{ VideoName: entryObject.summary}\">\n    </span>\n    </div>\n  </div>\n  <div *ngIf=\"entryObject.secondaryMediaFile\" class=\"sbs-video-down-wrapper no-margins\">\n    <video class=\"sbs-video-down\" oncanplay=\"\" src=\"file://{{entryObject.secondaryMediaFile}}#t=0.5\" #videoStreamDown></video>\n  </div>\n\n  <!-- Video Controls -->\n  <div id=\"video-controls\" class=\"no-margin\">\n    <div class=\"video-progress-wrapper no-margins\" (click)=\"onSeek($event)\">\n      <div id=\"custom-seekbar\" #seekBar>\n        <span #seekBar [style.width.%]=\"progress\"></span>\n      </div>\n    </div>\n    <div class=\"video-actions-wrapper no-margins grid col-12\">\n      <button type=\"button\" class=\"player-button no-margins col-1\"\n              [ngClass]=\"videoPlayToggleClass\" [attr.aria-label]=\"ariaGetPlayButtonLabel() | translate\"\n              id=\"play-pause\" (click)=\"togglePlayback()\" #videoPlay></button>\n      <span *ngIf=\"initialized\" class=\"video-controls-text video-duration no-margins col-6\">\n        {{primaryVideo.currentTime * 1000 | duration}} / {{primaryVideo.duration * 1000 | duration}}\n      </span>\n      <span *ngIf=\"!initialized\" class=\"video-controls-text video-duration no-margins col-6\">\n        00:00:00 / 00:00:00\n      </span>\n      <span class=\"video-controls-text video-start-date no-margins col-4\">\n        {{entryObject.recordingStartTime | time:'L' }}\n      </span>\n      <button type=\"button\" class=\"player-button no-margins col-1\"\n              [attr.aria-label]=\"ariaGetMuteButtonLabel() | translate\"\n              [ngClass]=\"videoVolumeClass\"\n              (click)=\"onMute()\" #videoMute></button>\n    </div>\n    <div *ngIf=\"entryObject.uploadStatus === 'uploaded'\" class=\"video-link-wrapper no-margins col-12 grid\">\n      <span class=\"video-player-link col-1\"></span>\n      <button class=\"entry-link col-11\" (click)=\"onLinkClick()\">{{ getEntryLinkUrl() }}</button>\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "../../../../../src/shared/components/entries-preview/entries-preview.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".sbs-container {\n  width: 100%; }\n\n.sbs-video-up-wrapper {\n  position: relative;\n  width: 320px;\n  height: 180px;\n  margin-bottom: 8px !important;\n  border: solid 1px #666666; }\n\n.sbs-video-up {\n  width: 320px;\n  height: 180px; }\n\n.sbs-video-down-wrapper {\n  position: relative;\n  width: 320px;\n  height: 180px;\n  border: solid 1px #666666;\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.38) 67%, #000000); }\n\n.sbs-video-down {\n  width: 320px;\n  height: 180px; }\n\n#video-container:hover #video-controls {\n  opacity: .9; }\n\n#video-controls {\n  width: 322px;\n  margin-top: 14px; }\n\n.video-progress-wrapper {\n  height: 14px; }\n\n#custom-seekbar {\n  width: 100%;\n  position: relative;\n  height: 4px;\n  border-radius: 2px;\n  background-color: rgba(255, 255, 255, 0.3); }\n\n#custom-seekbar span {\n  height: 4px;\n  border-radius: 2px;\n  background-color: #00abcc;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 0px; }\n\n.video-actions-wrapper {\n  margin-top: 13px;\n  height: 22px; }\n\n.player-button {\n  -webkit-app-region: no-drag;\n  padding: 0;\n  cursor: pointer;\n  border: none;\n  outline: none;\n  opacity: 0.7; }\n\n.player-button:hover, .player-button:active {\n  opacity: 1; }\n\n.video-player-play {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/video-play.svg")) + ") no-repeat center center;\n  height: 16px;\n  width: 16px;\n  margin-top: 3px !important; }\n\n.video-player-pause {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/video-pause.svg")) + ") no-repeat center center;\n  height: 16px;\n  width: 16px;\n  margin-top: 3px !important; }\n\n.video-player-mute {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/video-mute.svg")) + ") no-repeat center center;\n  height: 22px;\n  width: 28px; }\n\n.video-player-volume {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/video-volume.svg")) + ") no-repeat center center;\n  height: 22px;\n  width: 28px; }\n\n.video-player-link {\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/video-link.svg")) + ") no-repeat center center;\n  height: 20px;\n  width: 20px;\n  opacity: 0.7; }\n\n.video-controls-text {\n  font-stretch: normal;\n  letter-spacing: 0.3px;\n  color: #ffffff;\n  height: 17px;\n  font-family: Lato;\n  font-size: 14px;\n  font-weight: 300;\n  line-height: 22px; }\n\n.video-duration {\n  font-style: normal;\n  text-align: center; }\n\n.video-start-date {\n  font-style: italic; }\n\n.video-link-wrapper {\n  height: 20px;\n  margin-top: 20px !important; }\n\n.entry-link {\n  opacity: 0.7;\n  font-style: normal;\n  line-height: 1.43;\n  font-size: 14px;\n  font-stretch: normal;\n  font-weight: 600;\n  letter-spacing: normal;\n  color: #ffffff;\n  text-overflow: ellipsis;\n  border: none;\n  background: transparent;\n  font-family: Lato;\n  outline: none;\n  text-align: left;\n  word-break: break-all;\n  cursor: pointer;\n  padding: 0; }\n  .entry-link:hover {\n    opacity: 1; }\n\n.audio-only-img-bg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 320px;\n  height: 180px;\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.38) 67%, #000000); }\n\n.audio-only-img {\n  height: 40px;\n  width: 40px;\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/common/video-audio-only.svg")) + ") no-repeat top left;\n  position: absolute;\n  top: 70px;\n  left: 140px;\n  opacity: 0.51; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/shared/components/entries-preview/entries-preview.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EntriesPreviewComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let EntriesPreviewComponent = class EntriesPreviewComponent {
    constructor(log, appConfig) {
        this.log = log;
        this.appConfig = appConfig;
        this.progress = 0;
        this.initialized = false;
        this.isPaused = true;
        this.trackingInterval = 200;
        this.trackingIntervalId = null;
        this.rateSyncThreshold = 0.1;
        this.seekRateSyncThreshold = 2;
        this.syncing = false;
        this.videoPlayToggleClass = 'video-player-play';
        this.videoVolumeClass = 'video-player-volume';
    }
    ngAfterViewInit() {
        this.primaryVideo = this.videoStreamUp.nativeElement;
        // if only one video stream create a mock object
        this.secondaryVideo = this.videoStreamDown ?
            this.videoStreamDown.nativeElement : { isMock: true, muted: true, currentTime: 0, pause: () => { }, play: () => { } };
        this.playbackButton = this.videoPlay.nativeElement;
        this.muteButton = this.videoMute.nativeElement;
        this.seekBarRange = this.seekBar.nativeElement;
        this.initialize();
    }
    togglePlayback() {
        if (this.initialized) {
            this.isPaused = !this.isPaused;
            if (this.isPaused) {
                this.pause();
            }
            else {
                this.play();
            }
        }
    }
    initialize() {
        // prefer primaryVideo
        this.secondaryVideo.muted = true; // primaryVideo will be the audio source
        this.primaryVideo.onended = () => {
            setTimeout(() => {
                this.pause();
                this.progress = 0;
            }, 500);
        };
        let primaryVideoReady = false;
        // if there is no real secondary video, there is no need to wait for it.
        let secondaryVideoReady = this.secondaryVideo.isMock ? true : false;
        this.primaryVideo.oncanplay = () => {
            primaryVideoReady = true;
            if (secondaryVideoReady) {
                this.initialized = true;
            }
        };
        this.secondaryVideo.oncanplay = () => {
            secondaryVideoReady = true;
            if (primaryVideoReady) {
                this.initialized = true;
            }
        };
    }
    play() {
        this.primaryVideo.play();
        this.secondaryVideo.play();
        this.videoPlayToggleClass = 'video-player-pause';
        this.isPaused = false;
        this.trackingIntervalId = setInterval(() => { this.track(); }, this.trackingInterval);
    }
    pause() {
        this.primaryVideo.pause();
        this.secondaryVideo.pause();
        this.videoPlayToggleClass = 'video-player-play';
        this.isPaused = true;
        if (this.trackingIntervalId) {
            clearInterval(this.trackingIntervalId);
            this.trackingIntervalId = null;
        }
    }
    track() {
        // need to check video sync only if secondary stream is available
        if (!this.secondaryVideo.isMock) {
            // handle out of sync situation
            if (Math.abs(this.primaryVideo.currentTime - this.secondaryVideo.currentTime) > this.seekRateSyncThreshold) {
                // this requires seek, we prefer primaryVideo so secondaryVideo should seek to primaryVideo
                this.log.debug('syncing by seek');
                this.secondaryVideo.currentTime = this.primaryVideo.currentTime;
            }
            else {
                // this is a minor sync issue - try to slow down or fast forward secondary video to catch up with primary video
                if (Math.abs(this.primaryVideo.currentTime - this.secondaryVideo.currentTime) > this.rateSyncThreshold) {
                    // we are out of sync - check which video should be slowed down
                    this.syncing = true;
                    this.log.debug('starting sync by playback rate');
                    if (this.primaryVideo.currentTime > this.secondaryVideo.currentTime) {
                        this.secondaryVideo.playbackRate = 1.1;
                    }
                    else {
                        this.secondaryVideo.playbackRate = 0.9;
                    }
                }
                else {
                    // make sure playback rate is 1
                    if (this.syncing) {
                        this.log.debug('sync completed');
                        this.secondaryVideo.playbackRate = 1;
                        this.syncing = false;
                    }
                }
            }
        }
        this.progress = (100 / this.primaryVideo.duration) * this.primaryVideo.currentTime;
    }
    onSeek(e) {
        let percent = e.offsetX / this.seekBarRange.offsetWidth;
        this.primaryVideo.currentTime = percent * this.primaryVideo.duration;
        this.secondaryVideo.currentTime = percent * this.primaryVideo.duration;
        this.progress = (100 / this.primaryVideo.duration) * this.primaryVideo.currentTime;
    }
    seekMouseDown() {
        this.pause();
    }
    seekMouseUp() {
        this.play();
    }
    onMute() {
        this.primaryVideo.muted = !this.primaryVideo.muted;
        this.videoVolumeClass = this.primaryVideo.muted ? 'video-player-mute' : 'video-player-volume';
    }
    onLinkClick() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('open-external-link', this.getEntryLinkUrl());
    }
    getEntryLinkUrl() {
        let externalSettings = this.appConfig.getConfigData('config.shared.externalSettings');
        //for backward compatibility
        if (externalSettings.hasOwnProperty('entryURL_v2')) {
            return __WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](externalSettings.entryURL_v2) ?
                __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].urlBuilder(externalSettings.appHost, '/media/', this.entryObject.primaryEntryId) :
                externalSettings.entryURL_v2;
        }
        else {
            return __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].urlBuilder(externalSettings.appHost, externalSettings.entryURL, this.entryObject.primaryEntryId);
        }
    }
    ariaGetMuteButtonLabel() {
        return this.primaryVideo && this.primaryVideo.muted ? 'MANAGEMENT.unmute_video' : 'MANAGEMENT.mute_video';
    }
    ariaGetPlayButtonLabel() {
        return this.isPaused ? 'MANAGEMENT.play_video' : 'MANAGEMENT.pause_video';
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], EntriesPreviewComponent.prototype, "entryObject", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('videoStreamUp'),
    __metadata("design:type", Object)
], EntriesPreviewComponent.prototype, "videoStreamUp", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('videoStreamDown'),
    __metadata("design:type", Object)
], EntriesPreviewComponent.prototype, "videoStreamDown", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('videoPlay'),
    __metadata("design:type", Object)
], EntriesPreviewComponent.prototype, "videoPlay", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('videoMute'),
    __metadata("design:type", Object)
], EntriesPreviewComponent.prototype, "videoMute", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('seekBar'),
    __metadata("design:type", Object)
], EntriesPreviewComponent.prototype, "seekBar", void 0);
EntriesPreviewComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'entries-preview',
        template: __webpack_require__("../../../../../src/shared/components/entries-preview/entries-preview.component.html"),
        styles: [__webpack_require__("../../../../../src/shared/components/entries-preview/entries-preview.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object])
], EntriesPreviewComponent);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/entries-preview.component.js.map

/***/ }),

/***/ "../../../../../src/shared/components/log-collector/log-collector.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"log-collector-container\">\n  <div class=\"grid col-12\">\n    <div [attr.aria-label]=\"'SETTINGS.logs_upload_desc' | translate\" class=\"no-margins\"\n         [ngClass]=\"{'detail-field-title upload-logs-desc': componentSize && componentSize === 'small',\n                  'settings-desc col-4': !componentSize || componentSize === 'large'}\">\n      {{'SETTINGS.logs_upload_desc' | translate}}\n    </div>\n    <div class=\"col-8 no-margins settings-values\">\n      <div class=\"grid col-8\">\n        <button fit-text [attr.aria-label]=\"'SETTINGS.upload_logs' | translate\"\n                class=\"settings-logs-upload-button no-drag small-oval-button focus-once no-margins upload-logs-button\"\n                (click)=\"onLogClick()\" [disabled]=\"readOnly || isUploadingLogs()\">\n          {{'SETTINGS.upload_logs' | translate}}\n        </button>\n        <div class=\"col-4 no-margins\" *ngIf=\"isUploadingLogs()\">\n          <p-progressBar class=\"progressbar-component logs-progressbar\" [value]=\"getUploadProgress()\"></p-progressBar>\n        </div>\n        <button *ngIf=\"false\" [attr.aria-label]=\"'SETTINGS.open_logs_dir' | translate\"\n                class=\"settings-open-logs-dir no-drag small-oval-button focus-once col-3 no-margins\"\n                (click)=\"onOpenLogsDirClick()\">\n          {{'SETTINGS.open_logs_dir' | translate}}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <management-confirm-dialog confirm_dialog_key=\"uploaded-logs-token-msg\"\n                             accept_button_text=\"{{'COMMON.OK' | translate}}\"\n                             personalize_class=\"uploaded-logs-token-dialog\">\n  </management-confirm-dialog>\n\n  <management-confirm-dialog class=\"leave-page-confirm-dialog\"\n                             confirm_dialog_key=\"leave-while-uploading-logs\"\n                             reject_button_text=\"{{'COMMON.no' | translate}}\"\n                             accept_button_text=\"{{'MANAGEMENT.Confirm_Leave' | translate}}\">\n  </management-confirm-dialog>\n</div>\n\n\n"

/***/ }),

/***/ "../../../../../src/shared/components/log-collector/log-collector.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".log-collector-container {\n  width: 100%;\n  height: 100%; }\n\n.settings-desc {\n  opacity: 0.7;\n  font-family: lato;\n  font-size: 16px;\n  font-weight: 300;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.25;\n  letter-spacing: normal;\n  text-align: left;\n  color: #ffffff; }\n\n.logs-progressbar {\n  margin-top: 9px; }\n\n.settings-open-logs-dir {\n  margin-left: 7px !important; }\n\n.upload-logs-button {\n  width: 115px; }\n\n.upload-logs-desc {\n  width: 210px; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/shared/components/log-collector/log-collector.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__log_collector_service__ = __webpack_require__("../../../../../src/shared/components/log-collector/log-collector.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LogCollectorComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let LogCollectorComponent = class LogCollectorComponent {
    constructor(logger, translate, logCollectorService) {
        this.logger = logger;
        this.translate = translate;
        this.logCollectorService = logCollectorService;
    }
    onLogClick() {
        this.logCollectorService.resetFakeLogUploadProgress();
        this.logCollectorService.onLogClick();
    }
    getUploadProgress() {
        return this.logCollectorService.getFakeLogUploadProgress();
    }
    isUploadingLogs() {
        return this.logCollectorService.isUploadingLogs();
    }
    onOpenLogsDirClick() {
        this.logCollectorService.openLogsDir();
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], LogCollectorComponent.prototype, "componentSize", void 0);
LogCollectorComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'log-collector',
        template: __webpack_require__("../../../../../src/shared/components/log-collector/log-collector.component.html"),
        styles: [__webpack_require__("../../../../../src/shared/components/log-collector/log-collector.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_ng2_translate__["b" /* TranslateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__log_collector_service__["a" /* LogCollectorService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__log_collector_service__["a" /* LogCollectorService */]) === "function" && _c || Object])
], LogCollectorComponent);

var _a, _b, _c;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/log-collector.component.js.map

/***/ }),

/***/ "../../../../../src/shared/components/log-collector/log-collector.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__("../../../platform-browser/@angular/platform-browser.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__log_collector_service__ = __webpack_require__("../../../../../src/shared/components/log-collector/log-collector.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_infra_infra_module__ = __webpack_require__("../../../../../src/shared/services/infra/infra.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__log_collector_component__ = __webpack_require__("../../../../../src/shared/components/log-collector/log-collector.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_primeng_components_progressbar_progressbar__ = __webpack_require__("../../../../primeng/components/progressbar/progressbar.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_primeng_components_progressbar_progressbar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_primeng_components_progressbar_progressbar__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_primeng_components_confirmdialog_confirmdialog__ = __webpack_require__("../../../../primeng/components/confirmdialog/confirmdialog.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_primeng_components_confirmdialog_confirmdialog___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_primeng_components_confirmdialog_confirmdialog__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__managment_confirm_dialog_menagement_confirm_dialog_module__ = __webpack_require__("../../../../../src/shared/components/managment-confirm-dialog/menagement-confirm-dialog.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__directives_shared_directives_module__ = __webpack_require__("../../../../../src/shared/directives/shared-directives.module.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LogCollectorModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};










let LogCollectorModule = class LogCollectorModule {
};
LogCollectorModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["BrowserModule"],
            __WEBPACK_IMPORTED_MODULE_3__services_infra_infra_module__["a" /* InfraModule */],
            __WEBPACK_IMPORTED_MODULE_5_ng2_translate__["a" /* TranslateModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_6_primeng_components_progressbar_progressbar__["ProgressBarModule"],
            __WEBPACK_IMPORTED_MODULE_7_primeng_components_confirmdialog_confirmdialog__["ConfirmDialogModule"],
            __WEBPACK_IMPORTED_MODULE_8__managment_confirm_dialog_menagement_confirm_dialog_module__["a" /* ManagementConfirmDialogModule */],
            __WEBPACK_IMPORTED_MODULE_9__directives_shared_directives_module__["a" /* SharedDirectives */]
        ],
        declarations: [
            __WEBPACK_IMPORTED_MODULE_4__log_collector_component__["a" /* LogCollectorComponent */]
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_2__log_collector_service__["a" /* LogCollectorService */]
        ],
        exports: [
            __WEBPACK_IMPORTED_MODULE_4__log_collector_component__["a" /* LogCollectorComponent */]
        ]
    })
], LogCollectorModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/log-collector.module.js.map

/***/ }),

/***/ "../../../../../src/shared/components/log-collector/log-collector.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular2_uuid__ = __webpack_require__("../../../../angular2-uuid/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular2_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_angular2_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__services_infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice__ = __webpack_require__("../../../../primeng/components/common/confirmationservice.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__services_infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LogCollectorService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








let LogCollectorService = class LogCollectorService {
    constructor(log, appConfig, translate, confirmationService, appNotifications) {
        this.log = log;
        this.appConfig = appConfig;
        this.translate = translate;
        this.confirmationService = confirmationService;
        this.appNotifications = appNotifications;
        this.COLLECTOR_STATUS = {
            IN_PROGRESS: 'IN_PROGRESS',
            SUCCEEDED: 'SUCCEEDED',
            FAILED: 'FAILED'
        };
        this.logUploadProgress = 0;
        this.fakeProgressInterval = null;
        this.currentLogCollectorId = null;
        this.logCollectorStatusCheckInterval = null;
        this.uploadingLogs = false;
    }
    getFakeLogUploadProgress() {
        return this.logUploadProgress;
    }
    resetFakeLogUploadProgress() {
        this.logUploadProgress = 0;
    }
    onLogClick() {
        this.uploadingLogs = true;
        this.currentLogCollectorId = __WEBPACK_IMPORTED_MODULE_1_angular2_uuid__["UUID"].UUID();
        this.startFakeLogsUploadProgress();
        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('collect-logs-and-data', this.currentLogCollectorId);
        this.startCollectorStatusCheckInterval();
    }
    isUploadingLogs() {
        return this.uploadingLogs;
    }
    openLogsDir() {
        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('openDirectory', this.appConfig.getConfigData('config.shared.logsDir'))
            .then(success => {
            if (!success)
                this.log.error('Failed to open logs folder');
        });
    }
    clearCollectorStatusCheckInterval() {
        this.uploadingLogs = false;
        clearInterval(this.logCollectorStatusCheckInterval);
    }
    askBeforeLeave() {
        return new Promise((resolve, reject) => {
            if (this.isUploadingLogs()) {
                this.translate.get('SETTINGS.uploading_logs_leave_while_uploading')
                    .subscribe((leaveWithoutChangesText) => {
                    this.confirmationService.confirm({
                        message: leaveWithoutChangesText,
                        key: "leave-while-uploading-logs",
                        accept: () => {
                            this.clearCollectorStatusCheckInterval();
                            //since the next call will be to route to different page, there is an issue with primeng confirm dialog UI. we need to wait for it to close...
                            setTimeout(() => {
                                resolve(true);
                            }, 1000);
                        },
                        reject: () => {
                            resolve(false);
                        }
                    });
                });
            }
            else {
                resolve(true);
            }
        });
    }
    openUploadedLogsTokenPopup(tokenId) {
        this.translate.get('SETTINGS.uploaded_logs_token_message')
            .subscribe((text) => {
            this.confirmationService.confirm({
                message: text + "<br><br><span class='log-token'>" + tokenId + "</span>",
                key: "uploaded-logs-token-msg"
            });
        });
    }
    startFakeLogsUploadProgress() {
        this.logUploadProgress = 4;
        this.fakeProgressInterval = setInterval(() => {
            let operand = this.logUploadProgress > 70 ? 1 : 7;
            this.logUploadProgress += operand;
            if (this.logUploadProgress > 96)
                this.clearFakeLogsUploadInterval();
        }, 4000);
    }
    startCollectorStatusCheckInterval() {
        this.logCollectorStatusCheckInterval = setInterval(() => {
            __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('get-log-collector-status', this.currentLogCollectorId)
                .then((collector) => {
                if (collector && collector['status'] !== this.COLLECTOR_STATUS.IN_PROGRESS) {
                    this.clearFakeLogsUploadInterval();
                    if (collector['status'] === this.COLLECTOR_STATUS.SUCCEEDED) {
                        this.logUploadProgress = 100;
                        setTimeout(() => {
                            this.openUploadedLogsTokenPopup(collector['collectionUrl']);
                            this.clearCollectorStatusCheckInterval();
                        }, 1000); //so the user will see the progress bar at 100%
                    }
                    else {
                        this.resetFakeLogUploadProgress();
                        this.clearCollectorStatusCheckInterval();
                        this.appNotifications.sendNotification('SETTINGS.upload_logs_failure', 'warn');
                    }
                }
            });
        }, 5000);
    }
    clearFakeLogsUploadInterval() {
        clearInterval(this.fakeProgressInterval);
    }
};
LogCollectorService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_4__services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__services_infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__services_infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2_ng2_translate__["b" /* TranslateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice__["ConfirmationService"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_confirmationservice__["ConfirmationService"]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_7__services_infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__services_infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _e || Object])
], LogCollectorService);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/log-collector.service.js.map

/***/ }),

/***/ "../../../../../src/shared/components/managment-confirm-dialog/management-confirm-dialog.component.html":
/***/ (function(module, exports) {

module.exports = "<p-confirmDialog class=\"management-dialog\" [ngClass]=\"personalize_class\" closable=\"false\" #cd [key]=\"confirm_dialog_key\" [appendTo]=\"'body'\" tabindex=\"-1\" dialog-addon role=\"dialog\" aria-modal=\"true\">\n  <p-footer>\n    <div class=\"warning-icon\"></div>\n    <button *ngIf=\"reject_button_text\" class=\"no-drag small-oval-button reject\" type=\"button\" pButton icon=\"\" label={{reject_button_text}}\n            (click)=\"cd.reject()\" [attr.aria-label]=\"reject_button_text\"></button>\n    <button class=\"no-drag\" [attr.aria-label]=\"accept_button_text\"\n            [ngClass]=\"{'small-oval-button' : !accept_button_size || accept_button_size === BUTTON_SIZE.small,\n                        'large-oval-button' : accept_button_size === BUTTON_SIZE.large}\"\n            type=\"button\" pButton icon=\"\" label={{accept_button_text}} (click)=\"cd.accept()\"></button>\n  </p-footer>\n</p-confirmDialog>\n"

/***/ }),

/***/ "../../../../../src/shared/components/managment-confirm-dialog/management-confirm-dialog.component.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("../../../../css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "p-confirmDialog.management-dialog .ui-confirmdialog {\n  width: 364px;\n  border-radius: 4px;\n  background-color: #24212a;\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.25);\n  border: solid 1px #ffffff; }\n\np-confirmDialog.management-dialog .ui-dialog-titlebar,\np-confirmDialog.management-dialog .ui-dialog-titlebar-close {\n  display: none; }\n\np-confirmDialog.management-dialog .ui-confirmdialog.ui-dialog .ui-dialog-content {\n  padding: 24px; }\n\np-confirmDialog.management-dialog .ui-confirmdialog-message {\n  font-family: Lato;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 1.25;\n  letter-spacing: 0.5px;\n  text-align: left;\n  color: #ffffff; }\n\np-confirmDialog.management-dialog .ui-dialog-footer.ui-widget-content {\n  padding: 0 24px 24px 24px; }\n\np-confirmDialog.management-dialog .reject {\n  margin-right: 8px; }\n\np-confirmDialog.management-dialog .warning-icon {\n  position: absolute;\n  bottom: 15px;\n  left: 25px;\n  height: 40px;\n  width: 40px;\n  background: url(" + escape(__webpack_require__("../../../../../src/assets/svg/40/warn.svg")) + ") no-repeat top left; }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/shared/components/managment-confirm-dialog/management-confirm-dialog.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ManagementConfirmDialogComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let ManagementConfirmDialogComponent = class ManagementConfirmDialogComponent {
    constructor() {
        this.BUTTON_SIZE = {
            small: 'small',
            large: 'large'
        };
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], ManagementConfirmDialogComponent.prototype, "confirm_dialog_key", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], ManagementConfirmDialogComponent.prototype, "reject_button_text", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], ManagementConfirmDialogComponent.prototype, "accept_button_text", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], ManagementConfirmDialogComponent.prototype, "accept_button_size", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], ManagementConfirmDialogComponent.prototype, "personalize_class", void 0);
ManagementConfirmDialogComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'management-confirm-dialog',
        encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
        template: __webpack_require__("../../../../../src/shared/components/managment-confirm-dialog/management-confirm-dialog.component.html"),
        styles: [__webpack_require__("../../../../../src/shared/components/managment-confirm-dialog/management-confirm-dialog.component.scss")]
    })
], ManagementConfirmDialogComponent);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/management-confirm-dialog.component.js.map

/***/ }),

/***/ "../../../../../src/shared/components/managment-confirm-dialog/menagement-confirm-dialog.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__("../../../platform-browser/@angular/platform-browser.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_infra_infra_module__ = __webpack_require__("../../../../../src/shared/services/infra/infra.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__managment_confirm_dialog_management_confirm_dialog_component__ = __webpack_require__("../../../../../src/shared/components/managment-confirm-dialog/management-confirm-dialog.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_primeng_components_confirmdialog_confirmdialog__ = __webpack_require__("../../../../primeng/components/confirmdialog/confirmdialog.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_primeng_components_confirmdialog_confirmdialog___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_primeng_components_confirmdialog_confirmdialog__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__directives_shared_directives_module__ = __webpack_require__("../../../../../src/shared/directives/shared-directives.module.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ManagementConfirmDialogModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







let ManagementConfirmDialogModule = class ManagementConfirmDialogModule {
};
ManagementConfirmDialogModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["BrowserModule"],
            __WEBPACK_IMPORTED_MODULE_2__services_infra_infra_module__["a" /* InfraModule */],
            __WEBPACK_IMPORTED_MODULE_3_ng2_translate__["a" /* TranslateModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_5_primeng_components_confirmdialog_confirmdialog__["ConfirmDialogModule"],
            __WEBPACK_IMPORTED_MODULE_6__directives_shared_directives_module__["a" /* SharedDirectives */]
        ],
        declarations: [
            __WEBPACK_IMPORTED_MODULE_4__managment_confirm_dialog_management_confirm_dialog_component__["a" /* ManagementConfirmDialogComponent */]
        ],
        exports: [
            __WEBPACK_IMPORTED_MODULE_4__managment_confirm_dialog_management_confirm_dialog_component__["a" /* ManagementConfirmDialogComponent */]
        ]
    })
], ManagementConfirmDialogModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/menagement-confirm-dialog.module.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/auto-resize-textarea.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AutoResizeTextarea; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let AutoResizeTextarea = class AutoResizeTextarea {
    constructor(element) {
        this.element = element;
        this.element.nativeElement.style.resize = 'none';
        this.element.nativeElement.style['line-height'] = '1';
        this.element.nativeElement.style['padding-bottom'] = '2px';
        this.element.nativeElement.style['margin-bottom'] = '0';
        this.element.nativeElement.style.height = this.getRowMultiplier();
        this.element.nativeElement.style.overflow = 'auto';
    }
    onInput(event) {
        let that = this;
        setTimeout(function () {
            that.adjust();
        });
    }
    ngAfterViewInit() {
        let that = this;
        setTimeout(function () {
            that.adjust();
        });
    }
    adjust() {
        this.element.nativeElement.style.height = 'auto';
        this.element.nativeElement.style.height = this.getRowMultiplier();
    }
    getRowMultiplier() {
        let rowsCount = Math.round(this.element.nativeElement.scrollHeight / this.rowHeight);
        return rowsCount > this.maxRows ?
            (this.maxRows * this.rowHeight + 'px') : (rowsCount * this.rowHeight + 'px');
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], AutoResizeTextarea.prototype, "maxRows", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], AutoResizeTextarea.prototype, "rowHeight", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('document:keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AutoResizeTextarea.prototype, "onInput", null);
AutoResizeTextarea = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: 'textarea[auto-resize]'
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _a || Object])
], AutoResizeTextarea);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/auto-resize-textarea.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/dialog-addon.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_confirmdialog_confirmdialog__ = __webpack_require__("../../../../primeng/components/confirmdialog/confirmdialog.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_confirmdialog_confirmdialog___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_primeng_components_confirmdialog_confirmdialog__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice__ = __webpack_require__("../../../../primeng/components/common/confirmationservice.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_infra_accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DialogAddon; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




/*
* The purpose of this directive is to set and remove tabindex because the dialog msg box is always visible.
* and if we will put it permanently the tab will hit an empty box, and if we put tabindex on the not-visible part
* the order of the navigation will be wrong.
* */
let DialogAddon = class DialogAddon {
    constructor(component, confirmationService, elementRef, accessibilityService) {
        this.confirmationService = confirmationService;
        this.elementRef = elementRef;
        this.accessibilityService = accessibilityService;
        this.dialog = component;
        this.confirmSubscription = confirmationService.requireConfirmation$
            .delay(200)
            .subscribe((confirmation) => {
            if (confirmation.key === this.dialog.key) {
                this.elementRef.nativeElement.setAttribute("aria-label", this.dialog.message);
                // set focus on the first button of the dialog.
                let lastKeyCode = this.accessibilityService.getLastCode();
                if (lastKeyCode === 'Enter' || lastKeyCode === "Space" || lastKeyCode === "NumpadEnter") {
                    this.accessibilityService.setLastCode(null);
                    setTimeout(() => {
                        let button = this.elementRef.nativeElement.querySelector('button');
                        if (button) {
                            button.classList.add('keyboard-focus');
                            button.focus();
                        }
                    });
                }
                else {
                    this.removeKeyboardFocus();
                }
            }
        });
    }
    /*
    * remove the tabindex. - otherwise we will hit at tab navigation
    * */
    ngAfterViewInit() {
        let footer = this.elementRef.nativeElement.querySelector('p-footer');
        if (footer)
            footer.classList.add('dialog-footer');
        let that = this; //do not remove
        // Save original function
        let onHideOriginalFunc = this.dialog.hide;
        //override original keyDown function
        this.dialog.hide = function () {
            // the dialog is a general component, and we want to keep the message updated
            that.elementRef.nativeElement.removeAttribute("tabindex");
            that.elementRef.nativeElement.removeAttribute("aria-label");
            //call original onKeyDown function
            onHideOriginalFunc.call(that.dialog);
        };
        Object.defineProperty(this.dialog, '_visible', {
            get: function () {
                return this.__visible;
            },
            set: function (isDialogVisible) {
                //return if visibility didn't change
                if (this.__visible === isDialogVisible)
                    return;
                //set new panel state
                this.__visible = isDialogVisible;
                that.accessibilityService.toggleNavLimitationOnDialog(this.__visible, that.elementRef.nativeElement);
                // remove focus on the first button of the dialog.
                if (!this.__visible && that.elementRef) {
                    that.removeKeyboardFocus();
                }
            },
            enumerable: true,
            configurable: true
        });
    }
    removeKeyboardFocus() {
        setTimeout(() => {
            let button = this.elementRef.nativeElement.querySelector('button');
            if (button) {
                button.classList.remove('keyboard-focus');
            }
        });
    }
    ngOnDestroy() {
        this.confirmSubscription.unsubscribe();
    }
};
DialogAddon = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: '[dialog-addon]',
    }),
    __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"])()),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1_primeng_components_confirmdialog_confirmdialog__["ConfirmDialog"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_primeng_components_confirmdialog_confirmdialog__["ConfirmDialog"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice__["ConfirmationService"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2_primeng_components_common_confirmationservice__["ConfirmationService"]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3__services_infra_accessability_service__["a" /* AccessibilityService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__services_infra_accessability_service__["a" /* AccessibilityService */]) === "function" && _d || Object])
], DialogAddon);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/dialog-addon.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/dropdown-addon.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_dropdown_dropdown__ = __webpack_require__("../../../../primeng/components/dropdown/dropdown.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_dropdown_dropdown___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_primeng_components_dropdown_dropdown__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DropdownAddon; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};



/**
 * Enhancement features for ngPrime dropdown:
 * 1. Dropdown behaviour changes - Arrows (Up/Down) will not select item only after Enter/Space
 *
 * 2. Accessibility:
 *    * Tab, Enter and Arrows (Up/Down) navigation are achieved
 *    * Screen reader support due to adding WAI-ARIA attributes
 *
 * 3. Scroll to Element option when needed - in case at the bottom of a scroll div (Css limitation issue)
 */
let DropdownAddon = class DropdownAddon {
    constructor(component, elementRef) {
        this.elementRef = elementRef;
        this.onCustomChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.dropdown = component;
        this.isFirstArrow = true;
        this.listenToPanelVisibilityAndEmitChange();
    }
    ngAfterViewInit() {
        let that = this; //do not remove
        // Save original keyDown function
        let onKeydownOriginalFunc = this.dropdown.onKeydown;
        //override original keyDown function
        this.dropdown.onKeydown = function (event) {
            if (event.altKey || event.metaKey)
                return;
            //saving last key event for the setter handling
            that.lastKeydownEvent = event;
            // if dropdown is closed - on arrow down: open the dropdown
            if (!this.panelVisible && (event.code === 'ArrowDown' || event.code === 'ArrowUp' || event.code === 'Enter')) {
                that.initialSelection = this.selectedOption;
                that.isFirstArrow = false;
                this.show(this.panel, this.container);
                if (event.code === 'Enter') {
                    return;
                }
            }
            else if (event.code === 'Enter' || event.code === 'Escape') {
                // On Enter or on Escape reset isFirstArrow (to be first arrow in the new arrow key-down)
                that.isFirstArrow = true;
            }
            //call original onKeyDown function
            onKeydownOriginalFunc.call(that.dropdown, event);
        };
        // At last, add accessibility for the dropdown
        this.addDropdownAccessibility();
    }
    listenToPanelVisibilityAndEmitChange() {
        let that = this; //do not remove
        this.dropdown._panelVisible = false; // init it to close
        Object.defineProperty(this.dropdown, 'panelVisible', {
            get: function () {
                return this._panelVisible;
            },
            set: function (isPanelVisible) {
                that.addListItemAccessibilityOnRuntime(isPanelVisible);
                //return if panel visibility didn't change
                if (this._panelVisible === isPanelVisible)
                    return;
                //set new panel state
                this._panelVisible = isPanelVisible;
                // on escape: return and set initial selection
                if (that.lastKeydownEvent && that.lastKeydownEvent.code === 'Escape') {
                    this.selectedOption = that.initialSelection;
                    this.value = that.initialSelection.value;
                    that.lastKeydownEvent = null;
                    return;
                }
                //on first opening of the panel - save initial selection
                if (isPanelVisible) {
                    that.initialSelection = this.selectedOption;
                }
                else if (this.selectedOption) {
                    //panel was closed and we want to trigger change event if needed
                    let isValueChanged = that.initialSelection ? (that.initialSelection.value !== this.selectedOption.value) : true;
                    if (isValueChanged) {
                        that.initialSelection = this.selectedOption;
                        that.lastKeydownEvent = null;
                        // choose the new selection
                        // ngPrime: dropdown.ts: onKeydown(event) like down case + impl as selectItem(event, option)
                        this.selectedOptionUpdated = true;
                        this.value = this.selectedOption.value;
                        this.onModelChange(this.value);
                        that.onCustomChange.emit();
                    }
                }
                that.autoScrollToElement(isPanelVisible);
            },
            enumerable: true,
            configurable: true
        });
    }
    autoScrollToElement(isPanelVisible) {
        if (this.isAutoScrollToElement === true && isPanelVisible) {
            setTimeout(() => {
                let elem = this.elementRef.nativeElement.querySelector('.ui-dropdown-items-wrapper');
                if (elem)
                    elem.scrollIntoView({ block: "start", behavior: "smooth" });
            });
        }
    }
    addListItemAccessibilityOnRuntime(isPanelVisible) {
        if (isPanelVisible) {
            setTimeout(() => {
                let uiDropdownList = this.elementRef.nativeElement.querySelector('.ui-dropdown-list');
                if (uiDropdownList) {
                    uiDropdownList.setAttribute("role", "menu");
                }
                let uiDropdownItems = this.elementRef.nativeElement.querySelectorAll('.ui-dropdown-item');
                if (uiDropdownItems) {
                    __WEBPACK_IMPORTED_MODULE_2_lodash__["each"](uiDropdownItems, (dropdownItem) => {
                        dropdownItem.setAttribute("role", "menuitem");
                    });
                }
            });
        }
    }
    addDropdownAccessibility() {
        let uiDropdownPanel = this.elementRef.nativeElement.querySelector('.ui-dropdown-panel');
        if (uiDropdownPanel)
            uiDropdownPanel.setAttribute("role", "none");
        let uiDropdownItemsWrapper = this.elementRef.nativeElement.querySelector('.ui-dropdown-items-wrapper');
        if (uiDropdownItemsWrapper)
            uiDropdownItemsWrapper.setAttribute("role", "none");
        let uiHelperHiddenAccessible = this.elementRef.nativeElement.querySelectorAll('.ui-helper-hidden-accessible');
        if (uiHelperHiddenAccessible && uiHelperHiddenAccessible[1])
            uiHelperHiddenAccessible[1].setAttribute("role", "none");
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], DropdownAddon.prototype, "onCustomChange", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])('dropdown-addon-autoscroll'),
    __metadata("design:type", Boolean)
], DropdownAddon.prototype, "isAutoScrollToElement", void 0);
DropdownAddon = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: '[dropdown-addon]',
    }),
    __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"])()),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1_primeng_components_dropdown_dropdown__["Dropdown"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_primeng_components_dropdown_dropdown__["Dropdown"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _b || Object])
], DropdownAddon);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/dropdown-addon.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/fit-text.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FitText; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

/**
 * auto fix text into an element height
 * //todo handle width as well
 */
let FitText = class FitText {
    constructor(el) {
        this.minFontSize = 10;
        this.defaultFontSize = 10;
        this.element = el.nativeElement;
    }
    ngAfterViewInit() {
        if (!this.element)
            return;
        while (this.element.clientHeight < this.element.scrollHeight) {
            this.decreaseFontSize();
        }
    }
    decreaseFontSize() {
        let size = this.getCurrentFontSize();
        this.element.style.fontSize = --size + 'px';
    }
    getCurrentFontSize() {
        let fontSize = window.getComputedStyle(this.element, null).getPropertyValue('font-size');
        return fontSize ? parseInt(fontSize) : this.defaultFontSize;
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], FitText.prototype, "minFontSize", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], FitText.prototype, "defaultFontSize", void 0);
FitText = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: '[fit-text]',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _a || Object])
], FitText);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/fit-text.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/shared-directives.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__auto_resize_textarea__ = __webpack_require__("../../../../../src/shared/directives/auto-resize-textarea.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dropdown_addon__ = __webpack_require__("../../../../../src/shared/directives/dropdown-addon.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__spinner_number__ = __webpack_require__("../../../../../src/shared/directives/spinner-number.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tags_chips__ = __webpack_require__("../../../../../src/shared/directives/tags-chips.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__tooltip_addon__ = __webpack_require__("../../../../../src/shared/directives/tooltip-addon.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__dialog_addon__ = __webpack_require__("../../../../../src/shared/directives/dialog-addon.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__tags_autocomplete__ = __webpack_require__("../../../../../src/shared/directives/tags-autocomplete.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__fit_text__ = __webpack_require__("../../../../../src/shared/directives/fit-text.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__toggled_click_through_addon__ = __webpack_require__("../../../../../src/shared/directives/toggled-click-through-addon.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SharedDirectives; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};










let SharedDirectives = class SharedDirectives {
};
SharedDirectives = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        declarations: [
            __WEBPACK_IMPORTED_MODULE_1__auto_resize_textarea__["a" /* AutoResizeTextarea */],
            __WEBPACK_IMPORTED_MODULE_2__dropdown_addon__["a" /* DropdownAddon */],
            __WEBPACK_IMPORTED_MODULE_3__spinner_number__["a" /* SpinnerNumber */],
            __WEBPACK_IMPORTED_MODULE_4__tags_chips__["a" /* TagsChips */],
            __WEBPACK_IMPORTED_MODULE_5__tooltip_addon__["a" /* TooltipAddon */],
            __WEBPACK_IMPORTED_MODULE_6__dialog_addon__["a" /* DialogAddon */],
            __WEBPACK_IMPORTED_MODULE_7__tags_autocomplete__["a" /* TagsAutocomplete */],
            __WEBPACK_IMPORTED_MODULE_8__fit_text__["a" /* FitText */],
            __WEBPACK_IMPORTED_MODULE_9__toggled_click_through_addon__["a" /* ToggledClickThroughAddon */]
        ],
        exports: [
            __WEBPACK_IMPORTED_MODULE_1__auto_resize_textarea__["a" /* AutoResizeTextarea */],
            __WEBPACK_IMPORTED_MODULE_2__dropdown_addon__["a" /* DropdownAddon */],
            __WEBPACK_IMPORTED_MODULE_3__spinner_number__["a" /* SpinnerNumber */],
            __WEBPACK_IMPORTED_MODULE_4__tags_chips__["a" /* TagsChips */],
            __WEBPACK_IMPORTED_MODULE_5__tooltip_addon__["a" /* TooltipAddon */],
            __WEBPACK_IMPORTED_MODULE_6__dialog_addon__["a" /* DialogAddon */],
            __WEBPACK_IMPORTED_MODULE_7__tags_autocomplete__["a" /* TagsAutocomplete */],
            __WEBPACK_IMPORTED_MODULE_8__fit_text__["a" /* FitText */],
            __WEBPACK_IMPORTED_MODULE_9__toggled_click_through_addon__["a" /* ToggledClickThroughAddon */]
        ]
    })
], SharedDirectives);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/shared-directives.module.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/spinner-number.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_spinner_spinner__ = __webpack_require__("../../../../primeng/components/spinner/spinner.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_spinner_spinner___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_primeng_components_spinner_spinner__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SpinnerNumber; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
/**
 * Created by igor.shevach on 7/20/2017.
 */



let SpinnerNumber = class SpinnerNumber {
    constructor(component, logger) {
        this.logger = logger;
        this.spinner = component;
    }
    // hook min/max properties to calculate maxlength value
    set min(value) {
        value = Number(value);
        if (this.spinner.min !== value) {
            this.logger.info("SpinnerNumber.setMin " + this.spinner.min + " value " + value);
            this.spinner.min = value;
            this.updateInputLength();
        }
    }
    set max(value) {
        value = Number(value);
        if (this.spinner.max !== value) {
            this.logger.info("SpinnerNumber.setMax " + this.spinner.max + " value " + value);
            this.spinner.max = value;
            this.updateInputLength();
        }
    }
    ngAfterViewInit() {
        this.logger.debug("SpinnerNumber.ngAfterViewInit");
        //remember input element which is 1-st child of span which 1-st child of p-spinner element
        this.inputEl = this.spinner.el.nativeElement.querySelector("input");
        /*
          spinner has nasty behaviour:
          when completely deleting contents of an input it decides to display spinner.min
        */
        let parseValue = this.spinner.parseValue.bind(this.spinner);
        this.spinner.parseValue = (val) => {
            if (val.trim() === '') {
                this.logger.debug("empty value! -> " + this.spinner.value);
                return this.spinner.value;
            }
            else {
                return parseValue(val);
            }
        };
        /*
          make sure to sync this.spinner.valueAsString with contents of an input at all times:
          when underlying logic decides not to update valueAsString/value of a spinner
          then input looks completely out of sync
        */
        let formatValue = this.spinner.formatValue.bind(this.spinner);
        this.spinner.formatValue = () => {
            formatValue();
            this.inputEl.value = this.spinner.valueAsString;
        };
    } //end of ngAfterViewInit
    // calculate string length for particular value val
    getValLength(val) {
        this.spinner.value = val;
        this.spinner.formatValue();
        this.logger.info("value " + val + " -> " + this.spinner.valueAsString + " = " + this.spinner.valueAsString.length);
        return this.spinner.valueAsString.length;
    }
    ;
    // calculate maxlength property for specific min-max range
    updateInputLength() {
        let value = this.spinner.value;
        let maxlength = Math.max(this.getValLength(this.spinner.min), this.getValLength(this.spinner.max));
        this.spinner.value = value;
        this.spinner.formatValue();
        this.logger.info("SpinnerNumber.updateInputLength range: " + this.spinner.min + " " + this.spinner.max + " maxlength: " + maxlength);
        this.spinner.maxlength = maxlength;
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SpinnerNumber.prototype, "min", null);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SpinnerNumber.prototype, "max", null);
SpinnerNumber = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: '[spinner-number]',
    }),
    __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"])()),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1_primeng_components_spinner_spinner__["Spinner"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_primeng_components_spinner_spinner__["Spinner"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__services_infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__services_infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object])
], SpinnerNumber);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/spinner-number.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/tags-autocomplete.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_autocomplete_autocomplete__ = __webpack_require__("../../../../primeng/components/autocomplete/autocomplete.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_autocomplete_autocomplete___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_primeng_components_autocomplete_autocomplete__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TagsAutocomplete; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


let TagsAutocomplete = class TagsAutocomplete {
    constructor(component, elementRef) {
        this.elementRef = elementRef;
        this.enterEvent = {
            which: 13,
            preventDefault: function () {
                return;
            }
        };
        this.escaped = false;
        this.autocomplete = component;
    }
    ngAfterViewInit() {
        this.changeIsSelected();
        this.modifyChipsOriginalFunctions();
        this.registerUIEvents();
    }
    registerUIEvents() {
        let element = this.elementRef.nativeElement.querySelectorAll('.ui-autocomplete-input-token>input')[0];
        element.onblur = () => {
            if (this.escaped) {
                element.value = "";
                this.autocomplete.highlightOption = '';
                this.autocomplete.hide();
                this.escaped = false;
            }
            else if (!this.autocomplete.panelVisible) {
                this.autocomplete.onKeydown(this.enterEvent, this.elementRef.nativeElement.querySelectorAll('.ui-autocomplete-input-token>input')[0]);
            }
        };
    }
    changeIsSelected() {
        this.autocomplete.isSelected = (val) => {
            return false;
        };
    }
    modifyChipsOriginalFunctions() {
        let that = this;
        this.escaped = false;
        let originalKeydown = this.autocomplete.onKeydown;
        this.autocomplete.onKeydown = (event, inputEL) => {
            switch (event.which) {
                case 27:
                    this.escaped = true;
                    break;
                case 13:
                case 186:
                case 188:
                    this.autocomplete.highlightOption =
                        this.autocomplete.highlightOption ?
                            this.autocomplete.highlightOption :
                            this.elementRef.nativeElement.querySelectorAll('.ui-autocomplete-input-token>input')[0].value;
                    if (this.autocomplete.highlightOption.trim()) {
                        this.autocomplete.highlightOption = this.autocomplete.highlightOption.substring(0, 255); //tags limitation in kaltura server
                        this.autocomplete.selectItem(this.autocomplete.highlightOption);
                        this.autocomplete.highlightOption = '';
                        this.autocomplete.hide();
                    }
                    event.preventDefault();
                    break;
                default:
                    originalKeydown.call(that.autocomplete, event, inputEL);
                    break;
            }
        };
        let origSelectItem = this.autocomplete.selectItem;
        this.autocomplete.selectItem = (option) => {
            //first call original func.
            origSelectItem.call(that.autocomplete, option);
            //clearing values to avoid duplication by OnBlur event (due do mouse click)
            this.autocomplete.highlightOption = '';
            this.autocomplete.hide();
        };
    }
};
TagsAutocomplete = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: '[tags-autocomplete]',
    }),
    __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"])()),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1_primeng_components_autocomplete_autocomplete__["AutoComplete"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_primeng_components_autocomplete_autocomplete__["AutoComplete"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _b || Object])
], TagsAutocomplete);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/tags-autocomplete.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/tags-chips.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_chips_chips__ = __webpack_require__("../../../../primeng/components/chips/chips.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_chips_chips___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_primeng_components_chips_chips__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TagsChips; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


let TagsChips = class TagsChips {
    constructor(component, elementRef) {
        this.elementRef = elementRef;
        this.enterEvent = {
            which: 13,
            preventDefault: function () {
                return;
            }
        };
        this.chips = component;
    }
    ngAfterViewInit() {
        let source = this.elementRef.nativeElement.querySelectorAll('.ui-chips-input-token>input');
        //set max tag length to 255 chars
        if (source[0])
            source[0].maxLength = 255;
        //add tag on blur
        this.chips.registerOnTouched(() => {
            //adding new tag 'on blur'
            let blurred = this.elementRef.nativeElement.querySelectorAll('.ui-chips-input-token>input');
            if (blurred[0] && blurred[0]['value']) {
                this.chips.onKeydown(this.enterEvent, source[0]);
            }
        });
        this.modifyChipsOnKeydown();
    }
    modifyChipsOnKeydown() {
        let that = this;
        let originalKeydown = this.chips.onKeydown;
        this.chips.onKeydown = (event, inputEL) => {
            switch (event.which) {
                case 186:
                case 188:
                    originalKeydown.call(that.chips, this.enterEvent, inputEL);
                    event.preventDefault();
                    break;
                default:
                    originalKeydown.call(that.chips, event, inputEL);
                    break;
            }
        };
    }
};
TagsChips = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: '[tags-chips]',
    }),
    __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"])()),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1_primeng_components_chips_chips__["Chips"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_primeng_components_chips_chips__["Chips"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _b || Object])
], TagsChips);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/tags-chips.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/toggled-click-through-addon.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ToggledClickThroughAddon; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let ToggledClickThroughAddon = class ToggledClickThroughAddon {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    onMouseOver(target) {
        if (this.elementRef.nativeElement.className === target.className) {
            __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setIgnoreMouseEvents", true);
        }
    }
    onMouseOut(target) {
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setIgnoreMouseEvents", false);
    }
    ngOnDestroy() {
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("setIgnoreMouseEvents", false);
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('mouseover', ['$event.target']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ToggledClickThroughAddon.prototype, "onMouseOver", null);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('mouseout', ['$event.target']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ToggledClickThroughAddon.prototype, "onMouseOut", null);
ToggledClickThroughAddon = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: '[toggled-click-through-addon]',
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _a || Object])
], ToggledClickThroughAddon);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/toggled-click-through-addon.js.map

/***/ }),

/***/ "../../../../../src/shared/directives/tooltip-addon.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_tooltip_tooltip__ = __webpack_require__("../../../../primeng/components/tooltip/tooltip.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_primeng_components_tooltip_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_primeng_components_tooltip_tooltip__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TooltipAddon; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


let TooltipAddon = class TooltipAddon {
    constructor(component) {
        this.tooltip = component;
    }
    //make sure tooltips will be closed on app click (prevents overlap tooltips and dialogs)
    onDocumentClick() {
        if (this.tooltip.container) {
            this.tooltip.destroy();
        }
    }
    ngAfterViewInit() {
        let that = this; // Do not remove
        // Save original create function
        let originalCreateFunction = this.tooltip.create;
        //override original create function
        this.tooltip.create = function () {
            if (this.container) {
                this.destroy();
            }
            //call original create function
            originalCreateFunction.call(that.tooltip);
        };
    }
    ngOnDestroy() {
        this.tooltip.deactivate();
    }
};
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('document:click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TooltipAddon.prototype, "onDocumentClick", null);
TooltipAddon = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: '[tooltip-addon]',
    }),
    __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"])()),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1_primeng_components_tooltip_tooltip__["Tooltip"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_primeng_components_tooltip_tooltip__["Tooltip"]) === "function" && _a || Object])
], TooltipAddon);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/tooltip-addon.js.map

/***/ }),

/***/ "../../../../../src/shared/pipes/duration.pipe.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment__ = __webpack_require__("../../../../moment/moment.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DurationPipe; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



let DurationPipe = class DurationPipe {
    transform(durationNumber) {
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isFinite"](durationNumber)) {
            let duration = __WEBPACK_IMPORTED_MODULE_1_moment__["duration"](durationNumber);
            return this.padTo2Digits(duration.hours()) + ':' + this.padTo2Digits(duration.minutes()) + ':' + this.padTo2Digits(duration.seconds());
        }
        else {
            return '';
        }
    }
    padTo2Digits(number) {
        return (number < 10 ? '0' : '') + number;
    }
};
DurationPipe = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'duration'
    })
], DurationPipe);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/duration.pipe.js.map

/***/ }),

/***/ "../../../../../src/shared/pipes/safe.pipe.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__("../../../platform-browser/@angular/platform-browser.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SafyPipe; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let SafyPipe = class SafyPipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }
};
SafyPipe = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({ name: 'safeHtml' }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["DomSanitizer"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["DomSanitizer"]) === "function" && _a || Object])
], SafyPipe);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/safe.pipe.js.map

/***/ }),

/***/ "../../../../../src/shared/pipes/shared-pipes.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__timer_pipe__ = __webpack_require__("../../../../../src/shared/pipes/timer.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__duration_pipe__ = __webpack_require__("../../../../../src/shared/pipes/duration.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__time_pipe__ = __webpack_require__("../../../../../src/shared/pipes/time.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__truncate_pipe__ = __webpack_require__("../../../../../src/shared/pipes/truncate.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__safe_pipe__ = __webpack_require__("../../../../../src/shared/pipes/safe.pipe.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SharedPipes; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






let SharedPipes = class SharedPipes {
};
SharedPipes = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        declarations: [
            __WEBPACK_IMPORTED_MODULE_1__timer_pipe__["a" /* TimerPipe */],
            __WEBPACK_IMPORTED_MODULE_2__duration_pipe__["a" /* DurationPipe */],
            __WEBPACK_IMPORTED_MODULE_3__time_pipe__["a" /* TimePipe */],
            __WEBPACK_IMPORTED_MODULE_4__truncate_pipe__["a" /* TruncatePipe */],
            __WEBPACK_IMPORTED_MODULE_5__safe_pipe__["a" /* SafyPipe */]
        ],
        exports: [
            __WEBPACK_IMPORTED_MODULE_1__timer_pipe__["a" /* TimerPipe */],
            __WEBPACK_IMPORTED_MODULE_2__duration_pipe__["a" /* DurationPipe */],
            __WEBPACK_IMPORTED_MODULE_3__time_pipe__["a" /* TimePipe */],
            __WEBPACK_IMPORTED_MODULE_4__truncate_pipe__["a" /* TruncatePipe */],
            __WEBPACK_IMPORTED_MODULE_5__safe_pipe__["a" /* SafyPipe */]
        ]
    })
], SharedPipes);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/shared-pipes.module.js.map

/***/ }),

/***/ "../../../../../src/shared/pipes/time.pipe.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment__ = __webpack_require__("../../../../moment/moment.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_infra_system_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-data.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TimePipe; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let TimePipe = class TimePipe {
    constructor(systemData) {
        this.systemData = systemData;
    }
    transform(seconds, format, suffix) {
        let time = __WEBPACK_IMPORTED_MODULE_1_moment__(seconds).locale(this.systemData.getLang()).format(format);
        if (suffix === 'REMOVE_AM_PM_SUFFIX') {
            time = time.split(' ')[0];
        }
        else if (suffix === 'REMOVE_SPACES') {
            time = time.replace(' ', '').toLowerCase();
        }
        return time;
    }
};
TimePipe = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'time'
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__services_infra_system_data_service__["a" /* SystemDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__services_infra_system_data_service__["a" /* SystemDataService */]) === "function" && _a || Object])
], TimePipe);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/time.pipe.js.map

/***/ }),

/***/ "../../../../../src/shared/pipes/timer.pipe.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TimerPipe; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let TimerPipe = class TimerPipe {
    transform(seconds) {
        seconds = Math.round(seconds);
        let hours = Math.floor(seconds / 3600);
        seconds = seconds - hours * 3600;
        let minutes = Math.floor(seconds / 60);
        seconds = seconds - minutes * 60;
        return this.getTimerString(hours, minutes, seconds);
    }
    getTimerString(hours, minutes, seconds) {
        return this.getAsTwoDigits(hours) + ':' + this.getAsTwoDigits(minutes) + ':' + this.getAsTwoDigits(seconds);
    }
    getAsTwoDigits(number) {
        return number < 10 ? '0' + number : number;
    }
};
TimerPipe = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'timer'
    })
], TimerPipe);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/timer.pipe.js.map

/***/ }),

/***/ "../../../../../src/shared/pipes/truncate.pipe.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TruncatePipe; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let TruncatePipe = class TruncatePipe {
    transform(value, ...args) {
        let limit = args.length > 0 ? parseInt(args[0], 10) : 20;
        let trail = args.length > 1 ? args[1] : '...';
        return value.length > limit ? value.substring(0, limit) + trail : value;
    }
};
TruncatePipe = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'truncate'
    })
], TruncatePipe);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/truncate.pipe.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/audio-device-settings.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__device_settings_base_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-settings-base.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AudioDeviceSettingsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










let AudioDeviceSettingsService = class AudioDeviceSettingsService extends __WEBPACK_IMPORTED_MODULE_8__device_settings_base_service__["a" /* DeviceSettingsServiceBase */] {
    constructor(persistencyService, appState, log, appConfig, devicePreviewService) {
        super(persistencyService, appState, log, appConfig);
        this.devicePreviewService = devicePreviewService;
        //
        this.isCaptureSystemAudioOn = null;
        this.selectedAudioDeviceDelay = 0;
        this.sinkStartTimeout = 10000;
        this.deviceDelayKey = '';
        this.addSession('audio');
    }
    set selectedAudioDevice(value) {
        this.sessions.audio.selectedDevice = value;
    }
    get selectedAudioDevice() {
        return this.sessions.audio.selectedDevice;
    }
    set selectedInputType(value) {
        this.sessions.audio.selectedInputType = value;
    }
    get selectedInputType() {
        return this.sessions.audio.selectedInputType;
    }
    get audioInputTypes() {
        return this.sessions.audio.InputTypes;
    }
    /**
     * always return a new promise for audio settings data
     * @returns {Promise<T>}
     */
    loadAudioUserSettings() {
        return this.loadUserSettings('audio');
    }
    loadAudioDeviceList() {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getAudioDeviceList')
            .then((devices) => {
            let filteredDevices = __WEBPACK_IMPORTED_MODULE_4_lodash__["filter"](devices, (device) => { return !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](device['device_id']); });
            this.log.info('Audio devices loaded: ' + JSON.stringify(filteredDevices));
            return Promise.resolve(filteredDevices);
        })
            .catch((err) => {
            this.log.error(__WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    //get initial default selection
    getInitialAudioDevice(deviceList) {
        this.isCaptureSystemAudioOn = this.appConfig.getConfigData('config.captureEngine.captureSystemAudio') ?
            this.appConfig.getConfigData('config.captureEngine.captureSystemAudio') : false;
        return this.getInitialDevice('audio', deviceList);
    }
    getInitialAudioInputType(selectedDeviceId) {
        return this.getInitialInputType('audio', this.audioInputTypes, selectedDeviceId);
    }
    onAudioDeviceChange(selectedDevice) {
        this.log.info('onAudioDeviceChange ' + selectedDevice.label);
        //make sure audio session id will always be in the sessions ids array to update
        let sessionsIdsToUpdate = __WEBPACK_IMPORTED_MODULE_4_lodash__["uniq"](__WEBPACK_IMPORTED_MODULE_4_lodash__["concat"]([this.getSessionId('audio')], this.appState.getActiveRecordableSessionsIds()));
        return this.clearAudioDeviceSelections(true)
            .then(() => {
            return this.loadUserSettings('audio');
        })
            .then(() => {
            return this.setSelectedAudioDevice(sessionsIdsToUpdate, { friendly_name: selectedDevice.label, device_id: selectedDevice.value });
        })
            .then((audioDevice) => {
            return this.loadAudioInputTypeList(sessionsIdsToUpdate, audioDevice);
        })
            .then((inputTypes) => {
            this.log.info('loading audio input type list');
            return this.setSelectedAudioInputType(sessionsIdsToUpdate, this.audioInputTypes[0]);
        })
            .then((selectedInputType) => {
            return this.devicePreviewService.refreshSessionsPreview(sessionsIdsToUpdate);
        })
            .catch((err) => {
            this.log.error('ERROR changing audio device selection . ' + __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    reloadAudioDeviceDefaultConfiguration() {
        return this.persistencyService.get('audio.preview')
            .then((preview) => {
            //reload audio device only if it was set
            if (preview && preview === 'enabled' && this.sessions['audio'] && this.sessions['audio'].selectedDevice) {
                //label is not relevant here so just using device ID
                return this.onAudioDeviceChange({ label: this.sessions['audio'].selectedDevice, value: this.sessions['audio'].selectedDevice });
            }
            else {
                return Promise.resolve();
            }
        });
    }
    onAudioInputTypeChange(selectedAudioInputType) {
        return this.setSelectedAudioInputType(this.appState.getActiveRecordableSessionsIds(), selectedAudioInputType)
            .then(() => {
            return this.devicePreviewService.refreshRecordableSessionsPreview();
        })
            .catch((err) => {
            this.log.error('Failed to change audio input type. ' + __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * update all relevant sessions with new audio device configuration
     * @param sessionIds
     * @param audioDevice
     * @returns {Promise<T>|Promise<R>|Promise<U>}
     */
    setSelectedAudioDevice(sessionIds, audioDevice, saveData = true) {
        this.log.info('setSelectedAudioDevice ' + __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(sessionIds));
        let promises = [];
        __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](sessionIds, (sessionId) => {
            this.appState.onCallStarted('setSelectedAudioDevice: ' + audioDevice.device_id, sessionId);
            promises.push(__WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + '-setAudioDevice', audioDevice.device_id));
        });
        return Promise.all(promises)
            .then(() => {
            this.log.info('Finished setSelectedAudioDevice calls');
            __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](sessionIds, (sessionId) => {
                this.appState.onCallEnded('setSelectedAudioDevice - SUCCESS', sessionId);
            });
            this.selectedAudioDevice = audioDevice.device_id;
            if (saveData) {
                this.persistencyService.set('audio.device_id', this.selectedAudioDevice);
            }
            return this.getAudioDeviceDelay(audioDevice.friendly_name);
        })
            .then(() => {
            return this.selectedAudioDevice;
        })
            .catch((err) => {
            __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](sessionIds, (sessionId) => {
                this.appState.onCallEnded('setSelectedAudioDevice - FAILURE', sessionId);
            });
            return Promise.reject(err);
        });
    }
    /**
     * retrieve device delay setting for device with given friendly name
     * @param deviceName
     * @returns {Promise<T>|Promise<R>|Promise<U>}
     */
    getAudioDeviceDelay(deviceName) {
        this.selectedAudioDeviceDelay = 0;
        this.deviceDelayKey = "config.captureEngine.deviceConfig." + deviceName + ".streamOffset";
        this.log.info('retrieving audio delay for' + deviceName);
        let streamDelay = this.appConfig.getConfigData(this.deviceDelayKey);
        let sinkStartTimeout = this.appConfig.getConfigData("config.captureEngine.sinkStartTimeout");
        this.log.info('obtained audio delay for' + this.selectedAudioDevice + ' (' + deviceName + ') ' + streamDelay);
        this.selectedAudioDeviceDelay = streamDelay || 0;
        this.sinkStartTimeout = sinkStartTimeout || 10000;
        return this.selectedAudioDeviceDelay;
    }
    /**
     * update audio delay for device
     * param delay
     * @param deviceName
     * @returns {Promise<T>|Promise<R>|Promise<U>}
     */
    setSelectedAudioDeviceDelay(delay) {
        this.log.info('setSelectedAudioDeviceDelay: Request for reloading engine config with delay: ' + delay);
        if (this.selectedAudioDeviceDelay == delay) {
            return Promise.resolve();
        }
        this.selectedAudioDeviceDelay = delay;
        return this.appConfig.setConfigData(this.deviceDelayKey, this.selectedAudioDeviceDelay, true)
            .then(() => {
            return this.appState.shutDownSessions();
        })
            .then(() => {
            return this.appState.sendInitNotification();
        });
    }
    setCaptureSystemAudioState(isCaptureSystemAudioOn) {
        this.log.info('AudioDeviceSettings: Request for reloading engine config with: System Audio: ' + isCaptureSystemAudioOn);
        this.isCaptureSystemAudioOn = isCaptureSystemAudioOn;
        return this.appConfig.setConfigData('config.captureEngine.captureSystemAudio', this.isCaptureSystemAudioOn, true)
            .then(() => {
            return this.appState.shutDownSessions();
        })
            .then(() => {
            return this.appState.sendInitNotification();
        });
    }
    /**
     * for loading input types for audio we currently need only one session id since we are using the same audio device.
     * @param sessionsIds []
     * @param selectedAudioDevice
     * @returns {Promise<Array>}
     */
    loadAudioInputTypeList(sessionsIds, selectedAudioDevice) {
        return this.loadDeviceInputTypeList('audio', sessionsIds[0], selectedAudioDevice, 'audio');
    }
    filterInputTypes(inputTypes, limits) {
        return __WEBPACK_IMPORTED_MODULE_4_lodash__["castArray"](inputTypes[0]);
    }
    /*
    *  since audio device is shared between sessions defer setting & perissting
    *  type until all promises are resolved
    *  @param sessionsIds []
    * @param inputType
    * @param saveData
    * @returns {Promise}
    * */
    setSelectedAudioInputType(sessionIds, inputType, saveData = true) {
        this.log.info('setSelectedAudioInputType: ' + __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(sessionIds));
        let promises = __WEBPACK_IMPORTED_MODULE_4_lodash__["map"](sessionIds, (sessionId) => {
            return this.setSelectedInputType('audio', //session name
            sessionId, inputType, false); // do not update persistency
        });
        return Promise.all(promises)
            .then(() => {
            this.log.info('Finished settings audio input type. ' + __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(sessionIds));
            if (saveData) {
                this.persistencyService.set('audio.input_type_id', inputType);
            }
            return inputType;
        });
    }
    unsetAudioDevice(sessionIds) {
        let that = this;
        let promises = __WEBPACK_IMPORTED_MODULE_4_lodash__["map"](sessionIds, function (sessionId) {
            that.appState.onCallStarted('unsetAudioDevice', sessionId);
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + '-unsetAudioDevice');
        });
        return Promise.all(promises)
            .then(() => {
            // not removing related sessionIds !!!!!
            __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](sessionIds, function (sessionId) {
                that.appState.onCallEnded('unsetAudioDevice - SUCCESS', sessionId);
            });
        })
            .catch((err) => {
            __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](sessionIds, function (sessionId) {
                that.appState.onCallEnded('unsetAudioDevice - FAILURE', sessionId);
            });
            return Promise.reject(err);
        });
    }
    saveDeviceSelections() {
        return super.saveDeviceSelections('audio');
    }
    clearAudioDeviceSelections(clearPersistency) {
        return super.clearDeviceSelections('audio', clearPersistency);
    }
};
AudioDeviceSettingsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_9__device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__device_preview_service__["a" /* DevicePreviewService */]) === "function" && _e || Object])
], AudioDeviceSettingsService);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/audio-device-settings.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/audio-device.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__audio_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__device_recovery_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-recovery.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__capture_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/capture-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AudioDeviceService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












let AudioDeviceService = class AudioDeviceService extends __WEBPACK_IMPORTED_MODULE_9__capture_device_service__["a" /* CaptureDeviceService */] {
    constructor(appState, audioDeviceSettingsService, notificationService, log, devicePreviewService, persistencyService, recoveryService, appConfig) {
        super(appState, log, audioDeviceSettingsService, recoveryService);
        this.appState = appState;
        this.audioDeviceSettingsService = audioDeviceSettingsService;
        this.notificationService = notificationService;
        this.log = log;
        this.devicePreviewService = devicePreviewService;
        this.persistencyService = persistencyService;
        this.recoveryService = recoveryService;
        this.appConfig = appConfig;
        //indicates if audio devices available
        this.audioAvailable = false;
    }
    getSessionId() {
        return super.getSessionId('audio');
    }
    initAudioDevice() {
        this.log.info('initAudioDevice');
        return this.createDeviceSession('audio')
            .then(() => {
            //loading initial device configurations
            return this.loadInitialAudioDeviceConfiguration(this.getSessionId(), true);
        });
    }
    /**
     * will reject if error,
     * will reject with 'NO_AUDIO_DEVICES'
     * @param sessionId
     * @returns {Promise<T>|Promise<R>|Promise<U>}
     */
    loadInitialAudioDeviceConfiguration(sessionId, isAudioSession) {
        this.log.info('loadInitialAudioDeviceConfiguration - ' + sessionId);
        return this.initialAudioConfiguration(sessionId)
            .then((startPreview) => {
            if (startPreview) {
                return Promise.all([startPreview, this.tryToRecoverAudioDevice(isAudioSession)]);
            }
            else {
                return Promise.all([false, true]); //indication the recovery process didn't fail (it wasn't needed)
            }
        })
            .then(([startPreview, recoverySucceeded]) => {
            if (isAudioSession && startPreview && recoverySucceeded) {
                this.log.info('starting audio device for session - ' + sessionId);
                //will add the session in ACTIVE state
                return this.startAudioDevicePreview();
            }
            else {
                if (isAudioSession) {
                    this.appState.addSession(sessionId, 'audio', this.appState.SESSION_STATE.IN_ACTIVE);
                }
                return Promise.resolve();
            }
        })
            .then(() => {
            return this.audioDeviceSettingsService.saveDeviceSelections();
        })
            .catch((err) => {
            //will add the session in IN_ACTIVE state only for Audio session
            if (isAudioSession) {
                this.appState.addSession(sessionId, 'audio', this.appState.SESSION_STATE.IN_ACTIVE);
                this.recoveryService.addRecoveryReadySession(sessionId, 'audio', false, err);
            }
            return this.rejectAudioPromise('Failed to load initial audio device configuration.', err);
        });
    }
    /**
     * will return the selected input type or false if not needed or can't configure device
     * @param sessionId
     * @return {Promise<boolean>}
     */
    initialAudioConfiguration(sessionId) {
        this.log.info('initialAudioConfiguration');
        this.checkAudioDevicesAvailability();
        //audio device initialization is different than video and screen, once device is set there will be audio.
        //this is the reason for not configuring audio device if we shouldn't enable it.
        return this.shouldInitialPreviewDevice()
            .then((preview) => {
            if (preview) {
                return this.loadAudioDeviceConfiguration([sessionId], false)
                    .then((audioDevice) => {
                    return this.loadAudioInputTypeConfiguration([sessionId], audioDevice, false);
                });
            }
            else {
                return Promise.resolve(false);
            }
        });
    }
    /**
     * will return a boolean value if recovered (indication if need to start device)
     * @param isAudioSession - indicates if recovery is for an audio session and not for visual device that uses audio
     * @return {Promise<boolean>}
     */
    tryToRecoverAudioDevice(isAudioSession) {
        this.log.info('tryToRecoverAudioDevice. audioSession: ' + isAudioSession);
        return Promise.all([this.recoveryService.shouldRecoverAudioForRecording(), this.recoveryService.getAudioSessionRecordingFile()])
            .then(([shouldRecover, audioFile]) => {
            if (shouldRecover) {
                //send audio session file only for audio session - we would like to build record for this file only for the audio session
                let audioSessionFile = isAudioSession ? audioFile : null;
                return this.tryToLoadInRecoveryMode('audio', 'audio', audioSessionFile)
                    .catch((err) => {
                    return Promise.reject(this.recoveryService.DEVICE_STATE.DISCONNECTED);
                });
            }
            else {
                //although we weren't in recovery process - we set the recovery process for current device to true
                //so we will know device was configured and ready to capture
                this.recoveryService.addRecoveryReadySession(this.getSessionId(), 'audio', true);
                // device should start previewing in a non recovery mode only if we are not during a recording
                // if we are in the middle of a recording, the device was just disconnected when recording started
                return !this.isAppRecording();
            }
        });
    }
    /**
     * will reject with 'NO_AUDIO_DEVICES' if there are no audio devices and it is a must for recovery
     * @param sessionsIds array
     * @returns {Promise<T>|Promise<R>|Promise<U>}
     */
    loadAudioDeviceConfiguration(sessionsIds, saveData = true) {
        this.log.info('loadAudioDeviceConfiguration ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(sessionsIds));
        return this.audioDeviceSettingsService.loadAudioDeviceList()
            .then((devices) => {
            if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](devices)) {
                return this.configureAudioDevice(sessionsIds, devices, saveData);
            }
            else {
                this.audioDeviceSettingsService.clearAudioDeviceSelections(saveData);
                return Promise.reject('NO_AUDIO_DEVICES');
            }
        })
            .catch((err) => {
            return this.rejectAudioPromise('Failed to load and set initial audio device.', err);
        });
    }
    isAudioSettingsDisabled() {
        return this.shouldDisableDeviceSettings() || this.isProcessing();
    }
    isAudioEnabled(enableAudioOnly) {
        let audioEnabled = !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.appState.getActiveAudioSession());
        return enableAudioOnly ? audioEnabled : audioEnabled && __WEBPACK_IMPORTED_MODULE_3_lodash__["keys"](this.appState.getActiveVisualSessions()).length > 0;
    }
    /**
     * Enabling audio device
     * @returns {Promise<U>|Promise<T>|Promise<R>}
     */
    enableAudioDevice() {
        this.log.info('enable audio device');
        let sessionsIds = [this.getSessionId()]; //add audio session id
        // getting all active recordable sessions and all in-active visual session.
        // handling in-active visual session since when de-activating a session in our app we are only stopping its' preview (the session is still alive in our engine)
        // in order for the audio enabling affects those sessions as well - we need to handle them.
        sessionsIds = sessionsIds.concat(this.appState.getActiveRecordableSessionsIds(), __WEBPACK_IMPORTED_MODULE_3_lodash__["keys"](this.appState.getInActiveVisualSessions()));
        return this.loadAudioDeviceConfiguration(sessionsIds)
            .then((audioDevice) => {
            return this.loadAudioInputTypeConfiguration(sessionsIds, audioDevice);
        })
            .then(() => {
            return this.startAudioDevicePreview();
        })
            .then(() => {
            return this.devicePreviewService.refreshRecordableSessionsPreview();
        })
            .catch((err) => {
            this.log.error(__WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    shouldDisableAudioButton(sourceOnly = false) {
        return !this.audioAvailable ||
            this.isProcessing(sourceOnly) ||
            !this.appState.isSourceStable(this.getSessionId()) ||
            (__WEBPACK_IMPORTED_MODULE_3_lodash__["keys"](this.appState.getActiveVisualSessions()).length === 0 &&
                !this.appConfig.getConfigData('config.captureApp.audioOnlyRecording'));
    }
    /**
     * disabling audio device
     * @returns {Promise<U>|Promise<T>|Promise<R>}
     */
    disableAudioDevice() {
        this.log.info('disable audio device');
        // getting all active recordable sessions and all in-active visual session.
        // handling in-active visual session since when de-activating a session in our app we are only stopping its' preview (the session is still alive in our engine)
        // in order for the audio disabling affects those sessions as well - we need to handle them.
        let sessionsIds = __WEBPACK_IMPORTED_MODULE_3_lodash__["concat"](this.appState.getActiveRecordableSessionsIds(), __WEBPACK_IMPORTED_MODULE_3_lodash__["keys"](this.appState.getInActiveVisualSessions()));
        return this.audioDeviceSettingsService.unsetAudioDevice(sessionsIds)
            .then(() => {
            return this.stopAudioDevicePreview();
        })
            .then(() => {
            return this.devicePreviewService.refreshRecordableSessionsPreview();
        })
            .catch((err) => {
            this.log.error(__WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    configureAudioDevice(sessionsIds, devices, saveData = true) {
        this.log.info("configureAudioDevice " + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(sessionsIds));
        return this.audioDeviceSettingsService.getInitialAudioDevice(devices)
            .then((audioDevice) => {
            this.log.info('setting the following audio device: ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(audioDevice));
            return this.audioDeviceSettingsService.setSelectedAudioDevice(sessionsIds, audioDevice, saveData);
        })
            .catch((err) => {
            return this.rejectAudioPromise('Failed to configure initial audio device.', err);
        });
    }
    loadAudioInputTypeConfiguration(sessionsIds, audioDevice, saveData = true) {
        this.log.info('loadAudioInputTypeConfiguration: ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(sessionsIds));
        return this.audioDeviceSettingsService.loadAudioInputTypeList(sessionsIds, audioDevice)
            .then((inputTypes) => {
            if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](inputTypes)) {
                return this.configureAudioInputType(sessionsIds, audioDevice, saveData);
            }
            else {
                return Promise.reject('No audio input types were found for current audio device: ' + audioDevice);
            }
        })
            .catch((err) => {
            return this.rejectAudioPromise('Failed to load audio input type configuration.', err);
        });
    }
    configureAudioInputType(sessionsIds, selectedDeviceId, saveData = true) {
        this.log.info('configureAudioInputType ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(sessionsIds));
        return this.audioDeviceSettingsService.getInitialAudioInputType(selectedDeviceId)
            .then((inputType) => {
            this.log.info('setting the following audio input type: ' + inputType['description']);
            return this.audioDeviceSettingsService.setSelectedAudioInputType(sessionsIds, inputType, saveData);
        })
            .catch((err) => {
            return this.rejectAudioPromise('Failed to configure audio input type.', err);
        });
    }
    startAudioDevicePreview() {
        return this.devicePreviewService.startAudioPreviewAndActivateSession(this.getSessionId())
            .then(() => {
            return this.persistencyService.set('audio.preview', "enabled");
        })
            .catch((err) => {
            this.notificationService.sendNotification('NOTIFICATIONS.error_audioPreviewStart', 'error');
            return Promise.reject(err);
        });
    }
    stopAudioDevicePreview() {
        return this.devicePreviewService.stopAudioPreviewAndDeActivateSession(this.getSessionId())
            .then(() => {
            return this.persistencyService.set('audio.preview', "disabled");
        });
    }
    //will be ready only if all main sessions devices are in stable state
    isProcessing(sourceOnly = false) {
        let stable = true;
        __WEBPACK_IMPORTED_MODULE_3_lodash__["forEach"](this.appState.getActiveRecordableSessionsIds(), (sessionId) => {
            stable = stable && this.appState.isSourceStable(sessionId, sourceOnly);
        });
        //make sure there are recordable devices current in preview before enabling the audio button (unless in audioOnly mode)
        return !stable || (__WEBPACK_IMPORTED_MODULE_3_lodash__["keys"](this.appState.getActiveVisualSessions()).length === 0 &&
            !this.appConfig.getConfigData('config.captureApp.audioOnlyRecording'));
    }
    shouldInitialPreviewDevice() {
        return this.audioDeviceSettingsService.loadAudioUserSettings()
            .then((settings) => {
            return (!settings || !settings['preview'] || settings['preview'] === "enabled");
        })
            .catch(() => {
            return true;
        });
    }
    shouldDisableDeviceSettings() {
        return !this.audioDeviceSettingsService.selectedAudioDevice ||
            this.audioDeviceSettingsService.audioInputTypes.length === 0;
    }
    isAppRecording() {
        return this.appState.isAppRecording();
    }
    checkAudioDevicesAvailability() {
        //check if audio devices available and set the flag
        return this.audioDeviceSettingsService.loadAudioDeviceList()
            .then((devices) => {
            this.audioAvailable = !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](devices);
        })
            .catch((err) => {
            this.audioAvailable = false;
        })
            .then(() => {
            return this.audioAvailable;
        });
    }
    /**
     * will return an audio related error (prefix - AUDIO) so sessions will be able to identify an audio error
     * @param msg
     * @param err
     * @returns {Promise<void>|Promise<T>}
     */
    rejectAudioPromise(msg, err) {
        this.log.error(msg + ' - ' + JSON.stringify(err));
        let errString = __WEBPACK_IMPORTED_MODULE_3_lodash__["isObject"](err) ? JSON.stringify(err) : err;
        errString = (errString.indexOf('NO_AUDIO_DEVICES') > -1) ? errString : 'AUDIO-' + errString;
        //if recovery failed due to an error different than disconnection or NO_AUDIO_DEVICES during recording - save device settings
        if ((err && err !== this.recoveryService.DEVICE_STATE.DISCONNECTED) && !(this.isAppRecording() && errString && errString.indexOf('NO_AUDIO_DEVICES') > -1)) {
            this.deviceSettingsService.saveDeviceSelections('audio');
        }
        return Promise.reject(errString);
    }
};
AudioDeviceService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__infra_app_state_service__["a" /* AppStateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__audio_device_settings_service__["a" /* AudioDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__audio_device_settings_service__["a" /* AudioDeviceSettingsService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_11__infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__device_preview_service__["a" /* DevicePreviewService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_6__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_7__device_recovery_service__["a" /* DeviceRecoveryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__device_recovery_service__["a" /* DeviceRecoveryService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_10__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _h || Object])
], AudioDeviceService);

var _a, _b, _c, _d, _e, _f, _g, _h;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/audio-device.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/capture-device.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__audio_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__audio_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__device_connection_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-connection.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__device_recovery_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-recovery.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__device_resources_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-resources.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_shared_services_infra_infra_module__ = __webpack_require__("../../../../../src/shared/services/infra/infra.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__monitoring_monitoring_module__ = __webpack_require__("../../../../../src/shared/services/monitoring/monitoring.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__default_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/default-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_shared_services_live_live_module__ = __webpack_require__("../../../../../src/shared/services/live/live.module.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CaptureDeviceModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};













let CaptureDeviceModule = class CaptureDeviceModule {
};
CaptureDeviceModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_9_shared_services_infra_infra_module__["a" /* InfraModule */],
            __WEBPACK_IMPORTED_MODULE_10__monitoring_monitoring_module__["a" /* MonitoringModule */],
            __WEBPACK_IMPORTED_MODULE_12_shared_services_live_live_module__["a" /* LiveModule */]
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_1__audio_device_service__["a" /* AudioDeviceService */],
            __WEBPACK_IMPORTED_MODULE_2__audio_device_settings_service__["a" /* AudioDeviceSettingsService */],
            __WEBPACK_IMPORTED_MODULE_3__device_connection_service__["a" /* DeviceConnectionService */],
            __WEBPACK_IMPORTED_MODULE_4__device_preview_service__["a" /* DevicePreviewService */],
            __WEBPACK_IMPORTED_MODULE_5__device_recovery_service__["a" /* DeviceRecoveryService */],
            __WEBPACK_IMPORTED_MODULE_6__device_resources_service__["a" /* DeviceResourcesService */],
            __WEBPACK_IMPORTED_MODULE_7__video_device_service__["a" /* VideoDeviceService */],
            __WEBPACK_IMPORTED_MODULE_8__video_device_settings_service__["a" /* VideoDeviceSettingsService */],
            __WEBPACK_IMPORTED_MODULE_11__default_settings_service__["a" /* DefaultSettingsService */]
        ]
    })
], CaptureDeviceModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/capture-device.module.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/capture-device.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");


class CaptureDeviceService {
    constructor(appState, log, deviceSettingsService, recoveryService) {
        this.appState = appState;
        this.log = log;
        this.deviceSettingsService = deviceSettingsService;
        this.recoveryService = recoveryService;
    }
    getSessionId(sessionName) {
        return this.deviceSettingsService.getSessionId(sessionName);
    }
    createDeviceSession(sessionName) {
        this.appState.addLoadingSession();
        this.appState.onCallStarted('createSession', 'createSession-' + sessionName);
        return __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('createSession')
            .then((sessionId) => {
            this.appState.onCallEnded('createSession - SUCCESS', 'createSession-' + sessionName);
            this.log.info('**** ' + sessionName + ' session id: ' + sessionId);
            this.deviceSettingsService.getSessionData(sessionName).sessionId = sessionId;
            return this.deviceSettingsService.getSessionData(sessionName);
        })
            .catch((err) => {
            this.appState.onCallEnded('createSession - FAILURE', 'createSession-' + sessionName);
            this.log.error('Error creating ' + sessionName + ' session.' + __WEBPACK_IMPORTED_MODULE_1__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * get recording settings and checking if need to load in recovery mode
     * if a capture file exists from previous recording that didn't end (app exited)
     * build recording session for current capture session with the capture file as a parameter
     * if there is no recover file name
     */
    tryToLoadInRecoveryMode(sessionName, deviceType, recoverFileName) {
        this.log.debug('tryToLoadInRecoveryMode - ' + sessionName);
        return this.recoveryService.canRecoverDeviceForRecording(sessionName)
            .then((canRecover) => {
            if (!canRecover)
                return Promise.reject(this.recoveryService.DEVICE_STATE.DISCONNECTED);
            if (!recoverFileName) {
                this.log.info('No need to build recording for current recovery request since it is an audio device used by a visual capture device');
                return Promise.resolve();
            } //there is no need to build recording (audio session that is being used by a visual recording)
            //recoverable session with recoverable recoding file
            this.log.info('Loading ' + sessionName + ' device session in recovery mode.');
            let fileName = recoverFileName.replace(/^.*[\\\/]/, '');
            return this.buildRecordingSession(sessionName, fileName);
        })
            .then(() => {
            this.log.info('Send addRecoveryReadySession notification for successful ' + sessionName + ' recovery preparation.');
            this.recoveryService.addRecoveryReadySession(this.getSessionId(sessionName), sessionName, true);
            return true;
        })
            .catch((err) => {
            this.log.error('Error loading ' + sessionName + ' device in recovery mode.');
            return Promise.reject(err);
        });
    }
    buildRecordingSession(sessionName, filePath) {
        this.log.info('Building ' + sessionName + ' device recovery recording session' + this.deviceSettingsService.getSessionData(sessionName).sessionId);
        this.appState.onCallStarted('buildRecord', sessionName + this.deviceSettingsService.getSessionData(sessionName).sessionId);
        return __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(this.deviceSettingsService.getSessionData(sessionName).sessionId + '-buildRecord', filePath)
            .then(() => {
            this.appState.onCallEnded('buildRecord - SUCCESS', sessionName + this.deviceSettingsService.getSessionData(sessionName).sessionId);
            return filePath;
        })
            .catch((err) => {
            this.appState.onCallEnded('buildRecord - FAILURE', sessionName + this.deviceSettingsService.getSessionData(sessionName).sessionId);
            this.log.error('Failed to build recording for ' + sessionName + ' session: ' + this.deviceSettingsService.getSessionData(sessionName).sessionId + __WEBPACK_IMPORTED_MODULE_1__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(this.recoveryService.DEVICE_STATE.FAILED);
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CaptureDeviceService;

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/capture-device.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/default-settings.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__audio_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__device_recovery_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-recovery.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DefaultSettingsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












let DefaultSettingsService = class DefaultSettingsService {
    constructor(log, appState, appConfig, recoveryService, audioDeviceService, appPersistency, devicePreviewService, videoDeviceSettingsService) {
        this.log = log;
        this.appState = appState;
        this.appConfig = appConfig;
        this.recoveryService = recoveryService;
        this.audioDeviceService = audioDeviceService;
        this.appPersistency = appPersistency;
        this.devicePreviewService = devicePreviewService;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.MIN_IDLE_TIME = 10; //in minutes
        this.getBaseIdleTime();
    }
    start(callback) {
        //initial application load - if app is not in recording state, setting default configuration
        this.triggerRestoreDefaultSettings(callback);
        this.intervalSub = __WEBPACK_IMPORTED_MODULE_3_rxjs__["Observable"].timer(0, 60000).subscribe(t => {
            if (this.idleCounter <= 0)
                this.triggerRestoreDefaultSettings(callback);
            else
                this.idleCounter--;
        });
    }
    restartInterval() {
        this.idleCounter = this.getBaseIdleTime();
    }
    stop() {
        if (this.intervalSub) {
            this.intervalSub.unsubscribe();
            this.intervalSub = null;
        }
    }
    triggerRestoreDefaultSettings(callback) {
        this.log.info('DefaultSettingsService: triggerRestoreDefaultSettings');
        this.appState.areSessionsReadyForRecording('triggerRestoreDefaultSettings')
            .then(() => {
            this.restoreDefaultSettings()
                .then((restored) => {
                if (restored && callback)
                    callback();
            });
        });
    }
    restoreDefaultSettings() {
        return this.isAppInRecordingState()
            .then(recording => {
            if (recording) {
                this.log.info('DefaultSettingsService: application is during recording, not setting admin default values');
                this.restartInterval();
                return Promise.resolve(false);
            }
            else {
                this.log.info('DefaultSettingsService: checking if settings need to be reset to admin defaults');
                return this.settingsRestoreProcess();
            }
        });
    }
    settingsRestoreProcess() {
        this.restartInterval();
        return this.appPersistency.get('')
            .then((persistentData) => {
            if (!persistentData || !persistentData['defaultSettings'] || __WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](persistentData) || __WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](persistentData['defaultSettings'])) {
                this.log.info('DefaultSettingsService: persistent data or defaultSettings data are empty');
                return Promise.resolve(false);
            }
            else {
                if (this.shouldRestoreAdminDefaults(persistentData)) {
                    return this.updateSessionsInPersistentData(persistentData)
                        .then(() => { return Promise.resolve(true); });
                }
                else {
                    this.log.info('DefaultSettingsService: there is no need to re-init sessions since no ');
                    return Promise.resolve(false);
                }
            }
        })
            .catch((e) => {
            this.log.error('DefaultSettingsService: Failed to update devices configurations with default settings. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(e));
            return Promise.resolve(false);
        });
    }
    shouldRestoreAdminDefaults(persistentData) {
        let defaultSettings = persistentData['defaultSettings'];
        //if sessions count is different - update current sessions
        if (this.extractSessionsNames(persistentData).length !== this.extractSessionsNames(defaultSettings).length)
            return true;
        //if sessions count is equal - check for configuration changes for each session
        let shouldRestore = false;
        __WEBPACK_IMPORTED_MODULE_6_lodash__["forEach"](this.extractSessionsNames(persistentData), sessionName => {
            shouldRestore = persistentData[sessionName] && defaultSettings[sessionName] &&
                !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEqual"](persistentData[sessionName], defaultSettings[sessionName]);
            if (shouldRestore)
                return false; //break lodah forEach
        });
        return shouldRestore;
    }
    updateSessionsInPersistentData(persistentData) {
        this.log.info('DefaultSettingsService: updated devices configuration with default admin settings');
        //using sessions from persistent data obj
        let sessionsNames = this.extractSessionsNames(persistentData);
        //remove persistent data old sessions
        __WEBPACK_IMPORTED_MODULE_6_lodash__["forEach"](sessionsNames, sessionName => {
            delete persistentData[sessionName];
        });
        //using sessions from default settings object
        let defaultSettings = persistentData['defaultSettings'];
        sessionsNames = this.extractSessionsNames(defaultSettings);
        //add default settings sessions to persistent data
        __WEBPACK_IMPORTED_MODULE_6_lodash__["forEach"](sessionsNames, sessionName => {
            persistentData[sessionName] = defaultSettings[sessionName];
        });
        //update persistent data object
        return this.appPersistency.set('all', persistentData)
            .then(() => {
            //shutdown sessions
            this.log.info('DefaultSettingsService: re-init sessions after restoring default admin settings');
            return this.shutDownAndReInitSessions();
        });
    }
    extractSessionsNames(dataObject) {
        let sessionsNames = [];
        __WEBPACK_IMPORTED_MODULE_6_lodash__["forEach"](dataObject, (value, key) => {
            if (key.startsWith('session') || key.startsWith('audio')) {
                sessionsNames.push(key);
            }
        });
        return sessionsNames;
    }
    shutDownAndReInitSessions() {
        //can be called on app load before session are active
        if (__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](this.appState.getActiveSessions()) && __WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](this.appState.getInActiveSessions())) {
            this.log.info('DefaultSettingsService: there is no need to reinint sesson since non is active');
            return Promise.resolve();
        }
        else {
            return this.appState.areSessionsReadyForRecording('DefaultSettingsService')
                .catch(() => { }) //shut down sessions any way...
                .then(() => {
                return this.devicePreviewService.unregisterFromAudioNotification();
            })
                .then(() => {
                this.recoveryService.resetRecoverySessions();
                return this.appState.shutDownSessions()
                    .then(() => {
                    return this.videoDeviceSettingsService.clearSessions();
                })
                    .then(() => {
                    this.appState.sendInitNotification();
                })
                    .catch((err) => {
                    this.log.error('DefaultSettingsService: failed to shut down active sessions. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
                    return Promise.reject(err);
                });
            });
        }
    }
    getBaseIdleTime() {
        let baseIdleTime = this.appConfig.getConfigData('config.captureApp.restoreDefaultSettings.appIdleMin');
        return baseIdleTime && baseIdleTime > this.MIN_IDLE_TIME ? baseIdleTime : this.MIN_IDLE_TIME;
    }
    //checking persistent data and not appState since it is being used also on application start (sessions are not ready yet)
    isAppInRecordingState() {
        return this.appPersistency.get('recording')
            .then(recData => {
            return !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](recData) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](recData['details']) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](recData['details']['files']);
        })
            .catch((err) => {
            this.log.error('DefaultSettingsService: Failed to read recovery persistent data. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return true;
        });
    }
};
DefaultSettingsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_7__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_10__device_recovery_service__["a" /* DeviceRecoveryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__device_recovery_service__["a" /* DeviceRecoveryService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_9__audio_device_service__["a" /* AudioDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__audio_device_service__["a" /* AudioDeviceService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_8__device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__device_preview_service__["a" /* DevicePreviewService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_11__video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _h || Object])
], DefaultSettingsService);

var _a, _b, _c, _d, _e, _f, _g, _h;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/default-settings.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/device-connection.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__device_recovery_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-recovery.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DeviceConnectionService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};













let DeviceConnectionService = class DeviceConnectionService {
    constructor(log, config, appState, recoveryService, persistencyService, notificationService, translate, videoDeviceService) {
        this.log = log;
        this.config = config;
        this.appState = appState;
        this.recoveryService = recoveryService;
        this.persistencyService = persistencyService;
        this.notificationService = notificationService;
        this.translate = translate;
        this.videoDeviceService = videoDeviceService;
        this.CONNECTED = 'connected';
        this.DISCONNECTED = 'disconnected';
        /**
         * notify on each device connection state change
         * will send and object of: {deviceId: xxx , state: connected / disconnected}
         * @type {BehaviorSubject}
         */
        this.deviceConnectionState = new __WEBPACK_IMPORTED_MODULE_5_rxjs__["BehaviorSubject"]({});
        this.deviceConnectionState$ = this.deviceConnectionState.asObservable();
        /**
         * disconnection events queue
         * @type {Array}
         */
        this.eventsQueue = [];
        this.inProgress = false;
        this.addListeners();
    }
    getConnectionState() {
        return this.deviceConnectionState.getValue();
    }
    /**
     * listen to connect / disconnect events from engine.
     * currently sending app notifications only for in-use devices
     */
    addListeners() {
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-device-status-change', (data) => {
            if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isString"](data)) {
                data = JSON.parse(data);
            }
            this.log.info('on-device-status-change notification was fired from engine. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(data));
            switch (data.state) {
                case 'Added':
                case 'unMirrored':
                    this.sendDeviceConnectionStateNotification(data['device_id'], this.CONNECTED);
                    break;
                case 'Removed':
                case 'mirrored':
                    this.sendDeviceConnectionStateNotification(data['device_id'], this.DISCONNECTED);
                    break;
                case 'Active':
                    this.log.info('on-device-status-change notification was fired from engine. returning from ctl-alt-del');
                    this.addDeviceConnectionEvent({ 'deviceId': 'display', 'state': 'false', 'event': 'ctl-alt-del', 'inUse': true });
                    break;
                case 'Inactive':
                    this.log.info('on-device-status-change notification was fired from engine. ctl-alt-del');
                    this.addDeviceConnectionEvent({ 'deviceId': 'display', 'state': 'true', 'event': 'ctl-alt-del', 'inUse': true });
                    break;
                default:
                    this.log.error('on-device-status-change unrecognized state. ' + data['state']);
                    break;
            }
        });
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('power-sleep', (data) => {
            this.log.info('power-sleep notification was fired from engine. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(data));
            this.addDeviceConnectionEvent({ 'deviceId': 'display', 'state': data, 'event': 'sleep', 'inUse': true });
        });
        // User-switch does not terminate current session, which means app continues to run and hold devices
        // mostly relevant for PersonalCapture (KalturaCapture)
        // to prevent this we just shut down the app.
        // timeing is not an issue since the "old" windows session continues to run
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('user-switch', (data) => {
            this.log.info('user-switch notification was fired from engine. quitting app ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(data));
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('signOutApp')
                .catch((err) => {
                this.log.error('Failed to sign out.' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            });
        });
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('rdp-connection', (data) => {
            this.log.info('rdp-connection notification was fired from engine. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(data));
            if (data) {
                this.notificationService.sendNotification("NOTIFICATIONS.warn_remoteDesktopConnection", 'warn');
            }
            else {
                this.notificationService.sendNotification("NOTIFICATIONS.info_remoteDesktopConnection", 'info');
            }
        });
        //device accessibility (privacy state) change event
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('device-accessibility-change', (data) => {
            if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isString"](data)) {
                data = JSON.parse(data);
            }
            this.log.info('device-accessibility-change notification was fired from engine. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(data));
            let sessionsDataPromises = [];
            if (data['device_type'] === 'audio') {
                sessionsDataPromises = ['audio'];
            }
            else {
                sessionsDataPromises = __WEBPACK_IMPORTED_MODULE_2_lodash__["concat"](this.appState.getSessionsNames(true), this.appState.getSessionsNames(false));
                __WEBPACK_IMPORTED_MODULE_2_lodash__["remove"](sessionsDataPromises, sessionName => {
                    return sessionName === 'audio' || this.videoDeviceService.getCaptureDeviceTypeBySessionId(sessionName) === 'screen';
                });
            }
            sessionsDataPromises = __WEBPACK_IMPORTED_MODULE_2_lodash__["map"](sessionsDataPromises, sessionName => this.persistencyService.get(sessionName));
            Promise.all(sessionsDataPromises) //waiting for all data to return
                .then((sessionsDataResults) => {
                //report device dis/connection to all devices of the type regardless it's connection status.
                // care only for device status
                const deviceIds = __WEBPACK_IMPORTED_MODULE_2_lodash__["map"](sessionsDataResults, (sessionData) => sessionData['device_id']);
                __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](deviceIds, (device_d) => {
                    this.sendDeviceConnectionStateNotification(device_d, data['state'] === 'allow' ? this.CONNECTED : this.DISCONNECTED);
                });
            });
        });
    }
    sendDeviceConnectionStateNotification(deviceId, state) {
        this.log.info('sendDeviceConnectionStateNotification. device_id ' + deviceId + ' state: ' + state);
        let sessionNames = [];
        let sessionsDataPromises = [];
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_2_lodash__["concat"](this.appState.getSessionsNames(true), this.appState.getSessionsNames(false)), (sessionName) => {
            sessionsDataPromises.push(this.persistencyService.get(sessionName));
            sessionNames.push(sessionName);
        });
        Promise.all(sessionsDataPromises) //waiting for all data to return
            .then((sessionsDataResults) => {
            let appType = this.config.getConfigData('config.shared.appType');
            let primarySessionName = this.config.getConfigData('config.captureApp.primarySessionName');
            let disconnectedDevicesDesc = [];
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](sessionsDataResults, (sessionData, index) => {
                //if current session device was disconnected
                if (!__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](sessionData) && (!this.appState.isAppRecording() || sessionData['preview'] === 'enabled') && deviceId === sessionData['device_id']) {
                    disconnectedDevicesDesc.push(__WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].getDisplayNameForSessionName(appType, primarySessionName, sessionNames[index]));
                }
            });
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](disconnectedDevicesDesc, (deviceType) => {
                this.notifyDeviceConnectionStateChange(state, deviceType);
                this.addDeviceConnectionEvent({ 'deviceId': deviceId, 'state': state, 'inUse': true });
            });
            if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](disconnectedDevicesDesc)) {
                this.addDeviceConnectionEvent({ 'deviceId': deviceId, 'state': state, 'inUse': false });
            }
        })
            .catch((err) => {
            this.log.error('Failed to load app persistent data for device connection state. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            //since it is better for the application for stop instead of crash when device connection state changes, sending
            //notification what-so-ever
            this.addDeviceConnectionEvent({ 'deviceId': deviceId, 'state': state, 'inUse': true });
        });
    }
    notifyDeviceConnectionStateChange(state, deviceType = '') {
        this.translate.get('COMMON.' + deviceType).subscribe((source) => {
            if (state === this.DISCONNECTED) {
                this.notificationService.sendNotificationWithParams("NOTIFICATIONS.error_deviceDisconnected", { 'captureType': source }, 'error');
            }
            else {
                this.notificationService.sendNotificationWithParams("NOTIFICATIONS.info_deviceReconnected", { 'captureType': source }, 'info');
            }
        });
    }
    addDeviceConnectionEvent(event) {
        this.eventsQueue.push(event);
        this.log.info('addDeviceConnectionEvent(): current events queue: ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(this.eventsQueue));
        //if it is the only event - fire it
        if (this.eventsQueue.length === 1) {
            this.fireNextDeviceConnectionEvent();
        }
    }
    fireNextDeviceConnectionEvent() {
        if (this.inProgress) {
            this.log.info('fireNextDeviceConnectionEvent(): in progress flag is still on, waiting for previous event to end.');
            __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].delayPromise(1000)
                .then(() => {
                this.fireNextDeviceConnectionEvent();
            });
        }
        else {
            this.inProgress = true;
            this.log.info('fireNextDeviceConnectionEvent(): current event queue: ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(this.eventsQueue));
            if (this.eventsQueue.length > 0) {
                this.appState.sessionsReturnedFromConnectionStateChange('fireNextDeviceConnectionEvent')
                    .then(() => {
                    this.appState.setConnectionStateChangeLock('fireNextDeviceConnectionEvent', true);
                    let event = this.eventsQueue.shift();
                    this.log.info('fireNextDeviceConnectionEvent(): fired connection event: ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(event));
                    this.deviceConnectionState.next(event); //fire the event
                    this.log.info('fireNextDeviceConnectionEvent(): Device connection service: free in progress lock');
                    this.inProgress = false;
                    this.fireNextDeviceConnectionEvent();
                });
            }
            else {
                this.log.info('fireNextDeviceConnectionEvent(): No events in queue. Device connection service: free in progress lock');
                this.inProgress = false;
            }
        }
    }
};
DeviceConnectionService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_9__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_11__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__infra_app_state_service__["a" /* AppStateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_10__device_recovery_service__["a" /* DeviceRecoveryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__device_recovery_service__["a" /* DeviceRecoveryService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_6__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_7__infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_8_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8_ng2_translate__["b" /* TranslateService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_12__video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__video_device_service__["a" /* VideoDeviceService */]) === "function" && _h || Object])
], DeviceConnectionService);

var _a, _b, _c, _d, _e, _f, _g, _h;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/device-connection.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/device-preview.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DevicePreviewService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







/**
 * Device Preview Service will display and hide device stream.
 * Also, only current previewing devices are considered to be active devices that will be recorded
 */
let DevicePreviewService = class DevicePreviewService {
    constructor(appState, log) {
        this.appState = appState;
        this.log = log;
        //audio level
        this.audioLeverSubject = new __WEBPACK_IMPORTED_MODULE_4_rxjs__["BehaviorSubject"](0);
        this.audioLeverSubject$ = this.audioLeverSubject.asObservable();
        //event for repositioning preview element
        this.repositionPreview = new __WEBPACK_IMPORTED_MODULE_4_rxjs__["Subject"]();
        this.repositionPreview$ = this.repositionPreview.asObservable();
        //indicates if to auto resume audio preview when visual devices are active
        this.autoResumeAudio = false;
        this.captureZoneType = 'FULL_SCREEN';
    }
    setPreviewPosition(sessionId, position) {
        this.log.info('setVideoPosition: ' + sessionId);
        position = this.validateElementPosition(position);
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + '-setVideoPosition', position.top, position.left, position.width, position.height)
            .then(() => {
            this.log.info('setVideoPosition - success: ' + sessionId + ' ' + (position ? __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(position) : 'no position'));
        })
            .catch((err) => {
            this.log.warn('setVideoPosition - failure: ' + sessionId);
            return err;
        });
    }
    startPreviewAndActivateSession(sessionId, name, type) {
        this.log.info('DevicePreviewService: startPreviewAndActivateSession');
        this.appState.onCallStarted('startPreview', sessionId);
        return this.getStartPreviewRelevantPromise(sessionId)
            .then(() => {
            this.appState.onCallEnded('startPreview - SUCCESS', sessionId);
            //add session to active session so it will be recorded
            this.appState.addSession(sessionId, name, this.appState.SESSION_STATE.ACTIVE);
            return sessionId;
        })
            .catch((err) => {
            this.appState.onCallEnded('startPreview - FAILURE', sessionId, err);
            return Promise.reject(err);
        });
    }
    stopPreviewAndDeactivateSession(sessionId, deactivateSession = true) {
        this.log.info('stopPreviewAndDeactivateSession(): ' + sessionId + ' ' + deactivateSession);
        this.appState.onCallStarted('stop preview', sessionId);
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + '-stopPreview')
            .then(() => {
            this.appState.onCallEnded('stop preview - SUCCESS', sessionId);
            if (deactivateSession)
                this.appState.removeActiveSession(sessionId);
            return sessionId;
        })
            .catch((err) => {
            //todo error handling
            if (err === 'session ended') {
                this.log.warn('stopPreviewAndDeactivateSession: Failed to stop and deactivate session since it was already ended: ' + sessionId);
                return sessionId;
            }
            this.appState.onCallEnded('stop preview - FAILURE', sessionId, err);
            return Promise.reject(err);
        });
    }
    refreshDevice(sessionId, name, type) {
        let that = this;
        if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](that.appState.getActiveSessions()[sessionId])) {
            return that.stopPreviewAndDeactivateSession(sessionId, false)
                .then(() => {
                return that.startPreviewAndActivateSession(sessionId, name, type);
            })
                .catch((err) => {
                that.log.error('Failed refreshing device: ' + sessionId + '. ' + __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(err));
                return Promise.reject(err);
            });
        }
        else {
            //no need to refresh, device is not previewing (will be refreshed when will start preview)
            return Promise.resolve();
        }
    }
    /**
     * stopping all devices preview without removing their sessions
     * @return {Promise<boolean>}
     */
    stopPreviewAll() {
        this.appState.onCallStarted('stop preview all', JSON.stringify(Object.keys(this.appState.getActiveSessions())));
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('stopPreviewAll')
            .then(() => {
            this.appState.onCallEnded('stop preview all - SUCCESS', JSON.stringify(Object.keys(this.appState.getActiveSessions())));
            return true;
        })
            .catch((err) => {
            //todo error handling
            this.appState.onCallEnded('stop preview all - FAILURE', JSON.stringify(Object.keys(this.appState.getActiveSessions())), err);
            return Promise.reject(err);
        });
    }
    /**
     * starting all devices preview without adding their sessions
     * @return {Promise<boolean>}
     */
    startPreviewAll() {
        let that = this;
        that.appState.onCallStarted('start preview all', JSON.stringify(Object.keys(that.appState.getActiveSessions())));
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('startPreviewAll')
            .then(() => {
            that.appState.onCallEnded('start preview all - SUCCESS', JSON.stringify(Object.keys(that.appState.getActiveSessions())));
            return true;
        })
            .catch((err) => {
            //todo error handling
            that.appState.onCallEnded('start preview all - FAILURE', JSON.stringify(Object.keys(that.appState.getActiveSessions())), err);
            return Promise.reject(err);
        });
    }
    hideAll() {
        this.appState.onCallStarted('setVideoPositionAll (hide all)', JSON.stringify(Object.keys(this.appState.getActiveVisualSessions())));
        let hideAllPromises = [];
        __WEBPACK_IMPORTED_MODULE_3_lodash__["forEach"](Object.keys(this.appState.getActiveVisualSessions()), (sessionId) => {
            hideAllPromises.push(this.setPreviewPosition(sessionId, { top: 0, left: 0, width: 0, height: 0 }));
        });
        return Promise.all(hideAllPromises)
            .then(() => {
            this.appState.onCallEnded('setVideoPositionAll (hide all) - SUCCESS', JSON.stringify(Object.keys(this.appState.getActiveVisualSessions())));
        })
            .catch((err) => {
            this.appState.onCallEnded('setVideoPositionAll (hide all) - FAILURE', JSON.stringify(Object.keys(this.appState.getActiveVisualSessions())), err);
            return err;
        });
    }
    refreshSessionsPreview(sessions) {
        return this.stopPreviewSome(sessions)
            .then(() => {
            this.log.info('All sessions preview were stopped');
            return this.startPreviewSome(sessions);
        })
            .then(() => {
            this.log.info('All sessions preview started');
            return true;
        })
            .catch((err) => {
            this.log.error(err);
            return Promise.reject(err);
        });
    }
    refreshRecordableSessionsPreview() {
        return this.refreshSessionsPreview(this.appState.getActiveRecordableSessionsIds());
    }
    startPreviewSome(sessionsArray) {
        if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](sessionsArray)) {
            this.appState.onCallStarted('start preview some', JSON.stringify(sessionsArray));
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('startPreviewSome', sessionsArray)
                .then(() => {
                this.appState.onCallEnded('start preview some - SUCCESS', JSON.stringify(sessionsArray));
                return true;
            })
                .catch((err) => {
                //todo error handling
                this.appState.onCallEnded('start preview some - FAILURE', JSON.stringify(sessionsArray), err);
                return Promise.reject(err);
            });
        }
        else {
            return Promise.resolve(false);
        }
    }
    stopPreviewSome(sessionsArray) {
        if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](sessionsArray)) {
            this.appState.onCallStarted('stop preview some', JSON.stringify(sessionsArray));
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('stopPreviewSome', sessionsArray)
                .then(() => {
                this.appState.onCallEnded('stop preview some - SUCCESS', JSON.stringify(sessionsArray));
                return true;
            })
                .catch((err) => {
                //todo error handling
                this.appState.onCallEnded('stop preview some - FAILURE', JSON.stringify(sessionsArray), err);
                return Promise.reject(err);
            });
        }
        else {
            return Promise.resolve({});
        }
    }
    startAudioPreviewAndActivateSession(audioSessionId) {
        this.log.info('Registering for audio notifications');
        return this.startPreviewAndActivateSession(audioSessionId, 'audio', 'audio')
            .then(() => {
            __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('audio-level', (audioLevels) => {
                // if we have only one channel we still want the UI to use both bars
                if (audioLevels.Channel1 === 0) {
                    audioLevels.Channel1 = audioLevels.Channel0;
                }
                this.audioLeverSubject.next(audioLevels);
            });
        });
    }
    stopAudioPreviewAndDeActivateSession(audioSessionId) {
        if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.appState.getActiveAudioSession())) {
            this.log.info('un-registering from audio notifications');
            return this.stopPreviewAndDeactivateSession(audioSessionId)
                .then(() => {
                __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('audio-level');
                this.audioLeverSubject.next(0);
            });
        }
        else {
            return Promise.resolve();
        }
    }
    unregisterFromAudioNotification() {
        this.audioLeverSubject.next(0);
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].unregisterForNotification('audio-level');
    }
    repositionActiveSessionsPreview() {
        this.repositionPreview.next();
    }
    /**
     * make sure no pixel sized image will be shown (in case element is not yet rendered)
     * @param position
     * @returns {{left: number, top: number, width: number, height: number}}
     */
    validateElementPosition(position) {
        if (!position.width || !position.height || position.left < 0 || position.top < 0) {
            return { left: 0, top: 0, width: 0, height: 0 };
        }
        else {
            return { left: position.left, top: position.top, width: position.width, height: position.height };
        }
    }
    /**
     * checks if need to stop audio notifications due to no active visual sessions
     */
    checkIfToStopAudioPreview(audioSessionId) {
        //if there are no recordable session (in audioOnly mode - audio session will be includes do we would like to know if it is enabled (active))
        if ((this.appState.getActiveRecordableSessionsIds()).length === 0
            && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.appState.getActiveAudioSession())) {
            this.autoResumeAudio = true;
            return this.stopAudioPreviewAndDeActivateSession(audioSessionId);
        }
        else {
            return Promise.resolve();
        }
    }
    /**
     * checks if need to start audio notifications due to active visual sessions addition
     */
    checkIfToStartAudioPreview(audioSessionId) {
        if (this.autoResumeAudio) {
            this.autoResumeAudio = false;
            this.startAudioPreviewAndActivateSession(audioSessionId);
        }
        return Promise.resolve();
    }
    /**
     * return start preview promise only if need to hold capture device resources
     * in recording manager there is a free resource call on init sessions, in this service we adjust the device visual
     * capture state with the app window visibility
     * @param sessionId
     * @return {any}
     */
    getStartPreviewRelevantPromise(sessionId) {
        if (this.appState.getApplicationWindowState() === this.appState.WINDOW_STATE.VISIBLE || this.appState.isAppRecording()) {
            return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + '-startPreview');
        }
        else {
            this.log.info('DevicePreviewService: There is no need to start preview for: ' + sessionId);
            return this.setPreviewPosition(sessionId, { left: 0, top: 0, width: 0, height: 0 });
        }
    }
    resetToFullScreenCapture() {
        this.captureZoneType = 'FULL_SCREEN';
    }
};
DevicePreviewService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_state_service__["a" /* AppStateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object])
], DevicePreviewService);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/device-preview.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/device-recovery.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__audio_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DeviceRecoveryService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









let DeviceRecoveryService = class DeviceRecoveryService {
    constructor(log, appConfig, deviceSettingsService, persistencyService, audioDeviceSettingsService) {
        this.log = log;
        this.appConfig = appConfig;
        this.deviceSettingsService = deviceSettingsService;
        this.persistencyService = persistencyService;
        this.audioDeviceSettingsService = audioDeviceSettingsService;
        this.DEVICE_STATE = {
            DISCONNECTED: 'disconnected',
            FAILED: 'failed_recovery',
            NONE: 'none'
        };
        this.recoverySessions = [];
        /**
         * notify on recovery ready
         * @type {BehaviorSubject}
         */
        this.recoverySessionsReady = new __WEBPACK_IMPORTED_MODULE_6_rxjs__["Subject"]();
        this.recoverySessionsReadyPromise = this.recoverySessionsReady.asObservable().toPromise();
    }
    /**
     * adding session to recovery sessions.
     * if session is an audio session - add it only if current recording is an audio only recoridng
     * @param sessionId
     * @param sessionName
     * @param isReady
     * @param reason
     */
    addRecoveryReadySession(sessionId, sessionName, isReady, reason = '') {
        let recoverySession = { sessionId: sessionId, name: sessionName, recoveryReady: isReady, reason: reason };
        this.persistencyService.get('recording')
            .then((recData) => {
            if (__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](recData) || __WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](recData['details']) || __WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](recData['details']['files'])) {
                this.log.debug('recover-service: recording data is empty: ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(recData));
                this.recoverySessionsReady.next(false);
                this.recoverySessionsReady.complete();
            }
            else {
                //add session to recovery sessions only if needed
                if (recData['details'] &&
                    //if audio only - add audio session / else if not audio only - add only none audio sessions
                    ((recData['details']['isAudioOnly'] && sessionName === 'audio') || (!recData['details']['isAudioOnly']) && sessionName !== 'audio')) {
                    this.addOrUpdateRecoverySession(recoverySession);
                    this.log.info('Recovery ready session was added: ' + sessionId + ' name: ' + sessionName + ' is ready: ' + isReady + ' reason: ' + reason + '. ' +
                        ' Number of currently ready sessions: ' + this.recoverySessions.length + '. Waiting for ' + Object.keys(recData['details']['files']).length + ' sessions');
                }
                if (this.recoverySessions.length === Object.keys(recData['details']['files']).length) {
                    this.log.info('All recoverable sessions were loaded: ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(this.recoverySessions));
                    this.recoverySessionsReady.next(true);
                    this.recoverySessionsReady.complete();
                }
            }
        })
            .catch((err) => {
            this.log.error('Failed to load recording data from app persistent data. ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.recoverySessionsReady.next(false);
            this.recoverySessionsReady.complete();
        });
    }
    resetRecoverySessions() {
        this.log.info('resetting recovery sessions');
        this.recoverySessionsReady = new __WEBPACK_IMPORTED_MODULE_6_rxjs__["Subject"]();
        this.recoverySessionsReadyPromise = this.recoverySessionsReady.asObservable().toPromise();
        this.recoverySessions.length = 0;
    }
    canRecoverDeviceForRecording(sessionName) {
        if (sessionName === 'audio') {
            return this.canRecoverAudioForRecording();
        }
        else {
            return this.canRecoverSessionForRecording(sessionName);
        }
    }
    /**
     * will return the file name
     * @param sessionName
     * @return {any}
     */
    shouldRecoverVisualDeviceForRecording(sessionName) {
        if (sessionName !== 'audio') {
            return this.shouldRecoverSessionForRecording(sessionName);
        }
        else {
            return Promise.reject('DeviceRecoveryService: shouldRecoverVisualDeviceForRecording - audio session is not a visual session');
        }
    }
    /**
     * loads user settings and compares them to current device configuration.
     * since when device first loaded it tries to use its' settings from app persistent data, if
     * previous settings were valid - the device uses them.
     * since capture recording session also includes audio settings - we need to check those too
     */
    canRecoverSessionForRecording(sessionName) {
        let canRecover = false;
        return this.deviceSettingsService.loadUserSettings(sessionName)
            .then((sessionSettings) => {
            canRecover = (sessionSettings && sessionSettings['device_id'] && sessionSettings['input_type_id'] &&
                sessionSettings['device_id'] === this.deviceSettingsService.getSessionData(sessionName).selectedDevice &&
                !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](sessionSettings['encoder_config']) &&
                sessionSettings['encoder_config'].profile === this.deviceSettingsService.getSessionData(sessionName).selectedEncoderProfile &&
                sessionSettings['encoder_config'].bitrate === this.deviceSettingsService.getSessionData(sessionName).selectedBitrate &&
                sessionSettings['encoder_id'] === this.deviceSettingsService.getSessionData(sessionName).selectedEncoder);
            if (!canRecover) {
                this.log.warn('DeviceRecoveryService: Selected ' + sessionName + ' does not equal to persistent data ' + sessionName + '.');
            }
            else {
                this.log.info('DeviceRecoveryService: Selected ' + sessionName + ' equals to persistent data ' + sessionName + '.');
            }
            this.log.info('DeviceRecoveryService: Persistent data ' + sessionName + ': ' + (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](sessionSettings) ? __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(sessionSettings) : '{}'));
            this.logSelectedDevice(sessionName);
            return this.shouldRecoverAudioForRecording()
                .then((shouldRecoverAudio) => {
                return shouldRecoverAudio ? this.canRecoverAudioForRecording() : true;
            });
        })
            .then((audioRecovery) => {
            if (!audioRecovery)
                this.log.error("Can't load audio in recovery mode");
            return canRecover && audioRecovery;
        })
            .catch((err) => {
            this.log.error('Failed to decide if can load ' + sessionName + ' in recovery mode. ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * returns relevant session video file path if should recover for current recording session name
     * @returns {Promise<TResult>}
     */
    shouldRecoverSessionForRecording(sessionName) {
        this.log.debug('shouldRecoverSessionForRecording: ' + sessionName);
        return Promise.all([this.persistencyService.get(sessionName), this.persistencyService.get('recording')])
            .then(([session, recording]) => {
            if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](session) && session['preview'] === 'enabled' &&
                !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](recording) && __WEBPACK_IMPORTED_MODULE_4_lodash__["isObject"](recording) && !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](recording['details']) &&
                !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](recording['details']['files']) && !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](recording['details']['files'][sessionName])) {
                return recording['details']['files'][sessionName];
            }
            else {
                return null;
            }
        })
            .catch((err) => {
            this.log.error('Failed to decide if to should load ' + sessionName + ' in recovery mode for recording. ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    shouldRecoverAudioForRecording() {
        let isAudioDeviceValid = false;
        let audioRecordingFilePath = null;
        return Promise.all([this.persistencyService.get('audio'), this.getAudioSessionRecordingFile()])
            .then(([audioSession, audioFilePath]) => {
            isAudioDeviceValid = audioSession && audioSession['preview'] && audioSession['preview'] === 'enabled' && audioSession['device_id'];
            audioRecordingFilePath = audioFilePath;
            return this.checkIfAtLeastOneVisualDeviceShouldBeRecovered();
        })
            .then((shouldRecoverVisuals) => {
            //audio should be enabled + has a device id AND any other capture session should need to be recovered
            return (isAudioDeviceValid &&
                (shouldRecoverVisuals ||
                    (audioRecordingFilePath && this.appConfig.getConfigData('config.captureApp.audioOnlyRecording'))));
        })
            .catch((err) => {
            this.log.error('Failed to determine if should recover audio or not. ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    getAudioSessionRecordingFile() {
        return this.persistencyService.get('recording')
            .then((recording) => {
            //if an audio only recording
            if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](recording) && recording['details'] && recording['details']['isAudioOnly']) {
                return recording['details']['files']['audio'];
            }
            else {
                return null;
            }
        })
            .catch((err) => {
            this.log.error('Failed to get audio only recording file. ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * go over all sessions in persistent data file and check if can be recovered
     * @returns {Promise<boolean>}
       */
    checkIfAtLeastOneVisualDeviceShouldBeRecovered() {
        let shouldRecoverPromises = [];
        let shouldRecover = false;
        return this.persistencyService.get('')
            .then(persistentDataObj => {
            __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_4_lodash__["keys"](persistentDataObj), key => {
                if (key.startsWith('session')) {
                    shouldRecoverPromises.push(this.shouldRecoverSessionForRecording(key));
                }
            });
            return Promise.all(shouldRecoverPromises);
        })
            .then((recoverables) => {
            __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](recoverables, recoverable => {
                if (recoverable)
                    shouldRecover = true;
            });
            return shouldRecover;
        });
    }
    canRecoverAudioForRecording() {
        let that = this;
        return that.audioDeviceSettingsService.loadAudioUserSettings()
            .then((audioSettings) => {
            let canRecover = (audioSettings && audioSettings['device_id'] && audioSettings['input_type_id'] &&
                audioSettings['device_id'] === that.audioDeviceSettingsService.selectedAudioDevice) ||
                !audioSettings || (audioSettings && audioSettings['preview'] === 'disabled');
            if (!canRecover) {
                this.log.warn('DeviceRecoveryService: Selected audio does not equal to persistent data audio.');
            }
            else {
                this.log.info('DeviceRecoveryService: Selected audio equals to persistent data audio.');
            }
            this.log.info('DeviceRecoveryService: Persistent data audio: ' + (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](audioSettings) ? __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(audioSettings) : '{}'));
            this.log.info('DeviceRecoveryService: Selected audio: ' + that.audioDeviceSettingsService.selectedAudioDevice + ' ' +
                __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(that.audioDeviceSettingsService.selectedInputType));
            return canRecover;
        })
            .catch((err) => {
            that.log.error('Failed to decide if can load audio in recovery mode. ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    logSelectedDevice(sessionName) {
        let sessionData = this.deviceSettingsService.getSessionData(sessionName);
        if (sessionData) {
            let dataString = 'DeviceRecoveryService: Selected ' + sessionName + ': ';
            dataString += sessionData.selectedDevice ? sessionData.selectedDevice : 'No seleced device id.';
            dataString += (sessionData.selectedInputType && sessionData.selectedInputType['description']) ?
                sessionData.selectedInputType['description'] : 'No selected input type description.';
            dataString += sessionData.selectedEncoderProfile ? sessionData.selectedEncoderProfile : 'No selected encoder profile.';
            dataString += sessionData.selectedBitrate ? sessionData.selectedBitrate : 'No selected bitrate.';
            dataString += sessionData.selectedEncoder ? sessionData.selectedEncoder : 'No selected encoder.';
            this.log.info(dataString);
        }
        else {
            this.log.info('DeviceRecoveryService: Failed to get data from selected ' + sessionName + ' device object.');
        }
    }
    addOrUpdateRecoverySession(newSession) {
        this.log.info('addOrUpdateRecoverySession: ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(newSession));
        let updateIndex = -1;
        __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](this.recoverySessions, (session, index) => {
            if (session.sessionId === newSession.sessionId) {
                updateIndex = index;
                return false; //break lodash for each
            }
        });
        if (updateIndex > -1) {
            this.log.info('addOrUpdateRecoverySession: session already exists. ' +
                'Old session data: ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(this.recoverySessions[updateIndex]) +
                '. New session data: ' + __WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* utils */].stringifyMsg(newSession));
            this.recoverySessions[updateIndex] = newSession;
        }
        else {
            this.recoverySessions.push(newSession);
        }
    }
};
DeviceRecoveryService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_8__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__audio_device_settings_service__["a" /* AudioDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__audio_device_settings_service__["a" /* AudioDeviceSettingsService */]) === "function" && _e || Object])
], DeviceRecoveryService);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/device-recovery.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/device-resources.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DeviceResourcesService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let DeviceResourcesService = class DeviceResourcesService {
    constructor(appState, log, configService, devicePreviewService) {
        this.appState = appState;
        this.log = log;
        this.configService = configService;
        this.devicePreviewService = devicePreviewService;
        this.RESOURCES_STATE = {
            FREE: 'free',
            IN_USE: 'in_use' //resources are being used by the capture application
        };
        /**
         * locking free resource state
         */
        this.freeResourcesLock = false;
        /**
         * acts as a queue of actions
         */
        this.captureResourceTasks = [];
        /**
         * is resource capturing action in progress
         */
        this.actionInProgress = false;
        let initialVisible = !this.configService.getConfigData('config.captureApp.silentStart');
        this.currentResourceState = initialVisible ? this.RESOURCES_STATE.IN_USE : this.RESOURCES_STATE.FREE;
        let winVisibility = initialVisible ? 'visible' : 'not-visible';
        this.appState.setApplicationWindowState(winVisibility);
        this.registerWindowVisibilityChanges();
    }
    addCaptureResourceTask(captureResourceTask) {
        this.captureResourceTasks.push(captureResourceTask);
        //if there are no actions waiting (except from the current one), execute immediately
        if (this.captureResourceTasks.length === 1)
            this.executeNextAction();
    }
    executeNextAction() {
        if (this.actionInProgress)
            return;
        this.actionInProgress = true;
        let captureResourceTask = this.captureResourceTasks.shift();
        this.getRelevantResourceActionPromise(captureResourceTask.action, captureResourceTask.param)
            .catch((err) => {
            this.log.error('DeviceResourcesService: failed to execute: ' + captureResourceTask.action + ' action.' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(err));
        })
            .then(() => {
            this.actionInProgress = false;
            //call next action in line...
            if (this.captureResourceTasks.length > 0)
                this.executeNextAction();
        });
    }
    getRelevantResourceActionPromise(action, param) {
        return action === this.appState.WINDOW_STATE.VISIBLE.toString() ?
            this.getCaptureResources(param) :
            this.freeCaptureResources(param);
    }
    registerWindowVisibilityChanges() {
        this.log.info('DeviceResourcesService: onWindowVisibilityChanges');
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('on-window-status-change', (visibility) => {
            this.appState.setApplicationWindowState(visibility['state']);
            let currentWindowState = this.appState.getApplicationWindowState();
            this.log.info('DeviceResourcesService: handling on-window-status-change ' + currentWindowState);
            //if an action is needed
            if ((currentWindowState === this.appState.WINDOW_STATE.VISIBLE && !this.freeResourcesLock) ||
                (currentWindowState === this.appState.WINDOW_STATE.HIDDEN)) {
                this.addCaptureResourceTask({ action: currentWindowState.toString(), param: false });
            }
        });
    }
    /**
     * make sure our app will be able to use its' capture resources, starts all devices preview if needed
     * @return {any}
     */
    getCaptureResources(removeFreeResLock = true) {
        this.log.info('DeviceResourcesService: getCaptureResources');
        if (removeFreeResLock)
            this.freeResourcesLock = false; //remove lock only if explicitly requested
        if (this.currentResourceState === this.RESOURCES_STATE.FREE) {
            this.currentResourceState = this.RESOURCES_STATE.IN_USE; //to block duplicate calls
            return this.devicePreviewService.startPreviewSome(Object.keys(this.appState.getActiveVisualSessions()))
                .then(() => {
                this.log.info('DeviceResourcesService: successfully started devices preview and got resources');
            })
                .catch((err) => {
                this.log.error('DeviceResourcesService: Failed to get capture devices resources. ' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(err));
                this.currentResourceState = this.RESOURCES_STATE.FREE;
                return Promise.reject(err);
            });
        }
        else {
            this.log.info('DeviceResourcesService: resources are already in use by our application.');
            return Promise.resolve();
        }
    }
    /**
     * freeing all capture resources is needed
     * @param forceAndLock boolean if to free resource regardless of window state and make resources state persistent until
     * app call will change their state (ignore window visibility changes)
     * @return {any}
     */
    freeCaptureResources(forceAndLock = false) {
        this.log.info('DeviceResourcesService: freeCaptureResources');
        if (this.appState.isAppRecording()) {
            this.log.info('DeviceResourcesService: application is recording - not freeing resources');
            return Promise.resolve();
        }
        if (forceAndLock)
            this.freeResourcesLock = forceAndLock; //noly enabling the lock (disabling it with an explicit call to getResources...)
        if (forceAndLock || this.currentResourceState === this.RESOURCES_STATE.IN_USE &&
            this.appState.getApplicationWindowState() === this.appState.WINDOW_STATE.HIDDEN) {
            this.currentResourceState = this.RESOURCES_STATE.FREE; //to block duplicate calls
            return this.devicePreviewService.stopPreviewSome(Object.keys(this.appState.getActiveVisualSessions()))
                .then(() => {
                this.log.info('DeviceResourcesService: successfully closed devices preview and freed resources');
            })
                .catch((err) => {
                this.log.error('DeviceResourcesService: Failed to free capture devices resources. ' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(err));
                this.currentResourceState = this.RESOURCES_STATE.IN_USE;
                return Promise.reject(err);
            });
        }
        else {
            this.log.info('DeviceResourcesService: resources are already free.');
            return Promise.resolve();
        }
    }
};
DeviceResourcesService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__infra_app_state_service__["a" /* AppStateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_6__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3__device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__device_preview_service__["a" /* DevicePreviewService */]) === "function" && _d || Object])
], DeviceResourcesService);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/device-resources.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/device-settings-base.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/**
 * Created by rnd-classroom on 10/8/2017.
 */



const mediaTypeMappings = {
    'audio': 'Audio',
    'video': 'Video',
    'screen': 'Video'
};
class DeviceSettingsServiceBase {
    constructor(persistencyService, appState, log, appConfig) {
        this.persistencyService = persistencyService;
        this.appState = appState;
        this.log = log;
        this.appConfig = appConfig;
        // holds per session data
        // key is sessionName
        this.sessions = {};
        this.limits = {};
    }
    addSession(sessionName) {
        this.sessions[sessionName] = {
            InputTypes: [],
            selectedInputType: null
        };
    }
    getSessionId(sessionName) {
        if (!this.getSessionData(sessionName)) {
            return null;
        }
        return this.getSessionData(sessionName).sessionId;
    }
    getPrimarySessionId() {
        let primarySessionName = this.appConfig.getConfigData('config.captureApp.primarySessionName');
        return this.getSessionId(primarySessionName);
    }
    /*
    *
    * */
    getPersistedMediaType(selectedDeviceId, inputTypes, userSettings, defaultValue) {
        let persistedInputType = defaultValue;
        if (userSettings && userSettings['device_id'] === selectedDeviceId && userSettings['input_type_id'] && !__WEBPACK_IMPORTED_MODULE_1_lodash__["isEmpty"](userSettings['input_type_id'])) {
            persistedInputType = userSettings['input_type_id'];
            // REMOVEME: persistency format upgrade: string field changed to object.
            // former 'description' made an 'id'
            if (__WEBPACK_IMPORTED_MODULE_1_lodash__["isString"](persistedInputType)) {
                persistedInputType = __WEBPACK_IMPORTED_MODULE_1_lodash__["find"](inputTypes, (type) => __WEBPACK_IMPORTED_MODULE_1_lodash__["eq"](JSON.parse(type.description).id, persistedInputType));
                if (persistedInputType) {
                    this.log.info('upgraded - found type: ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(persistedInputType));
                }
            }
            else {
                /**
                 *   check if in recovery mode.
                 *   if not keep persisted type only if matching type found
                 */
                if (!this.appState.isAppRecording()) {
                    persistedInputType = __WEBPACK_IMPORTED_MODULE_1_lodash__["find"](inputTypes, (type) => __WEBPACK_IMPORTED_MODULE_1_lodash__["eq"](type.description, persistedInputType.description));
                }
            }
            if (!persistedInputType)
                persistedInputType = defaultValue;
        }
        this.log.info('getPersistedMediaType input type ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(persistedInputType));
        return persistedInputType;
    }
    getInitialInputType(sessionName, inputTypes, selectedDeviceId) {
        return this.loadUserSettings(sessionName)
            .then((Settings) => {
            return this.getPersistedMediaType(selectedDeviceId, inputTypes, Settings, inputTypes[0]);
        })
            .catch((err) => {
            this.log.error('Failed to load initial input type for ' + sessionName + ' ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * always return a new promise for settings data
     * @returns {Promise<T>}
     */
    loadDeviceUserSettings(sessionName) {
        return Promise.all([Promise.resolve(this.appConfig.getConfigData('config.captureApp.limits')), this.persistencyService.get(sessionName)])
            .then((result) => {
            return result;
        })
            .catch((err) => {
            this.log.warn('Failed to load user settings for ' + sessionName + ' device. ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            return [{}, {}];
        });
    }
    /**
     * always return a new promise for settings data
     * @returns {Promise<T>}
     */
    loadUserSettings(sessionName) {
        return this.loadDeviceUserSettings(sessionName)
            .then((results) => {
            this.limits = results[0];
            return results[1];
        });
    }
    /**
     * get initial device selection
     * @param deviceList
     * @param userSettings
     * @return {Promise<T>|Promise<U>|Promise<R>}
     */
    getInitialDeviceSelection(sessionName, deviceList, userSettings) {
        return this.getAllSessionsPersistentData(sessionName)
            .then((persistentDataArray) => {
            //remove all undefined elements in the array.
            persistentDataArray = __WEBPACK_IMPORTED_MODULE_1_lodash__["compact"](persistentDataArray);
            //remove current session persistent data
            persistentDataArray.splice(0, 1);
            //default selection
            let selectedDevice = deviceList[0]; //todo impl. default selection algorithm.
            //check user settings
            if (userSettings && userSettings['device_id'] && !this.isDeviceInUse(userSettings['device_id'], sessionName, persistentDataArray)) {
                for (let key in deviceList) {
                    if (deviceList[key].device_id === userSettings['device_id']) {
                        selectedDevice = deviceList[key];
                        break;
                    }
                }
            }
            this.log.info('getInitialDeviceSelection:' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(selectedDevice));
            return selectedDevice;
        });
    }
    getAllSessionsPersistentData(mySession) {
        // get session names
        let sessions = this.getSessionsNames();
        // remove our sessionName
        __WEBPACK_IMPORTED_MODULE_1_lodash__["pull"](sessions, mySession);
        // first push our session
        let promises = [this.persistencyService.get(mySession)];
        __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](sessions, (s) => {
            promises.push(this.persistencyService.get(s));
        });
        return Promise.all(promises);
    }
    //get initial default selection
    getInitialDevice(sessionName, deviceList) {
        return this.loadUserSettings(sessionName)
            .then((Settings) => {
            return this.getInitialDeviceSelection(sessionName, deviceList, Settings);
        })
            .catch((err) => {
            this.log.error('Failed to load initial device of type ' + sessionName + ' ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * set selected video|screen type in device recording session
     * @param sessionId
     * @param selectedInputType (input type description which used as its' unique id)
     * @returns {Promise<TResult>}
     */
    setSelectedInputType(sessionName, sessionId, selectedInputType, saveData = true) {
        let media = sessionName === 'audio' ? mediaTypeMappings['audio'] : mediaTypeMappings['video']; //video / screen types are the same
        this.appState.onCallStarted('setSelected' + media + 'InputType', sessionId);
        return __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + `-set${media}InputType`, selectedInputType.description)
            .then(() => {
            this.appState.onCallEnded('setSelected' + media + 'InputType - SUCCESS', sessionId);
            this.sessions[sessionName].selectedInputType = selectedInputType;
            if (saveData) {
                this.persistencyService.set(sessionName + '.input_type_id', this.sessions[sessionName].selectedInputType);
            }
            return this.sessions[sessionName].selectedInputType;
        })
            .catch((err) => {
            this.appState.onCallEnded('setSelected' + media + 'InputType - FAILURE', sessionId);
            return Promise.reject(err);
        });
    }
    /**
     * set selected device in device recording session
     * @param sessionId
     * @param device
     * @param saveData
     * @returns {Promise<TResult>}
     */
    setSelectedDevice(sessionName, sessionId, device, saveData = true) {
        return this.setSelectedDeviceInternal(sessionName, sessionId, device)
            .then((device) => {
            this.sessions[sessionName].selectedDevice = device;
            if (saveData) {
                this.persistencyService.set(sessionName + '.device_id', device);
            }
            return device;
        });
    }
    /**
     * set selected device in device recording session
     * @param sessionId
     * @param device
     * @param type device type
     * @returns {Promise<TResult>}
     */
    setSelectedDeviceInternal(sessionName, sessionId, device) {
        let mediaType = sessionName === 'audio' ? mediaTypeMappings['audio'] : mediaTypeMappings['video']; //video / screen types are the same
        this.appState.onCallStarted('setSelected Device: ' + device, sessionId);
        return __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + `-set${mediaType}Device`, device)
            .then(() => {
            this.appState.onCallEnded(`setSelected ${sessionName} Device - SUCCESS`, sessionId);
            return device;
        })
            .catch((err) => {
            this.appState.onCallEnded(`setSelected ${sessionName} Device - FAILURE`, sessionId);
            return Promise.reject(err);
        });
    }
    // Set configuration
    isDeviceInUse(device, sessionNameToExclude, otherSessionsPersistentData) {
        let inUse = false;
        //check for other sessions current usage
        __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](this.sessions, (session, sessionName) => {
            if (session.selectedDevice === device && sessionNameToExclude != sessionName) {
                inUse = true;
            }
        });
        //check for other sessions future usage
        __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](otherSessionsPersistentData, (data) => {
            if (data['device_id'] === device) {
                inUse = true;
            }
        });
        return inUse;
    }
    getSessionData(sessionName) {
        return this.sessions[sessionName];
    }
    getSessionDataById(sessionId) {
        let ret = null;
        this.getSessionsNames().forEach((sessionName) => {
            if (this.sessions[sessionName].sessionId === sessionId) {
                ret = this.sessions[sessionName];
            }
        });
        return ret;
    }
    getSessionNameById(sessionId) {
        let ret = null;
        this.getSessionsNames().forEach((sessionName) => {
            if (this.sessions[sessionName].sessionId === sessionId) {
                ret = sessionName;
            }
        });
        return ret;
    }
    getSessionsNames() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash__["keys"](this.sessions);
    }
    setDeviceInUse(sessionName, device) {
        this.sessions[sessionName].selectedDevice = device;
    }
    /**
     * loads a list of input type for requested device
     * filtering out un relevant resolution / fps and other properties
     * also reorder according to input type 'grade'
     * @param sessionId
     * @param selectedDevice
     * @param limits
     * @returns {Promise<TResult>}
     */
    loadDeviceInputTypeList(sessionName, sessionId, selectedDevice, type) {
        let mediaType = mediaTypeMappings[type];
        let limits = this.limits[type];
        this.appState.onCallStarted('load' + mediaType + 'InputTypeList for ' + selectedDevice, sessionId);
        return __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + `-get${mediaType}InputTypeList`, selectedDevice)
            .then((inputTypes) => {
            this.appState.onCallEnded('load' + mediaType + 'InputTypeList - SUCCESS', sessionId);
            return this.filterInputTypes(inputTypes, limits);
        })
            .then((inputTypes) => {
            this.sessions[sessionName].InputTypes = __WEBPACK_IMPORTED_MODULE_1_lodash__["clone"](inputTypes);
            return this.sessions[sessionName].InputTypes;
        })
            .catch((err) => {
            this.appState.onCallEnded('load' + mediaType + 'InputTypeList - FAILURE', sessionId);
            return Promise.reject(err);
        });
    }
    filterInputTypes(inputTypes, limits) {
        throw new Error('not implemented');
    }
    saveDeviceSelections(sessionName) {
        return Promise.all([
            this.persistencyService.set(sessionName + '.device_id', this.sessions[sessionName].selectedDevice),
            this.persistencyService.set(sessionName + '.input_type_id', this.sessions[sessionName].selectedInputType || {})
        ]);
    }
    clearDeviceSelections(sessionName, clearPersistency = false) {
        return this.persistencyService.get(sessionName)
            .then((sessionObj) => {
            let previewState = sessionObj && sessionObj['preview'] ? sessionObj['preview'] : 'disabled';
            this.sessions[sessionName].selectedDevice = null;
            this.sessions[sessionName].selectedInputType = null;
            //settings a new session presistency object with last preview state - only settings was cleared
            return clearPersistency ? this.persistencyService.set(sessionName, { preview: previewState }) : Promise.resolve(true);
        });
    }
    // encoder configuration
    /**
     * loads a list of device encoders for the device that was set earlier
     * @param sessionId, type (sessionName)
     * @returns {Promise<TResult>}
     */
    loadDeviceEncoderList(sessionId, sessionName) {
        let media = sessionName === 'audio' ? mediaTypeMappings['audio'] : mediaTypeMappings['video']; //video / screen types are the same
        this.appState.onCallStarted('load' + media + 'EncoderList', sessionId);
        return __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + `-get${media}EncoderList`)
            .then((encoders) => {
            this.appState.onCallEnded('load' + media + 'EncoderList - SUCCESS', sessionId);
            return encoders;
        })
            .catch((err) => {
            this.appState.onCallEnded('load' + media + 'EncoderList - FAILURE', sessionId);
            return Promise.reject(err);
        });
    }
    /**
     * loads a list of video encoders for the video|screen device that was set earlier
     * @param sessionId
     * @returns {Promise<TResult>}
     */
    loadEncoderList(sessionName, sessionId) {
        return this.loadDeviceEncoderList(sessionId, sessionName)
            .then((encoders) => {
            this.sessions[sessionName].Encoders = __WEBPACK_IMPORTED_MODULE_1_lodash__["clone"](encoders);
            // loading the list might yield a different result,
            // so make sure not to use something that does not exist anymore
            return this.getInitialEncoder(sessionName, this.sessions[sessionName].Encoders);
        })
            .then((encoder) => {
            this.sessions[sessionName].selectedEncoder = encoder;
            return this.sessions[sessionName].Encoders;
        });
    }
    /**
     * getting initial input type
     * if user already set one - take user selection (if exists)
     * if not take one according to configured parameters
     * @param inputTypes
     * @returns {string|(()=>string)|any}
     */
    getInitialEncoder(sessionName, encoders) {
        let that = this;
        return that.loadUserSettings(sessionName)
            .then((settings) => {
            return this.getInitialEncoderSelection(encoders, settings);
        })
            .catch((err) => {
            that.log.error('Failed to load initial encoder ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     *
     * @param encoders
     * @param userSettings
     * @return {any}
     */
    getInitialEncoderSelection(encoders, userSettings) {
        //default selection
        let selectedEncoder = encoders[0].encoder_id; //todo impl. default selection algorithm.
        //check user settings
        if (userSettings && userSettings['encoder_id']) {
            for (let key in encoders) {
                if (encoders[key].encoder_id === userSettings['encoder_id']) {
                    selectedEncoder = userSettings['encoder_id'];
                    break;
                }
            }
        }
        return selectedEncoder;
    }
    /**
     * set selected encoder in device recording session
     * @param sessionId
     * @param encoder
     * @param sessionName
     * @returns {Promise<TResult>}
     */
    setSelectedDeviceEncoder(sessionId, encoder, sessionName) {
        let media = sessionName === 'audio' ? mediaTypeMappings['audio'] : mediaTypeMappings['video']; //video / screen types are the same
        this.appState.onCallStarted('setSelected' + media + 'Encoder: ' + encoder, sessionId);
        return __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(`${sessionId}-set${media}Encoder`, encoder)
            .then(() => {
            this.appState.onCallEnded('setSelected' + media + 'Encoder - SUCCESS', sessionId);
            return encoder;
        })
            .catch((err) => {
            this.appState.onCallEnded('setSelected' + media + 'Encoder - FAILURE', sessionId);
            return Promise.reject(err);
        });
    }
    // EncoderConfig: { number bitrate; string profile ('base','high','main'); string mode ('vbr','cbr') }
    setSelectedDeviceEncoderConfig(sessionId, encoderConfig, sessionName) {
        let media = sessionName === 'audio' ? mediaTypeMappings['audio'] : mediaTypeMappings['video']; //video / screen types are the same
        this.appState.onCallStarted('setSelected' + media + 'EncoderConfig: ' + JSON.stringify(encoderConfig), sessionId);
        return __WEBPACK_IMPORTED_MODULE_0__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + `-set${media}EncoderConfig`, encoderConfig)
            .then(() => {
            this.appState.onCallEnded('setSelected' + media + 'EncoderConfig - SUCCESS', sessionId);
            return encoderConfig;
        })
            .catch((err) => {
            this.appState.onCallEnded('setSelected' + media + 'EncoderConfig - FAILURE', sessionId);
            return Promise.reject(err);
        });
    }
    /**
     * set selected encoder in recording session
     * @param sessionId
     * @param encoder
     * @returns {Promise<TResult>}
     */
    setSelectedEncoder(sessionName, sessionId, encoder, saveData = true) {
        return this.setSelectedDeviceEncoder(sessionId, encoder, sessionName)
            .then((encoder) => {
            this.sessions[sessionName].selectedEncoder = encoder;
            if (saveData) {
                this.persistencyService.set(sessionName + '.encoder_id', encoder);
            }
            return encoder;
        });
    }
    generateEncoderConfig(sessionName) {
        throw new Error('not-implemented');
    }
    // EncoderConfig: { number bitrate; string profile ('base','high','main'); string mode ('vbr','cbr') }
    setSelectedEncoderConfig(sessionName, sessionId, saveData = true) {
        return this.setSelectedDeviceEncoderConfig(sessionId, this.generateEncoderConfig(sessionName), sessionName)
            .then((encoderConfig) => {
            if (saveData) {
                this.persistencyService.set(sessionName + '.encoder_config', encoderConfig);
            }
            return encoderConfig;
        });
    }
    getSessionNameByDeviceId(device_id) {
        let retSessionName;
        __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](this.sessions, (session, sessionName) => {
            if (session.selectedDevice === device_id) {
                retSessionName = sessionName;
                return false; // breaks lodash loop
            }
        });
        return retSessionName;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DeviceSettingsServiceBase;

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/device-settings-base.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/video-device-settings.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__device_settings_base_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-settings-base.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VideoDeviceSettingsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











let VideoDeviceSettingsService = class VideoDeviceSettingsService extends __WEBPACK_IMPORTED_MODULE_9__device_settings_base_service__["a" /* DeviceSettingsServiceBase */] {
    constructor(persistencyService, appState, log, appConfig, devicePreviewService) {
        super(persistencyService, appState, log, appConfig);
        this.devicePreviewService = devicePreviewService;
        //holds device list objects for current settings load (needed for device bounds property)
        this.deviceObjects = {};
        this.Bitrates = [
            { label: '1000 Kbps', value: '1000000' },
            { label: '1500 Kbps', value: 1500 * 1000 },
            { label: '2000 Kbps', value: 2000 * 1000 },
            { label: '2500 Kbps', value: 2500 * 1000 },
            { label: '3000 Kbps', value: 3000 * 1000 },
            { label: '4000 Kbps', value: 4000 * 1000 },
            { label: '4500 Kbps', value: 4500 * 1000 },
            { label: '5000 Kbps', value: 5000 * 1000 },
            { label: '5500 Kbps', value: 5500 * 1000 },
            { label: '6000 Kbps', value: 6000 * 1000 }
        ];
        this.encoderProfiles = [
            { label: 'Base', value: 'Base' },
            { label: 'Main', value: 'Main' },
            { label: 'High', value: 'High' }
        ];
        //handling loadDeviceList requests in order to make sure they will be executed sync.
        this.loadDeviceListRequests = [];
        //loading device list lock
        this.loadingDeviceList = false;
        this.addDefaultSessionsObjects();
    }
    loadVideoBitrateList(sessionId) {
        return Promise.resolve(__WEBPACK_IMPORTED_MODULE_6_lodash__["clone"](this.Bitrates));
    }
    loadVideoProfileList(sessionId) {
        return this.getEncoderProfiles();
    }
    getDeviceData(deviceId) {
        return this.deviceObjects[deviceId];
    }
    getDeviceDataBySessionId(sessionId) {
        let sessionData = this.getSessionDataById(sessionId);
        let deviceData = this.getDeviceData(sessionData.selectedDevice);
        return deviceData;
    }
    getDeviceTypeById(deviceId) {
        return (this.deviceObjects[deviceId] && this.deviceObjects[deviceId].capture_type.toLowerCase() == 'screen') ? 'screen' : 'video';
    }
    getDeviceTypeBySessionName(sessionName) {
        return this.getDeviceTypeById(this.getSessionData(sessionName).selectedDevice);
    }
    /**
     * return all video device settings for settings component
     * @param sessionName
     * @param defaultDeviceType
     */
    getVideoDeviceSettings(sessionName, defaultDeviceType) {
        let sessionId = this.getSessionId(sessionName);
        //get device list
        return this.registerForDeviceListLoading(sessionName, defaultDeviceType)
            .then((captureDevices) => {
            this.log.info('loading ' + sessionName + ' device list');
            return captureDevices;
        })
            .then((captureDevices) => {
            return Promise.all([
                Promise.resolve(captureDevices),
                this.loadEncoderList(sessionName, sessionId),
                this.loadVideoBitrateList(sessionId),
                this.loadVideoProfileList(sessionId)
            ]);
        });
    }
    registerForDeviceListLoading(sessionName, defaultDeviceType) {
        this.log.info('registerForDeviceListLoading: ' + sessionName + ', ' + defaultDeviceType);
        let deviceListRequest = new __WEBPACK_IMPORTED_MODULE_7_rxjs__["Subject"]();
        let deviceListRequestPromise = deviceListRequest.asObservable().toPromise();
        this.loadDeviceListRequests.push({ sessionName: sessionName, defaultDeviceType: defaultDeviceType, observerPromise: deviceListRequest });
        this.loadDeviceListSync();
        return deviceListRequestPromise;
    }
    loadDeviceListSync() {
        this.log.info('loadDeviceListSync triggered');
        if (!this.loadingDeviceList && this.loadDeviceListRequests.length > 0) {
            let request = this.loadDeviceListRequests.shift();
            if (request) {
                this.log.info('loadDeviceListSync calling to loadDeviceList and locking device list requests');
                this.loadDeviceList(request.sessionName, request.defaultDeviceType, request.observerPromise);
                this.loadingDeviceList = true;
            }
        }
    }
    loadDeviceList(sessionName, defaultDeviceType, observerPromise) {
        this.log.info('loadDeviceList: sessionName: ' + sessionName + ' defaultDeviceType: ' + defaultDeviceType);
        __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getVideoDeviceList')
            .then((devices) => {
            //reset device list
            this.deviceObjects = {};
            //filtering devices with empty device_id
            devices = __WEBPACK_IMPORTED_MODULE_6_lodash__["filter"](devices, (device) => {
                return !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](device['device_id']);
            });
            this.log.info('devices loaded: ' + JSON.stringify(devices));
            for (let i in devices) {
                this.deviceObjects[devices[i].device_id] = devices[i];
            }
            return devices;
        })
            .then((devices) => {
            return Promise.all([this.getAllSessionsPersistentData(sessionName), Promise.resolve(devices)]);
        })
            .then(([persistencyData, devices]) => {
            let ourSessionPersistencyData = persistencyData[0];
            persistencyData.splice(0, 1);
            // remove sessions where device_id is not set
            persistencyData = __WEBPACK_IMPORTED_MODULE_6_lodash__["filter"](persistencyData, (pd) => {
                return !(__WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](pd) || (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](pd) && __WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](pd['device_id'])));
            });
            let ordered = __WEBPACK_IMPORTED_MODULE_6_lodash__["sortBy"](devices, (d) => {
                return (d.capture_type === defaultDeviceType) ? 0 : 1;
            });
            // remove devices in use by other sessions
            let filtered = __WEBPACK_IMPORTED_MODULE_6_lodash__["filter"](ordered, (d) => {
                return (!this.isDeviceInUse(d.device_id, sessionName, persistencyData));
            });
            // get devices in use from persistencyData
            let devicesInUse;
            if (persistencyData && persistencyData.length > 0) {
                devicesInUse = __WEBPACK_IMPORTED_MODULE_6_lodash__["map"](persistencyData, (x) => {
                    return x['device_id'];
                });
            }
            devicesInUse = __WEBPACK_IMPORTED_MODULE_6_lodash__["filter"](devicesInUse, (d) => { return __WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](d); });
            // filter out devices used by other sessions ( by persistancy ) - this is important for startup
            let filtered2 = __WEBPACK_IMPORTED_MODULE_6_lodash__["filter"](filtered, (d) => {
                return (__WEBPACK_IMPORTED_MODULE_6_lodash__["findIndex"](devicesInUse, function (pd) { return pd == d; }) == -1);
            });
            // set the device so the 2nd session wont use it
            if (filtered2.length > 0 && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](ourSessionPersistencyData) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](ourSessionPersistencyData['device_id']) &&
                (this.appState.isAppRecording() || __WEBPACK_IMPORTED_MODULE_6_lodash__["find"](devices, ['device_id', ourSessionPersistencyData['device_id']]))) {
                this.setDeviceInUse(sessionName, ourSessionPersistencyData['device_id']);
            }
            else if (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](filtered2) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](filtered2[0]) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isNil"](filtered2[0].device_id)) {
                this.setDeviceInUse(sessionName, filtered2[0].device_id);
            }
            observerPromise.next(filtered2);
            observerPromise.complete();
            this.log.info('defaultDeviceType freeing device list requests lock and calling next request if needed');
            this.loadingDeviceList = false;
            this.loadDeviceListSync();
        })
            .catch((err) => {
            this.log.error(__WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.log.error('defaultDeviceType freeing device list requests lock and calling next request if needed');
            this.loadingDeviceList = false;
            this.loadDeviceListSync();
            return Promise.reject(err);
        });
    }
    /**
     * loads a list of input type for requested device
     * filtering out un relevant resolution / fps and other video properties
     * also reorder according to input type 'grade'
     * @param sessionId
     * @param selectedDevice
     * @returns {Promise<TResult>}
     */
    loadInputTypeList(sessionName, sessionId, selectedDevice, type) {
        return this.loadDeviceInputTypeList(sessionName, sessionId, selectedDevice, type);
    }
    filterInputTypes(inputTypes, limits) {
        return __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].filterAndSortInputs(inputTypes, limits);
    }
    getEncoderProfiles() {
        return __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getOsData')
            .then(osData => {
            let versionParts = osData['osVersion'].split('.');
            // win ver <= 7
            if (Number(versionParts[0]) < 7 && Number(versionParts[1]) < 2) {
                this.encoderProfiles = [
                    { label: 'Base', value: 'Base' },
                    { label: 'Main', value: 'Main' }
                ];
            }
            return __WEBPACK_IMPORTED_MODULE_6_lodash__["clone"](this.encoderProfiles);
        })
            .catch((err) => {
            return __WEBPACK_IMPORTED_MODULE_6_lodash__["clone"](this.encoderProfiles);
        });
    }
    getInitialBitrate(sessionName, bitrates) {
        return this.loadUserSettings(sessionName)
            .then((settings) => {
            return this.getInitialBitrateInternal(bitrates, settings);
        })
            .catch((err) => {
            this.log.error('Failed to load initial bitrate for ' + sessionName + ' ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * get initial device bitrate
     * @param bitrates
     * @param userSettings
     * @return {any}
     */
    getInitialBitrateInternal(bitrates, userSettings) {
        //default selection
        let selectedBitrate = bitrates[2].value; //todo impl. default selection algorithm.
        //check user settings
        if (userSettings && userSettings['encoder_config'] && userSettings['encoder_config']['bitrate']) {
            selectedBitrate = userSettings['encoder_config']['bitrate'];
        }
        return selectedBitrate;
    }
    getInitialEncoderProfile(sessionName, encoderProfiles) {
        return this.loadUserSettings(sessionName)
            .then((settings) => {
            return this.getInitialEncoderProfileInternal(encoderProfiles, settings);
        })
            .catch((err) => {
            this.log.error('Failed to load initial encoder profile for ' + sessionName + ' ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    /**
     * get initial encoder profile
     * @param encoderProfiles
     * @param userSettings
     * @return {Promise<T>|Promise<U>|Promise<R>}
     */
    getInitialEncoderProfileInternal(encoderProfiles, userSettings) {
        let selectedProfile = encoderProfiles[0].value; //todo impl. default selection algorithm.
        //check user settings
        if (userSettings && userSettings['encoder_config'] && userSettings['encoder_config']['profile']) {
            selectedProfile = userSettings['encoder_config']['profile'];
        }
        return selectedProfile;
    }
    // EncoderConfig: { number bitrate; string profile ('base','high','main'); string mode ('vbr','cbr') }
    generateVideoEncoderConfig(selectedBitrate, selectedEncoderProfile) {
        let encoderConfig = {};
        encoderConfig['bitrate'] = parseInt(selectedBitrate);
        encoderConfig['brmode'] = 'cbr';
        encoderConfig['profile'] = selectedEncoderProfile;
        return encoderConfig;
    }
    generateEncoderConfig(sessionName) {
        return this.generateVideoEncoderConfig(this.sessions[sessionName].selectedBitrate, this.sessions[sessionName].selectedEncoderProfile);
    }
    loadInitialVideoDeviceSettings(sessionName, defaultDeviceType) {
        return this.setInitialDevice(sessionName, defaultDeviceType)
            .then(() => {
            return this.setInitialDeviceEncoder(sessionName);
        })
            .then(() => {
            return this.setInitialInputType(sessionName, this.getSessionData(sessionName).selectedDevice);
        })
            .then(() => {
            return this.setInitialDeviceEncoderConfig(sessionName);
        })
            .then(() => {
            return this.resetToFullScreenCapture(sessionName, false);
        });
    }
    /**
     * return initial selected video device
     */
    setInitialDevice(sessionName, defaultDeviceType) {
        this.log.info('setInitialDevice - ' + sessionName);
        return this.registerForDeviceListLoading(sessionName, defaultDeviceType)
            .then((devices) => {
            if (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](devices)) {
                return this.configureInitialDevice(sessionName, devices);
            }
            else {
                this.clearDeviceSelections(sessionName, false);
                return this.noDevicesPromiseReject();
            }
        })
            .catch((err) => {
            this.log.error('Failed to load and set initial video device. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    setInitialDeviceEncoder(sessionName) {
        this.log.info('setInitialDeviceEncoder - ' + sessionName);
        return this.loadEncoderList(sessionName, this.getSessionId(sessionName))
            .then((encoders) => {
            return this.configureInitialEncoder(sessionName, encoders);
        })
            .catch((err) => {
            this.log.error('Failed to setInitialDeviceEncoder for ' + sessionName + '. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    setInitialInputType(sessionName, captureDevice) {
        this.log.info('setInitialInputType - ' + captureDevice);
        return this.loadInputTypeList(sessionName, this.getSessionId(sessionName), captureDevice, this.getDeviceTypeById(captureDevice))
            .then((inputTypes) => {
            if (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](inputTypes)) {
                return this.configureInitialInputType(sessionName, inputTypes, captureDevice);
            }
            else {
                return Promise.reject('No input types were found for current ' + sessionName + ' device: ' + captureDevice);
            }
        })
            .catch((err) => {
            this.log.error('Failed to load and set initial ' + captureDevice + ' input type. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    setInitialDeviceEncoderConfig(sessionName, saveDate = false) {
        this.log.info('setInitialDeviceEncoderConfig - ' + sessionName);
        return this.loadVideoBitrateList(this.getSessionId(sessionName))
            .then((bitrates) => {
            return this.configureInitialBitrate(sessionName, bitrates);
        })
            .then(() => {
            return this.loadVideoProfileList(this.getSessionId(sessionName));
        })
            .then((encoderProfiles) => {
            return this.configureInitialEncoderProfile(sessionName, encoderProfiles);
        })
            .then(() => {
            return this.setSelectedEncoderConfig(sessionName, this.getSessionId(sessionName), saveDate);
        });
    }
    /**
     * returns the selection list default selection, if the list contains the current selected input type value
     * (of the requested option) it will return that value. otherwise it will return the first list element value
     * @param inputProperty
     * @param selectionList
     * @param reset
     * @returns {any}
     */
    getDefaultSelection(sessionName, inputs, inputProperty, reset = false) {
        if (!reset) {
            let input = __WEBPACK_IMPORTED_MODULE_6_lodash__["find"](inputs, [inputProperty, this.getSessionData(sessionName).selectedInputType[inputProperty]]);
            if (input) {
                return input[inputProperty];
            }
        }
        return inputs[0][inputProperty];
    }
    identifyDevice(selectedDevice, sessionName) {
        let device = this.getDeviceData(selectedDevice);
        if (device['bounds']) {
            __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('identify-device', { deviceBounds: device['bounds'], sessionName: sessionName });
        }
        return Promise.resolve();
    }
    shouldShowDeviceIndication(sessionName) {
        return this.getSessionData(sessionName) &&
            this.getSessionData(sessionName).selectedDevice &&
            this.getDeviceTypeBySessionName(sessionName) === 'screen';
    }
    configureInitialDevice(sessionName, devices) {
        this.log.info('configureInitialDevice - ' + sessionName);
        return this.getInitialDevice(sessionName, devices)
            .then((selectedDevice) => {
            selectedDevice = selectedDevice.device_id;
            this.log.info('setting the following ' + sessionName + ' device: ' + selectedDevice);
            return this.setSelectedDevice(sessionName, this.getSessionId(sessionName), selectedDevice, false);
        })
            .catch((err) => {
            this.log.error('Failed to configure initial ' + sessionName + ' device ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    configureInitialEncoder(sessionName, encoders) {
        this.log.info('configureInitialEncoder - ' + sessionName);
        return this.getInitialEncoder(sessionName, encoders)
            .then((selectedEncoder) => {
            this.log.info('setting the following ' + sessionName + ' encoder: ' + selectedEncoder);
            return this.setSelectedEncoder(sessionName, this.getSessionId(sessionName), selectedEncoder, false);
        })
            .catch((err) => {
            this.log.error('Failed to configure initial ' + sessionName + ' device ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    configureInitialInputType(sessionName, inputTypes, selectedDeviceId) {
        this.log.info('configureInitialInputType - ' + sessionName);
        return this.getInitialInputType(sessionName, inputTypes, selectedDeviceId)
            .then((inputType) => {
            this.log.info('setting then following ' + sessionName + ' input type: ' + inputType['description']);
            return this.setSelectedInputType(sessionName, this.getSessionId(sessionName), inputType, false);
        })
            .catch((err) => {
            this.log.error('Failed to configure ' + sessionName + ' initial input type ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    configureInitialBitrate(sessionName, bitrates) {
        this.log.info('configureInitialBitrate - ' + sessionName);
        return this.getInitialBitrate(sessionName, bitrates)
            .then((bitrate) => {
            this.log.info('setting then following ' + sessionName + ' bitrate: ' + bitrate);
            return this.setSelectedBitrate(sessionName, this.getSessionId(sessionName), bitrate);
        });
    }
    configureInitialEncoderProfile(sessionName, encoderProfiles) {
        this.log.info('configureInitialEncoderProfile - ' + sessionName);
        return this.getInitialEncoderProfile(sessionName, encoderProfiles)
            .then((encoderProfile) => {
            this.log.info('setting then following ' + sessionName + ' encoderProfiles: ' + encoderProfile);
            return this.setSelectedEncoderProfile(sessionName, this.getSessionId(sessionName), encoderProfile);
        });
    }
    noDevicesPromiseReject() {
        return Promise.reject('NO_VIDEO_DEVICES');
    }
    saveDeviceSelections(sessionName) {
        return Promise.all([
            super.saveDeviceSelections(sessionName),
            this.persistencyService.set(sessionName + '.encoder_id', this.sessions[sessionName].selectedEncoder),
            this.persistencyService.set(sessionName + '.encoder_config', this.generateVideoEncoderConfig(this.sessions[sessionName].selectedBitrate, this.sessions[sessionName].selectedEncoderProfile))
        ]);
    }
    clearDeviceSelections(sessionName, clearPersistency = false) {
        this.sessions[sessionName].selectedEncoder = null;
        this.sessions[sessionName].selectedBitrate = null;
        this.sessions[sessionName].selectedEncoderProfile = null;
        this.setSessionRegion(sessionName, null);
        return this.resetToFullScreenCapture(sessionName, false)
            .catch(() => { })
            .then(() => {
            return super.clearDeviceSelections(sessionName, clearPersistency);
        });
    }
    clearSessions() {
        this.log.info('Clearing sessions data');
        this.sessions = {};
        return this.addDefaultSessionsObjects();
    }
    setSelectedBitrate(sessionName, sessionId, bitrate) {
        this.sessions[sessionName].selectedBitrate = bitrate;
        return Promise.resolve(this.sessions[sessionName].selectedBitrate);
    }
    setSelectedEncoderProfile(sessionName, sessionId, encoderProfile) {
        this.sessions[sessionName].selectedEncoderProfile = encoderProfile;
        return Promise.resolve(this.sessions[sessionName].selectedEncoderProfile);
    }
    onDeviceChange(sessionName, sessionId, selectedDevice, selectedEncoder, selectedBitrate, selectedEncoderProfile) {
        return this.clearDeviceSelections(sessionName, true)
            .then(() => {
            return this.setSelectedDevice(sessionName, sessionId, selectedDevice);
        })
            .then(() => {
            return this.identifyDevice(selectedDevice, sessionName);
        })
            .then(() => {
            return this.loadEncoderList(sessionName, sessionId);
        })
            .then((encoders) => {
            return this.setSelectedEncoder(sessionName, sessionId, selectedEncoder);
        })
            .then(() => {
            return this.loadInputTypeList(sessionName, sessionId, selectedDevice, this.getDeviceTypeById(selectedDevice));
        })
            .then((inputTypes) => {
            this.log.info('loaded ' + sessionName + ' input type list');
            return this.getInitialInputType(sessionName, inputTypes, selectedDevice);
        })
            .then((initialInputType) => {
            return this.setSelectedInputType(sessionName, sessionId, initialInputType);
        })
            .then(() => {
            return this.setSelectedBitrate(sessionName, sessionId, selectedBitrate);
        })
            .then(() => {
            return this.setSelectedEncoderProfile(sessionName, sessionId, selectedEncoderProfile);
        })
            .then(() => {
            return this.setSelectedEncoderConfig(sessionName, sessionId);
        });
    }
    /**
     * will reload device configuration and limits and sets the same device with new default configurations
     * @param sessionName
     * @param sessionId
     * @param selectedDevice
     */
    reloadDeviceDefaultConfiguration(sessionName) {
        let sessionId = this.getSessionId(sessionName);
        let selectedDevice = this.sessions[sessionName].selectedDevice;
        let isSessionEnabled = false;
        return !selectedDevice ? Promise.resolve() :
            this.clearDeviceSelections(sessionName, true)
                .then(() => {
                return this.loadUserSettings(sessionName);
            })
                .then((settigns) => {
                isSessionEnabled = settigns.preview && settigns.preview === 'enabled' ? true : false;
                return isSessionEnabled ?
                    this.devicePreviewService.stopPreviewAndDeactivateSession(sessionId) : Promise.resolve();
            })
                .then(() => {
                return this.setSelectedDevice(sessionName, sessionId, selectedDevice);
            })
                .then(() => {
                return this.loadEncoderList(sessionName, sessionId);
            })
                .then(() => {
                return this.setSelectedEncoder(sessionName, sessionId, this.sessions[sessionName].selectedEncoder);
            })
                .then(() => {
                return this.loadInputTypeList(sessionName, sessionId, selectedDevice, this.getDeviceTypeById(selectedDevice));
            })
                .then((inputTypes) => {
                this.log.info('loaded ' + sessionName + ' input type list');
                return this.getInitialInputType(sessionName, inputTypes, selectedDevice);
            })
                .then((initialInputType) => {
                return this.setSelectedInputType(sessionName, sessionId, initialInputType);
            })
                .then(() => {
                return this.setInitialDeviceEncoderConfig(sessionName, true);
            })
                .then(() => {
                return this.resetToFullScreenCapture(sessionName, false);
            })
                .then(() => {
                return isSessionEnabled ?
                    this.devicePreviewService.startPreviewAndActivateSession(sessionId, sessionName, this.getDeviceTypeById(sessionId)) :
                    Promise.resolve();
            });
    }
    //set selected input type according to all input selected parameters
    onCsChange(sessionName, sessionId, selectedInputType) {
        return this.setSelectedInputType(sessionName, sessionId, selectedInputType)
            .then(() => {
            return this.devicePreviewService.refreshDevice(sessionId, sessionName, this.getDeviceTypeBySessionName(sessionName));
        })
            .catch((err) => {
            this.log.error(__WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    onBitrateChange(sessionName, sessionId, selectedBitrate) {
        return this.setSelectedBitrate(sessionName, sessionId, selectedBitrate)
            .then(() => {
            this.setSelectedEncoderConfig(sessionName, sessionId);
        })
            .catch((err) => {
            this.log.error(__WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    onEncoderProfileChange(sessionName, sessionId, selectedEncoderProfile) {
        return this.setSelectedEncoderProfile(sessionName, sessionId, selectedEncoderProfile)
            .then(() => {
            this.setSelectedEncoderConfig(sessionName, sessionId);
        })
            .catch((err) => {
            this.log.error(__WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    getDeviceEncoders(sessionName) {
        return this.sessions[sessionName].Encoders;
    }
    getSelectedEncoder(sessionName) {
        return this.sessions[sessionName].selectedEncoder;
    }
    /**
     * save the state of the session capture region area (Full screen/ region)
     *
     * @param sessionName
     * @param bounds: {}, null, undefined = Full Screen
     *                { x, y, width, height} = region
     */
    setSessionRegion(sessionName, bounds) {
        this.sessions[sessionName]['region'] = bounds;
    }
    getSessionRegion(sessionName) {
        return this.sessions[sessionName] ? this.sessions[sessionName]['region'] : null;
    }
    /**
     * change the screen recording and preview area + add rect to mark the location where we capture.
     * @param sessionName
     * @param engineBounds   =  { width, height, x, y}  or {} to clear.
     * @param electronBounds
     * @returns Promis
     */
    setVideoCaptureRegion(sessionName, engineBounds, electronBounds) {
        let captureBounds = engineBounds;
        let sessionId = this.getSessionId(sessionName);
        let selectionSquarePromise;
        let error;
        if (sessionId && this.getDeviceTypeBySessionName(sessionName) === 'screen') {
            if (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](engineBounds) && !__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](electronBounds)) {
                selectionSquarePromise = __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getScreenScaleFactorByPlatform', electronBounds)
                    .then((scaleFactor) => {
                    if (scaleFactor) {
                        captureBounds = {
                            width: Math.floor(engineBounds.width - (4 * scaleFactor)),
                            height: Math.floor(engineBounds.height - (4 * scaleFactor)),
                            x: Math.floor(engineBounds.x + (2 * scaleFactor)),
                            y: Math.floor(engineBounds.y + (2 * scaleFactor)),
                        };
                        this.log.info('VideoDeviceService CaptureRegion: show-selection-square for sessionName: ' + sessionName + ', electronBounds: ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(electronBounds));
                        return __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('show-selection-square', { bounds: electronBounds, sessionName: sessionName });
                    }
                    else {
                        return Promise.resolve({});
                    }
                });
            }
            else {
                selectionSquarePromise = __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('hide-selection-square', sessionName);
            }
            return selectionSquarePromise
                .then(() => {
                this.appState.onCallStarted('setVideoCaptureRegion', sessionId);
                this.log.info('VideoDeviceService CaptureRegion: ' + sessionId + '-setVideoCaptureRegion for sessionName: ' + sessionName + ', bounds: ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(engineBounds));
                return __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + '-setVideoCaptureRegion', captureBounds);
            })
                .then(() => {
                this.appState.onCallEnded('setVideoCaptureRegion - SUCCESS', sessionId);
                this.log.info('VideoDeviceService: CaptureRegion was successfully defined to sessionName: ' + sessionName + ' ' + sessionId + ' ' + (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](engineBounds) ? __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(engineBounds) : 'Full screen'));
                this.setSessionRegion(sessionName, { engineBounds, electronBounds });
            })
                .then(() => {
                return this.devicePreviewService.refreshDevice(sessionId, sessionName, this.getDeviceTypeBySessionName(sessionName));
            })
                .catch(err => {
                this.appState.onCallEnded('setVideoCaptureRegion - FAILURE', sessionId, err);
                this.log.error('VideoDeviceService: CaptureRegion: Failed to set region for sessionName: '
                    + sessionName + ' ' + (!__WEBPACK_IMPORTED_MODULE_6_lodash__["isEmpty"](engineBounds) ? __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(engineBounds) : 'Full screen') + ' error: ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
                return Promise.reject(err);
            });
        }
        else {
            this.log.info('setVideoCaptureRegion is not implemented for the following capture type: ' + this.getDeviceTypeBySessionName(sessionName));
            return Promise.resolve(sessionId);
        }
    }
    resetToFullScreenCapture(sessionName, updatePersistency) {
        this.devicePreviewService.resetToFullScreenCapture();
        return this.setVideoCaptureRegion(sessionName, {}, null)
            .then(() => {
            return updatePersistency ? this.persistencyService.set(sessionName + '.captureRegion', {}) : Promise.resolve({});
        });
    }
    resetPersistencyOfScreenCapture() {
        return this.appState.getVisualSessionsFromPersistentData()
            .then(sessions => {
            let resetPromises = [];
            __WEBPACK_IMPORTED_MODULE_6_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_6_lodash__["keys"](sessions), sessionName => {
                resetPromises.push(this.persistencyService.set(sessionName + '.captureRegion', {}));
            });
            return Promise.all(resetPromises);
        });
    }
    getAllActiveDevicesObjects() {
        let devices = [];
        __WEBPACK_IMPORTED_MODULE_6_lodash__["forEach"](this.sessions, (sessionObj, sessionName) => {
            if (this.appState.getActiveRecordableSessionsIds().indexOf(this.getSessionId(sessionName)) > -1) {
                devices.push(this.getDeviceData(sessionObj.selectedDevice));
            }
        });
        return devices;
    }
    addDefaultSessionsObjects() {
        this.appState.getVisualSessionsNamesAndDefaultTypesForInit()
            .then(sessions => {
            __WEBPACK_IMPORTED_MODULE_6_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_6_lodash__["keys"](sessions), sessionName => {
                this.addSession(sessionName);
            });
        });
    }
};
VideoDeviceSettingsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__["a" /* AppStateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_10__device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__device_preview_service__["a" /* DevicePreviewService */]) === "function" && _e || Object])
], VideoDeviceSettingsService);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/video-device-settings.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/capture-device/video-device.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__device_recovery_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-recovery.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__device_preview_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-preview.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__audio_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__ = __webpack_require__("../../../../../src/shared/services/monitoring/app-monitoring-agent-error-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__capture_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/capture-device.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__live_live_manager_service__ = __webpack_require__("../../../../../src/shared/services/live/live-manager.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VideoDeviceService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















let VideoDeviceService = class VideoDeviceService extends __WEBPACK_IMPORTED_MODULE_12__capture_device_service__["a" /* CaptureDeviceService */] {
    constructor(appState, log, recoveryService, notificationService, devicePreviewService, deviceSettingsService, audioDeviceService, appMonitoringAgentData, config, persistencyService, liveManagerService) {
        super(appState, log, deviceSettingsService, recoveryService);
        this.appState = appState;
        this.log = log;
        this.recoveryService = recoveryService;
        this.notificationService = notificationService;
        this.devicePreviewService = devicePreviewService;
        this.deviceSettingsService = deviceSettingsService;
        this.audioDeviceService = audioDeviceService;
        this.appMonitoringAgentData = appMonitoringAgentData;
        this.config = config;
        this.persistencyService = persistencyService;
        this.liveManagerService = liveManagerService;
        this.CAPTURE_TYPE = {
            SCREEN: 'screen',
            VIDEO: 'video'
        };
    }
    /**
     * creates capture device recording session
     * configure device
     * try to load in recovery mode
     */
    initDevice(sessionName, defaultDeviceType) {
        return this.createSessionAndConfigureDevice(sessionName, defaultDeviceType)
            .then(() => {
            //on success init of a device, we need to clear all relevat errors
            this.appMonitoringAgentData.clearError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, this.captureTypeToMonitoringSource(sessionName));
            //since during device init we are init audio as well. on success we need to clear all relevant errors
            this.appMonitoringAgentData.clearError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].AUDIO);
        });
    }
    /**
     * running device recovery process
     * @return {Promise<boolean>} if device should start preview or not
     */
    deviceRecoveryProcess(sessionName) {
        this.log.debug('deviceRecoveryProcess');
        return this.recoveryService.shouldRecoverVisualDeviceForRecording(sessionName)
            .then((recoverFileName) => {
            if (recoverFileName) {
                //recovery is needed - try to recover device
                return this.persistencyService.get(sessionName + '.captureRegion')
                    .then((engineAndElectronBounds) => {
                    if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](engineAndElectronBounds) && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](engineAndElectronBounds['engineBounds']) && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](engineAndElectronBounds['electronBounds'])) {
                        return this.setVideoCaptureRegion(sessionName, engineAndElectronBounds['engineBounds'], engineAndElectronBounds['electronBounds']);
                    }
                }).then(() => {
                    return this.persistencyService.get('recording.details.liveData.' + sessionName);
                }).then((liveData) => {
                    return liveData ? this.liveManagerService.addLiveConfig(liveData, this.getSessionId(sessionName)) : Promise.resolve();
                }).then(() => {
                    return this.tryToLoadInRecoveryMode(sessionName, this.getCaptureDeviceTypeBySessionName(sessionName), recoverFileName);
                }).then(() => {
                    return true;
                });
            }
            else {
                //although we weren't in recovery process - we set the recovery process for current device to true
                //so we will know device was configured and ready to capture
                this.recoveryService.addRecoveryReadySession(this.getSessionId(sessionName), sessionName, true);
                this.deviceSettingsService.saveDeviceSelections(sessionName);
                // If recovery is not needed - Reset persistency to full screen capture state
                return this.persistencyService.set(sessionName + '.captureRegion', {})
                    .then(() => {
                    // device should start previewing in a non recovery mode only if we are not during a recording
                    // if we are in the middle of a recording, the device was just disconnected when recording started
                    return !this.appState.isAppRecording();
                });
            }
        })
            .catch((err) => {
            if (err && err !== this.recoveryService.DEVICE_STATE.DISCONNECTED) {
                //if recovery failed due to an error different than disconnection save device settings
                this.deviceSettingsService.saveDeviceSelections(sessionName);
                return this.persistencyService.set(sessionName + '.captureRegion', {})
                    .catch(() => { return true; }).then(() => { return Promise.reject(err); });
            }
            //disconnection
            return Promise.reject(err);
        });
    }
    startDevicePreviewAndActivateSession(sessionName, location) {
        this.log.info('startDevicePreview: ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(location));
        return this.devicePreviewService.setPreviewPosition(this.getSessionId(sessionName), location)
            .then(() => {
            return this.devicePreviewService.startPreviewAndActivateSession(this.getSessionId(sessionName), sessionName, this.getCaptureDeviceTypeBySessionName(sessionName));
        })
            .then(() => {
            return this.devicePreviewService.checkIfToStartAudioPreview(this.audioDeviceService.getSessionId());
        })
            .then(() => {
            this.persistencyService.set(sessionName + '.preview', "enabled");
            return this.deviceSettingsService.saveDeviceSelections(sessionName);
        })
            .catch((err) => {
            this.log.error('Failed to startPreview - ' + sessionName + '. ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.notificationService.sendNotification('NOTIFICATIONS.error_' + sessionName + 'PreviewStart', 'error');
            return Promise.reject(err);
        });
    }
    stopDevicePreviewAndDeactivateSession(sessionName) {
        this.log.info('stopDevicePreviewAndDeactivateSession(): ' + sessionName);
        return this.devicePreviewService.stopPreviewAndDeactivateSession(this.getSessionId(sessionName))
            .then(() => {
            return this.devicePreviewService.checkIfToStopAudioPreview(this.audioDeviceService.getSessionId());
        })
            .then(() => {
            this.persistencyService.set(sessionName + '.preview', "disabled");
        })
            .catch((err) => {
            this.log.error('Failed to stopPreview - ' + sessionName + '. ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.notificationService.sendNotification('NOTIFICATIONS.error_' + sessionName + 'PreviewStart', 'error');
            return Promise.reject(err);
        });
    }
    hideDevicePreview(sessionName) {
        return this.updateDevicePreviewLocation(sessionName, { left: 0, top: 0, width: 0, height: 0 });
    }
    stopPreviewAll() {
        return this.devicePreviewService.stopPreviewAll();
    }
    stopAllVisualPreviewsExceptSessionName(exceptSessionName) {
        this.log.info('stopAllVisualPreviewsExceptSessionName(): ' + exceptSessionName);
        let sessionsArray = [];
        __WEBPACK_IMPORTED_MODULE_3_lodash__["forEach"](this.appState.getActiveVisualSessions(), (value, key) => {
            if (!exceptSessionName || this.getSessionNameById(key) !== exceptSessionName) {
                sessionsArray.push(key);
            }
        });
        if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](sessionsArray)) {
            return this.devicePreviewService.stopPreviewSome(sessionsArray);
        }
        else {
            return Promise.resolve();
        }
    }
    updateDevicePreviewLocation(sessionName, location) {
        return this.devicePreviewService.setPreviewPosition(this.getSessionId(sessionName), location)
            .catch((err) => {
            this.log.error('Failed to update ' + sessionName + ' device preview position. ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    isDevicePreviewing(sessionName) {
        return this.getSessionId(sessionName) && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.appState.getActiveSessions()[this.getSessionId(sessionName)]);
    }
    isDeviceStable(sessionName, sourceOnly = false) {
        return this.appState.isSourceStable(this.getSessionId(sessionName), sourceOnly);
    }
    shouldInitialPreviewDevice(sessionName) {
        this.log.info('shouldInitialPreviewDevice - ' + sessionName);
        return this.deviceSettingsService.loadUserSettings(sessionName)
            .then((settings) => {
            return (!settings || !settings['preview'] || settings['preview'] === "enabled");
        })
            .catch(() => {
            return true;
        });
    }
    repositionsDevicePreview(sessionName, position) {
        this.log.info('repositionsDevicePreview - ' + sessionName);
        this.shouldInitialPreviewDevice(sessionName)
            .then((preview) => {
            if (preview) {
                this.log.info('need to reposition ' + sessionName + ' Device Preview');
                return this.devicePreviewService.setPreviewPosition(this.getSessionId(sessionName), position);
            }
        });
    }
    shouldDisableDeviceConfiguration(sessionName, sourceOnly = false) {
        return !this.isDeviceStable(sessionName, sourceOnly) ||
            !this.deviceSettingsService.getSessionData(sessionName) ||
            !this.deviceSettingsService.getSessionData(sessionName).selectedDevice ||
            !this.deviceSettingsService.getSessionData(sessionName).InputTypes ||
            this.deviceSettingsService.getSessionData(sessionName).InputTypes.length === 0;
    }
    /**
     * if device initial configuration was successful - start device
     * if in recovery mode - build recording session accordingly
     * if in regular mode - start previewing device
     * @returns {Promise<boolean>} if to start device preview or not
     */
    startDevice(sessionName, previewPosition) {
        //check if need to load in recovery mode
        //if so try to load in recovery mode
        return this.shouldInitialPreviewDevice(sessionName)
            .then((shouldPreview) => {
            if (shouldPreview) {
                return Promise.all([shouldPreview, this.deviceRecoveryProcess(sessionName)]);
            }
            else {
                return Promise.all([shouldPreview, true]); //indication the recovery process didn't fail (it wasn't needed)
            }
        })
            .then(([startPreview, recoverySucceeded]) => {
            if (startPreview && recoverySucceeded) {
                this.log.debug('starting ' + sessionName + ' device preview after successful recovery process');
                return this.startDevicePreviewAndActivateSession(sessionName, previewPosition);
            }
            else {
                //everything went OK however this device should be disabled
                this.appState.addSession(this.getSessionId(sessionName), sessionName, this.appState.SESSION_STATE.IN_ACTIVE);
            }
        })
            .catch((err) => {
            return Promise.reject(err);
        });
    }
    getCaptureDeviceTypeBySessionName(sessionName) {
        if (this.deviceSettingsService.getSessionData(sessionName)) {
            return this.deviceSettingsService.getDeviceTypeBySessionName(sessionName);
        }
        else {
            return null;
        }
    }
    getCaptureDeviceTypeBySessionId(sessionId) {
        if (this.deviceSettingsService.getSessionDataById(sessionId)) {
            return this.deviceSettingsService.getDeviceTypeById(this.deviceSettingsService.getSessionDataById(sessionId).selectedDevice);
        }
        else {
            return null;
        }
    }
    getSessionNameById(sessionId) {
        return this.deviceSettingsService.getSessionNameById(sessionId);
    }
    createSessionAndConfigureDevice(sessionName, defaultDeviceType) {
        this.log.debug('createSessionAndConfigureDevice - ' + sessionName);
        return this.createDeviceSession(sessionName)
            .then(() => {
            //loading initial device configurations
            return this.loadInitialDeviceConfiguration(sessionName, defaultDeviceType);
        });
    }
    /**
     * will be rejected if an error will happen.
     * will return 'NO_VIDEO_DEVICES' / 'NO_SCREEN_DEVICE if no video / screen devices were connected
     */
    loadInitialDeviceConfiguration(sessionName, defaultDeviceType) {
        this.log.debug('loadInitialVideoDeviceConfiguration - ' + sessionName);
        return this.deviceSettingsService.loadInitialVideoDeviceSettings(sessionName, defaultDeviceType)
            .then(() => {
            this.log.info('loadInitialSharedAudioConfiguration - ' + sessionName);
            return this.audioDeviceService.loadInitialAudioDeviceConfiguration(this.getSessionId(sessionName), false);
        })
            .catch((err) => {
            if (err && __WEBPACK_IMPORTED_MODULE_3_lodash__["isString"](err) && err.indexOf('NO_AUDIO_DEVICES') > -1) {
                return this.recoveryService.shouldRecoverAudioForRecording()
                    .then((recover) => {
                    if (recover) {
                        this.log.error('Failed loading initial video device configuration. ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
                        return Promise.reject(err);
                    }
                    else {
                        this.log.info(sessionName + ' session was loaded without any audio device since there are no audio devices connected');
                        this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].AUDIO, 'NOTIFICATIONS.error_audioDevices');
                        this.notificationService.sendNotification('NOTIFICATIONS.error_audioDevices', 'warn');
                        return Promise.resolve();
                    }
                });
            }
            else {
                return Promise.reject(err);
            }
        });
    }
    /**
     * device error handling
     * @param err
     * @param elementPosition
     * @return {Promise<TResult>}
     */
    handleDeviceInitError(sessionName, err, elementPosition) {
        let shouldStartPreview = true;
        let errString = __WEBPACK_IMPORTED_MODULE_3_lodash__["isObject"](err) ? JSON.stringify(err) : err;
        //no device error handling
        if (errString.indexOf('NO_SCREEN_DEVICES') > -1 ||
            errString.indexOf('NO_VIDEO_DEVICES') > -1 ||
            errString.indexOf('NO_AUDIO_DEVICES') > -1) {
            //handle no device error
            shouldStartPreview = this.handleNoDeviceError(errString);
        }
        else if (errString.indexOf(this.recoveryService.DEVICE_STATE.DISCONNECTED) > -1 ||
            errString.indexOf(this.recoveryService.DEVICE_STATE.FAILED) > -1 ||
            errString.indexOf('AUDIO-' + this.recoveryService.DEVICE_STATE.DISCONNECTED) > -1) {
            //handle recovery failures
            shouldStartPreview = this.handleRecoveryError(sessionName, errString);
        }
        else if (errString.indexOf('AUDIO-') > -1) {
            //handle audio device errors
            shouldStartPreview = this.handleAudioInitializationError(sessionName, errString);
        }
        else {
            //handle screen / video device errors
            shouldStartPreview = this.handleRecordableInitializationError(sessionName, errString);
        }
        //if failed before even start to check if need to recover
        return this.finalizeErrorHandling(sessionName, errString, shouldStartPreview, elementPosition);
    }
    handleNoDeviceError(errString) {
        let shouldStartPreview = true;
        if (errString.indexOf('NO_SCREEN_DEVICES') > -1) {
            this.log.warn('No screen devices were detected');
            shouldStartPreview = false;
            this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].SCREEN, 'NOTIFICATIONS.error_screenDevices');
            this.notificationService.sendNotification('NOTIFICATIONS.error_screenDevices', 'warn');
        }
        else if (errString.indexOf('NO_VIDEO_DEVICES') > -1) {
            shouldStartPreview = false;
            this.log.warn('No video devices were detected');
            this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].VIDEO, 'NOTIFICATIONS.error_videoDevices');
            this.notificationService.sendNotification('NOTIFICATIONS.error_videoDevices', 'warn');
        }
        else if (errString.indexOf('NO_AUDIO_DEVICES') > -1) {
            this.log.warn('No audio devices were detected');
            shouldStartPreview = false; //disable capture device preview when audio doesn't exist
            this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].AUDIO, 'NOTIFICATIONS.error_audioDevices');
            this.notificationService.sendNotification('NOTIFICATIONS.error_audioDevices', 'warn');
        }
        return shouldStartPreview;
    }
    handleRecoveryError(sessionName, errString) {
        let shouldStartPreview = true;
        if (errString.indexOf(this.recoveryService.DEVICE_STATE.DISCONNECTED) > -1) {
            //if capture device was disconnected - do not preview it
            if (errString.indexOf('AUDIO-') === -1) {
                this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, this.captureTypeToMonitoringSource(sessionName), 'NOTIFICATIONS.error_deviceDisconnected', { 'captureType': this.captureTypeToMonitoringSource(sessionName) });
                this.log.error('Failed to recover ' + sessionName + ' device due to a device disconnection.');
            }
            else {
                this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].AUDIO, 'NOTIFICATIONS.error_deviceDisconnected', { 'captureType': 'Audio' });
                this.log.error('Failed to recover ' + sessionName + ' device due to a disconnection in audio.');
            }
            shouldStartPreview = false;
        }
        else if (errString.indexOf(this.recoveryService.DEVICE_STATE.FAILED) > -1) {
            shouldStartPreview = false;
            this.log.error('Failed to recover ' + sessionName + ' device.');
            let notificationText = 'NOTIFICATIONS.' +
                (sessionName !== this.config.getConfigData('config.captureApp.primarySessionName') ?
                    'error_secondaryDeviceRecovery' : 'error_primaryDeviceRecovery');
            this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, this.captureTypeToMonitoringSource(sessionName), notificationText);
            this.notificationService.sendNotification(notificationText, 'error');
        }
        return shouldStartPreview;
    }
    ///@todo - this is bad to do stuff based on session name
    handleAudioInitializationError(sessionName, errString) {
        this.log.error('Failed to initialize audio device. ' + errString);
        let notification = 'NOTIFICATIONS.' +
            (sessionName !== this.config.getConfigData('config.captureApp.primarySessionName') ?
                'error_audioForSecondary' : 'error_audioForPrimary');
        this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].AUDIO, notification);
        this.notificationService.sendNotification(notification, 'error');
        return false;
    }
    handleRecordableInitializationError(sessionName, errString) {
        this.log.error('Failed to initialize ' + sessionName + ' device. ' + errString);
        let notification = 'NOTIFICATIONS.' +
            (sessionName !== this.config.getConfigData('config.captureApp.primarySessionName') ?
                'error_secondaryDevice' : 'error_primaryDevice');
        this.appMonitoringAgentData.setError(__WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["a" /* MONITOR_ERROR_TYPE */].DEVICE_ERROR, this.captureTypeToMonitoringSource(sessionName), notification);
        this.notificationService.sendNotification(notification, 'error');
        return false;
    }
    finalizeErrorHandling(sessionName, errString, shouldStartPreview, elementPosition) {
        return this.recoveryService.shouldRecoverVisualDeviceForRecording(sessionName)
            .then((shouldRecover) => {
            if (shouldRecover) {
                this.log.error('Send addRecoveryReadySession notification for failed ' + sessionName + ' recovery preparation.');
                this.recoveryService.addRecoveryReadySession(this.getSessionId(sessionName), sessionName, false, errString);
            }
            else {
                //if we shouldn't recover sessions, need to save current selection since they are presented to the user
                shouldStartPreview = false; //no recovery was needed so no need to display the device
                this.deviceSettingsService.saveDeviceSelections(sessionName);
            }
            return shouldStartPreview;
        })
            .catch((err) => {
            this.log.warn('Failed to decide if ' + sessionName + ' device should be in recovery mode,' +
                ' handling error like it should not. ' + __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(err));
            return shouldStartPreview;
        })
            .then((shouldStartPreview) => {
            return this.handleDevicePreviewAfterFailure(sessionName, shouldStartPreview, elementPosition);
        });
    }
    handleDevicePreviewAfterFailure(sessionName, shouldStartPreview, elementPosition) {
        if (shouldStartPreview) {
            this.log.info('Trying to start ' + sessionName + ' device after failed device initialization');
            return this.startDevicePreviewAndActivateSession(sessionName, elementPosition)
                .catch((err) => {
                this.log.error('Failed to start ' + sessionName + ' device preview');
                this.notificationService.sendNotification('NOTIFICATIONS.error_' + sessionName + 'PreviewStart', 'error');
                this.appState.addSession(this.getSessionId(sessionName), sessionName, this.appState.SESSION_STATE.IN_ACTIVE);
            });
        }
        else {
            //start preview will remove current session from the loading sessions object
            //here we need to do it ourselves, also, since we already created the session. we need to add it to  the active
            //sessions with a 'failed' state.
            if (this.getSessionId(sessionName)) {
                this.appState.addSession(this.getSessionId(sessionName), sessionName, this.appState.SESSION_STATE.IN_ACTIVE);
            }
            return Promise.resolve();
        }
    }
    captureTypeToMonitoringSource(sessionName) {
        return this.getCaptureDeviceTypeBySessionName(sessionName) === this.CAPTURE_TYPE.SCREEN ? __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].SCREEN : __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["b" /* MONITORED_SOURCE_TYPE */].VIDEO;
    }
    setVideoCaptureRegion(sessionName, engineBounds, electronBounds) {
        return this.deviceSettingsService.setVideoCaptureRegion(sessionName, engineBounds, electronBounds);
    }
    resetToFullScreenCapture(sessionName, updatePersistency) {
        return this.deviceSettingsService.resetToFullScreenCapture(sessionName, updatePersistency);
    }
    /**
     * set liveData persistency object to contain the live streaming duration and stopped date
     * @param sessionName
     */
    stopLiveStreaming(sessionName) {
        this.persistencyService.get('recording.recordingTime')
            .then((recDuration) => {
            this.persistencyService.set('recording.details.liveData.' + sessionName, {
                duration: recDuration,
                updatedAt: (new Date().getTime() / 1000)
            });
        });
    }
};
VideoDeviceService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__infra_app_state_service__["a" /* AppStateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__device_recovery_service__["a" /* DeviceRecoveryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__device_recovery_service__["a" /* DeviceRecoveryService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_6__device_preview_service__["a" /* DevicePreviewService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__device_preview_service__["a" /* DevicePreviewService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_8__video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_9__audio_device_service__["a" /* AudioDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__audio_device_service__["a" /* AudioDeviceService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["c" /* AppMonitoringAgentErrorDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__monitoring_app_monitoring_agent_error_data_service__["c" /* AppMonitoringAgentErrorDataService */]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_13__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_13__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_7__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_14__live_live_manager_service__["a" /* LiveManagerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_14__live_live_manager_service__["a" /* LiveManagerService */]) === "function" && _l || Object])
], VideoDeviceService);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/video-device.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/accessability.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__panels_service__ = __webpack_require__("../../../../../src/shared/services/infra/panels.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccessibilityService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let AccessibilityService = class AccessibilityService {
    constructor(log, translate, panelsService) {
        this.log = log;
        this.translate = translate;
        this.panelsService = panelsService;
        this.accessibilityAlert = new __WEBPACK_IMPORTED_MODULE_3_rxjs__["Subject"]();
        this.accessibilityAlert$ = this.accessibilityAlert.asObservable();
    }
    markNavigation(event) {
        if (event.code === "Tab") {
            this.lastCode = event.code;
            // remove the previous outline focus
            if (this.lastElement) {
                this.lastElement.classList.remove('keyboard-focus');
            }
            // should we lock focus on a dialog?
            if (this.lockNavOnDialog && !event.target['parentElement'].classList.contains('dialog-footer')) {
                // if we are in an open dialog choose the the first button in the footer and focus on it.
                this.lastElement = this.dialogElement.querySelector('button');
                this.lastElement.classList.add('keyboard-focus');
                this.lastElement.focus();
            }
            else if (event.target['tagName'].toLowerCase() === 'body') {
                let isItemWasSelected = this.selectFirstItem(event);
                if (!isItemWasSelected) {
                    setTimeout(() => {
                        this.selectFirstItem(event);
                    }, 200);
                }
            }
            else {
                this.lastElement = event.target;
                if (this.lastElement) {
                    this.lastElement.classList.add('keyboard-focus');
                }
            }
        }
        else if (event.code === "Enter" || event.code === "Space" || event.code === "NumpadEnter") {
            this.lastCode = event.code;
            // remove the previous outline focus
            if (this.lastElement) {
                this.lastElement.classList.remove('keyboard-focus');
            }
            // on Enter/Space/NumpadEnter if we hit body, refocus on last element (make sure that element ask not to be focus twice)
            if (event.target['tagName'].toLowerCase() === 'body' && (this.lastElement && !this.lastElement.classList.contains('focus-once'))) {
                this.forceFocusOnLastElement();
            }
            else if (this.lastElement && this.lastElement.tagName.toLowerCase() === 'button' && !this.lastElement.classList.contains('focus-once')) {
                this.lastElement = event.target;
                this.forceFocusOnLastElement();
            }
            else if (this.lastElement && this.lastElement.tagName.toLowerCase() === 'a') {
                this.lastElement = event.target;
                this.forceFocusOnLastElement(event.code === "Space"); // trigger click on 'a' when hitting Space (only space needed the fix)
            }
        }
        else if (event.code === "Escape") {
            if (event.target instanceof HTMLInputElement) {
                event.target.blur();
                if (this.lastElement === event.target) {
                    this.lastElement.classList.remove('keyboard-focus');
                }
            }
            else {
                let currentPanel = this.panelsService.getCurrentPanel();
                if (currentPanel && currentPanel['active']) {
                    currentPanel['active'] = false;
                    this.panelsService.updateCurrentPanel(currentPanel);
                }
            }
        }
        return true;
    }
    forceFocusOnLastElement(triggerClick = false) {
        setTimeout(() => {
            this.lastElement.classList.add('keyboard-focus');
            if (triggerClick) {
                this.lastElement.click();
            }
            else {
                this.lastElement.focus();
            }
        }, 400);
    }
    selectFirstItem(event) {
        let nextTabTargets = event.target['querySelectorAll']('button, a, input, select, area, textarea, object');
        nextTabTargets = Array.prototype.filter.call(nextTabTargets, function (elem) {
            return elem.tabIndex != -1; // when specify no tab navigation do not choose him as option 
        });
        if (nextTabTargets.length > 0) {
            this.lastElement = nextTabTargets[0];
            this.lastElement.classList.add('keyboard-focus');
            this.lastElement.focus();
        }
        return nextTabTargets.length > 0;
    }
    toggleNavLimitationOnDialog(lock, element) {
        this.lockNavOnDialog = lock;
        this.dialogElement = element;
    }
    getLastCode() {
        return this.lastCode;
    }
    setLastCode(value) {
        this.lastCode = value;
    }
    /**
     * Add Accessibility alert to be read by screen reader
     * @param i18nText i18n text
     * @param alertDuration long (5 sec) or short (2 sec)
     * @param localization params
     */
    setAccessibilityAlert(i18nText, alertDuration = 'short', params = null) {
        this.getTranslationSub(i18nText, params).subscribe((res) => {
            this.accessibilityAlert.next({ alert: res, duration: alertDuration });
        });
    }
    getTranslationSub(i18nText, params) {
        return params ? this.translate.get(i18nText, params) : this.translate.get(i18nText);
    }
    /* Scroll up and clear focus classes*/
    clearFocusAndScrollUp(element, divSelectorToScroll) {
        let elem = element.nativeElement.querySelector(divSelectorToScroll);
        if (elem) {
            elem.scrollTop = 0;
        }
        let elements = Array.from(element.nativeElement.querySelectorAll('.keyboard-focus'));
        __WEBPACK_IMPORTED_MODULE_5_lodash__["forEach"](elements, (elem) => {
            elem.classList.remove('keyboard-focus');
        });
    }
    setFocusOnMainWindow() {
        return __WEBPACK_IMPORTED_MODULE_6__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setFocusOnMainWindow');
    }
    setFocusOnThisElement(elementRef) {
        elementRef.nativeElement.classList.add('keyboard-focus');
        elementRef.nativeElement.focus();
    }
};
AccessibilityService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4_ng2_translate__["b" /* TranslateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__panels_service__["a" /* PanelsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__panels_service__["a" /* PanelsService */]) === "function" && _c || Object])
], AccessibilityService);

var _a, _b, _c;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/accessability.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/app-config.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__personal_app_consts__ = __webpack_require__("../../../../../src/personal/app.consts.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppConfigService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let AppConfigService = AppConfigService_1 = class AppConfigService {
    constructor() {
    }
    static loadConfigData() {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getConfig', 'config')
            .then((config) => {
            this.configObject = { 'config': __WEBPACK_IMPORTED_MODULE_2_lodash__["clone"](config) };
            this.validateConfigObjectValues();
        });
    }
    getConfigData(path) {
        return __WEBPACK_IMPORTED_MODULE_2_lodash__["get"](AppConfigService_1.configObject, path);
    }
    setConfigData(path, value, reloadEngineConfiguration = false, saveToDisk = true) {
        //update internal config object only with data that we want to save to disk (maintain data integrity)
        if (saveToDisk)
            __WEBPACK_IMPORTED_MODULE_2_lodash__["set"](AppConfigService_1.configObject, path, value);
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setConfig', path, value, reloadEngineConfiguration, saveToDisk);
    }
    static validateConfigObjectValues() {
        if (this.configObject.config['captureApp']['scheduling']) {
            this.validateSchedulingSection();
        }
        this.validateCapturePreSets();
        this.validateMultiSessionsProperties();
    }
    static validateSchedulingSection() {
        let schedulingConfigObj = this.configObject.config['captureApp']['scheduling'];
        if (!Number.isInteger(schedulingConfigObj.viewEventsAheadDay) || schedulingConfigObj.viewEventsAheadDay > 30) {
            this.configObject.config['captureApp']['scheduling']['viewEventsAheadDay'] = 14;
        }
        if (!Number.isInteger(schedulingConfigObj.intervalSec) || schedulingConfigObj.intervalSec < 300) {
            this.configObject.config['captureApp']['scheduling']['intervalSec'] = 300;
        }
        if (!Number.isInteger(schedulingConfigObj.countdownInSec) || schedulingConfigObj.countdownInSec < 300) {
            this.configObject.config['captureApp']['scheduling']['countdownInSec'] = 600;
        }
        if (!Number.isInteger(schedulingConfigObj.extendEventInSec) || schedulingConfigObj.extendEventInSec < 300) {
            this.configObject.config['captureApp']['scheduling']['extendEventInSec'] = 300;
        }
        if (!Number.isInteger(schedulingConfigObj.displayExtendEventInSec) || schedulingConfigObj.displayExtendEventInSec > 600) {
            this.configObject.config['captureApp']['scheduling']['displayExtendEventInSec'] = 600;
        }
        if (schedulingConfigObj.countdownInSec > this.MAX_COUNTDOWN_IN_SEC) {
            this.configObject.config['captureApp']['scheduling']['countdownInSec'] = this.MAX_COUNTDOWN_IN_SEC;
        }
        if (!Number.isInteger(schedulingConfigObj.eventEndNotificationInSec) || schedulingConfigObj.eventEndNotificationInSec > 900) {
            this.configObject.config['captureApp']['scheduling']['eventEndNotificationInSec'] = 600;
        }
    }
    static validateCapturePreSets() {
        let captureZoneSelectionPresets = this.configObject.config['captureApp']['captureZoneSelectionPresets'];
        let validPresets = [];
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isArray"](captureZoneSelectionPresets)) {
            __WEBPACK_IMPORTED_MODULE_2_lodash__["each"](captureZoneSelectionPresets, (dimensions) => {
                // check if values are bigger than minimum app size
                if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isNumber"](dimensions.width) && dimensions.width >= __WEBPACK_IMPORTED_MODULE_3__personal_app_consts__["a" /* AppConsts */].MINIMUM_APP_WIDTH && __WEBPACK_IMPORTED_MODULE_2_lodash__["isNumber"](dimensions.height) && dimensions.height >= __WEBPACK_IMPORTED_MODULE_3__personal_app_consts__["a" /* AppConsts */].MINIMUM_APP_HEIGHT) {
                    validPresets.push(dimensions);
                }
            });
            validPresets = __WEBPACK_IMPORTED_MODULE_2_lodash__["sortBy"](validPresets, [function (dimensions) { return dimensions.width * dimensions.height; }]);
            if (validPresets.length === 0) {
                validPresets.push({ width: 800, height: 600 });
            }
        }
        else {
            validPresets.push({ width: 800, height: 600 });
        }
        this.configObject.config['captureApp']['captureZoneSelectionPresets'] = validPresets;
    }
    static validateMultiSessionsProperties() {
        if (!this.configObject.config['captureApp']['maxNumberOfInputs'] ||
            this.configObject.config['captureApp']['maxNumberOfInputs'] > 4 ||
            this.configObject.config['captureApp']['maxNumberOfInputs'] < 1) {
            this.configObject.config['captureApp']['maxNumberOfInputs'] = 4;
        }
        if (!this.configObject.config['captureApp']['defaultSessionsConfiguration'] ||
            this.configObject.config['captureApp']['defaultSessionsConfiguration'].length < 1 ||
            this.configObject.config['captureApp']['defaultSessionsConfiguration'].length > 4) {
            this.configObject.config['captureApp']['defaultSessionsConfiguration'] = ["screen", "video"];
        }
        if (!this.configObject.config['captureApp']['primarySessionName']) {
            this.configObject.config['captureApp']['primarySessionName'] = this.PRIMARY_SESSION_NAME;
        }
    }
};
AppConfigService.MAX_COUNTDOWN_IN_SEC = 10800;
AppConfigService.PRIMARY_SESSION_NAME = 'session0';
AppConfigService.configObject = { 'config': {} };
AppConfigService = AppConfigService_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [])
], AppConfigService);

var AppConfigService_1;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-config.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/app-logger.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppLoggerService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let AppLoggerService = class AppLoggerService {
    constructor() { }
    debug(msg) {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('NativeLogger_Debug', __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(msg));
    }
    info(msg) {
        console.log(__WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(msg));
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('NativeLogger_Info', __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(msg));
    }
    warn(msg) {
        console.log(__WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(msg));
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('NativeLogger_Warn', __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(msg));
    }
    error(msg) {
        console.log(__WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(msg));
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('NativeLogger_Error', __WEBPACK_IMPORTED_MODULE_2__utils_utils__["a" /* utils */].stringifyMsg(msg));
    }
};
AppLoggerService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [])
], AppLoggerService);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-logger.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/app-notifications.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppNotificationsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let AppNotificationsService = class AppNotificationsService {
    constructor(translate, appConfig) {
        this.translate = translate;
        this.appConfig = appConfig;
        /**
         * array of current notifications {message: text, severity: error/warn/success/info}
         * @type {Array}
         */
        this.notifications = [];
        this.registerForNotificationCloseEvents();
    }
    sendNotification(msg, severity, url = '') {
        let display = this.shouldDisplayNotification(severity);
        //show info and scheduling msgs only is configured to do so
        if (display) {
            this.translate.get(msg).subscribe((res) => {
                this.sendIPCNotification({ message: res, url: url, severity: severity });
            });
        }
    }
    sendNotificationWithParams(msg, params, severity) {
        let display = this.shouldDisplayNotification(severity);
        //show info and scheduling msgs only is configured to do so
        if (display) {
            this.translate.get(msg, params).subscribe((res) => {
                this.sendIPCNotification({ message: res, severity: severity });
            });
        }
    }
    sendIPCNotification(notification) {
        if (this.isNewNotification(notification)) {
            this.notifications.push(notification);
            __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('app-notification', notification);
        }
    }
    shouldDisplayNotification(severity) {
        let conf = this.appConfig.getConfigData('config.captureApp');
        //show info and scheduling msgs only is configured to do so
        return (severity === 'warn' || severity === 'error' ||
            (conf && conf['allowInfoNotifications'] && conf['allowInfoNotifications'] === true));
    }
    registerForNotificationCloseEvents() {
        __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('app-notification-closed', (data) => {
            let removed = __WEBPACK_IMPORTED_MODULE_4_lodash__["remove"](this.notifications, (n) => {
                return data.notification['severity'] === n['severity'] &&
                    data.notification['message'] === n['message'];
            });
        });
    }
    isNewNotification(notification) {
        return !__WEBPACK_IMPORTED_MODULE_4_lodash__["find"](this.notifications, { severity: notification['severity'],
            message: notification['message'] });
    }
};
AppNotificationsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1_ng2_translate__["b" /* TranslateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object])
], AppNotificationsService);

var _a, _b;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-notifications.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/app-persistent-data.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppPersistentDataService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let AppPersistentDataService = class AppPersistentDataService {
    constructor() {
    }
    get(path) {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getPersistency', path);
    }
    set(path, data) {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('setPersistency', path, data);
    }
};
AppPersistentDataService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [])
], AppPersistentDataService);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-persistent-data.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/app-state.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppStateService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








let AppStateService = class AppStateService {
    constructor(log, persistencyService, appConfig) {
        this.log = log;
        this.persistencyService = persistencyService;
        this.appConfig = appConfig;
        this.DEFAULT_CAPTURE_TYPE = 'video';
        this.REC_STATE = {
            IN_PROCESS: 'in_process',
            LOADING: 'loading',
            STABLE: 'stable'
        };
        this.SESSION_STATE = {
            ACTIVE: 'active',
            IN_ACTIVE: 'in_active'
        };
        this.WINDOW_STATE = {
            VISIBLE: 'visible',
            HIDDEN: 'not-visible'
        };
        this.SESSION_LOAD_WAIT_STATE = {
            NEXT_TIME: 'next_time',
            NEVER: 'never',
            ALWAYS: 'wait'
        };
        /**
         * notify when app sessions are ready
         * when all planned sessions were created and ready
         * @type {Subject}
         */
        this.appSessionsReady = new __WEBPACK_IMPORTED_MODULE_1_rxjs__["Subject"]();
        this.sessionsAreReadyPromise = this.appSessionsReady.asObservable().toPromise();
        /**
         * notify device component to init
         * @type {Subject}
         */
        this.notifyDeviceComponentInit = new __WEBPACK_IMPORTED_MODULE_1_rxjs__["Subject"]();
        this.notifyDeviceComponentInit$ = this.notifyDeviceComponentInit.asObservable();
        /**
         * notify recording phase changes
         * @type {Subject}
         */
        this.recordingPhaseUpdate = new __WEBPACK_IMPORTED_MODULE_1_rxjs__["Subject"]();
        this.recordingPhaseUpdate$ = this.recordingPhaseUpdate.asObservable();
        /**
         * application main browser window state
         */
        this.applicationWindowState = new __WEBPACK_IMPORTED_MODULE_1_rxjs__["BehaviorSubject"](this.WINDOW_STATE.VISIBLE);
        this.applicationWindowState$ = this.applicationWindowState.asObservable();
        /**
         * notify sessions status change
         * @type {Subject}
         */
        this.sessionStatusChange = new __WEBPACK_IMPORTED_MODULE_1_rxjs__["Subject"]();
        this.sessionStatusChange$ = this.sessionStatusChange.asObservable();
        /**
         * pairs of sessionId and number of in progress calls
         * @type {Array}
         */
        this.callsInProgress = [];
        /**
         * application state object contains:
         * 1. application-state object:
         *      contains a key value pairs of - sourceId : sessionState (indicates if app is in process or in stable mode)
         *      main application state (recording state) will have the following pairs: rec-state : in_process / stable / disconnected
         *      application sessions will have the following pairs: <sessionId> : in_process / stable
         *      <sessionId> : in_process / stable
         *      <rec-state> : in_process / stable / disconnected (in_process when recordingPhase !== 'initial')
         */
        this.appState = {};
        /**
         * current active sessions (sessions to record)
         * @type {Array} of [sessionId] => {type: video/audio/screen}
         */
        this.activeSessions = {};
        /**
         * current inactive sessions (sessions that tryied to load but failed)
         * @type {Array} of [sessionId] => {type: video/audio/screen}
         */
        this.inactiveSessions = {};
        /**
         * maintain all removed sessions ids
         * @type {{}}
         */
        this.removedSessions = {};
        /**
         * Sessions that are in loading process at the moment
         */
        this.loadingSessionsCount = 0;
        /**
         * current app recording phase
         * @type {string}
         */
        this._recordingPhase = 'initial';
        this.connectionStateChangeLock = false;
        this.liveConfigured = false;
        this.liveStreaming = false;
        /**
         * There are places in our app that we are shutting down our sessions without re-init them (before off cycle recovery process)
         * Since there is no immediate re-init command, there is no need (actually we can't) to wait for our sessions to load before executing other commands
         */
        this.waitForSessionsToLoad = this.SESSION_LOAD_WAIT_STATE.ALWAYS;
    }
    set recordingPhase(recPhase) {
        if (this._recordingPhase !== recPhase) {
            this.recordingPhaseUpdate.next(recPhase);
        }
        this._recordingPhase = recPhase;
    }
    get recordingPhase() {
        return this._recordingPhase;
    }
    addSession(sessionId, sessionName, state) {
        this.log.info('AppState: addSession: ' + sessionId + ' - ' + sessionName + ' - ' + state);
        if (this.removedSessions[sessionId]) {
            this.log.info('AppState: tried to add removed session to added sessions: ' + sessionName + ' - ' + sessionId);
            return;
        }
        if (state === this.SESSION_STATE.ACTIVE) {
            this.activeSessions[sessionId] = { name: sessionName };
            delete this.inactiveSessions[sessionId];
            this.sessionStatusChange.next();
        }
        else {
            delete this.activeSessions[sessionId];
            this.inactiveSessions[sessionId] = { name: sessionName };
            this.sessionStatusChange.next();
        }
        this.removeLoadingSession();
        this.checkIfAllSessionsAreReady(sessionName);
    }
    removeActiveSession(sessionId) {
        this.log.info('AppState: ?: ' + sessionId);
        if (this.activeSessions[sessionId]) {
            this.inactiveSessions[sessionId] = this.activeSessions[sessionId];
            delete this.activeSessions[sessionId];
        }
        else {
            this.log.warn('removeActiveSession. ' + sessionId + ' is not active. ');
        }
        this.removeLoadingSession();
        this.sessionStatusChange.next();
    }
    addLoadingSession() {
        this.loadingSessionsCount++;
    }
    removeLoadingSession() {
        if (this.loadingSessionsCount > 0) {
            this.loadingSessionsCount--;
        }
    }
    getLoadingSessionsCount() {
        return this.loadingSessionsCount;
    }
    shutDownSessions(waitForSessions = this.SESSION_LOAD_WAIT_STATE.ALWAYS) {
        this.log.info('AppState: shutDownSessions');
        this.waitForSessionsToLoad = waitForSessions;
        let sessions = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](__WEBPACK_IMPORTED_MODULE_2_lodash__["merge"](this.getActiveVisualSessions(), this.getInActiveVisualSessions(), this.getActiveAudioSession(), this.getInActiveAudioSession()));
        if (sessions && sessions.length > 0) {
            this.onCallStarted('shutDown', JSON.stringify(sessions));
            return __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('shutDownSome', sessions)
                .then(() => {
                this.onCallEnded('shutDown - SUCCESS', JSON.stringify(sessions));
                this.removeAllSessions();
            })
                .catch((err) => {
                if (err === 'session ended') {
                    this.onCallEnded('shutDown - SUCCESS (sessions ended)', JSON.stringify(sessions));
                    this.removeAllSessions();
                }
                else {
                    this.onCallEnded('shutDown - FAILURE', JSON.stringify(sessions), err);
                    return Promise.reject(err);
                }
            });
        }
        else {
            this.log.warn('No sessions to shutdown');
            return Promise.resolve();
        }
    }
    removeAllSessions() {
        this.log.info('AppState: removeAllSessions');
        this.appSessionsReady = new __WEBPACK_IMPORTED_MODULE_1_rxjs__["Subject"]();
        this.sessionsAreReadyPromise = this.appSessionsReady.asObservable().toPromise();
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.activeSessions), (sessionId) => {
            delete this.activeSessions[sessionId];
            this.removedSessions[sessionId] = sessionId;
            this.clearSessionFromAppState(sessionId);
        });
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.inactiveSessions), (sessionId) => {
            delete this.inactiveSessions[sessionId];
            this.clearSessionFromAppState(sessionId);
        });
    }
    //remove all sessions related properties
    clearSessionFromAppState(sessionId) {
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](this.appState, (value, key) => {
            if (key.indexOf('rec-state') === -1) {
                delete this.appState[key];
            }
        });
    }
    sendInitNotification() {
        this.notifyDeviceComponentInit.next();
    }
    getActiveSessions() {
        return this.activeSessions;
    }
    getInActiveSessions() {
        return this.inactiveSessions;
    }
    getActiveVisualSessions() {
        let sessions = {};
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](this.activeSessions, (sessionObj, sessionId) => {
            if (sessionObj['name'] && sessionObj['name'] !== 'audio') {
                sessions[sessionId] = sessionObj;
            }
        });
        return sessions;
    }
    getInActiveVisualSessions() {
        let sessions = {};
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](this.inactiveSessions, (sessionObj, sessionId) => {
            if (sessionObj['name'] && sessionObj['name'] !== 'audio') {
                sessions[sessionId] = sessionObj;
            }
        });
        return sessions;
    }
    getActiveAudioSession() {
        let audioSession = {};
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](this.activeSessions, (sessionObj, sessionId) => {
            if (sessionObj['name'] && sessionObj['name'] === 'audio') {
                audioSession[sessionId] = sessionObj;
                return false; //breaking for each loop
            }
        });
        return audioSession;
    }
    getInActiveAudioSession() {
        let audioSession = {};
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](this.inactiveSessions, (sessionObj, sessionId) => {
            if (sessionObj['name'] && sessionObj['name'] === 'audio') {
                audioSession[sessionId] = sessionObj;
                return false; //breaking for each loop
            }
        });
        return audioSession;
    }
    /**
     * will return sessions ids for active visual sessions or if no active visual session exists and audio only mode
     * is enabled - will return the active audio session
     * @return {string[]}
     */
    getActiveRecordableSessionsIds() {
        let activeSessions = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.getActiveVisualSessions());
        //if there a no visual session and audio only mode is on - try audio session
        if ((!activeSessions || __WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](activeSessions)) &&
            this.appConfig.getConfigData('config.captureApp.audioOnlyRecording')) {
            activeSessions = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.getActiveAudioSession());
        }
        return activeSessions;
    }
    getInActiveRecordableSessionsIds() {
        let inActiveSessions = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.getInActiveVisualSessions());
        //if there a no visual session and audio only mode is on - try audio session
        if ((!inActiveSessions || __WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](inActiveSessions)) &&
            this.appConfig.getConfigData('config.captureApp.audioOnlyRecording')) {
            inActiveSessions = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.getInActiveAudioSession());
        }
        return inActiveSessions;
    }
    getSessionsNames(isActive) {
        let sessions = isActive ? this.activeSessions : this.inactiveSessions;
        let sessionsNames = [];
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](sessions, (session) => {
            sessionsNames.push(session['name']);
        });
        return sessionsNames;
    }
    getSessionIdByName(sessionName, active = true) {
        let sessions = active ? this.getActiveSessions() : this.getInActiveSessions();
        for (let key of Object.keys(sessions)) {
            if (sessions[key]["name"] === sessionName)
                return key;
        }
    }
    updateAppState(sourceId, state) {
        this.appState[sourceId] = state;
    }
    setLiveConfigurationState(confState) {
        this.liveConfigured = confState;
    }
    setLiveStreamingState(streamingState) {
        this.liveStreaming = streamingState;
    }
    isAppLiveConfigured() {
        return this.liveConfigured;
    }
    isAppStreaming() {
        return this.isAppRecording() && this.liveConfigured && this.liveStreaming;
    }
    /**
     * all calls completed and app is not during a recording session
     * @returns {boolean}
     */
    isAppStable() {
        return __WEBPACK_IMPORTED_MODULE_2_lodash__["every"](__WEBPACK_IMPORTED_MODULE_2_lodash__["values"](this.appState), (state) => {
            return state === this.REC_STATE.STABLE;
        });
    }
    isAppRecording() {
        return (this.appState['rec-state'] && this.appState['rec-state'] === this.REC_STATE.IN_PROCESS) ||
            (this.recordingPhase && this.recordingPhase !== 'initial'); //added to support app loading stage where rec-state wasn't initialized yet
    }
    isSourceStable(sourceId, sourceOnly = false) {
        return ((this.appState[sourceId] && this.appState[sourceId] === this.REC_STATE.STABLE) || !(this.appState[sourceId])) &&
            ((this.appState['rec-state'] && this.appState['rec-state'] === this.REC_STATE.STABLE) || sourceOnly);
    }
    /**
     * Getting sessions names and default device type from persistent data file and user settings for app init phase
     * For personal capture app - always make sure returned sessions count is a least the amount of sessions configured
     * in the user localSettings 'defaultSessionsConfiguration'.
     * For classroom capture - if sessions count from persistent data equals to 0. load sessions as configured in the
     * user localSettings 'defaultSessionsConfiguration'. else - return the sessions from app persistent data file
     *
     * usage example: used during app sessions init in BL and UI
     */
    getVisualSessionsNamesAndDefaultTypesForInit() {
        let captureSessionsToInit = {};
        return this.getVisualSessionsFromPersistentData()
            .then(sessions => {
            let defaultSessionsTypeArray = this.appConfig.getConfigData('config.captureApp.defaultSessionsConfiguration');
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](sessions).sort(), (sessionKey, index) => {
                let defaultType = defaultSessionsTypeArray[index] ? defaultSessionsTypeArray[index] : this.DEFAULT_CAPTURE_TYPE;
                captureSessionsToInit[sessionKey] = defaultType;
            });
            let appType = this.appConfig.getConfigData('config.shared.appType');
            //for personal capture OR if there are no sessions to init - load defaults
            if (appType === 'pc' || __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](captureSessionsToInit).length === 0) {
                //making sure persistent sessions count is at least equal to default configured sessions
                for (let count = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](sessions).length; count < defaultSessionsTypeArray.length; count++) {
                    captureSessionsToInit['session' + count] = defaultSessionsTypeArray[count];
                }
            }
            return captureSessionsToInit;
        });
    }
    getVisualSessionsFromPersistentData() {
        let sessions = {};
        return this.persistencyService.get('')
            .then((persistentDataObj) => {
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](persistentDataObj, (value, key) => {
                if (key.startsWith('session')) {
                    sessions[key] = value;
                }
            });
        }).catch((err) => { })
            .then(() => { return sessions; });
    }
    getNumberOfSessionsFromPersistentData() {
        //get all visual sessions count and add the 'audio' session
        return this.getVisualSessionsFromPersistentData()
            .then(sessions => {
            return __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](sessions).length + 1;
        });
    }
    checkIfAllSessionsAreReady(sessionName) {
        this.getNumberOfSessionsFromPersistentData()
            .then((sessionsToLoad) => {
            let activeSessionsNumber = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.getActiveSessions()).length;
            let inActiveSessionsNumber = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.getInActiveSessions()).length;
            this.log.info('Session ' + sessionName + ' was added. number of current active sessions: ' + activeSessionsNumber +
                '. Number of in active sessions: ' + inActiveSessionsNumber +
                '. Number of loading sessions: ' + this.loadingSessionsCount + '. Number of sessions to load: ' + sessionsToLoad);
            this.log.info('AppState: active sessions: ' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(this.activeSessions));
            this.log.info('AppState: inactive sessions: ' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(this.inactiveSessions));
            if (activeSessionsNumber + inActiveSessionsNumber >= sessionsToLoad && this.loadingSessionsCount === 0 || sessionsToLoad === 0) {
                this.log.info('AppState: All sessions are ready');
                this.log.info('AppState: free connection state lock');
                this.setConnectionStateChangeLock('checkIfAllSessionsAreReady - ready', false);
                this.appSessionsReady.next(true);
                this.appSessionsReady.complete();
            }
        });
    }
    onCallStarted(source, sessionId) {
        if (sessionId && sessionId !== '[]') {
            let numOfCalls = this.callsInProgress[sessionId] ? this.callsInProgress[sessionId] : 0;
            this.callsInProgress[sessionId] = ++numOfCalls;
            this.updateAppState(sessionId, this.REC_STATE.IN_PROCESS);
            this.log.info('call started: ' + source + ' id: ' + sessionId + ' number of current calls: ' + this.callsInProgress[sessionId]);
        }
    }
    onCallEnded(source, sessionId, data = '') {
        if (sessionId && sessionId !== '[]') {
            let numOfCalls = this.callsInProgress[sessionId];
            this.callsInProgress[sessionId] = --numOfCalls;
            this.updateAppState(sessionId, (this.callsInProgress[sessionId] === 0 ? this.REC_STATE.STABLE : this.REC_STATE.IN_PROCESS));
            if (this.callsInProgress[sessionId] === 0) {
                delete this.callsInProgress[sessionId];
            }
            this.log.info('call ended: ' + source + ' id: ' + sessionId + ' number of current calls: ' +
                (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](this.callsInProgress[sessionId]) ? 0 : this.callsInProgress[sessionId]) +
                (!__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](data) ? (' ' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(data)) : ''));
        }
    }
    setApplicationWindowState(state) {
        this.applicationWindowState.next(state);
    }
    getApplicationWindowState() {
        return this.applicationWindowState.getValue();
    }
    areSessionsReadyForRecording(caller) {
        //if there is no need to wait for loading sessions (@see this.waitForSessionsToLoad comment above...)
        switch (this.waitForSessionsToLoad) {
            case this.SESSION_LOAD_WAIT_STATE.NEXT_TIME:
                this.waitForSessionsToLoad = this.SESSION_LOAD_WAIT_STATE.ALWAYS;
            case this.SESSION_LOAD_WAIT_STATE.NEVER:
                this.log.info('AppState: ' + caller + ' there is no need to wait for loading sessions.');
                return Promise.resolve(true);
        }
        let timeoutDelay = 30000;
        //if function is stuck, there are probably some sessions issues, call to re-init.
        let delayedTO = setTimeout(() => {
            this.log.warn('AppState: for ' + caller + ' - Sessions are not ready for more than ' + timeoutDelay / 1000 + ' seconds, call to re-launch app');
            return __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('relaunch');
        }, timeoutDelay);
        this.log.info(caller + ' is waiting for sessions to be ready');
        return this.getNumberOfSessionsFromPersistentData()
            .then(sessionsCount => {
            if (sessionsCount === 0) {
                this.log.info('AppState: There are no sessions to wait for. App is ready');
                clearTimeout(delayedTO);
                return Promise.resolve(true);
            }
            else {
                return this.sessionsAreReadyPromise
                    .then((ready) => {
                    clearTimeout(delayedTO);
                    this.log.info('AppState: ' + caller + ' all sessions are in ready state: ' + ready);
                    return Promise.resolve(true);
                });
            }
        });
    }
    setConnectionStateChangeLock(caller, lock) {
        this.log.info('AppState: ' + caller + ' set connection state lock to: ' + lock);
        this.connectionStateChangeLock = lock;
    }
    sessionsReturnedFromConnectionStateChange(caller) {
        this.log.info('AppState: waiting for session to be ready after connection state change');
        return this.areSessionsReadyForRecording(caller)
            .then(() => {
            if (this.connectionStateChangeLock) {
                this.log.info('AppState: sessions are still during connection state change process.');
                return __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].delayPromise(2000).then(() => {
                    return this.sessionsReturnedFromConnectionStateChange(caller);
                });
            }
            else {
                this.log.info('AppState: sessions finished connection state change process.');
                return Promise.resolve(true);
            }
        });
    }
};
AppStateService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_6__app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_7__app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object])
], AppStateService);

var _a, _b, _c;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-state.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/app-update.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppUpdateService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








let AppUpdateService = class AppUpdateService {
    constructor(appNotification, appConfig, appState, appLog) {
        this.appNotification = appNotification;
        this.appConfig = appConfig;
        this.appState = appState;
        this.appLog = appLog;
        this.inProgress = false;
        this.idleCounter = this.getBaseIdleTime();
    }
    startUpdateInterval() {
        this.intervalSub = __WEBPACK_IMPORTED_MODULE_2_rxjs__["Observable"].timer(0, 1000).subscribe(t => {
            if (this.idleCounter <= 0)
                this.checkForUpdates();
            else
                this.idleCounter--;
        });
    }
    restartUpdateInterval() {
        this.idleCounter = this.getBaseIdleTime();
    }
    stopUpdateInterval() {
        if (this.intervalSub) {
            this.intervalSub.unsubscribe();
            this.intervalSub = null;
        }
    }
    checkForUpdates() {
        //app is during update process or during recording restart idle interval counter
        if (this.inProgress || this.appState.isAppRecording())
            this.restartUpdateInterval();
        else {
            this.appLog.info('Checking if update is available');
            this.inProgress = true;
            __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("is-update-available")
                .then((ready) => {
                //call install updates, if installation will succeed the app will be re-launched
                if (ready) {
                    this.appLog.info('Update is ready, calling installation process');
                    __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("install-update")
                        .then(() => {
                    }) // will never happen since installer will restart the application
                        .catch((err) => {
                        this.appLog.error('Failed to install app update. ' + __WEBPACK_IMPORTED_MODULE_6__utils_utils__["a" /* utils */].stringifyMsg(err));
                        this.restartUpdateInterval();
                        this.inProgress = false;
                    });
                }
                else {
                    this.appLog.info('There is no update available');
                    this.restartUpdateInterval();
                    this.inProgress = false;
                }
            });
        }
    }
    getBaseIdleTime() {
        let baseIdleTime = this.appConfig.getConfigData('config.shared.updates.appIdleSec');
        return baseIdleTime ? baseIdleTime : 180;
    }
    checkIfWasUpdated() {
        __WEBPACK_IMPORTED_MODULE_4__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('was-updated')
            .then((updateData) => {
            if (updateData['updated'])
                this.appNotification.sendNotificationWithParams("NOTIFICATIONS.info_appWasUpdated", { 'app_version': updateData['version'] }, 'info');
        });
    }
};
AppUpdateService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_7__app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__app_state_service__["a" /* AppStateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_5__app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__app_logger_service__["a" /* AppLoggerService */]) === "function" && _d || Object])
], AppUpdateService);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-update.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/authentication.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_http__ = __webpack_require__("../../../http/@angular/http.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AuthenticationService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let AuthenticationService = class AuthenticationService {
    constructor(http, log, config, appState, appConfig) {
        this.http = http;
        this.log = log;
        this.config = config;
        this.appState = appState;
        this.appConfig = appConfig;
        /**
         * emit event when user auth state updates,
         * true - logged in
         * false - logged out
         */
        this.userAuthUpdate = new __WEBPACK_IMPORTED_MODULE_3_rxjs__["Subject"]();
        this.userAuthUpdate$ = this.userAuthUpdate.asObservable();
        this._isLoggedIn = false;
    }
    set isLoggedIn(loggedIn) {
        this._isLoggedIn = loggedIn;
        this.userAuthUpdate.next(this._isLoggedIn);
    }
    get isLoggedIn() {
        return this._isLoggedIn;
    }
    static getAuthenticationMode() {
        return __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('isAuthEnabled')
            .then((enabled) => {
            this.isAuthenticationEnabled = enabled === 0 ? false : true;
        });
    }
    isUrlValid() {
        return this.http.get(this.appConfig.getConfigData('config.shared.authenticationUrl')).toPromise()
            .then((res) => {
            return true;
        })
            .catch((e) => {
            return Promise.reject(false);
        });
    }
    isUserLoggedIn() {
        return this.isLoggedIn;
    }
    logIn(userDate) {
        this.setUserLogInData(userDate);
    }
    logOut() {
        this.restartLoginIdleInterval();
        return this.logoutAndClearSessionData()
            .then((response) => {
            if (this.appState.isAppRecording())
                return Promise.resolve(true);
            //if not during recording
            this.removeUserLogInData();
            this.log.info('User was logged out');
        })
            .catch((error) => {
            this.log.info('Failed to logout from external site, removing logged in user data');
            this.removeUserLogInData();
            return Promise.resolve(false);
        });
    }
    getAuthLoginUrl() {
        return this.isUrlValid()
            .then((valid) => {
            return this.appConfig.getConfigData('config.shared.authenticationUrl');
        });
    }
    getUserLogoutUrl() {
        return this.appConfig.getConfigData('config.shared.authenticationUrl') + '?logout=true';
    }
    getLoggedInUserId() {
        if (this.isUserLoggedIn())
            return this.config.getConfigData('config.shared.externalSettings.userId');
        else
            return '';
    }
    setUserLogInData(userData) {
        this.config.setConfigData('config.shared.externalSettings.appToken', userData.appToken);
        this.config.setConfigData('config.shared.externalSettings.appTokenId', userData.appTokenId);
        this.config.setConfigData('config.shared.externalSettings.hashType', userData.hashType);
        this.config.setConfigData('config.shared.externalSettings.partnerId', userData.partnerId);
        this.config.setConfigData('config.shared.externalSettings.serviceUrl', userData.serviceUrl);
        this.config.setConfigData('config.shared.externalSettings.userId', userData.userId);
        this.isLoggedIn = true;
        this.startLoginIdleInterval();
    }
    logoutAndClearSessionData() {
        return __WEBPACK_IMPORTED_MODULE_5__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('clearSessionData');
    }
    removeUserLogInData() {
        this.isLoggedIn = false;
        this.config.setConfigData('config.shared.externalSettings', {});
        this.stopLoginIdleInterval();
    }
    startLoginIdleInterval() {
        this.idleCounter = this.getBaseIdleTime();
        this.intervalSub = __WEBPACK_IMPORTED_MODULE_3_rxjs__["Observable"].timer(0, 1000).subscribe(t => {
            if (this.idleCounter <= 0)
                this.logOut();
            else
                this.idleCounter--;
        });
    }
    restartLoginIdleInterval() {
        this.idleCounter = this.getBaseIdleTime();
    }
    stopLoginIdleInterval() {
        if (this.intervalSub) {
            this.intervalSub.unsubscribe();
            this.intervalSub = null;
        }
    }
    getBaseIdleTime() {
        let baseIdleTime = this.appConfig.getConfigData('config.shared.appLoginIdleMinutes');
        return baseIdleTime ? baseIdleTime * 60 : 15 * 60;
    }
};
AuthenticationService.isAuthenticationEnabled = false;
AuthenticationService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__angular_http__["b" /* Http */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__angular_http__["b" /* Http */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6__app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__app_state_service__["a" /* AppStateService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_4__app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__app_config_service__["a" /* AppConfigService */]) === "function" && _e || Object])
], AuthenticationService);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/authentication.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/infra.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__kaltura_api_service__ = __webpack_require__("../../../../../src/shared/services/infra/kaltura-api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__system_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__system_health_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-health.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__panels_service__ = __webpack_require__("../../../../../src/shared/services/infra/panels.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__accessability_service__ = __webpack_require__("../../../../../src/shared/services/infra/accessability.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__authentication_service__ = __webpack_require__("../../../../../src/shared/services/infra/authentication.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__session_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/session-state.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InfraModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};













let InfraModule = class InfraModule {
};
InfraModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        providers: [
            __WEBPACK_IMPORTED_MODULE_1__app_config_service__["a" /* AppConfigService */],
            __WEBPACK_IMPORTED_MODULE_2__app_logger_service__["a" /* AppLoggerService */],
            __WEBPACK_IMPORTED_MODULE_3__app_persistent_data_service__["a" /* AppPersistentDataService */],
            __WEBPACK_IMPORTED_MODULE_4__app_state_service__["a" /* AppStateService */],
            __WEBPACK_IMPORTED_MODULE_5__app_notifications_service__["a" /* AppNotificationsService */],
            __WEBPACK_IMPORTED_MODULE_6__kaltura_api_service__["a" /* KalturaApiService */],
            __WEBPACK_IMPORTED_MODULE_7__system_data_service__["a" /* SystemDataService */],
            __WEBPACK_IMPORTED_MODULE_8__system_health_service__["a" /* SystemHealthService */],
            __WEBPACK_IMPORTED_MODULE_9__panels_service__["a" /* PanelsService */],
            __WEBPACK_IMPORTED_MODULE_10__accessability_service__["a" /* AccessibilityService */],
            __WEBPACK_IMPORTED_MODULE_11__authentication_service__["a" /* AuthenticationService */],
            __WEBPACK_IMPORTED_MODULE_12__session_state_service__["a" /* SessionStateService */]
        ]
    })
], InfraModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/infra.module.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/kaltura-api.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__("../../../http/@angular/http.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Rx__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Rx___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_Rx__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_Observable__ = __webpack_require__("../../../../rxjs/Observable.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KalturaApiService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









let KalturaApiService = class KalturaApiService {
    constructor(http, logger, appConfig, appPersistency) {
        this.http = http;
        this.logger = logger;
        this.appConfig = appConfig;
        this.appPersistency = appPersistency;
        this._id = 0;
        /*
         this.listUsers("web").subscribe( res => {
         console.warn("listUsers",res);
         });
         */
    }
    listUsers(startsWith) {
        return this.apiRequest([{ service: 'user',
                action: 'list',
                "filter:objectType": "KalturaUserFilter",
                "filter:idOrScreenNameStartsWith": startsWith,
                'pager:pageSize': 10 },
            { service: 'user',
                action: 'list',
                "filter:objectType": "KalturaUserFilter",
                "filter:firstNameOrLastNameStartsWith": startsWith,
                'pager:pageSize': 10 }])
            .map(res => {
            let userList = [];
            __WEBPACK_IMPORTED_MODULE_3_lodash__["each"](res, (result, key) => {
                userList = __WEBPACK_IMPORTED_MODULE_3_lodash__["unionBy"](userList, result['objects'], 'id');
            });
            return userList;
        });
    }
    /**
     *
     * @param {string} resourceId
     * @param {string} eventType
     * @param {any} data
     * @param {boolean} shouldLog
     * @param {boolean} rawData raw data or private data (image or text)
     * @returns {Observable<any>}
     */
    reportMonitoringData(resourceId, eventType, data, shouldLog, rawData) {
        let reqObject = {
            "service": 'beacon_beacon',
            "action": 'add',
            "shouldLog": shouldLog ? 1 : 0,
            "beacon:objectType": 'KalturaBeacon',
            "beacon:relatedObjectType": "1",
            "beacon:eventType": eventType,
            "beacon:objectId": resourceId
        };
        if (rawData) {
            reqObject['beacon:rawData'] = __WEBPACK_IMPORTED_MODULE_3_lodash__["isObject"](data) ? JSON.stringify(data) : data;
        }
        else {
            reqObject['beacon:privateData'] = __WEBPACK_IMPORTED_MODULE_3_lodash__["isObject"](data) ? JSON.stringify(data) : data;
        }
        return this.apiRequest(reqObject);
    }
    /**
     *
     * @param startDate time in millis
     * @param endDate time in millis
     * @return {Observable<R>}
     */
    getScheduledEvents(startDate, endDate, resourceId) {
        this.logger.debug("Sending API get request scheduled event: " + resourceId);
        return this.apiRequest({ service: 'schedule_scheduleevent',
            action: 'list',
            "filter:objectType": "KalturaScheduleEventFilter",
            "filter:endDateGreaterThanOrEqual": startDate / 1000,
            "filter:startDateLessThanOrEqual": endDate / 1000,
            "filter:orderBy": "+startDate,+createdAt",
            "filter:resourceIdsLike": resourceId,
            "filter:recurrenceTypeIn": "0,2",
            "filter:statusEqual": 2,
            'pager:pageSize': 1000 })
            .map(res => {
            return res.objects;
        });
    }
    getEntry(entryId) {
        this.logger.debug("Sending API get request for entry id: " + entryId);
        return this.apiRequest({ service: 'baseentry',
            action: 'get',
            entryId: entryId
        });
    }
    updateRedirectEntryId(entryId, redirectEntryId) {
        this.logger.debug("Sending API update request for entry id: " + entryId + " with redirectEntryId of: [" + redirectEntryId + "]");
        return this.apiRequest({ service: 'baseentry',
            action: 'update',
            entryId: entryId,
            "baseEntry:objectType": "KalturaBaseEntry",
            "baseEntry:redirectEntryId": redirectEntryId
        });
    }
    updateAdminTags(entryId, adminTags) {
        this.logger.debug("Sending API update request for entry id: " + entryId + " with AdminTags of: " + adminTags);
        return this.apiRequest({ service: 'baseentry',
            action: 'update',
            entryId: entryId,
            "baseEntry:objectType": "KalturaBaseEntry",
            "baseEntry:adminTags": adminTags
        });
    }
    getFlavors(flavorIds) {
        this.logger.debug("Sending API list request for flavors ids: " + flavorIds);
        return this.apiRequest({ service: 'flavorparams',
            action: 'list',
            "filter:objectType": "KalturaScheduleEventFilter",
            "filter:idIn": flavorIds
        }).map(res => {
            return res.objects;
        });
    }
    apiRequest(params) {
        let now = new Date();
        if (this._ks_expiry && now > this._ks_expiry) {
            this._ks = null;
        }
        if (this._ks) {
            return this._apiRequest(params);
        }
        return this.login().flatMap(res => {
            return this._apiRequest(params);
        });
    }
    /**
     * sets user suggested tags in persistent data file [last 10 tags]
     * *** in future we might consider to use Kaltura api to fetch all relevant tags and remove this method ***
     * @param tags
       */
    setSuggestedTags(tags) {
        return this.getSuggestedTags('').toPromise()
            .then((oldTags) => {
            let allTags = __WEBPACK_IMPORTED_MODULE_3_lodash__["uniq"](oldTags.concat(tags));
            this.appPersistency.set('user.tags', __WEBPACK_IMPORTED_MODULE_3_lodash__["takeRight"](allTags, 10).join(','));
        });
    }
    /**
     * gets user suggested tags [last 10 used tags] from app persistent data
     * *** in future we might consider to use Kaltura api to fetch all relevant tags ***
     * @param containedString
     * @returns {Array}
       */
    getSuggestedTags(containedString) {
        return __WEBPACK_IMPORTED_MODULE_6_rxjs_Observable__["Observable"].fromPromise(this.appPersistency.get('user')
            .then((userData) => {
            let tags = [];
            if (userData && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](userData) && userData['tags']) {
                let suggested = userData['tags'].split(',');
                __WEBPACK_IMPORTED_MODULE_3_lodash__["forEach"](suggested, (suggestedTag) => {
                    if (suggestedTag.includes(containedString))
                        tags.push(suggestedTag);
                });
            }
            return tags;
        }));
    }
    login() {
        this._config = this.appConfig.getConfigData("config.shared");
        return this._apiRequest({
            service: "session",
            action: "startWidgetSession",
            "widgetId": '_' + this._config["partnerId"]
        }).flatMap((result) => {
            return this._apiRequest({
                service: "apptoken",
                action: "startSession",
                ks: result.ks,
                tokenHash: __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].sha1(result.ks + this._config["appToken"]),
                id: this._config["appTokenId"]
            }).map((result) => {
                this._ks = result.ks;
                let now = new Date();
                this._ks_expiry = new Date(now.getTime() + 1 * 60 * 60 * 1000); //1 hour
                return result;
            });
        });
    }
    _apiRequest(requests) {
        let body = {
            ks: this._ks,
            format: 1,
            clientTag: "CRA:" + this._config.app_version
        };
        if (__WEBPACK_IMPORTED_MODULE_3_lodash__["isArray"](requests)) {
            body['service'] = "multirequest";
            requests.forEach((item, index) => {
                __WEBPACK_IMPORTED_MODULE_3_lodash__["each"](item, (value, key) => {
                    body[index + ":" + key] = value;
                });
            });
        }
        else {
            body = __WEBPACK_IMPORTED_MODULE_3_lodash__["assign"](body, requests);
        }
        let requestJSON = JSON.stringify(body);
        this._id++;
        let headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]();
        headers.append('Content-Type', 'application/json');
        this.logger.debug('API request [#' + this._id + '] for service ' + body['service'] + '::' + body['action']);
        return this.http.post(this._config['serviceUrl'] + `/api_v3/index.php`, requestJSON, {
            headers: headers
        }).map((response) => {
            let result = response.json();
            let headers = response.headers;
            this.logger.debug('API response for [#' + this._id + '] X-Me: [' + headers.get('X-Me') + '] X-Kaltura-Session: ' + headers.get('X-Kaltura-Session'));
            if (result && result.objectType === "KalturaAPIException") {
                throw __WEBPACK_IMPORTED_MODULE_6_rxjs_Observable__["Observable"].throw(result);
            }
            return result;
        }).catch((error) => {
            this.logger.warn('API response failed for #' + this._id + ' result.' +
                ' Token Id: ' + this._config["appTokenId"] +
                ' KS: ' + this._ks +
                ' KS expiry: ' + this._ks_expiry +
                ' Error msg: ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(error));
            this._ks = null; //making sure we won't use the same KS in the next call
            return __WEBPACK_IMPORTED_MODULE_6_rxjs_Observable__["Observable"].throw(error);
        });
    }
    checkIsLive(entryId) {
        let requestJSON = JSON.stringify({ service: 'livestream',
            action: 'isLive',
            "id": entryId,
            "protocol": "applehttp",
            "format": 1,
        });
        return this.http.post(this._config['serviceUrl'] + `/api_v3/index.php`, requestJSON, {
            headers: new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' })
        }).map((response) => {
            let result = response.json();
            if (result && result.objectType === "KalturaAPIException") {
                throw __WEBPACK_IMPORTED_MODULE_6_rxjs_Observable__["Observable"].throw(result);
            }
            return result;
        });
    }
};
KalturaApiService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* Http */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* Http */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_7__app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_8__app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _d || Object])
], KalturaApiService);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/kaltura-api.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/panels.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PanelsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let PanelsService = class PanelsService {
    constructor(log) {
        this.log = log;
        /**
         * contain an panel object:
         * type: <the panel type f.e: 'recording-details-edit' / 'audio-device-settings' etc...>,
         * active: true / false
         * @type {BehaviorSubject<Object>}
         */
        this.currentPanel = new __WEBPACK_IMPORTED_MODULE_1_rxjs__["BehaviorSubject"]({});
        this.currentPanel$ = this.currentPanel.asObservable();
    }
    /**
     * update current panel state
     * @param panel
     * @param force if true, updating new panel although current panel is open
     */
    updateCurrentPanel(panel, force = false) {
        //if the app is trying to open two panels at the same time and not is force mode
        if (!force && !__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](this.getCurrentPanel()) && panel['active'] && this.getCurrentPanel()['active']) {
            this.log.info('rejected open panel request');
        }
        else {
            this.currentPanel.next(panel);
        }
    }
    getCurrentPanel() {
        return this.currentPanel.getValue();
    }
    /**
     * is the current active panel is the provided panel
     * @param panelType
     * @returns {boolean}
     */
    isPanelActive(panelType) {
        return (this.getCurrentPanel() && this.getCurrentPanel()['type'] === panelType) ?
            this.currentPanel.getValue()['active'] : false;
    }
    /**
     * is there any active panel at the moment - displayed to the user
     * @returns {boolean|any}
     */
    isCurrentPanelActive() {
        return !__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](this.getCurrentPanel()) && this.getCurrentPanel()['active'];
    }
};
PanelsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object])
], PanelsService);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/panels.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/session-state.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SessionStateService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


let SessionStateService = class SessionStateService {
    constructor() {
        /**
         * fires event when all sessions finished initialization process
         * @type {Subject}
         */
        this.sessionsInit = new __WEBPACK_IMPORTED_MODULE_1_rxjs__["Subject"]();
        this.sessionsInit$ = this.sessionsInit.asObservable();
    }
};
SessionStateService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])()
], SessionStateService);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/session-state.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/system-data.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SystemDataService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let SystemDataService = class SystemDataService {
    constructor(log) {
        this.log = log;
        this.systemData = null;
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getLocalizationData').then((data) => {
            this.systemData = data;
        }).catch((err) => {
            this.log.error('Failed to getLocalizationData. ' + __WEBPACK_IMPORTED_MODULE_3__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    getLang() {
        if (this.systemData && this.systemData['lang']) {
            return this.systemData['lang'];
        }
        return navigator.language;
    }
};
SystemDataService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object])
], SystemDataService);

var _a;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/system-data.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/infra/system-health.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Rx__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Rx___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_Rx__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SystemHealthService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









let SystemHealthService = class SystemHealthService {
    /**
     * system health notification is being started on app loading (see appModule).
     */
    constructor(log, config, notificationService, appState) {
        this.log = log;
        this.config = config;
        this.notificationService = notificationService;
        this.appState = appState;
        this.SYS_HEALTH_ERROR = 'sys_health_error';
        this.HEALTH_STATUS = {
            OK: 'ok',
            ERROR: 'error'
        };
        this.BYTES_IN_GB = 1073741824;
        this.SAMPLE_INTERVAL_SEC = 10;
        this.MAX_CPU_PERCENTAGE = 70;
        this.MIN_MEMORY_GB = 1;
        this.MIN_DISKSPACE_GB = 20;
        this.NUM_SAMPLES_TO_ALER_TAFTER = 3;
        this.systemHealthTimer = null;
        this.systemHealthTimerSub = null;
        this.systemHealthThresholds = {
            'sampleIntervalSec': this.SAMPLE_INTERVAL_SEC,
            'maxCpuPercentage': this.MAX_CPU_PERCENTAGE,
            'minMemoryGB': this.MIN_MEMORY_GB,
            'minDiskspaceGB': this.MIN_DISKSPACE_GB,
            'numSamplesToAlertAfter': this.NUM_SAMPLES_TO_ALER_TAFTER
        };
        this.exceedThresholdSet = new Set();
        this.systemNotHealthy = new __WEBPACK_IMPORTED_MODULE_3_rxjs_Rx__["BehaviorSubject"](false); // healthy state
        this.systemNotHealthy$ = this.systemNotHealthy.asObservable();
        this.cpuPercent_consecutive_violations = 0;
        this.memFree_consecutive_violations = 0;
    }
    start() {
        this.log.info('Loading system health configurations');
        let sysHealth = this.config.getConfigData('config.captureApp.systemHealth');
        sysHealth = __WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](sysHealth) ? {} : sysHealth;
        this.systemHealthThresholds = __WEBPACK_IMPORTED_MODULE_2_lodash__["merge"](this.systemHealthThresholds, sysHealth);
        this.validateHealthParams();
        this.systemHealthTimer = __WEBPACK_IMPORTED_MODULE_3_rxjs_Rx__["Observable"].timer(1000, this.systemHealthThresholds['sampleIntervalSec'] * 1000);
        this.startSystemHealthInterval();
    }
    validateHealthParams() {
        if (!Number.isInteger(this.systemHealthThresholds['sampleIntervalSec']) || this.systemHealthThresholds['sampleIntervalSec'] < 10 || this.systemHealthThresholds['sampleIntervalSec'] > 60) {
            this.systemHealthThresholds['sampleIntervalSec'] = 60;
            this.log.warn('SystemHealthService: sampleIntervalSec should be a number between 10-60 seconds (default: 60)');
        }
        if (!Number.isInteger(this.systemHealthThresholds['minDiskspaceLeftMB']) || this.systemHealthThresholds['minDiskspaceLeftMB'] < 500) {
            this.systemHealthThresholds['minDiskspaceLeftMB'] = 500;
            this.log.warn('SystemHealthService: minDiskspaceLeftMB should be a number more than 500 (default: 500)');
        }
    }
    stop() {
        this.log.info('Stopping system health notifications');
        if (this.systemHealthTimerSub) {
            this.systemHealthTimerSub.unsubscribe();
            this.systemHealthTimerSub = null;
        }
    }
    startSystemHealthInterval() {
        this.log.info('Starting system health notifications');
        this.systemHealthTimer.subscribe(() => {
            this.checkSystemHealth();
        });
    }
    checkSystemHealth(scheduled = true, forMonitoring = false) {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getPerformanceCounters')
            .then((data) => {
            if (!__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](data)) {
                if (data['cpuPercent'] && scheduled)
                    this.notifyCpu(data['cpuPercent']);
                if (data['diskFree'])
                    this.notifyDiskspace(data['diskFree'] / this.BYTES_IN_GB, scheduled);
                if (data['memFree'] && scheduled)
                    this.notifyMemory(data['memFree'] / this.BYTES_IN_GB);
            }
            // send health status obj for checking manually (on StartRecording...)
            // fist of all - check if DS is almost full - most critical
            if (this.exceedThresholdSet.has('diskspaceAlmostFull')) {
                return { status: this.HEALTH_STATUS.ERROR, message: 'SYSTEM_HEALTH.diskspace-full', type: this.SYS_HEALTH_ERROR };
                //just for monitoring and less critical than full DS
            }
            else if (forMonitoring && this.exceedThresholdSet.has('diskspaceThresholdExceeded')) {
                return { status: this.HEALTH_STATUS.ERROR, message: 'SYSTEM_HEALTH.diskspace',
                    type: this.SYS_HEALTH_ERROR, params: { diskspace_value: this.systemHealthThresholds['minDiskspaceGB'] + 'GB' } };
            }
            else {
                return { status: this.HEALTH_STATUS.OK };
            }
        })
            .catch((err) => {
            // if Performance data is not exits don't fail the recording (status: ok)
            this.log.error('Failed to load system health data. ' + __WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* utils */].stringifyMsg(err));
            return { status: this.HEALTH_STATUS.OK };
        });
    }
    notifyCpu(cpuData) {
        this.log.debug('System health - CPU: ' + cpuData);
        if (cpuData >= this.systemHealthThresholds['maxCpuPercentage']) {
            this.cpuPercent_consecutive_violations++;
            if (!this.exceedThresholdSet.has('cpuThresholdExceeded') &&
                this.cpuPercent_consecutive_violations > this.systemHealthThresholds['numSamplesToAlertAfter'] &&
                this.appState.isAppRecording()) {
                this.notificationService.sendNotificationWithParams(this.appState.isAppLiveConfigured() ? "SYSTEM_HEALTH.cpu_inLive" : "SYSTEM_HEALTH.cpu", { cpu_value: this.systemHealthThresholds['maxCpuPercentage'] + '%' }, 'warn');
                this.exceedThresholdSet.add('cpuThresholdExceeded');
            }
        }
        else {
            this.cpuPercent_consecutive_violations = 0;
            this.exceedThresholdSet.delete('cpuThresholdExceeded');
        }
    }
    notifyMemory(memoryData) {
        this.log.debug('System health - Memory: ' + memoryData);
        if (memoryData <= this.systemHealthThresholds['minMemoryGB']) {
            this.memFree_consecutive_violations++;
            if (!this.exceedThresholdSet.has('memoryThresholdExceeded') &&
                this.memFree_consecutive_violations > this.systemHealthThresholds['numSamplesToAlertAfter'] &&
                this.appState.isAppRecording()) {
                this.notificationService.sendNotificationWithParams(this.appState.isAppLiveConfigured() ? "SYSTEM_HEALTH.memory_inLive" : "SYSTEM_HEALTH.memory", { memory_value: this.systemHealthThresholds['minMemoryGB'] + 'GB' }, 'warn');
                this.exceedThresholdSet.add('memoryThresholdExceeded');
            }
        }
        else {
            this.memFree_consecutive_violations = 0;
            this.exceedThresholdSet.delete('memoryThresholdExceeded');
        }
    }
    /**
     *
     * @param diskspaceData
     * @param scheduled if was called from a scheduled timer
     */
    notifyDiskspace(diskspaceData, scheduled = true) {
        this.log.debug('System health - Diskspace: ' + diskspaceData);
        if (diskspaceData <= this.systemHealthThresholds['minDiskspaceGB']) {
            // on disk space we notify even when not recording & without numSamplesToAlertAfter since it's not something that changes often
            if (!this.exceedThresholdSet.has('diskspaceThresholdExceeded')) {
                this.notificationService.sendNotificationWithParams('SYSTEM_HEALTH.diskspace', { diskspace_value: this.systemHealthThresholds['minDiskspaceGB'] + 'GB' }, 'warn');
                this.exceedThresholdSet.add('diskspaceThresholdExceeded');
            }
        }
        else {
            this.exceedThresholdSet.delete('diskspaceThresholdExceeded');
        }
        if (diskspaceData <= this.systemHealthThresholds['minDiskspaceLeftMB'] / 1000) {
            // if not enough diskspace send notification at first time
            if (!this.exceedThresholdSet.has('diskspaceAlmostFull')) {
                this.notificationService.sendNotification('SYSTEM_HEALTH.diskspace-full', 'error');
                this.exceedThresholdSet.add('diskspaceAlmostFull');
            }
            // and fire the Not Health notifier
            if (this.appState.isAppRecording() && scheduled) {
                this.systemNotHealthy.next(true);
            }
        }
        else {
            this.exceedThresholdSet.delete('diskspaceAlmostFull');
        }
    }
};
SystemHealthService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_4__app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_6__app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_7__app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_8__app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__app_state_service__["a" /* AppStateService */]) === "function" && _d || Object])
], SystemHealthService);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/system-health.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/live/live-manager.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__infra_kaltura_api_service__ = __webpack_require__("../../../../../src/shared/services/infra/kaltura-api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_rxjs__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LiveManagerService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










let LiveManagerService = LiveManagerService_1 = class LiveManagerService {
    constructor(appState, log, config, notificationService, apiService) {
        this.appState = appState;
        this.log = log;
        this.config = config;
        this.notificationService = notificationService;
        this.apiService = apiService;
        this.currentLiveEntryId = null;
        this.streamingSessionId = null;
        this.subscribeIntervalForIsLiveCheck = null;
        this.registerForSlideCapturingNotifications();
        this.registerForLiveNotifications();
    }
    checkIsLive() {
        this.apiService.checkIsLive(this.currentLiveEntryId).toPromise().then((isLive) => {
            this.log.debug("Setting isLive as: " + isLive + " for entry: " + this.currentLiveEntryId);
            this.appState.setLiveStreamingState(isLive);
        }).catch((err) => {
            this.log.warn('Failed to get isLive with error msg: ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
            this.appState.setLiveStreamingState(false);
        });
    }
    startIsLiveInterval() {
        let interval = this.config.getConfigData("config.captureApp.liveStreaming.checkIntervalForLive");
        interval = Math.min(interval ? interval * 1000 : 10000, 10000); //convert to ms or set 10 sec as default
        this.subscribeIntervalForIsLiveCheck = __WEBPACK_IMPORTED_MODULE_9_rxjs__["Observable"].timer(0, interval)
            .subscribe(() => {
            this.checkIsLive();
        });
    }
    static buildStreamUrl(baseUrl, flavor) {
        return baseUrl.slice(0, -2) + flavor['streamSuffix'];
    }
    getStreamingSessionName(active = true) {
        let sessions = active ? this.appState.getActiveSessions() : this.appState.getInActiveSessions();
        for (let key of Object.keys(sessions)) {
            if (this.streamingSessionId === key)
                return sessions[key]["name"];
        }
    }
    removeLiveConfig() {
        this.log.debug("Reset Live broadcast: setting the currentLiveEntryId as null. Currently is: " + this.currentLiveEntryId);
        this.currentLiveEntryId = null;
        this.streamingSessionId = null;
        this.appState.setLiveConfigurationState(false);
        this.appState.setLiveStreamingState(false);
        if (this.subscribeIntervalForIsLiveCheck)
            this.subscribeIntervalForIsLiveCheck.unsubscribe();
    }
    static getStreamUrl(baseUrl, flavors, tag) {
        let sourceFlavor = flavors.find(flavor => flavor['tags'].includes(tag));
        if (sourceFlavor)
            return LiveManagerService_1.buildStreamUrl(baseUrl, sourceFlavor);
        return '';
    }
    getLiveData(baseUrl, flavors) {
        let flavorArray = [];
        let primaryRtmp = LiveManagerService_1.getStreamUrl(baseUrl, flavors, 'source');
        if (!this.config.getConfigData("config.captureApp.liveStreaming.enableLocalFlavorTranscoding"))
            return { primaryRtmp, flavorArray };
        let flavorArrayFromConf = this.config.getConfigData("config.captureApp.liveStreaming.localFlavorTranscodingArray");
        if (flavorArrayFromConf)
            return { primaryRtmp, flavorArray: flavorArrayFromConf };
        // get all the flavors mark with the classroom tag
        flavors.forEach(flavor => {
            if (flavor['tags'].includes('classroom')) {
                flavorArray.push({ url: LiveManagerService_1.buildStreamUrl(baseUrl, flavor),
                    videoBitrate: flavor['videoBitrate'], width: flavor['width'], height: flavor['height'] });
            }
        });
        if (flavorArray.length === 0)
            flavorArray.push({ url: LiveManagerService_1.getStreamUrl(baseUrl, flavors, 'mbr'), videoBitrate: 600000, width: 640, height: 480 });
        return { primaryRtmp, flavorArray };
    }
    getLiveSessionIdForInputStream(sessionIdInRecovery = null) {
        if (sessionIdInRecovery)
            return sessionIdInRecovery;
        let primarySessionName = this.config.getConfigData('config.captureApp.primarySessionName');
        let sessionsNames = this.appState.getSessionsNames(true);
        if (sessionsNames.includes(primarySessionName))
            return this.appState.getSessionIdByName(primarySessionName);
        this.log.warn('Primary session is disable - fall-back to other inputs');
        for (const sessionName of sessionsNames.sort()) {
            if (sessionName != "audio") {
                this.sendNotification("NOTIFICATIONS.warn_primaryInputDisableWhenLive", null, "warn", true);
                return this.appState.getSessionIdByName(sessionName);
            }
        }
        return null;
    }
    addLiveConfig(liveData, sessionIdInRecovery = null) {
        if (liveData.hasOwnProperty("primaryRtmp")) {
            this.log.debug("@@DW - Start configuring live data");
            let sessionsId = this.getLiveSessionIdForInputStream(sessionIdInRecovery);
            if (!sessionsId) {
                this.log.warn("No sessions valid for live streaming: " + sessionsId);
                this.sendNotification("NOTIFICATIONS.warn_allVideoSessionDisableWhenLive", null, "warn", true);
                return Promise.resolve();
            }
            this.streamingSessionId = sessionsId;
            this.currentLiveEntryId = liveData['templateEntryId'];
            if (!this.currentLiveEntryId)
                this.currentLiveEntryId = liveData["primaryRtmp"].split('/').pop().slice(0, -2);
            liveData = __WEBPACK_IMPORTED_MODULE_0_lodash__["pick"](liveData, ['primaryRtmp', 'flavorArray', "id"]);
            this.appState.setLiveConfigurationState(true);
            this.startIsLiveInterval();
            this.log.info("Event with id [" + liveData["id"] + "] need to be stream to [" + liveData["primaryRtmp"] + "] for sessionId: " + sessionsId);
            return this.setLiveConfig(sessionsId, liveData);
        }
        return Promise.resolve();
    }
    setLiveConfig(sessionId, liveData) {
        this.appState.onCallStarted('setLiveConfig', sessionId);
        return __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(`${sessionId}-setLiveConfig`, liveData)
            .then(() => {
            this.appState.onCallEnded('setLiveConfig - SUCCESS', sessionId);
        })
            .catch((err) => {
            this.appState.onCallEnded('setLiveConfig - FAILURE', sessionId);
            return Promise.reject(err);
        });
    }
    registerForLiveNotifications() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('live-notification', (data) => {
            this.log.info('live-notification - got data: ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(data));
            try {
                data = JSON.parse(data);
                switch (data.errorReason) {
                    case "connection":
                        this.sendNotification("NOTIFICATIONS.error_LiveNetworkDisconnected", null, data.severity, data.retriesNum == 1);
                        if (data.retriesNum == 1) {
                            this.stopLiveStreaming();
                        }
                        break;
                    case "bufferOverflow":
                        this.sendNotification("NOTIFICATIONS.error_LiveNetworkLowBandwidth", { latencyInSeconds: data.latencyInSeconds }, data.severity, false);
                        break;
                }
            }
            catch (err) {
                this.log.warn("Got Error while receiving live-notification: " + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
            }
        });
    }
    sendNotification(msg, params, severity, force = false) {
        if (this.config.getConfigData("config.captureApp.notifications.level") === "verbose" || force) {
            this.notificationService.sendNotificationWithParams(msg, params, severity);
        }
    }
    registerForSlideCapturingNotifications() {
        __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('capture-ppt', (data) => {
            if (!this.currentLiveEntryId)
                return; // no live streaming - ignore
            try {
                data = JSON.parse(data);
            }
            catch (err) {
                this.log.warn("Error while trying to upload slide to [" + this.currentLiveEntryId + "] with data: [" + data + "] got error: " + err);
            }
            if (data) {
                this.log.debug("Currently streaming to live entry of: " + this.currentLiveEntryId);
                return __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC("uploadSlide", this.currentLiveEntryId, data['slide-path']);
            }
        });
    }
    isInputLiveConfigured(sessionName) {
        return this.appState.isAppLiveConfigured() && (this.appState.getSessionIdByName(sessionName) === this.streamingSessionId)
            && this.isDevicePreviewing(sessionName);
    }
    isDevicePreviewing(sessionName) {
        let sessionsNames = this.appState.getSessionsNames(true);
        return sessionsNames.includes(sessionName);
    }
    stopLiveStreaming() {
        if (!this.currentLiveEntryId)
            return Promise.resolve(); // currently no streaming
        let sessionId = this.streamingSessionId;
        this.log.debug("stop live streaming: for [" + this.currentLiveEntryId + "] and session: " + sessionId);
        this.removeLiveConfig();
        this.appState.onCallStarted('stopLiveStreaming', sessionId);
        return __WEBPACK_IMPORTED_MODULE_2__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(`${sessionId}-stopLiveStreaming`)
            .then(() => {
            this.appState.onCallEnded('stopLiveStreaming - SUCCESS', sessionId);
        })
            .catch((err) => {
            this.appState.onCallEnded('stopLiveStreaming - FAILURE', sessionId);
            return Promise.reject(err);
        });
    }
};
LiveManagerService = LiveManagerService_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__infra_app_state_service__["a" /* AppStateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_6__infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_7__infra_kaltura_api_service__["a" /* KalturaApiService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__infra_kaltura_api_service__["a" /* KalturaApiService */]) === "function" && _e || Object])
], LiveManagerService);

var LiveManagerService_1, _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/live-manager.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/live/live.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_infra_module__ = __webpack_require__("../../../../../src/shared/services/infra/infra.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__live_manager_service__ = __webpack_require__("../../../../../src/shared/services/live/live-manager.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LiveModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



let LiveModule = class LiveModule {
};
LiveModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__infra_infra_module__["a" /* InfraModule */],
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_2__live_manager_service__["a" /* LiveManagerService */],
        ]
    })
], LiveModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/live.module.js.map

/***/ }),

/***/ "../../../../../src/shared/services/monitoring/app-monitoring-agent-error-data.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_system_health_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-health.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_ng2_translate__ = __webpack_require__("../../../../ng2-translate/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MONITOR_ERROR_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return MONITORED_SOURCE_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return AppMonitoringAgentErrorDataService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var MONITOR_ERROR_TYPE;
(function (MONITOR_ERROR_TYPE) {
    MONITOR_ERROR_TYPE[MONITOR_ERROR_TYPE["DEVICE_ERROR"] = 'DEVICE_ERROR'] = "DEVICE_ERROR";
    MONITOR_ERROR_TYPE[MONITOR_ERROR_TYPE["RECORDING_ERROR"] = 'RECORDING_ERROR'] = "RECORDING_ERROR";
    MONITOR_ERROR_TYPE[MONITOR_ERROR_TYPE["SYS_HEALTH_ERROR"] = 'SYS_HEALTH_ERROR'] = "SYS_HEALTH_ERROR";
})(MONITOR_ERROR_TYPE || (MONITOR_ERROR_TYPE = {}));
var MONITORED_SOURCE_TYPE;
(function (MONITORED_SOURCE_TYPE) {
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["ALL"] = 'ALL'] = "ALL";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["VIDEO"] = 'VIDEO'] = "VIDEO";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["SCREEN"] = 'SCREEN'] = "SCREEN";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["AUDIO"] = 'AUDIO'] = "AUDIO";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["START_RECORDING"] = 'START_RECORDING'] = "START_RECORDING";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["RESUME_RECORDING"] = 'RESUME_RECORDING'] = "RESUME_RECORDING";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["STOP_RECORDING"] = 'STOP_RECORDING'] = "STOP_RECORDING";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["PAUSE_RECORDING"] = 'PAUSE_RECORDING'] = "PAUSE_RECORDING";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["CANCEL_RECORDING"] = 'CANCEL_RECORDING'] = "CANCEL_RECORDING";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["RECOVER_RECORDING"] = 'RECOVER_RECORDING'] = "RECOVER_RECORDING";
    MONITORED_SOURCE_TYPE[MONITORED_SOURCE_TYPE["DISKSPACE"] = 'DISKSPACE'] = "DISKSPACE";
})(MONITORED_SOURCE_TYPE || (MONITORED_SOURCE_TYPE = {}));
let AppMonitoringAgentErrorDataService = class AppMonitoringAgentErrorDataService {
    constructor(log, translate, appConfig, persistentData, systemHealthService) {
        this.log = log;
        this.translate = translate;
        this.appConfig = appConfig;
        this.persistentData = persistentData;
        this.systemHealthService = systemHealthService;
        /**
         * an object represents the application errors data for the monitoring agent
         *  {
         *      APP_STATUS: OK / ERROR,
         *      DEVICE_ERROR: {
         *       MONITORED_SOURCE_TYPE: {
         *        text: error string,
         *        time: time in millis
         *       }
         *       ....
         *      },
         *      RECORDING_ERROR: {
         *        MONITORED_SOURCE_TYPE:  {
         *        text: error string,
         *        time: time in millis
         *       }
         *       ...
         *      }
         *      SYS_HEALTH_ERROR: {
         *        MONITORED_SOURCE_TYPE:  {
         *        text: error string,
         *        time: time in millis
         *       }
         *       ...
         *      }
         *  }
         * @type {{}}
         */
        this.monitoringAgentErrorData = {};
        let monitorConfig = this.appConfig.getConfigData('config.shared.monitoring');
        if (monitorConfig && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](monitorConfig) && monitorConfig['enabled']) {
            this.ready()
                .then(() => {
                __WEBPACK_IMPORTED_MODULE_7_rxjs__["Observable"].timer(0, 5000).subscribe(() => {
                    this.getMonitoringErrorData();
                });
            });
        }
    }
    ready() {
        if (!this._ready) {
            this._ready = this.persistentData.get('appMonitoringAgentErrorData')
                .then((data) => {
                if (data) {
                    this.monitoringAgentErrorData = data;
                }
                this.log.info('AppMonitoringAgentDataService: Ready()');
                return Promise.resolve(true);
            })
                .catch((err) => {
                this.log.error('AppMonitoringAgentErrorDataService: Failed to load app monitoring agent error data.' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
                this.monitoringAgentErrorData = {};
                return Promise.resolve(false);
            });
        }
        return this._ready;
    }
    setError(errorType, source, error, params = null) {
        Promise.all([this.ready(), this.getTranslationPromise(error, params)])
            .then(([ready, errorMsg]) => {
            if (__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.monitoringAgentErrorData[errorType])) {
                this.monitoringAgentErrorData[errorType] = {};
            }
            this.monitoringAgentErrorData[errorType][source] = {
                'text': errorMsg,
                'time': new Date().getTime()
            };
            this.updateAppStatusData();
            this.updatePersistentData();
        });
    }
    clearError(errorType, source) {
        this.ready()
            .then(() => {
            if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.monitoringAgentErrorData[errorType])) {
                //remove all error type errors
                if (source === MONITORED_SOURCE_TYPE.ALL) {
                    this.monitoringAgentErrorData[errorType] = {};
                    //remove specific source error if exists
                }
                else if (this.monitoringAgentErrorData[errorType][source]) {
                    delete this.monitoringAgentErrorData[errorType][source];
                }
            }
            this.updateAppStatusData();
            this.updatePersistentData();
        });
    }
    getMonitoringErrorData() {
        return this.ready()
            .then(() => {
            return this.checkSysHealth();
        })
            .then(() => {
            return this.monitoringAgentErrorData;
        });
    }
    checkSysHealth() {
        return this.systemHealthService.checkSystemHealth(false, true) //promise will never be rejected
            .then((sysHealth) => {
            if (__WEBPACK_IMPORTED_MODULE_3_lodash__["isObject"](sysHealth) && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](sysHealth) &&
                sysHealth['status'] === this.systemHealthService.HEALTH_STATUS.ERROR) {
                let params = sysHealth['params'] ? sysHealth['params'] : null;
                this.setError(MONITOR_ERROR_TYPE.SYS_HEALTH_ERROR, MONITORED_SOURCE_TYPE.DISKSPACE, sysHealth['message'], params);
            }
            else {
                this.clearError(MONITOR_ERROR_TYPE.SYS_HEALTH_ERROR, MONITORED_SOURCE_TYPE.DISKSPACE);
            }
        })
            .catch((err) => {
            this.log.error('AppMonitoringAgentErrorDataService: Failed to get sysHealth. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    updateAppStatusData() {
        let appStatus = __WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.monitoringAgentErrorData[MONITOR_ERROR_TYPE.DEVICE_ERROR]) &&
            __WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.monitoringAgentErrorData[MONITOR_ERROR_TYPE.RECORDING_ERROR]) &&
            __WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.monitoringAgentErrorData[MONITOR_ERROR_TYPE.SYS_HEALTH_ERROR]) ? 'OK' : 'ERROR';
        this.monitoringAgentErrorData['APP_STATUS'] = appStatus;
    }
    updatePersistentData() {
        let monitorConfig = this.appConfig.getConfigData('config.shared.monitoring');
        if (monitorConfig && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](monitorConfig) && monitorConfig['enabled']) {
            this.log.info('AppMonitoringAgentErrorDataService: update monitoring agent error data in app persistent data file');
            this.persistentData.set("appMonitoringAgentErrorData", this.monitoringAgentErrorData);
        }
    }
    getTranslationPromise(msg, params = null) {
        return params ? this.translate.get(msg, params).toPromise() : this.translate.get(msg).toPromise();
    }
};
AppMonitoringAgentErrorDataService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_6_ng2_translate__["b" /* TranslateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6_ng2_translate__["b" /* TranslateService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_8__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5__infra_system_health_service__["a" /* SystemHealthService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_system_health_service__["a" /* SystemHealthService */]) === "function" && _e || Object])
], AppMonitoringAgentErrorDataService);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-monitoring-agent-error-data.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/monitoring/app-monitoring-agent.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Rx__ = __webpack_require__("../../../../rxjs/Rx.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Rx___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_Rx__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__app_monitoring_agent_error_data_service__ = __webpack_require__("../../../../../src/shared/services/monitoring/app-monitoring-agent-error-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__infra_kaltura_api_service__ = __webpack_require__("../../../../../src/shared/services/infra/kaltura-api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__resource_id_resource_id_service__ = __webpack_require__("../../../../../src/shared/services/resource-id/resource-id.service.ts");
/* unused harmony export LiveInputStatus */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppMonitoringAgentService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












var LiveInputStatus;
(function (LiveInputStatus) {
    LiveInputStatus[LiveInputStatus["Not_Configured"] = 'Not_Configured'] = "Not_Configured";
    LiveInputStatus[LiveInputStatus["Stopped"] = 'Stopped'] = "Stopped";
    LiveInputStatus[LiveInputStatus["Broadcasting"] = 'Broadcasting'] = "Broadcasting";
    LiveInputStatus[LiveInputStatus["Playing"] = 'Playing'] = "Playing";
    LiveInputStatus[LiveInputStatus["Error"] = 'Error'] = "Error";
})(LiveInputStatus || (LiveInputStatus = {}));
let AppMonitoringAgentService = class AppMonitoringAgentService {
    constructor(log, config, appState, monitoringAgentErrorData, kalturaApi, resourceIdService, persistentData) {
        this.log = log;
        this.config = config;
        this.appState = appState;
        this.monitoringAgentErrorData = monitoringAgentErrorData;
        this.kalturaApi = kalturaApi;
        this.resourceIdService = resourceIdService;
        this.persistentData = persistentData;
        /**
         * an object represents the application monitoring agent data
         *  {
         *    Errors: {
         *      APP_STATUS: OK / ERROR,
         *      DEVICE_ERROR: {
         *       MONITORED_SOURCE_TYPE: {
         *        text: error string,
         *        time: time in millis
         *       }
         *       ....
         *      },
         *      RECORDING_ERROR: {
         *        MONITORED_SOURCE_TYPE:  {
         *        text: error string,
         *        time: time in millis
         *       }
         *       ...
         *      }
         *      SYS_HEALTH_ERROR: {
         *        MONITORED_SOURCE_TYPE:  {
         *        text: error string,
         *        time: time in millis
         *       }
         *       ...
         *      }
         *    },
         *    ResourceDetails: {
         *      resourceId: resourceId
         *      resourceName: resourceName,
         *      appVersion: <app version>
         *      activeSessions: {
         *        'primary' : false,
         *        'secondary': true,
         *        ...
         *      },
         *      previewingSessions: {
         *        'primary' : false,
         *        'secondary': true,
         *        ...
         *      }
         *    },
         *    RecordingData: {
         *      recordingPhase: recording / paused / idle
         *      recordingTime: 02:00:23 / '' (if not recording)
         *      isScheduledEvent: true / false
         *      streamingInputObjects: {  // currently there will be only single input here (primaryInput,input2,input3,input4)
         *          <session name>: {
         *            templateEntryId: <templateEntryId>,
         *            status: LiveInputStatus
         *            duration: string (streaming duration)
         *            updatedAt: timestamp
         *          },
         *          ...
         *      }
         *    },
         *    Scheduling: {
         *      NextScheduledEvent: {
         *        id: next event id
         *        summary: next event summary
         *        description: next event description
         *        organizer: next event organizer
         *        startDate: next event startDate
         *        endDate: next event endDate
         *      },
         *      currentScheduledEvent: {
         *        id: currentEvent.id
         *        summary: currentEvent.summary
         *        isLiveEvent: currentEvent.primaryRtmp ? true : false
         *        templateEntryId: currentEvent.templateEntryId
         *      }
         *    }
         *  }
         * @type {{}}
         */
        this.monitoringAgentData = {};
        this.uploadPreviewIntervalSec = 120;
        this.dataReportingIntervalSec = 30;
        this.getImagesTimer = null;
        this.reportDataTimer = null;
        this.PRIMARY_SESSION_NAME_FALLBACK = 'session0';
    }
    start() {
        this.log.info('AppMonitoringAgentService: Starting app-monitoring-agent service');
        this.setIntervalsValues();
        this.startTimers();
    }
    stop() {
        this.log.info('AppMonitoringAgentService: Stopping app-monitoring-agent service');
        if (this.getImagesTimer) {
            this.getImagesTimer.unsubscribe();
        }
    }
    setIntervalsValues() {
        let monitoringConfig = this.config.getConfigData('config.shared.monitoring');
        this.uploadPreviewIntervalSec = monitoringConfig['uploadPreviewIntervalSec'] || 60;
        if (this.uploadPreviewIntervalSec < 60)
            this.uploadPreviewIntervalSec = 60;
        this.log.info('AppMonitoringAgentService: Validate Config params - uploadPreviewIntervalSec is not a valid value. set to 60');
        this.dataReportingIntervalSec = monitoringConfig['dataReportingIntervalSec'] || 30;
        if (this.dataReportingIntervalSec < 30)
            this.dataReportingIntervalSec = 30;
        this.log.info('AppMonitoringAgentService: Validate Config params - dataReportingIntervalSec is not a valid value. set to 30');
    }
    startTimers() {
        this.getImagesTimer = __WEBPACK_IMPORTED_MODULE_3_rxjs_Rx__["Observable"].timer(5000, this.uploadPreviewIntervalSec * 1000)
            .subscribe(() => {
            this.getImagesAndUpload();
        });
        this.reportDataTimer = __WEBPACK_IMPORTED_MODULE_3_rxjs_Rx__["Observable"].timer(5000, this.dataReportingIntervalSec * 1000)
            .subscribe(() => {
            this.getMonitoringAgentData();
        });
    }
    getImagesAndUpload() {
        let sessions = this.appState.getActiveVisualSessions();
        let sessionIds = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](sessions);
        if (sessionIds.length > 0) {
            let primarySession = this.config.getConfigData('config.captureApp.primarySessionName');
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](sessionIds, (sessionId) => {
                let sessionIndex = parseInt(sessions[sessionId].name.split('session')[1]);
                //will result previewImage_primary / previewImage_secondary / previewImage_secondary<n>
                let sessionPostFix = (sessions[sessionId].name === primarySession) ?
                    'primary' : ('secondary' + (sessionIndex === 1 ? '' : (sessionIndex - 1)));
                __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC(sessionId + '-getPreviewImage', sessionId)
                    .then((data) => {
                    this.kalturaApi
                        .reportMonitoringData(this.resourceIdService.resourceId, 'previewImage_' + sessionPostFix, data, false, true)
                        .subscribe(() => {
                        this.log.debug('reported preview image to beacon service');
                    }, err => {
                        this.log.debug('failed to upload beacon preview image to server ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
                    });
                })
                    .catch((err) => {
                    this.log.debug('failed to get preview image from engine ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
                });
            });
        }
    }
    getMonitoringAgentData() {
        Promise.all([this.monitoringAgentErrorData.getMonitoringErrorData(), this.setRecordingData(), this.setResourceDetails()])
            .then(([errorData, recData, resDetails]) => {
            this.monitoringAgentData['Errors'] = errorData;
            this.kalturaApi.reportMonitoringData(this.resourceIdService.resourceId, 'monitoringAgentData', this.monitoringAgentData, true, false).subscribe(() => {
                this.log.debug('reported monitoringAgentData to beacon service');
            });
        });
    }
    setRecordingData() {
        let recordingPhase = this.appState.recordingPhase !== 'initial' ? this.appState.recordingPhase : 'idle';
        // initial recordingData
        this.monitoringAgentData['RecordingData'] = {
            'recordingPhase': recordingPhase,
            'recordingTime': '',
            'streamingInputObjects': {}
        };
        //if there is no need to update recordingTime and live data
        if (recordingPhase === 'idle')
            return Promise.resolve(true);
        return this.persistentData.get("recording")
            .then((recording) => {
            if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](recording))
                return;
            this.monitoringAgentData['RecordingData']['recordingTime'] =
                recording['recordingTime'] ? recording['recordingTime'] : 0;
            this.updateLiveData(recording);
        })
            .catch((err) => {
            return Promise.resolve(false); //not rejecting the promise because we would like to send monitor updates event even if app persistency will throw exception
        });
    }
    /**
     * update live data in recording data object in beacon
     * @param recordingData persistent recording data
     */
    updateLiveData(recordingData) {
        // checking if live event
        let currentScheduledEvent = !__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](this.monitoringAgentData['Scheduling']['currentScheduledEvent'])
            ? this.monitoringAgentData['Scheduling']['currentScheduledEvent']
            : {};
        // recording is live only during live scheduled event and the event has rtmp property
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](currentScheduledEvent) || !currentScheduledEvent.isLiveEvent)
            return;
        // although event is live - application is not streaming live data
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](recordingData['details']) || __WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](recordingData['details']['liveData']))
            return;
        // live data object in persistency file
        let liveData = recordingData['details']['liveData'];
        // for current development phase - take the only input that streams live (first and only input in our object)
        let streamingSessionName = Object.keys(liveData)[0];
        let streamingSessionDisplayName = this.getLiveSessionDisplayName(streamingSessionName);
        let streamingInputObjects = this.monitoringAgentData['RecordingData']['streamingInputObjects'];
        // todo [david] add relevant inputs when support for multi input streaming will be developed
        // set default live data properties for our only streaming input
        streamingInputObjects[streamingSessionDisplayName] = {
            templateEntryId: currentScheduledEvent.templateEntryId,
            status: this.appState.isAppStreaming() ? LiveInputStatus.Playing : LiveInputStatus.Broadcasting,
            duration: this.monitoringAgentData['RecordingData']['recordingTime'],
            updatedAt: (new Date().getTime() / 1000)
        };
        // checking if live was actually stopped by the user
        // if live streaming hasn't stopped (there won't be any duration in live data object)
        // so there is nothing to update
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](liveData[streamingSessionName]) || !liveData[streamingSessionName]['duration'])
            return;
        // primary input live streaming was stopped - update relevant live data properties
        streamingInputObjects[streamingSessionDisplayName]['duration'] = liveData[streamingSessionName]['duration'];
        streamingInputObjects[streamingSessionDisplayName]['updatedAt'] = liveData[streamingSessionName]['updatedAt'];
        streamingInputObjects[streamingSessionDisplayName]['status'] = LiveInputStatus.Stopped;
    }
    setResourceDetails() {
        return this.appState.getVisualSessionsFromPersistentData()
            .then((sessions) => {
            this.monitoringAgentData['ResourceDetails'] = {
                'resourceId': this.resourceIdService.resourceId,
                'resourceName': this.resourceIdService.resourceName,
                'activeSessions': this.getActiveSessionsObject(sessions),
                'previewingSessions': this.getPreviewEnabledSessionsObject(),
                'appVersion': this.config.getConfigData("config.shared").app_version
            };
        });
    }
    getActiveSessionsObject(sessions) {
        let activeSessions = {};
        let primarySession = this.config.getConfigData('config.captureApp.primarySessionName');
        __WEBPACK_IMPORTED_MODULE_2_lodash__["each"](__WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](sessions), (sessionName) => {
            let sessionIndex = parseInt(sessionName.split('session')[1]);
            let sessionOrder = sessionName === primarySession ?
                'primary' : ('secondary' + (sessionIndex === 1 ? '' : (sessionIndex - 1)));
            activeSessions[sessionOrder] = true;
        });
        return activeSessions;
    }
    getPreviewEnabledSessionsObject() {
        let enabledSessions = {};
        let primarySession = this.config.getConfigData('config.captureApp.primarySessionName');
        __WEBPACK_IMPORTED_MODULE_2_lodash__["each"](this.appState.getActiveVisualSessions(), (s) => {
            let sessionIndex = parseInt(s.name.split('session')[1]);
            let sessionOrder = s.name === primarySession ?
                'primary' : ('secondary' + (sessionIndex === 1 ? '' : (sessionIndex - 1)));
            enabledSessions[sessionOrder] = true;
        });
        return enabledSessions;
    }
    setSchedulingDataNextEvent(nextEvent) {
        if (!this.shouldPopulateScheduledEvent('NextScheduledEvent', nextEvent))
            return;
        this.monitoringAgentData['Scheduling']['NextScheduledEvent'] = {
            id: nextEvent.id,
            summary: nextEvent.summary,
            description: nextEvent.description,
            organizer: nextEvent.organizer,
            startDate: nextEvent.startDate,
            endDate: nextEvent.endDate
        };
    }
    setSchedulingDataCurrentEvent(currentEvent) {
        if (!this.shouldPopulateScheduledEvent('currentScheduledEvent', currentEvent))
            return;
        this.monitoringAgentData['Scheduling']['currentScheduledEvent'] = {
            id: currentEvent.id,
            summary: currentEvent.summary,
            isLiveEvent: currentEvent.primaryRtmp ? true : false,
            templateEntryId: currentEvent.templateEntryId
        };
    }
    shouldPopulateScheduledEvent(eventType, event) {
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](this.monitoringAgentData['Scheduling']))
            this.monitoringAgentData['Scheduling'] = {};
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](event)) {
            this.monitoringAgentData['Scheduling'][eventType] = {};
            return false;
        }
        return true;
    }
    getLiveSessionDisplayName(sessionName) {
        let primarySessionName = this.config.getConfigData('config.captureApp.primarySessionName') ?
            this.config.getConfigData('config.captureApp.primarySessionName') : this.PRIMARY_SESSION_NAME_FALLBACK;
        if (sessionName === primarySessionName) {
            return 'primaryInput';
        }
        else {
            let sessionIndex = parseInt(sessionName.split('session')[1]);
            return 'input' + ++sessionIndex;
        }
    }
};
AppMonitoringAgentService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_6__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__infra_app_state_service__["a" /* AppStateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__app_monitoring_agent_error_data_service__["c" /* AppMonitoringAgentErrorDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__app_monitoring_agent_error_data_service__["c" /* AppMonitoringAgentErrorDataService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_9__infra_kaltura_api_service__["a" /* KalturaApiService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__infra_kaltura_api_service__["a" /* KalturaApiService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_11__resource_id_resource_id_service__["a" /* ResourceIdService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__resource_id_resource_id_service__["a" /* ResourceIdService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_10__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _g || Object])
], AppMonitoringAgentService);

var _a, _b, _c, _d, _e, _f, _g;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/app-monitoring-agent.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/monitoring/monitoring.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_infra_module__ = __webpack_require__("../../../../../src/shared/services/infra/infra.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource_id_resource_id_module__ = __webpack_require__("../../../../../src/shared/services/resource-id/resource-id.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_monitoring_agent_service__ = __webpack_require__("../../../../../src/shared/services/monitoring/app-monitoring-agent.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__app_monitoring_agent_error_data_service__ = __webpack_require__("../../../../../src/shared/services/monitoring/app-monitoring-agent-error-data.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MonitoringModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





let MonitoringModule = class MonitoringModule {
};
MonitoringModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__infra_infra_module__["a" /* InfraModule */],
            __WEBPACK_IMPORTED_MODULE_2__resource_id_resource_id_module__["a" /* ResourceIdModule */]
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_3__app_monitoring_agent_service__["a" /* AppMonitoringAgentService */],
            __WEBPACK_IMPORTED_MODULE_4__app_monitoring_agent_error_data_service__["c" /* AppMonitoringAgentErrorDataService */]
        ]
    })
], MonitoringModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/monitoring.module.js.map

/***/ }),

/***/ "../../../../../src/shared/services/recording/mouse-click-indication.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MouseClickIndicationService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let MouseClickIndicationService = class MouseClickIndicationService {
    constructor(appConfig, videoDeviceSettingsService, log) {
        this.appConfig = appConfig;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        this.log = log;
    }
    startMouseClickIndication() {
        if (this.appConfig.getConfigData('config.captureApp.recording.mouseClickIndication') === true) {
            let displaysBounds = [];
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](this.videoDeviceSettingsService.getAllActiveDevicesObjects(), device => {
                if (device['bounds'])
                    displaysBounds.push(device['bounds']);
            });
            if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](displaysBounds)) {
                this.log.info('there are no screens for current recording, mouse click indication is not needed');
                return Promise.resolve({});
            }
            else {
                return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('create-mouse-click-indication-windows', displaysBounds);
            }
        }
        else {
            this.log.info('There is no need in mouse click indication for current recording');
            return Promise.resolve({});
        }
    }
    stopMouseClickIndication() {
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('destroy-mouse-click-indication-windows');
    }
};
MouseClickIndicationService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_5__capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _c || Object])
], MouseClickIndicationService);

var _a, _b, _c;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/mouse-click-indication.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/recording/recording-details.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_moment__ = __webpack_require__("../../../../moment/moment.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__infra_kaltura_api_service__ = __webpack_require__("../../../../../src/shared/services/infra/kaltura-api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__capture_device_video_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__infra_authentication_service__ = __webpack_require__("../../../../../src/shared/services/infra/authentication.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__infra_system_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/system-data.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingDetailsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};













let RecordingDetailsService = RecordingDetailsService_1 = class RecordingDetailsService {
    constructor(appConfig, persistencyService, log, kaltura, appState, systemData, authService, videoDeviceSettingsService) {
        this.appConfig = appConfig;
        this.persistencyService = persistencyService;
        this.log = log;
        this.kaltura = kaltura;
        this.appState = appState;
        this.systemData = systemData;
        this.authService = authService;
        this.videoDeviceSettingsService = videoDeviceSettingsService;
        /**
         * indicates if recording details is read only or not (f.e. scheduled event will be read only)
         * @type {boolean}
         */
        this.readOnly = false;
        /**
         * templateEntryId: string
         * liveStreamed: bool
         * title: string
         * description: string
         * userName: string
         * tags; array
         * videoFile: string
         * screenFile: string
         * @type {{}}
         */
        this.recordingDetailsObject = {};
        /**
         * users ids list subscription
         * @type {any}
         */
        this.userListSubscription$ = null;
        /**
         * indicates if it is possible to validate user name using api call
         * @type {boolean}
         */
        this.userListIsOffline = false;
        /**
         * current filtered users ids list
         * @type {Array}
         */
        this.userList = null;
        /**
         * Current cuePoint index
         * @type {number}
         */
        this.currentCuePointIndex = 1;
        /**
         * indicates where recording detials service is ready
         * @type {any}
         */
        this.isReady = null;
        this.isReady = this.loadInitialRecordingDetails();
    }
    /**
     * loading initial rec details from persistent data
     */
    loadInitialRecordingDetails() {
        return this.persistencyService.get('recording.details')
            .then((details) => {
            if (details) {
                return this.setRecordingDetails(details);
            }
            else {
                return Promise.resolve();
            }
        })
            .catch((err) => {
            return Promise.reject(err);
        });
    }
    getRecordingDetails() {
        return this.recordingDetailsObject;
    }
    get currentSlideIndex() {
        return __WEBPACK_IMPORTED_MODULE_4_lodash__["size"](this.recordingDetailsObject['slides']) + 1;
    }
    setRecordingDetails(newRecordingDetails) {
        this.recordingDetailsObject['title'] = newRecordingDetails['title'] ? newRecordingDetails['title'] : '';
        this.recordingDetailsObject['description'] = newRecordingDetails['description'] ? newRecordingDetails['description'] : '';
        this.recordingDetailsObject['userName'] = newRecordingDetails['userName'] ? newRecordingDetails['userName'] : '';
        this.recordingDetailsObject['tags'] = newRecordingDetails['tags'] ? newRecordingDetails['tags'] : [];
        if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](newRecordingDetails['templateEntryId'])) {
            this.recordingDetailsObject['templateEntryId'] = newRecordingDetails['templateEntryId'];
        }
        if (__WEBPACK_IMPORTED_MODULE_4_lodash__["has"](newRecordingDetails, 'liveStreamed')) {
            this.recordingDetailsObject['liveStreamed'] = newRecordingDetails['liveStreamed'];
        }
        this.recordingDetailsObject['currentCuePointIndex'] = newRecordingDetails['currentCuePointIndex'] ? newRecordingDetails['currentCuePointIndex'] : 1;
        this.recordingDetailsObject['slides'] = newRecordingDetails['slides'] ? newRecordingDetails['slides'] : {};
        this.recordingDetailsObject['annotationCuePoints'] = newRecordingDetails['annotationCuePoints'] ? newRecordingDetails['annotationCuePoints'] : {};
        this.recordingDetailsObject['eventId'] = newRecordingDetails['eventId'];
        //if in authentication mode but not in a scheduled event recording
        if (this.shouldSetAuthenticatedUserData()) {
            this.recordingDetailsObject['appToken'] = newRecordingDetails['appToken'];
            this.recordingDetailsObject['appTokenId'] = newRecordingDetails['appTokenId'];
            this.recordingDetailsObject['hashType'] = newRecordingDetails['hashType'];
            this.recordingDetailsObject['partnerId'] = newRecordingDetails['partnerId'];
            this.recordingDetailsObject['serviceUrl'] = newRecordingDetails['serviceUrl'];
        }
        return this.saveToPersistentData();
    }
    setRecordedFilePath(sessionName, filePath) {
        if (__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['files'])) {
            this.recordingDetailsObject['files'] = {};
        }
        this.recordingDetailsObject['files'][sessionName] = filePath;
        this.saveToPersistentData();
    }
    setRecordingLiveData(sessionName, liveData) {
        if (__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['liveData'])) {
            this.recordingDetailsObject['liveData'] = {};
        }
        this.recordingDetailsObject['liveData'][sessionName] = liveData;
        this.saveToPersistentData();
    }
    setDefaultRecDetails() {
        let config = this.appConfig.getConfigData('config.captureApp');
        this.recordingDetailsObject['title'] = __WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['title']) ?
            config['defaultRecordingName'] + ' - ' + __WEBPACK_IMPORTED_MODULE_5_moment__().locale(this.systemData.getLang()).format('MMMM Do YYYY, h:mm:ss a') : this.recordingDetailsObject['title'];
        this.recordingDetailsObject['recordingStartTime'] = __WEBPACK_IMPORTED_MODULE_5_moment__().valueOf();
        this.setAuthenticatedUserDetails();
        this.setRecordingType();
    }
    /**
     * mark this recording as audioOnly or not...
     */
    setRecordingType() {
        this.recordingDetailsObject['isAudioOnly'] =
            this.appConfig.getConfigData('config.captureApp.audioOnlyRecording') &&
                __WEBPACK_IMPORTED_MODULE_4_lodash__["keys"](this.appState.getActiveSessions()).length === 1 && !__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.appState.getActiveAudioSession()); //there is only one session to record and it is an audio
        this.saveToPersistentData();
    }
    addSlideCapturedFilePath(slideObject) {
        this.isReady //waiting for app persistency to load in order to determin current slide index
            .then(() => {
            if (__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['slides'])) {
                this.recordingDetailsObject['slides'] = {};
            }
            this.recordingDetailsObject['slides']['slide' + this.currentSlideIndex] = {
                offset: slideObject['timestamp'],
                filePath: slideObject['slide-path'],
                title: this.removeInvalidXmlChars(slideObject['title']),
                description: this.removeInvalidXmlChars(slideObject['description']),
                status: 'pending'
            };
            this.saveToPersistentData();
        })
            .catch((err) => {
            this.log.error('Failed to add slide to persistent data. ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    addAnnotationCuePoint(cuePointObject) {
        this.isReady //waiting for app persistency to load in order to determin current slide index
            .then(() => {
            if (__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['annotationCuePoints'])) {
                this.recordingDetailsObject['annotationCuePoints'] = {};
            }
            let offset = __WEBPACK_IMPORTED_MODULE_5_moment__(cuePointObject['timestamp']).diff(__WEBPACK_IMPORTED_MODULE_5_moment__(this.recordingDetailsObject['recordingStartTime']));
            offset = offset && offset > 0 ? offset : 0;
            this.recordingDetailsObject['annotationCuePoints']['cuePoint' + this.currentCuePointIndex] = {
                offset: offset,
                title: this.removeInvalidXmlChars(cuePointObject['text']),
                status: 'pending'
            };
            this.recordingDetailsObject['currentCuePointIndex'] = ++this.currentCuePointIndex;
            this.saveToPersistentData();
        })
            .catch((err) => {
            this.log.error('Failed to add slide to persistent data. ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    resetRecordingDetails() {
        this.log.info('resetting current recording details');
        this.recordingDetailsObject = {};
        this.currentCuePointIndex = 1;
        this.readOnly = false;
        return this.saveToPersistentData(true);
    }
    setReadOnly(readOnly) {
        this.readOnly = readOnly;
    }
    isReadOnly() {
        return this.readOnly;
    }
    saveRecordingDetailsJson() {
        let config = this.appConfig.getConfigData('config');
        return this.getRecordingProperties(config)
            .then(recordingProperties => {
            let recJson = {};
            let isPc = config['shared']['appType'].toLowerCase() === 'pc';
            recJson = __WEBPACK_IMPORTED_MODULE_4_lodash__["merge"](recJson, recordingProperties, this.getUserDependentProperties(isPc, config));
            this.addRecordedFilesToJson(recJson);
            return Promise.all([__WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('saveRecJson', recJson), recJson]);
        });
    }
    filterUserList(queryString) {
        if (queryString) {
            // abort previous request
            if (this.userListSubscription$) {
                this.userListSubscription$.unsubscribe();
                this.userListSubscription$ = null;
                this.userList = null;
            }
            if (queryString.length >= 3) {
                this.log.info('filtering users: ' + queryString);
                this.userListSubscription$ = this.kaltura.listUsers(queryString)
                    .subscribe(res => {
                    this.userListSubscription$ = null;
                    this.userListIsOffline = false;
                    let users = [];
                    __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](res, function (user) {
                        users.push({ id: user.id, fullName: user.fullName, email: user.email });
                    });
                    this.userList = users;
                }, err => {
                    this.userListSubscription$ = null;
                    this.userListIsOffline = true;
                });
            }
            else {
                this.userList = [];
            }
        }
    }
    isUserNameValid(selectedUser) {
        let userName = __WEBPACK_IMPORTED_MODULE_4_lodash__["isObject"](selectedUser) ? selectedUser['id'] : selectedUser;
        let filterdUsers = __WEBPACK_IMPORTED_MODULE_4_lodash__["filter"](this.userList, { 'id': userName });
        let isValid = this.isUserListOffline() ||
            (userName && userName.length < 3) ||
            userName === "" ||
            filterdUsers.length > 0 ||
            userName === this.recordingDetailsObject['userName'] ||
            this.userList === null; // if null then we are before the request -> don't show error
        return isValid;
    }
    isUserNameValidForSave(selectedUser) {
        let userName = __WEBPACK_IMPORTED_MODULE_4_lodash__["isObject"](selectedUser) ? selectedUser['id'] : selectedUser;
        return this.isUserNameValid(userName) && (userName && userName.length >= 3) || __WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](userName);
    }
    isUserNameDisabled() {
        return this.isReadOnly() || this.isAuthEnabled();
    }
    isUserListOffline() {
        return this.userListIsOffline;
    }
    isAuthEnabled() {
        return __WEBPACK_IMPORTED_MODULE_11__infra_authentication_service__["a" /* AuthenticationService */].isAuthenticationEnabled;
    }
    getAuthenticatedUserName() {
        return this.authService.getLoggedInUserId();
    }
    addRecordedFilesToJson(recJson) {
        //if there are no files in our object - we have nothing to do
        if (__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['files'])) {
            this.log.info('RecordingDetailsService Error: there are no files in recordingDetails object');
            return;
        }
        //gets the default primary session name as configured in our app configuration or the next input in line (if primary is disabled f.e)
        let primaryFileSessionName = this.getPrimaryRecordedSessionName();
        //set primary video file in recording json
        if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['files'][primaryFileSessionName])) {
            recJson['primaryMediaFile'] = this.recordingDetailsObject['files'][primaryFileSessionName];
        }
        //set all secondary sessions
        let secondaryMediaIndex = 0;
        __WEBPACK_IMPORTED_MODULE_4_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_4_lodash__["keys"](this.recordingDetailsObject['files']), (sessionName) => {
            if (sessionName !== primaryFileSessionName) {
                let mediaFileKey = secondaryMediaIndex === 0 ? 'secondaryMediaFile' : ('secondaryMediaFile' + secondaryMediaIndex);
                recJson[mediaFileKey] = this.recordingDetailsObject['files'][sessionName];
                secondaryMediaIndex++;
            }
        });
    }
    getPrimaryRecordedSessionName() {
        let primarySessionName = this.appConfig.getConfigData('config.captureApp.primarySessionName');
        let recordedSessionsNames = __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].sortInputsNames(__WEBPACK_IMPORTED_MODULE_4_lodash__["keys"](this.recordingDetailsObject['files']));
        //return default primarySession name and if doesn't exist - use the first enabled input name
        return recordedSessionsNames.includes(primarySessionName) ? primarySessionName : recordedSessionsNames[0];
    }
    saveToPersistentData(reset = false) {
        let that = this;
        return that.persistencyService.get('recording.details')
            .then((data) => {
            if (!reset) {
                that.recordingDetailsObject = __WEBPACK_IMPORTED_MODULE_4_lodash__["extend"](data, that.recordingDetailsObject);
            }
            return that.persistencyService.set('recording.details', that.recordingDetailsObject);
        })
            .catch((err) => {
            that.log.error('Error. Failed to load and set persistent data. ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    onAutoCompleteUserChange(text) {
        if (text && text.length >= 3) {
            this.userList = null;
        }
    }
    getRecordingProperties(config) {
        let recDetails = {};
        recDetails['summary'] = this.recordingDetailsObject['title'] ? this.recordingDetailsObject['title'] : config['captureApp']['defaultRecordingName'];
        recDetails['description'] = this.recordingDetailsObject['description'];
        recDetails['tags'] = this.recordingDetailsObject['tags'] ? __WEBPACK_IMPORTED_MODULE_4_lodash__["join"](this.recordingDetailsObject['tags']) : '';
        recDetails['recordingStartTime'] = this.recordingDetailsObject['recordingStartTime'];
        if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['templateEntryId'])) {
            recDetails['templateEntryId'] = this.recordingDetailsObject['templateEntryId'];
        }
        if (__WEBPACK_IMPORTED_MODULE_4_lodash__["has"](this.recordingDetailsObject, 'liveStreamed')) {
            recDetails['liveStreamed'] = this.recordingDetailsObject['liveStreamed'];
        }
        if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['slides'])) {
            recDetails['slides'] = this.recordingDetailsObject['slides'];
        }
        if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](this.recordingDetailsObject['annotationCuePoints'])) {
            recDetails['annotationCuePoints'] = this.recordingDetailsObject['annotationCuePoints'];
        }
        recDetails['isAudioOnly'] = this.recordingDetailsObject['isAudioOnly'];
        recDetails['uploadStatus'] = config['captureApp']['manualUpload'] ? 'manual' : 'auto';
        let filesObject = this.recordingDetailsObject['files'];
        return __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getDurationFromFile', filesObject[Object.keys(filesObject)[0]]) //getting one of the recorded files name
            .then(duration => {
            recDetails['durationSec'] = duration;
            return recDetails;
        })
            .catch((err) => {
            this.log.error('Failed to get duration from the engine. ' + __WEBPACK_IMPORTED_MODULE_8__utils_utils__["a" /* utils */].stringifyMsg(err));
            recDetails['durationSec'] = 0;
            return Promise.resolve(recDetails);
        });
    }
    getUserDependentProperties(isPc, config) {
        let userDetails = {};
        if (this.shouldSetAuthenticatedUserData() && !isPc) {
            userDetails['partnerId'] = this.recordingDetailsObject['partnerId'];
            userDetails['ownerId'] = this.recordingDetailsObject['userName'];
            userDetails['appToken'] = this.recordingDetailsObject['appToken'];
            userDetails['appTokenId'] = this.recordingDetailsObject['appTokenId'];
            userDetails['serviceUrl'] = this.recordingDetailsObject['serviceUrl'];
            userDetails['hashType'] = this.recordingDetailsObject['hashType'];
        }
        else {
            userDetails['partnerId'] = isPc ? config['shared']['externalSettings']['partnerId'] : config['shared']['partnerId'];
            userDetails['ownerId'] = isPc ? config['shared']['externalSettings']['userId'] :
                (this.recordingDetailsObject['userName'] ? this.recordingDetailsObject['userName'] : config['captureApp']['userId']);
            if (isPc) {
                userDetails['appToken'] = config['shared']['externalSettings']['appToken'];
                userDetails['appTokenId'] = config['shared']['externalSettings']['appTokenId'];
                userDetails['serviceUrl'] = config['shared']['externalSettings']['serviceUrl'];
                userDetails['hashType'] = config['shared']['externalSettings']['hashType'];
            }
        }
        return userDetails;
    }
    setAuthenticatedUserDetails() {
        //if in authentication mode but not in a scheduled event recording
        if (this.shouldSetAuthenticatedUserData()) {
            this.recordingDetailsObject['appToken'] = this.appConfig.getConfigData('config.shared.externalSettings.appToken');
            this.recordingDetailsObject['appTokenId'] = this.appConfig.getConfigData('config.shared.externalSettings.appTokenId');
            this.recordingDetailsObject['hashType'] = this.appConfig.getConfigData('config.shared.externalSettings.hashType');
            this.recordingDetailsObject['partnerId'] = this.appConfig.getConfigData('config.shared.externalSettings.partnerId');
            this.recordingDetailsObject['serviceUrl'] = this.appConfig.getConfigData('config.shared.externalSettings.serviceUrl');
            this.recordingDetailsObject['userName'] = this.appConfig.getConfigData('config.shared.externalSettings.userId');
        }
    }
    static makeVideoInputInfo(inputType) {
        return ['ar', 'width', 'height', 'interlaceMode', 'fps', 'colorspace'].reduce((ret, cur) => {
            ret[cur] = inputType[cur];
            return ret;
        }, {});
    }
    getMetaData(sessionId) {
        return Promise.all([this.persistencyService.get(''), __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getOsData')])
            .then(([persistentData, osInfo]) => {
            let metadata = {};
            if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](persistentData) && sessionId) {
                const sessions = this.appState.getActiveSessions();
                const session = sessions[sessionId];
                const sessionName = session ? session['name'] : null;
                let videoEncoders = 'unavailable';
                let selectedVideoEncoderId = 'unavailable';
                let selectedVideoEncoder = 'unavailable';
                let videoInputTypeInfo = 'unavailable';
                let audioInputTypeInfo = 'unavailable';
                if (sessionName === 'audio') {
                    const audioInputType = persistentData['audio'] ? persistentData['audio']['input_type_id'] : null;
                    if (audioInputType) {
                        audioInputTypeInfo = `${audioInputType['channels']}, ${audioInputType['bitsPerSample']} Bit, ${audioInputType['samplesPerSec']}Hz ${audioInputType['subtype']}`;
                    }
                }
                else {
                    // Encoder Info
                    videoEncoders = this.videoDeviceSettingsService.getDeviceEncoders(sessionName);
                    selectedVideoEncoderId = this.videoDeviceSettingsService.getSelectedEncoder(sessionName);
                    selectedVideoEncoder = __WEBPACK_IMPORTED_MODULE_4_lodash__["find"](videoEncoders, (encoder) => {
                        return encoder['encoder_id'] === selectedVideoEncoderId;
                    });
                    // Input type for screen
                    const screenInputType = persistentData[sessionName] ? persistentData[sessionName]['input_type_id'] : null;
                    if (screenInputType) {
                        videoInputTypeInfo = RecordingDetailsService_1.makeVideoInputInfo(screenInputType);
                    }
                }
                // config: for partnerId, userId
                const recDetails = this.getRecordingDetails();
                const config = this.appConfig.getConfigData("config");
                const recordingTime = persistentData['recording'] ? persistentData['recording']['recordingTime'] : '';
                metadata = {
                    appVersion: config['shared']['app_version'],
                    appType: config['shared']['appType'],
                    resourceId: config['shared']['resourceId'],
                    partnerId: config['shared']['partnerId'],
                    userId: config['captureApp']['userId'],
                    isScheduledEvent: recDetails ? (recDetails['eventId'] ? true : false) : '',
                    scheduledEventId: recDetails ? recDetails['eventId'] : '',
                    videoInputTypeInfo: videoInputTypeInfo,
                    audioInputTypeInfo: audioInputTypeInfo,
                    videoEncoder: selectedVideoEncoder ? selectedVideoEncoder['friendly_name'] : '',
                    recordingTime: recordingTime
                };
            }
            if (!__WEBPACK_IMPORTED_MODULE_4_lodash__["isEmpty"](osInfo)) {
                metadata['os'] = `${osInfo['platform']}, osVersion: ${osInfo['osVersion']}`;
            }
            return [metadata];
        });
    }
    removeInvalidXmlChars(str) {
        let NOT_SAFE_IN_XML_1_0 = /[^\x09\x0A\x0D\x20-\xFF\x85\xA0-\uD7FF\uE000-\uFDCF\uFDE0-\uFFFD]/gm;
        return str.replace(NOT_SAFE_IN_XML_1_0, ' ');
    }
    shouldSetAuthenticatedUserData() {
        return __WEBPACK_IMPORTED_MODULE_11__infra_authentication_service__["a" /* AuthenticationService */].isAuthenticationEnabled && !this.recordingDetailsObject['eventId'];
    }
};
RecordingDetailsService = RecordingDetailsService_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_6__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__infra_kaltura_api_service__["a" /* KalturaApiService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__infra_kaltura_api_service__["a" /* KalturaApiService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_10__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__infra_app_state_service__["a" /* AppStateService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_12__infra_system_data_service__["a" /* SystemDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__infra_system_data_service__["a" /* SystemDataService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_11__infra_authentication_service__["a" /* AuthenticationService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__infra_authentication_service__["a" /* AuthenticationService */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_9__capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__capture_device_video_device_settings_service__["a" /* VideoDeviceSettingsService */]) === "function" && _h || Object])
], RecordingDetailsService);

var RecordingDetailsService_1, _a, _b, _c, _d, _e, _f, _g, _h;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording-details.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/recording/recording-recovery.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__capture_device_device_recovery_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/device-recovery.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingRecoveryService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let RecordingRecoveryService = class RecordingRecoveryService {
    constructor(log, persistencyService, deviceRecoveryService) {
        this.log = log;
        this.persistencyService = persistencyService;
        this.deviceRecoveryService = deviceRecoveryService;
    }
    /**
     * return a persistent recording data if there is one. null if not.
     * checking for existing recorded files
     */
    shouldRecoverRecordingSession() {
        return this.persistencyService.get('recording')
            .then((recData) => {
            if (!__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](recData) && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](recData['details']) && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](recData['details']['files'])) {
                return recData;
            }
            else {
                return null;
            }
        })
            .catch((err) => {
            this.log.error('Failed to read recovery persistent data. ' + __WEBPACK_IMPORTED_MODULE_4__utils_utils__["a" /* utils */].stringifyMsg(err));
            return Promise.reject(err);
        });
    }
    canRecoverRecordingSession() {
        this.log.info('canRecoverRecordingSession()');
        let canRecover = true;
        return this.persistencyService.get('recording.details')
            .then((details) => {
            __WEBPACK_IMPORTED_MODULE_3_lodash__["forEach"](this.deviceRecoveryService.recoverySessions, function (sessionObj) {
                canRecover = canRecover && (__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](details['files'][sessionObj['name']]) || sessionObj['recoveryReady']);
            });
            return canRecover;
        })
            .catch((err) => {
            return Promise.reject(err);
        });
    }
    /**
     * at the moment just checks for disconnection or not
     * @return {string}
     */
    getRecoveryFailureReason() {
        if (__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](this.deviceRecoveryService.recoverySessions)) {
            return this.deviceRecoveryService.DEVICE_STATE.NONE;
        }
        else {
            let failureReason = this.deviceRecoveryService.DEVICE_STATE.FAILED;
            __WEBPACK_IMPORTED_MODULE_3_lodash__["forEach"](this.deviceRecoveryService.recoverySessions, (obj) => {
                if (obj && !__WEBPACK_IMPORTED_MODULE_3_lodash__["isEmpty"](obj['reason']) &&
                    (obj['reason'] === this.deviceRecoveryService.DEVICE_STATE.DISCONNECTED || obj['reason'] === 'AUDIO-' + this.deviceRecoveryService.DEVICE_STATE.DISCONNECTED ||
                        obj['reason'] === 'NO_VIDEO_DEVICES' || obj['reason'] === 'NO_SCREEN_DEVICES' || obj['reason'] === 'NO_AUDIO_DEVICES')) {
                    failureReason = this.deviceRecoveryService.DEVICE_STATE.DISCONNECTED;
                }
            });
            return failureReason;
        }
    }
    resetRecoverySessions() {
        this.deviceRecoveryService.resetRecoverySessions();
    }
    getRecoverySessionsReadyPromise() {
        return this.deviceRecoveryService.recoverySessionsReadyPromise;
    }
    getRecoveryDisconnectionState() {
        return this.deviceRecoveryService.DEVICE_STATE.DISCONNECTED;
    }
};
RecordingRecoveryService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__capture_device_device_recovery_service__["a" /* DeviceRecoveryService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__capture_device_device_recovery_service__["a" /* DeviceRecoveryService */]) === "function" && _c || Object])
], RecordingRecoveryService);

var _a, _b, _c;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording-recovery.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/recording/recording-utils.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__infra_app_persistent_data_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-persistent-data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__recording_details_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-details.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__capture_device_audio_device_settings_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/audio-device-settings.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingUtilsService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










let RecordingUtilsService = class RecordingUtilsService {
    constructor(log, persistencyService, appState, recordingDetailsService, videoDeviceService, audioSettingsService) {
        this.log = log;
        this.persistencyService = persistencyService;
        this.appState = appState;
        this.recordingDetailsService = recordingDetailsService;
        this.videoDeviceService = videoDeviceService;
        this.audioSettingsService = audioSettingsService;
        //mp4 files suffix
        this.metadataFileSuffix = ".metadata";
        this.mediatypesFileSuffix = ".mediatypes";
    }
    getRecordingFilesForDeletion(filesFromEngine = []) {
        let filesToDelete = [];
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](filesFromEngine, (file) => {
            if (file) {
                filesToDelete.push(file.path);
                if (file.slides) {
                    filesToDelete.push(file.slides);
                }
            }
        });
        // check that files for deletion got from the engine equals to the files we have in our persistent data
        // (inactive sessions files won't return from the engine)
        return this.getFilesToDeletionFromPersistency(filesToDelete);
    }
    removeRecordedFiles(files) {
        this.log.info('removing recorded files: ' + JSON.stringify(files));
        return __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('removeFiles', files)
            .catch((err) => {
            this.log.error('failed to remove recorded files: ' + JSON.stringify(files) + '. Error: ' + __WEBPACK_IMPORTED_MODULE_1__utils_utils__["a" /* utils */].stringifyMsg(err));
        });
    }
    /**
     * Using this function during cancel recording flow. since we don't know if the engine will return all relevant files
     * for deletion (disconnection for example) we are adding relevant files from our persistency file.
     * @param filesToDelete
     */
    getFilesToDeletionFromPersistency(filesToDelete) {
        return this.persistencyService.get('recording.details.files')
            .then((files) => {
            let slidesFoldersPromises = [];
            if (files && !__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](files)) {
                __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](files, mp4File => {
                    filesToDelete.push(mp4File);
                    filesToDelete.push(mp4File + this.mediatypesFileSuffix);
                    filesToDelete.push(mp4File + this.metadataFileSuffix);
                    //in case there are some slides related to this session - remove them
                    slidesFoldersPromises.push(this.getRecordingFileRelatedSlidesDir(mp4File.replace(/^.*[\\\/]/, '')));
                });
            }
            return Promise.all(slidesFoldersPromises);
        })
            .then((slidesFolders) => {
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](slidesFolders, slideFolder => {
                filesToDelete.push(slideFolder);
            });
            return __WEBPACK_IMPORTED_MODULE_2_lodash__["uniq"](filesToDelete);
        })
            .catch((err) => {
            this.log.error('Failed to get recording files from our persistency file: ' + __WEBPACK_IMPORTED_MODULE_1__utils_utils__["a" /* utils */].stringifyMsg(err));
            return filesToDelete;
        });
    }
    getRecordingFileRelatedSlidesDir(mp4File) {
        let slideDirName = mp4File.substr(0, mp4File.lastIndexOf('.'));
        return __WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('getSlidesFolderForCaptureFileName', slideDirName);
    }
    isProcessing() {
        let sessionsIds = __WEBPACK_IMPORTED_MODULE_2_lodash__["keys"](this.appState.getActiveSessions());
        let stable = true;
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](sessionsIds, (sessionId) => {
            stable = stable && this.appState.isSourceStable(sessionId, true);
        });
        return !stable;
    }
    updateRecState(state) {
        this.log.info('update recording state to: ' + state);
        this.appState.updateAppState('rec-state', state);
    }
    getSessionActionArgs(action, sessionId) {
        if (action === 'stopRecord' || action === 'recoverMP4File') {
            return this.recordingDetailsService.getMetaData(sessionId);
        }
        return Promise.resolve(); //no prams is needed
    }
    finalizeRecordingFileOffCycle(files) {
        this.log.info('finalizeRecordingFileOffCycle()');
        let strAction;
        return this.getSessionActionArgs('recoverMP4File')
            .then((recordingActionArgs) => {
            let finalizeCalls = [];
            __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](files, function (file) {
                finalizeCalls.push(__WEBPACK_IMPORTED_MODULE_3__utils_ipcWrapper__["a" /* ipcWrapper */].sendIPC('recoverMP4File', file, ...recordingActionArgs));
            });
            strAction = JSON.stringify(this.appState.getActiveRecordableSessionsIds());
            this.appState.onCallStarted('recoverMP4File', strAction);
            return Promise.all(finalizeCalls);
        }).then((res) => {
            this.appState.onCallEnded('recoverMP4File - SUCCESS', strAction);
            return true;
        })
            .catch((err) => {
            this.appState.onCallEnded('recoverMP4File - FAILURE', strAction);
            return Promise.reject(err);
        });
    }
    updateRecordingFiles(files) {
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](files, file => {
            if (!__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](this.appState.getActiveSessions()) && !__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](this.appState.getActiveSessions()[file['id']])) {
                let sessionName = this.videoDeviceService.getSessionNameById(file['id']) ?
                    this.videoDeviceService.getSessionNameById(file['id']) :
                    this.audioSettingsService.getSessionNameById(file['id']);
                this.recordingDetailsService.setRecordedFilePath(sessionName, file['path']);
            }
        });
    }
};
RecordingUtilsService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_4__infra_app_persistent_data_service__["a" /* AppPersistentDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__infra_app_persistent_data_service__["a" /* AppPersistentDataService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_6__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__infra_app_state_service__["a" /* AppStateService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_7__recording_details_service__["a" /* RecordingDetailsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__recording_details_service__["a" /* RecordingDetailsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_9__capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_8__capture_device_audio_device_settings_service__["a" /* AudioDeviceSettingsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__capture_device_audio_device_settings_service__["a" /* AudioDeviceSettingsService */]) === "function" && _f || Object])
], RecordingUtilsService);

var _a, _b, _c, _d, _e, _f;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording-utils.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/recording/recording.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_infra_module__ = __webpack_require__("../../../../../src/shared/services/infra/infra.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__recording_details_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-details.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__recording_recovery_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-recovery.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__slides_service__ = __webpack_require__("../../../../../src/shared/services/recording/slides.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__monitoring_monitoring_module__ = __webpack_require__("../../../../../src/shared/services/monitoring/monitoring.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__capture_device_capture_device_module__ = __webpack_require__("../../../../../src/shared/services/capture-device/capture-device.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mouse_click_indication_service__ = __webpack_require__("../../../../../src/shared/services/recording/mouse-click-indication.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__recording_utils_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-utils.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecordingModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};









let RecordingModule = class RecordingModule {
};
RecordingModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__infra_infra_module__["a" /* InfraModule */],
            __WEBPACK_IMPORTED_MODULE_5__monitoring_monitoring_module__["a" /* MonitoringModule */],
            __WEBPACK_IMPORTED_MODULE_6__capture_device_capture_device_module__["a" /* CaptureDeviceModule */]
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_2__recording_details_service__["a" /* RecordingDetailsService */],
            __WEBPACK_IMPORTED_MODULE_3__recording_recovery_service__["a" /* RecordingRecoveryService */],
            __WEBPACK_IMPORTED_MODULE_4__slides_service__["a" /* SlideService */],
            __WEBPACK_IMPORTED_MODULE_7__mouse_click_indication_service__["a" /* MouseClickIndicationService */],
            __WEBPACK_IMPORTED_MODULE_8__recording_utils_service__["a" /* RecordingUtilsService */]
        ]
    })
], RecordingModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/recording.module.js.map

/***/ }),

/***/ "../../../../../src/shared/services/recording/slides.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__ = __webpack_require__("../../../../../src/utils/ipcWrapper.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__recording_details_service__ = __webpack_require__("../../../../../src/shared/services/recording/recording-details.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_state_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-state.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__capture_device_video_device_service__ = __webpack_require__("../../../../../src/shared/services/capture-device/video-device.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SlideService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








let SlideService = class SlideService {
    constructor(appState, appConfig, recordingDetails, notificationService, videoService) {
        this.appState = appState;
        this.appConfig = appConfig;
        this.recordingDetails = recordingDetails;
        this.notificationService = notificationService;
        this.videoService = videoService;
        this.registerForSlideCapturingNotifications();
    }
    shouldCaptureSlides() {
        let screenSession = __WEBPACK_IMPORTED_MODULE_2_lodash__["find"](this.appState.getActiveRecordableSessionsIds(), (sessionId) => {
            return this.videoService.getCaptureDeviceTypeBySessionId(sessionId) === 'screen';
        });
        return this.appConfig.setConfigData('config.captureEngine.capturePowerPoint', //config path
        this.appConfig.getConfigData('config.captureEngine.capturePowerPoint') && !__WEBPACK_IMPORTED_MODULE_2_lodash__["isEmpty"](screenSession), //new captureSlide value
        true, //reload engine with new slide capture value
        false //don't save this dynamic value to disc (of even save to app config object) - only current engine action will use this new value
        );
    }
    registerForSlideCapturingNotifications() {
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('capture-ppt', (data) => {
            if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isString"](data)) {
                data = JSON.parse(data);
            }
            this.recordingDetails.addSlideCapturedFilePath(data);
        });
        __WEBPACK_IMPORTED_MODULE_1__utils_ipcWrapper__["a" /* ipcWrapper */].registerForNotification('capture-ppt-error', (data) => {
            if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isString"](data)) {
                data = JSON.parse(data);
                if (data.code !== "EngineError_UnspecifiedError")
                    this.notificationService.sendNotification('NOTIFICATIONS.' + data.code, "error");
            }
        });
    }
};
SlideService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_state_service__["a" /* AppStateService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_state_service__["a" /* AppStateService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_6__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__recording_details_service__["a" /* RecordingDetailsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__recording_details_service__["a" /* RecordingDetailsService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_7__capture_device_video_device_service__["a" /* VideoDeviceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__capture_device_video_device_service__["a" /* VideoDeviceService */]) === "function" && _e || Object])
], SlideService);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/slides.service.js.map

/***/ }),

/***/ "../../../../../src/shared/services/resource-id/resource-id.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_infra_module__ = __webpack_require__("../../../../../src/shared/services/infra/infra.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource_id_service__ = __webpack_require__("../../../../../src/shared/services/resource-id/resource-id.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResourceIdModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



let ResourceIdModule = class ResourceIdModule {
};
ResourceIdModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__infra_infra_module__["a" /* InfraModule */]
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_2__resource_id_service__["a" /* ResourceIdService */]
        ]
    })
], ResourceIdModule);

//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/resource-id.module.js.map

/***/ }),

/***/ "../../../../../src/shared/services/resource-id/resource-id.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__infra_kaltura_api_service__ = __webpack_require__("../../../../../src/shared/services/infra/kaltura-api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-config.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__infra_app_logger_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-logger.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_utils_utils__ = __webpack_require__("../../../../../src/utils/utils.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__infra_app_notifications_service__ = __webpack_require__("../../../../../src/shared/services/infra/app-notifications.service.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResourceIdService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let ResourceIdService = class ResourceIdService {
    constructor(kalturaAPI, log, appNotificationService, appConfig) {
        this.kalturaAPI = kalturaAPI;
        this.log = log;
        this.appNotificationService = appNotificationService;
        this.appConfig = appConfig;
    }
    get resourceId() {
        return this._resourceId;
    }
    get resourceName() {
        return this._resourceName;
    }
    ready() {
        //called after the constructor and called  after the first ngOnChanges()
        if (!this._ready) {
            let sharedConfig = this.appConfig.getConfigData('config.shared');
            this._resourceName = sharedConfig.resourceName;
            this._ready = this.getResourceId(sharedConfig)
                .then(resourceId => {
                this._resourceId = resourceId;
                //check if resourceName has changed from last time
                return this.refreshResourceNameFromServer().then(() => {
                    return Promise.resolve(true);
                }).catch(err => {
                    //not API response, we don't really care
                    return Promise.resolve(true);
                });
            })
                .catch(err => {
                let error = __WEBPACK_IMPORTED_MODULE_4_utils_utils__["a" /* utils */].getAPIErrorMessage(err);
                this.appNotificationService.sendNotification(error, 'error');
                return Promise.resolve(false);
            });
        }
        return this._ready;
    }
    refreshResourceNameFromServer() {
        return this.getResourceFromId(this.resourceId).then((res) => {
            if (this._resourceName != res.name) {
                this._resourceName = res.name;
                this.appConfig.setConfigData('config.shared.resourceName', this._resourceName);
            }
        });
    }
    getResourceId(sharedConfig) {
        if (!sharedConfig.resourceId) {
            return this.createResourceId(this._resourceName);
        }
        return Promise.resolve(sharedConfig.resourceId);
    }
    createResourceId(resourceName) {
        this.log.info("creating new resourceId with resourceName = " + resourceName);
        return this.getResourceIdFromName(resourceName).then(resourceId => {
            if (!resourceId) {
                return this.kalturaAPI.apiRequest({
                    "service": "schedule_scheduleresource",
                    "action": "add",
                    "scheduleResource:objectType": "KalturaCameraScheduleResource",
                    "scheduleResource:name": resourceName
                }).toPromise().then((res) => {
                    this.log.info("created new resourceId with resourceName = " + resourceName + " obj= " + JSON.stringify(res));
                    this.appConfig.setConfigData('config.shared.resourceId', res.id);
                    return res.id;
                });
            }
            this.appConfig.setConfigData('config.shared.resourceId', resourceId);
            return resourceId;
        });
    }
    getResourceIdFromName(resourceName) {
        this.log.info("getting  resourceId for resourceName = " + resourceName);
        return this.kalturaAPI.apiRequest({
            "service": "schedule_scheduleresource",
            "action": "list",
            "filter:objectType": "KalturaCameraScheduleResourceFilter",
            "filter:statusEqual": 2,
            "filter:nameEqual": resourceName
        }).toPromise().then((res) => {
            if (res.objects && res.objects.length > 0) {
                this.log.info("got  resource " + JSON.stringify(res.objects[0]) + " for resourceName = " + resourceName);
                return res.objects[0].id;
            }
            this.log.warn("didn't found resourceId for resourceName = " + resourceName);
            return null;
        });
    }
    getResourceFromId(resourceId) {
        this.log.info("getting  resourceName for resourceId = " + resourceId);
        //todo: move to schedule_scheduleresource:get
        /*
         return this.kalturaAPI.apiRequest( {
         "service": "schedule_scheduleresource",
         "action": "get",
         "scheduleResourceId": resourceId,
         }).toPromise();
         */
        return this.kalturaAPI.apiRequest({
            "service": "schedule_scheduleresource",
            "action": "list",
            "filter:objectType": "KalturaCameraScheduleResourceFilter",
            "filter:idEqual": resourceId
        }).toPromise().then(res => {
            if (res.objects && res.objects.length > 0) {
                return res.objects[0];
            }
            return Promise.reject(null);
        });
    }
    renameResourceName(newResourceName) {
        this.log.info("Renaming resourceName to  " + newResourceName + " for id " + this._resourceId);
        return this.getResourceIdFromName(newResourceName).then(resId => {
            if (!resId) {
                return this.kalturaAPI.apiRequest({
                    "service": "schedule_scheduleresource",
                    "action": "update",
                    "scheduleResourceId": this._resourceId,
                    "scheduleResource:objectType": "KalturaCameraScheduleResource",
                    "scheduleResource:name": newResourceName
                }).toPromise().then((res) => {
                    this.log.info("Renamed resourceName  " + newResourceName);
                    this.appConfig.setConfigData('config.shared.resourceName', newResourceName);
                    this._resourceName = newResourceName;
                    return res.id;
                }).catch(err => {
                    this.log.warn("Couldn't rename resourceName to  " + newResourceName + " for id " + this._resourceId + " err=" + __WEBPACK_IMPORTED_MODULE_4_utils_utils__["a" /* utils */].stringifyMsg(err));
                    return Promise.reject(err);
                });
            }
            if (resId == this._resourceId) {
                return Promise.resolve(resId);
            }
            this.log.warn("Couldn't rename resourceName to  " + newResourceName + " for id " + this._resourceId + " name already exists");
            //simulate API error
            return Promise.reject({ error: { code: 'SYSTEM_NAME_ALREADY_EXISTS' } });
        });
    }
    ;
};
ResourceIdService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__infra_kaltura_api_service__["a" /* KalturaApiService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__infra_kaltura_api_service__["a" /* KalturaApiService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__infra_app_logger_service__["a" /* AppLoggerService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__infra_app_logger_service__["a" /* AppLoggerService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__infra_app_notifications_service__["a" /* AppNotificationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__infra_app_notifications_service__["a" /* AppNotificationsService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__["a" /* AppConfigService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__infra_app_config_service__["a" /* AppConfigService */]) === "function" && _d || Object])
], ResourceIdService);

var _a, _b, _c, _d;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/resource-id.service.js.map

/***/ }),

/***/ "../../../../../src/utils/ipcWrapper.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular2_uuid__ = __webpack_require__("../../../../angular2-uuid/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular2_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_angular2_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ipcWrapper; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



const COMMON_EVENT_NAME = 'ipc-promise-common-event';
const COMMON_REPEAT_EVENT_NAME = 'ipc-promise-common-repeat-event';
const UNREGISTER_COMMON_REPEAT_EVENT_NAME = 'ipc-promise-common-repeat-event-unregister';
const SUCCESS_EVENT_SUFFIX = '-success';
const FAILURE_EVENT_SUFFIX = '-failure';
const COMMON_SUCCESS_EVENT_NAME = COMMON_EVENT_NAME + SUCCESS_EVENT_SUFFIX;
const COMMON_FAILURE_EVENT_NAME = COMMON_EVENT_NAME + FAILURE_EVENT_SUFFIX;
let ipcWrapper = ipcWrapper_1 = class ipcWrapper {
    constructor() {
    }
    static sendSystemCommand(systemCommand, ...args) {
        electron.ipcRenderer.send(systemCommand, args);
    }
    static popCallParams(id) {
        let params = ipcWrapper_1.map.get(id);
        ipcWrapper_1.map.delete(id);
        return params;
    }
    static sendIPC(eventName, ...data) {
        if (__WEBPACK_IMPORTED_MODULE_2_lodash__["isArray"](data) && data.length > 0) {
            data = __WEBPACK_IMPORTED_MODULE_2_lodash__["without"](data, undefined);
        }
        if (ipcWrapper_1.counter === 0) {
            electron.ipcRenderer.on(COMMON_SUCCESS_EVENT_NAME, (event, resParams) => {
                let callParams = ipcWrapper_1.popCallParams(resParams.id);
                if (callParams) {
                    callParams.resolve(resParams.data);
                }
            });
            electron.ipcRenderer.on(COMMON_FAILURE_EVENT_NAME, (event, resParams) => {
                let callParams = ipcWrapper_1.popCallParams(resParams.id);
                if (callParams) {
                    callParams.reject(resParams.data);
                }
            });
        }
        return new Promise(function (resolve, reject) {
            let id = eventName + new Date().getTime() + ++ipcWrapper_1.counter;
            let params = {
                data: data,
                eventName: eventName,
                id: id,
                resolve: resolve,
                reject: reject
            };
            ipcWrapper_1.map.set(id, params);
            electron.ipcRenderer.send(COMMON_EVENT_NAME, params);
        });
    }
    static registerForNotification(eventName, callback, ...data) {
        let uuid = __WEBPACK_IMPORTED_MODULE_1_angular2_uuid__["UUID"].UUID();
        let handleEvent = (event, params) => {
            if (callback) {
                callback(...params.data);
            }
        };
        electron.ipcRenderer.on(COMMON_REPEAT_EVENT_NAME + '_' + eventName, handleEvent);
        ipcWrapper_1.listenersMap.set(eventName + uuid, handleEvent);
        let params = {
            data: data,
            eventName: eventName
        };
        electron.ipcRenderer.send(COMMON_REPEAT_EVENT_NAME, params);
        return uuid;
    }
    // stop getting notifications for the channel named COMMON_REPEAT_EVENT_NAME + '_' + eventName
    static unregisterForNotification(eventName, id = '') {
        //remove specific listener from channel
        let listenerKey = eventName + id;
        if (ipcWrapper_1.listenersMap.has(listenerKey)) {
            electron.ipcRenderer.removeListener(COMMON_REPEAT_EVENT_NAME + '_' + eventName, ipcWrapper_1.listenersMap.get(listenerKey));
            ipcWrapper_1.listenersMap.delete(listenerKey);
        }
        else {
            electron.ipcRenderer.removeAllListeners(COMMON_REPEAT_EVENT_NAME + '_' + eventName);
            ipcWrapper_1.clearListenersMapByEventName(eventName);
        }
    }
    static clearListenersMapByEventName(eventName) {
        __WEBPACK_IMPORTED_MODULE_2_lodash__["forEach"](__WEBPACK_IMPORTED_MODULE_2_lodash__["filter"]([...ipcWrapper_1.listenersMap.keys()], (mapKey) => { return mapKey.indexOf(eventName) > -1; }), (rmKey) => {
            ipcWrapper_1.listenersMap.delete(rmKey);
        });
    }
    static registerShortcutCB(shortcutData) {
        let shortcut = shortcutData['shortcut'];
        let cb = ipcWrapper_1.keyboardShortcuts.get(shortcut);
        if (cb) {
            cb();
        }
    }
    static registerShortcut(shortcut, cb) {
        //we need to register to the callback only once!
        let callback = ipcWrapper_1.keyboardShortcuts.size > 0 ? null : ipcWrapper_1.registerShortcutCB;
        ipcWrapper_1.keyboardShortcuts.set(shortcut, cb);
        return ipcWrapper_1.registerForNotification("registerGlobalShortcut", callback, shortcut);
    }
    static unRegisterShortcut(shortcut, id = '') {
        ipcWrapper_1.keyboardShortcuts.delete(shortcut);
        ipcWrapper_1.unregisterForNotification("registerGlobalShortcut", id);
    }
};
ipcWrapper.counter = 0;
/**
 * key: eventName + uuid
 * value: event listener
 * @type {Map<any, any>}
 */
ipcWrapper.listenersMap = new Map();
ipcWrapper.keyboardShortcuts = new Map();
ipcWrapper.map = new Map();
ipcWrapper = ipcWrapper_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [])
], ipcWrapper);

var ipcWrapper_1;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/ipcWrapper.js.map

/***/ }),

/***/ "../../../../../src/utils/utils.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__("../../../../lodash/lodash.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return utils; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let errorCodes = {
    'INVALID_WIDGET_ID': 'NOTIFICATIONS.error_invalid_partner_id',
    "SYSTEM_NAME_ALREADY_EXISTS": 'SETTINGS.SYSTEM_NAME_ALREADY_EXISTS'
};
let utils = utils_1 = class utils {
    constructor() {
    }
    static sortResolutionArray(resArray) {
        resArray.sort((a, b) => {
            return b.value[0] * b.value[1] - a.value[0] * a.value[1];
        });
    }
    static getAPIErrorMessage(err) {
        let error = 'NOTIFICATIONS.error_server_not_reachable';
        if (err && __WEBPACK_IMPORTED_MODULE_1_lodash__["isObject"](err.error) && err.error.code) {
            error = errorCodes[err.error.code];
            if (!error) {
                error = err.error.message;
            }
        }
        return error;
    }
    static stringifyMsg(msg) {
        if (__WEBPACK_IMPORTED_MODULE_1_lodash__["isError"](msg)) {
            return msg.message + " " + msg.stack;
        }
        if (__WEBPACK_IMPORTED_MODULE_1_lodash__["isString"](msg))
            return msg;
        return JSON.stringify(msg);
    }
    static delayPromise(milis) {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, milis);
        });
    }
    static filterAndSortInputs(inputTypes, limits) {
        let ret = __WEBPACK_IMPORTED_MODULE_1_lodash__["filter"](__WEBPACK_IMPORTED_MODULE_1_lodash__["castArray"](inputTypes), (input) => {
            let fps = input['fps'];
            return (fps >= limits.minFPS && fps <= limits.maxFPS);
        });
        ret = __WEBPACK_IMPORTED_MODULE_1_lodash__["orderBy"](ret, [
            (input) => {
                if (limits.defaultHeight) {
                    return Math.abs(input['height'] - limits.defaultHeight);
                }
                else {
                    return 1; //ignore height
                }
            },
            (input) => {
                return Math.abs(input['fps'] - limits.defaultFPS);
            },
            function (input) {
                return input.interlaceMode === 'progressive' ? 1 : 0;
            },
            function (input) {
                return input['width'] * input['height'];
            },
            (input) => {
                let weight = utils_1.colorspace_weight[input['colorspace'].toUpperCase()];
                if (weight) {
                    return weight;
                }
                return 0;
            }
        ], ["asec", "asec", "desc", "desc", "desc"]);
        return ret;
    }
    static sha1(msg) {
        function rotate_left(n, s) {
            var t4 = (n << s) | (n >>> (32 - s));
            return t4;
        }
        ;
        function lsb_hex(val) {
            var str = "";
            var i;
            var vh;
            var vl;
            for (i = 0; i <= 6; i += 2) {
                vh = (val >>> (i * 4 + 4)) & 0x0f;
                vl = (val >>> (i * 4)) & 0x0f;
                str += vh.toString(16) + vl.toString(16);
            }
            return str;
        }
        ;
        function cvt_hex(val) {
            var str = "";
            var i;
            var v;
            for (i = 7; i >= 0; i--) {
                v = (val >>> (i * 4)) & 0x0f;
                str += v.toString(16);
            }
            return str;
        }
        ;
        function Utf8Encode(string) {
            string = string.replace(/\r\n/g, "\n");
            var utftext = "";
            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    utftext += String.fromCharCode(c);
                }
                else if ((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                }
                else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }
            }
            return utftext;
        }
        ;
        var blockstart;
        var i, j;
        var W = new Array(80);
        var H0 = 0x67452301;
        var H1 = 0xEFCDAB89;
        var H2 = 0x98BADCFE;
        var H3 = 0x10325476;
        var H4 = 0xC3D2E1F0;
        var A, B, C, D, E;
        var temp;
        msg = Utf8Encode(msg);
        var msg_len = msg.length;
        var word_array = new Array();
        for (i = 0; i < msg_len - 3; i += 4) {
            j = msg.charCodeAt(i) << 24 | msg.charCodeAt(i + 1) << 16 |
                msg.charCodeAt(i + 2) << 8 | msg.charCodeAt(i + 3);
            word_array.push(j);
        }
        switch (msg_len % 4) {
            case 0:
                i = 0x080000000;
                break;
            case 1:
                i = msg.charCodeAt(msg_len - 1) << 24 | 0x0800000;
                break;
            case 2:
                i = msg.charCodeAt(msg_len - 2) << 24 | msg.charCodeAt(msg_len - 1) << 16 | 0x08000;
                break;
            case 3:
                i = msg.charCodeAt(msg_len - 3) << 24 | msg.charCodeAt(msg_len - 2) << 16 | msg.charCodeAt(msg_len - 1) << 8 | 0x80;
                break;
        }
        word_array.push(i);
        while ((word_array.length % 16) != 14)
            word_array.push(0);
        word_array.push(msg_len >>> 29);
        word_array.push((msg_len << 3) & 0x0ffffffff);
        for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {
            for (i = 0; i < 16; i++)
                W[i] = word_array[blockstart + i];
            for (i = 16; i <= 79; i++)
                W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
            A = H0;
            B = H1;
            C = H2;
            D = H3;
            E = H4;
            for (i = 0; i <= 19; i++) {
                temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
                E = D;
                D = C;
                C = rotate_left(B, 30);
                B = A;
                A = temp;
            }
            for (i = 20; i <= 39; i++) {
                temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
                E = D;
                D = C;
                C = rotate_left(B, 30);
                B = A;
                A = temp;
            }
            for (i = 40; i <= 59; i++) {
                temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
                E = D;
                D = C;
                C = rotate_left(B, 30);
                B = A;
                A = temp;
            }
            for (i = 60; i <= 79; i++) {
                temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
                E = D;
                D = C;
                C = rotate_left(B, 30);
                B = A;
                A = temp;
            }
            H0 = (H0 + A) & 0x0ffffffff;
            H1 = (H1 + B) & 0x0ffffffff;
            H2 = (H2 + C) & 0x0ffffffff;
            H3 = (H3 + D) & 0x0ffffffff;
            H4 = (H4 + E) & 0x0ffffffff;
        }
        let str_temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
        return str_temp.toLowerCase();
    }
    ;
    static areEventsEqual(eventA, eventB) {
        // if both not exits => equal
        // if both exits with the same properties => equal
        return ((__WEBPACK_IMPORTED_MODULE_1_lodash__["isEmpty"](eventA) && __WEBPACK_IMPORTED_MODULE_1_lodash__["isEmpty"](eventB))
            || (!__WEBPACK_IMPORTED_MODULE_1_lodash__["isEmpty"](eventA)
                && !__WEBPACK_IMPORTED_MODULE_1_lodash__["isEmpty"](eventB)
                && eventA['id'] === eventB['id']
                && eventA['startDate'] === eventB['startDate']
                && eventA['endDate'] === eventB['endDate']
                && eventA['summary'] === eventB['summary']
                && eventA['description'] === eventB['description']
                && eventA['organizer'] === eventB['organizer']
                && eventA['tags'] === eventB['tags']));
    }
    /**
     * Concat url and prevent double slash and redundant spaces - no handling for params.
     * @param input: a collected array of url parts to be concat.
     */
    static urlBuilder(...input) {
        let url;
        if (input.length && input[0].startsWith('file:')) {
            // join all except the file string with /
            url = [].slice.call(input, 1).join('/');
            // remove double splash
            url = url.replace(/([^:\s])\/+/g, '$1/');
            // add the file:///
            url = [input[0], url].join('/');
            // make sure max / is 3
            return url.replace(/(\/{0,3})\/*/g, '$1');
        }
        else {
            // join all with /
            url = [].slice.call(input, 0).join('/');
            // remove double splash
            return url.replace(/([^:\s])\/+/g, '$1/');
        }
    }
    /**
     * sort inputs names alphabetically when audio input is the last one
     * f.e: ['session0', 'session1'..., 'audio']
     * @param inputsNames
     */
    static sortInputsNames(inputsNames) {
        inputsNames.sort((a, b) => {
            //audio should be last
            if (a === 'audio')
                return 1;
            if (b === 'audio')
                return -1;
            //alphabetical order
            return a < b ? -1 : 1;
        });
        return inputsNames;
    }
    /**
     * each sessionName has it's own display name
     * After classroom app multiple inputs impl. our pc and cc app started to use different sessions display name...
     * returned string are translation placeholders under COMMON category (f.e COMMON.primary in en.json locale)
     */
    static getDisplayNameForSessionName(appType, defaultPrimarySession, sessionName) {
        if (appType === 'cc') {
            switch (sessionName) {
                case 'audio':
                    return 'audio';
                case 'session0':
                    return 'primary_input';
                default:
                    let sessionIndex = parseInt(sessionName.split('session')[1]);
                    return 'input' + ++sessionIndex;
            }
        }
        else {
            return sessionName === 'audio' ? 'audio' : (sessionName === defaultPrimarySession ? 'primary' : 'secondary');
        }
    }
    /**
     *
     * implementing Promise.allSettled behaviour (currently a stage 3 proposal: https://github.com/tc39/proposal-promise-allSettled)
     *
     * Returning an array of completed promises, some can be rejected and some fulfilled
     * Usage example after returned:
     *    const successfulPromises = results.filter(p => p.status === 'fulfilled');
     * @param promises array of promises
     * @return an array of promiseState objects
     */
    static promiseAllSettled(promises) {
        function reflect(promise) {
            return promise.then((v) => {
                return { status: 'fulfilled', value: v };
            }, (error) => {
                return { status: 'rejected', reason: error };
            });
        }
        return Promise.all(promises.map(reflect));
    }
};
utils.STRING_LIMIT = 28;
utils.colorspace_weight = {
    'NV12': 100,
    'YV12': 99,
    'YUY2': 98,
    'UYVY': 97
};
utils = utils_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [])
], utils);

var utils_1;
//# sourceMappingURL=/Users/asafrobinovich/buildAgent/work/1716201729f5df63/lecture-capture-app/src/utils.js.map

/***/ }),

/***/ "../../../../exports-loader/index.js?module.exports.toString()!../../../../css-loader/index.js?{\"sourceMap\":false,\"importLoaders\":1}!../../../../postcss-loader/index.js?{\"ident\":\"postcss\"}!../../../../../src/assets/styles/css_limitations.css":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "* {\n  box-shadow: none !important;\n}\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../moment/locale recursive ^\\.\\/.*$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "../../../../moment/locale/af.js",
	"./af.js": "../../../../moment/locale/af.js",
	"./ar": "../../../../moment/locale/ar.js",
	"./ar-dz": "../../../../moment/locale/ar-dz.js",
	"./ar-dz.js": "../../../../moment/locale/ar-dz.js",
	"./ar-kw": "../../../../moment/locale/ar-kw.js",
	"./ar-kw.js": "../../../../moment/locale/ar-kw.js",
	"./ar-ly": "../../../../moment/locale/ar-ly.js",
	"./ar-ly.js": "../../../../moment/locale/ar-ly.js",
	"./ar-ma": "../../../../moment/locale/ar-ma.js",
	"./ar-ma.js": "../../../../moment/locale/ar-ma.js",
	"./ar-sa": "../../../../moment/locale/ar-sa.js",
	"./ar-sa.js": "../../../../moment/locale/ar-sa.js",
	"./ar-tn": "../../../../moment/locale/ar-tn.js",
	"./ar-tn.js": "../../../../moment/locale/ar-tn.js",
	"./ar.js": "../../../../moment/locale/ar.js",
	"./az": "../../../../moment/locale/az.js",
	"./az.js": "../../../../moment/locale/az.js",
	"./be": "../../../../moment/locale/be.js",
	"./be.js": "../../../../moment/locale/be.js",
	"./bg": "../../../../moment/locale/bg.js",
	"./bg.js": "../../../../moment/locale/bg.js",
	"./bn": "../../../../moment/locale/bn.js",
	"./bn.js": "../../../../moment/locale/bn.js",
	"./bo": "../../../../moment/locale/bo.js",
	"./bo.js": "../../../../moment/locale/bo.js",
	"./br": "../../../../moment/locale/br.js",
	"./br.js": "../../../../moment/locale/br.js",
	"./bs": "../../../../moment/locale/bs.js",
	"./bs.js": "../../../../moment/locale/bs.js",
	"./ca": "../../../../moment/locale/ca.js",
	"./ca.js": "../../../../moment/locale/ca.js",
	"./cs": "../../../../moment/locale/cs.js",
	"./cs.js": "../../../../moment/locale/cs.js",
	"./cv": "../../../../moment/locale/cv.js",
	"./cv.js": "../../../../moment/locale/cv.js",
	"./cy": "../../../../moment/locale/cy.js",
	"./cy.js": "../../../../moment/locale/cy.js",
	"./da": "../../../../moment/locale/da.js",
	"./da.js": "../../../../moment/locale/da.js",
	"./de": "../../../../moment/locale/de.js",
	"./de-at": "../../../../moment/locale/de-at.js",
	"./de-at.js": "../../../../moment/locale/de-at.js",
	"./de-ch": "../../../../moment/locale/de-ch.js",
	"./de-ch.js": "../../../../moment/locale/de-ch.js",
	"./de.js": "../../../../moment/locale/de.js",
	"./dv": "../../../../moment/locale/dv.js",
	"./dv.js": "../../../../moment/locale/dv.js",
	"./el": "../../../../moment/locale/el.js",
	"./el.js": "../../../../moment/locale/el.js",
	"./en-au": "../../../../moment/locale/en-au.js",
	"./en-au.js": "../../../../moment/locale/en-au.js",
	"./en-ca": "../../../../moment/locale/en-ca.js",
	"./en-ca.js": "../../../../moment/locale/en-ca.js",
	"./en-gb": "../../../../moment/locale/en-gb.js",
	"./en-gb.js": "../../../../moment/locale/en-gb.js",
	"./en-ie": "../../../../moment/locale/en-ie.js",
	"./en-ie.js": "../../../../moment/locale/en-ie.js",
	"./en-nz": "../../../../moment/locale/en-nz.js",
	"./en-nz.js": "../../../../moment/locale/en-nz.js",
	"./eo": "../../../../moment/locale/eo.js",
	"./eo.js": "../../../../moment/locale/eo.js",
	"./es": "../../../../moment/locale/es.js",
	"./es-do": "../../../../moment/locale/es-do.js",
	"./es-do.js": "../../../../moment/locale/es-do.js",
	"./es.js": "../../../../moment/locale/es.js",
	"./et": "../../../../moment/locale/et.js",
	"./et.js": "../../../../moment/locale/et.js",
	"./eu": "../../../../moment/locale/eu.js",
	"./eu.js": "../../../../moment/locale/eu.js",
	"./fa": "../../../../moment/locale/fa.js",
	"./fa.js": "../../../../moment/locale/fa.js",
	"./fi": "../../../../moment/locale/fi.js",
	"./fi.js": "../../../../moment/locale/fi.js",
	"./fo": "../../../../moment/locale/fo.js",
	"./fo.js": "../../../../moment/locale/fo.js",
	"./fr": "../../../../moment/locale/fr.js",
	"./fr-ca": "../../../../moment/locale/fr-ca.js",
	"./fr-ca.js": "../../../../moment/locale/fr-ca.js",
	"./fr-ch": "../../../../moment/locale/fr-ch.js",
	"./fr-ch.js": "../../../../moment/locale/fr-ch.js",
	"./fr.js": "../../../../moment/locale/fr.js",
	"./fy": "../../../../moment/locale/fy.js",
	"./fy.js": "../../../../moment/locale/fy.js",
	"./gd": "../../../../moment/locale/gd.js",
	"./gd.js": "../../../../moment/locale/gd.js",
	"./gl": "../../../../moment/locale/gl.js",
	"./gl.js": "../../../../moment/locale/gl.js",
	"./gom-latn": "../../../../moment/locale/gom-latn.js",
	"./gom-latn.js": "../../../../moment/locale/gom-latn.js",
	"./he": "../../../../moment/locale/he.js",
	"./he.js": "../../../../moment/locale/he.js",
	"./hi": "../../../../moment/locale/hi.js",
	"./hi.js": "../../../../moment/locale/hi.js",
	"./hr": "../../../../moment/locale/hr.js",
	"./hr.js": "../../../../moment/locale/hr.js",
	"./hu": "../../../../moment/locale/hu.js",
	"./hu.js": "../../../../moment/locale/hu.js",
	"./hy-am": "../../../../moment/locale/hy-am.js",
	"./hy-am.js": "../../../../moment/locale/hy-am.js",
	"./id": "../../../../moment/locale/id.js",
	"./id.js": "../../../../moment/locale/id.js",
	"./is": "../../../../moment/locale/is.js",
	"./is.js": "../../../../moment/locale/is.js",
	"./it": "../../../../moment/locale/it.js",
	"./it.js": "../../../../moment/locale/it.js",
	"./ja": "../../../../moment/locale/ja.js",
	"./ja.js": "../../../../moment/locale/ja.js",
	"./jv": "../../../../moment/locale/jv.js",
	"./jv.js": "../../../../moment/locale/jv.js",
	"./ka": "../../../../moment/locale/ka.js",
	"./ka.js": "../../../../moment/locale/ka.js",
	"./kk": "../../../../moment/locale/kk.js",
	"./kk.js": "../../../../moment/locale/kk.js",
	"./km": "../../../../moment/locale/km.js",
	"./km.js": "../../../../moment/locale/km.js",
	"./kn": "../../../../moment/locale/kn.js",
	"./kn.js": "../../../../moment/locale/kn.js",
	"./ko": "../../../../moment/locale/ko.js",
	"./ko.js": "../../../../moment/locale/ko.js",
	"./ky": "../../../../moment/locale/ky.js",
	"./ky.js": "../../../../moment/locale/ky.js",
	"./lb": "../../../../moment/locale/lb.js",
	"./lb.js": "../../../../moment/locale/lb.js",
	"./lo": "../../../../moment/locale/lo.js",
	"./lo.js": "../../../../moment/locale/lo.js",
	"./lt": "../../../../moment/locale/lt.js",
	"./lt.js": "../../../../moment/locale/lt.js",
	"./lv": "../../../../moment/locale/lv.js",
	"./lv.js": "../../../../moment/locale/lv.js",
	"./me": "../../../../moment/locale/me.js",
	"./me.js": "../../../../moment/locale/me.js",
	"./mi": "../../../../moment/locale/mi.js",
	"./mi.js": "../../../../moment/locale/mi.js",
	"./mk": "../../../../moment/locale/mk.js",
	"./mk.js": "../../../../moment/locale/mk.js",
	"./ml": "../../../../moment/locale/ml.js",
	"./ml.js": "../../../../moment/locale/ml.js",
	"./mr": "../../../../moment/locale/mr.js",
	"./mr.js": "../../../../moment/locale/mr.js",
	"./ms": "../../../../moment/locale/ms.js",
	"./ms-my": "../../../../moment/locale/ms-my.js",
	"./ms-my.js": "../../../../moment/locale/ms-my.js",
	"./ms.js": "../../../../moment/locale/ms.js",
	"./my": "../../../../moment/locale/my.js",
	"./my.js": "../../../../moment/locale/my.js",
	"./nb": "../../../../moment/locale/nb.js",
	"./nb.js": "../../../../moment/locale/nb.js",
	"./ne": "../../../../moment/locale/ne.js",
	"./ne.js": "../../../../moment/locale/ne.js",
	"./nl": "../../../../moment/locale/nl.js",
	"./nl-be": "../../../../moment/locale/nl-be.js",
	"./nl-be.js": "../../../../moment/locale/nl-be.js",
	"./nl.js": "../../../../moment/locale/nl.js",
	"./nn": "../../../../moment/locale/nn.js",
	"./nn.js": "../../../../moment/locale/nn.js",
	"./pa-in": "../../../../moment/locale/pa-in.js",
	"./pa-in.js": "../../../../moment/locale/pa-in.js",
	"./pl": "../../../../moment/locale/pl.js",
	"./pl.js": "../../../../moment/locale/pl.js",
	"./pt": "../../../../moment/locale/pt.js",
	"./pt-br": "../../../../moment/locale/pt-br.js",
	"./pt-br.js": "../../../../moment/locale/pt-br.js",
	"./pt.js": "../../../../moment/locale/pt.js",
	"./ro": "../../../../moment/locale/ro.js",
	"./ro.js": "../../../../moment/locale/ro.js",
	"./ru": "../../../../moment/locale/ru.js",
	"./ru.js": "../../../../moment/locale/ru.js",
	"./sd": "../../../../moment/locale/sd.js",
	"./sd.js": "../../../../moment/locale/sd.js",
	"./se": "../../../../moment/locale/se.js",
	"./se.js": "../../../../moment/locale/se.js",
	"./si": "../../../../moment/locale/si.js",
	"./si.js": "../../../../moment/locale/si.js",
	"./sk": "../../../../moment/locale/sk.js",
	"./sk.js": "../../../../moment/locale/sk.js",
	"./sl": "../../../../moment/locale/sl.js",
	"./sl.js": "../../../../moment/locale/sl.js",
	"./sq": "../../../../moment/locale/sq.js",
	"./sq.js": "../../../../moment/locale/sq.js",
	"./sr": "../../../../moment/locale/sr.js",
	"./sr-cyrl": "../../../../moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "../../../../moment/locale/sr-cyrl.js",
	"./sr.js": "../../../../moment/locale/sr.js",
	"./ss": "../../../../moment/locale/ss.js",
	"./ss.js": "../../../../moment/locale/ss.js",
	"./sv": "../../../../moment/locale/sv.js",
	"./sv.js": "../../../../moment/locale/sv.js",
	"./sw": "../../../../moment/locale/sw.js",
	"./sw.js": "../../../../moment/locale/sw.js",
	"./ta": "../../../../moment/locale/ta.js",
	"./ta.js": "../../../../moment/locale/ta.js",
	"./te": "../../../../moment/locale/te.js",
	"./te.js": "../../../../moment/locale/te.js",
	"./tet": "../../../../moment/locale/tet.js",
	"./tet.js": "../../../../moment/locale/tet.js",
	"./th": "../../../../moment/locale/th.js",
	"./th.js": "../../../../moment/locale/th.js",
	"./tl-ph": "../../../../moment/locale/tl-ph.js",
	"./tl-ph.js": "../../../../moment/locale/tl-ph.js",
	"./tlh": "../../../../moment/locale/tlh.js",
	"./tlh.js": "../../../../moment/locale/tlh.js",
	"./tr": "../../../../moment/locale/tr.js",
	"./tr.js": "../../../../moment/locale/tr.js",
	"./tzl": "../../../../moment/locale/tzl.js",
	"./tzl.js": "../../../../moment/locale/tzl.js",
	"./tzm": "../../../../moment/locale/tzm.js",
	"./tzm-latn": "../../../../moment/locale/tzm-latn.js",
	"./tzm-latn.js": "../../../../moment/locale/tzm-latn.js",
	"./tzm.js": "../../../../moment/locale/tzm.js",
	"./uk": "../../../../moment/locale/uk.js",
	"./uk.js": "../../../../moment/locale/uk.js",
	"./ur": "../../../../moment/locale/ur.js",
	"./ur.js": "../../../../moment/locale/ur.js",
	"./uz": "../../../../moment/locale/uz.js",
	"./uz-latn": "../../../../moment/locale/uz-latn.js",
	"./uz-latn.js": "../../../../moment/locale/uz-latn.js",
	"./uz.js": "../../../../moment/locale/uz.js",
	"./vi": "../../../../moment/locale/vi.js",
	"./vi.js": "../../../../moment/locale/vi.js",
	"./x-pseudo": "../../../../moment/locale/x-pseudo.js",
	"./x-pseudo.js": "../../../../moment/locale/x-pseudo.js",
	"./yo": "../../../../moment/locale/yo.js",
	"./yo.js": "../../../../moment/locale/yo.js",
	"./zh-cn": "../../../../moment/locale/zh-cn.js",
	"./zh-cn.js": "../../../../moment/locale/zh-cn.js",
	"./zh-hk": "../../../../moment/locale/zh-hk.js",
	"./zh-hk.js": "../../../../moment/locale/zh-hk.js",
	"./zh-tw": "../../../../moment/locale/zh-tw.js",
	"./zh-tw.js": "../../../../moment/locale/zh-tw.js"
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "../../../../moment/locale recursive ^\\.\\/.*$";

/***/ }),

/***/ "../../../../style-loader/index.js!../../../../../src/assets/styles/css_limitations.css":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("../../../../exports-loader/index.js?module.exports.toString()!../../../../css-loader/index.js?{\"sourceMap\":false,\"importLoaders\":1}!../../../../postcss-loader/index.js?{\"ident\":\"postcss\"}!../../../../../src/assets/styles/css_limitations.css");
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__("../../../../style-loader/addStyles.js")(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/exports-loader/index.js?module.exports.toString()!../../../node_modules/css-loader/index.js??ref--5-1!../../../node_modules/postcss-loader/index.js??postcss!./css_limitations.css", function() {
			var newContent = require("!!../../../node_modules/exports-loader/index.js?module.exports.toString()!../../../node_modules/css-loader/index.js??ref--5-1!../../../node_modules/postcss-loader/index.js??postcss!./css_limitations.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 1:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("../../../../../src/personal/main.ts");


/***/ })

},[1]);
//# sourceMappingURL=main.bundle.js.map